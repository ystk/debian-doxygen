
#line 3 "<stdout>"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define yy_create_buffer commentScanYY_create_buffer
#define yy_delete_buffer commentScanYY_delete_buffer
#define yy_flex_debug commentScanYY_flex_debug
#define yy_init_buffer commentScanYY_init_buffer
#define yy_flush_buffer commentScanYY_flush_buffer
#define yy_load_buffer_state commentScanYY_load_buffer_state
#define yy_switch_to_buffer commentScanYY_switch_to_buffer
#define yyin commentScanYYin
#define yyleng commentScanYYleng
#define yylex commentScanYYlex
#define yylineno commentScanYYlineno
#define yyout commentScanYYout
#define yyrestart commentScanYYrestart
#define yytext commentScanYYtext
#define yywrap commentScanYYwrap
#define yyalloc commentScanYYalloc
#define yyrealloc commentScanYYrealloc
#define yyfree commentScanYYfree

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 35
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;
#endif /* ! C99 */

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! FLEXINT_H */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE commentScanYYrestart(commentScanYYin  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#define YY_BUF_SIZE 262144
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

extern yy_size_t commentScanYYleng;

extern FILE *commentScanYYin, *commentScanYYout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    #define YY_LESS_LINENO(n)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up commentScanYYtext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up commentScanYYtext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	yy_size_t yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via commentScanYYrestart()), so that the user can continue scanning by
	 * just pointing commentScanYYin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* Stack of input buffers. */
static size_t yy_buffer_stack_top = 0; /**< index of top of stack. */
static size_t yy_buffer_stack_max = 0; /**< capacity of stack. */
static YY_BUFFER_STATE * yy_buffer_stack = 0; /**< Stack as an array. */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* yy_hold_char holds the character lost when commentScanYYtext is formed. */
static char yy_hold_char;
static yy_size_t yy_n_chars;		/* number of characters read into yy_ch_buf */
yy_size_t commentScanYYleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 0;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow commentScanYYwrap()'s to do buffer switches
 * instead of setting up a fresh commentScanYYin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void commentScanYYrestart (FILE *input_file  );
void commentScanYY_switch_to_buffer (YY_BUFFER_STATE new_buffer  );
YY_BUFFER_STATE commentScanYY_create_buffer (FILE *file,int size  );
void commentScanYY_delete_buffer (YY_BUFFER_STATE b  );
void commentScanYY_flush_buffer (YY_BUFFER_STATE b  );
void commentScanYYpush_buffer_state (YY_BUFFER_STATE new_buffer  );
void commentScanYYpop_buffer_state (void );

static void commentScanYYensure_buffer_stack (void );
static void commentScanYY_load_buffer_state (void );
static void commentScanYY_init_buffer (YY_BUFFER_STATE b,FILE *file  );

#define YY_FLUSH_BUFFER commentScanYY_flush_buffer(YY_CURRENT_BUFFER )

YY_BUFFER_STATE commentScanYY_scan_buffer (char *base,yy_size_t size  );
YY_BUFFER_STATE commentScanYY_scan_string (yyconst char *yy_str  );
YY_BUFFER_STATE commentScanYY_scan_bytes (yyconst char *bytes,yy_size_t len  );

void *commentScanYYalloc (yy_size_t  );
void *commentScanYYrealloc (void *,yy_size_t  );
void commentScanYYfree (void *  );

#define yy_new_buffer commentScanYY_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        commentScanYYensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            commentScanYY_create_buffer(commentScanYYin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        commentScanYYensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            commentScanYY_create_buffer(commentScanYYin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define commentScanYYwrap(n) 1
#define YY_SKIP_YYWRAP

typedef unsigned char YY_CHAR;

FILE *commentScanYYin = (FILE *) 0, *commentScanYYout = (FILE *) 0;

typedef int yy_state_type;

extern int commentScanYYlineno;

int commentScanYYlineno = 1;

extern char *commentScanYYtext;
#define yytext_ptr commentScanYYtext

static yy_state_type yy_get_previous_state (void );
static yy_state_type yy_try_NUL_trans (yy_state_type current_state  );
static int yy_get_next_buffer (void );
static void yy_fatal_error (yyconst char msg[]  );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up commentScanYYtext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	commentScanYYleng = (size_t) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;

#define YY_NUM_RULES 194
#define YY_END_OF_BUFFER 195
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_acclist[789] =
    {   0,
       74,   74,  118,  118,  131,  131,  141,  141,  185,  185,
      195,  194,   42,  194,   42,  194,   41,  194,   42,  194,
       42,  194,   42,  194,   42,  194,   40,   42,  194,   42,
      194,   42,  194,   26,   42,  194,   42,  194,   42,  194,
       42,  194,   42,  194,   42,  194,   40,   42,  194,   42,
      194,   42,  194,   87,  194,   86,  194,   87,  194,   84,
       87,  194,   87,  194,   87,  194,  194,   88,  194,  108,
      194,  107,  194,  108,  194,  105,  108,  194,  108,  194,
       69,  194,   69,  194,   68,  194,   69,  194,   69,  194,
       69,  194,   65,   69,  194,   69,  194,   69,  194,   73,

      194,   72,  194,   73,  194,   70,   73,  194,   73,  194,
       73,  194,   73,  194,   77,  194,   76,  194,   74,   77,
      194,   74,   77,  194,   77,  194,   74,   77,  194,   74,
       77,  194,   77,  194,   69,  194,   68,  194,   69,  194,
       69,  194,   69,  194,   69,  194,   69,  194,   96,  194,
       95,  194,   93,   96,  194,   96,  194,  100,  194,   99,
      194,  100,  194,  100,  194,  104,  194,  103,  194,  104,
      194,  104,  194,   92,  194,   89,  194,   92,  194,   90,
       92,  194,   92,  194,   92,  194,   56,  194,   55,  194,
       56,  194,   53,   56,  194,   56,  194,   60,  194,   60,

      194,   59,  194,   60,  194,   60,  194,   60,  194,   57,
       60,  194,   60,  194,   60,  194,   64,  194,   63,  194,
       64,  194,   61,   64,  194,   64,  194,   80,  194,   78,
      194,  194,   82,  194,   83,  194,  194,  114,  194,  113,
      194,  112,  114,  194,  114,  194,  118,  121,  194,  115,
      194,  118,  121,  194,  121,  194,  121,  194,  123,  194,
      122,  194,  194,  126,  194,  126,  194,  124,  194,  126,
      194,  126,  194,  131,  135,  194,  132,  194,  135,  194,
      135,  194,  135,  194,  135,  194,  135,  194,  111,  194,
      109,  194,  111,  194,  139,  194,  137,  194,  136,  139,

      194,  139,  194,  142,  194,  141,  142,  194,  140,  194,
      142,  194,  149,  150,  194,  148,  194,  150,  194,  150,
      194,  150,  194,  160,  161,  194,  151,  194,  161,  194,
      161,  194,  161,  194,  164,  194,  162,  194,  164,  194,
      168,  194,  166,  194,  165,  168,  194,  168,  194,  171,
      174,  194,  169,  194,  172,  174,  194,  173,  174,  194,
      174,  194,  174,  194,  177,  194,  175,  194,  177,  194,
      180,  194,  179,  194,  180,  194,  178,  180,  194,  180,
      194,  183,  194,  182,  194,  183,  194,  181,  183,  194,
      183,  194,   50,   52,  194,   51,  194,   52,  194,   52,

      194,  129,  194,  128,  194,  127,  129,  194,  129,  194,
       45,   46,  194,   44,  194,   46,  194,   46,  194,  185,
      187,  194,  186,  194,  187,  194,  187,  194,  187,  194,
      190,  194,  189,  194,  188,  190,  194,  190,  194,  192,
      193,  194,  191,  194,  193,  194,   39,    4,   33,   34,
       36,   34,   25,   25,   17,   25,   17,   17,   17,   17,
       17,   17,   23,   24,   19,   25,   26,   17,   17,   17,
       17,   17,   17,   17,   17,   29,   30,   33,   27,   84,
       84,   85,   84,   88,  105,  105,  106,   65,   65,   67,
       65,   70,   70,   71,   70,   74,   74,   74,   74,   74,

       74,   75,   74,   93,   94,   97,   98,  102,  101,  102,
       90,   90,   91,   90,   53,   53,   53,   54,   57,   57,
       58,   57,   61,   61,   62,   78,   79,   82,   81,  112,
      118,  115,  118,  120,  120,  117,  122,  125,  131,  134,
      133,  110,  136,  138,  141,  140,  149,  160,  163,  165,
      167,  171,  170,  176,  178,  178,  181,  181,   50,  127,
       45,  185,  184,  188,  192,   25,   32,   38,   34,   38,
       38,   38,   34,   38,   38,   35,    7,    1,    1,    2,
       17,   17,   17,   17,   21,   22,   17,   17,   17,   19,
        5,   17,   17,   17,   17,   17,   17,   17,   31,   32,

       28,   84,   84,   65,   70,   70,   74,   74,   74,   90,
       90,   53,   53,   53,   53,   57,   61,  119,   47,   48,
       49,   43,  184,   38,   38,   15,    1,   18,    2, 8198,
       17,16390,   17,   17,   17,   17,   17,   17, 8198,   17,
    16390,   17,   17,   17,   17,   17,   84,   70,   74,   74,
       66,   90,   53,   53,   53,   61,  119,  144,  152,   43,
       14,   37,    7,   12, 8198, 8198,   17,   17,   17,   20,
       17,   17,    5, 8198,   17,   17,   17,   84,   70,   74,
       90,    3,   13,   17,   17,   20,   17,   17,   17,   17,
       17,   84,   70,   74,   90,   78,  146,  154,   17,   17,

       17,   17,   17,   17,   17,   84,   70,   74,   90,  145,
      143,  153,   17,   17,   17,   17,   17,   17,   17,   84,
       86,  107,   68,   70,   72,   74,   76,   95,   99,  103,
       89,   90,   55,   59,   63,   80,   83,  113,  116,  123,
      124,  130,  132,  109,  137,  147,  148,  151,  162,  166,
      169,  175,  179,  182,  128,   44,  186,  189,  191,    9,
        8,   17,   17,   17,    5,   17,   17,  155,   11,   10,
       17,   17,   17,   17,   17,   17,  158,   16,   17,   16,
       17,  159,  156,   16,   17,  159,  157,   39
    } ;

static yyconst flex_int16_t yy_accept[1130] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    2,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    4,
        5,    5,    5,    5,    5,    6,    7,    7,    7,    7,
        7,    8,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,   10,   11,   11,
       11,   11,   11,   12,   13,   15,   17,   19,   21,   23,
       25,   27,   30,   32,   34,   37,   39,   41,   43,   45,

       47,   50,   52,   54,   56,   58,   60,   63,   65,   67,
       68,   70,   72,   74,   76,   79,   81,   83,   85,   87,
       89,   91,   93,   96,   98,  100,  102,  104,  106,  109,
      111,  113,  115,  117,  119,  122,  125,  127,  130,  133,
      135,  137,  139,  141,  143,  145,  147,  149,  151,  153,
      156,  158,  160,  162,  164,  166,  168,  170,  172,  174,
      176,  178,  180,  183,  185,  187,  189,  191,  193,  196,
      198,  200,  202,  204,  206,  208,  210,  213,  215,  217,
      219,  221,  223,  226,  228,  230,  232,  233,  235,  237,
      238,  240,  242,  245,  247,  250,  252,  255,  257,  259,

      261,  263,  264,  266,  268,  270,  272,  274,  277,  279,
      281,  283,  285,  287,  289,  291,  293,  295,  297,  299,
      302,  304,  306,  309,  311,  313,  316,  318,  320,  322,
      324,  327,  329,  331,  333,  335,  337,  339,  341,  343,
      345,  348,  350,  353,  355,  358,  361,  363,  365,  367,
      369,  371,  373,  375,  377,  380,  382,  384,  386,  388,
      391,  393,  396,  398,  400,  402,  404,  406,  409,  411,
      414,  416,  418,  420,  423,  425,  427,  429,  431,  433,
      435,  438,  440,  443,  445,  447,  447,  447,  447,  447,
      448,  448,  448,  449,  449,  449,  449,  449,  450,  451,

      452,  452,  453,  453,  453,  453,  453,  453,  453,  453,
      453,  453,  453,  453,  453,  454,  455,  456,  457,  458,
      459,  460,  461,  462,  463,  464,  465,  467,  468,  469,
      470,  471,  472,  473,  474,  475,  476,  476,  476,  476,
      476,  476,  476,  477,  478,  479,  479,  480,  480,  480,
      480,  480,  480,  481,  482,  482,  482,  482,  483,  484,
      484,  485,  486,  486,  487,  487,  487,  488,  488,  488,
      488,  488,  488,  489,  489,  489,  490,  490,  491,  491,
      491,  491,  492,  492,  493,  494,  494,  494,  494,  495,
      496,  496,  497,  498,  498,  499,  500,  501,  501,  501,

      502,  502,  503,  504,  504,  504,  504,  504,  504,  504,
      504,  504,  504,  504,  504,  504,  504,  505,  505,  506,
      506,  506,  507,  507,  509,  509,  509,  510,  510,  511,
      511,  511,  512,  513,  513,  513,  513,  514,  515,  516,
      516,  516,  517,  517,  518,  518,  519,  519,  519,  519,
      519,  519,  520,  520,  520,  521,  521,  522,  522,  522,
      522,  523,  524,  524,  525,  525,  526,  526,  527,  527,
      527,  528,  528,  529,  529,  530,  530,  531,  531,  532,
      533,  534,  534,  535,  536,  536,  537,  537,  538,  538,
      538,  538,  538,  539,  539,  540,  541,  542,  542,  542,

      542,  543,  543,  544,  544,  545,  545,  546,  547,  547,
      547,  548,  548,  548,  548,  549,  549,  549,  549,  549,
      549,  549,  550,  550,  551,  551,  552,  552,  553,  553,
      554,  554,  554,  555,  555,  556,  556,  557,  557,  557,
      558,  558,  559,  559,  559,  560,  560,  560,  561,  561,
      562,  562,  562,  563,  564,  564,  565,  565,  566,  566,
      567,  567,  567,  567,  567,  568,  569,  571,  572,  573,
      575,  576,  577,  577,  577,  577,  577,  577,  577,  577,
      578,  578,  578,  578,  578,  578,  579,  580,  581,  582,
      583,  584,  585,  586,  587,  587,  588,  589,  590,  591,

      592,  593,  594,  595,  596,  597,  598,  599,  599,  599,
      599,  599,  600,  601,  601,  602,  603,  603,  604,  604,
      604,  604,  605,  606,  606,  607,  608,  608,  609,  609,
      610,  610,  610,  610,  610,  610,  610,  611,  611,  612,
      613,  614,  615,  616,  616,  616,  617,  617,  618,  618,
      618,  618,  618,  618,  618,  619,  619,  619,  619,  619,
      619,  619,  619,  619,  619,  619,  619,  619,  619,  619,
      619,  619,  619,  619,  619,  619,  619,  619,  619,  619,
      619,  619,  620,  621,  622,  622,  622,  623,  623,  624,
      624,  624,  624,  624,  624,  624,  624,  625,  626,  627,

      627,  627,  627,  627,  627,  627,  627,  627,  627,  627,
      628,  629,  630,  633,  634,  635,  635,  636,  637,  638,
      638,  639,  642,  643,  644,  645,  646,  647,  647,  647,
      647,  648,  648,  648,  649,  650,  650,  651,  652,  652,
      652,  652,  653,  653,  654,  655,  656,  656,  656,  657,
      657,  657,  657,  657,  657,  658,  658,  658,  658,  658,
      658,  658,  658,  658,  658,  658,  659,  659,  659,  659,
      660,  660,  660,  660,  660,  660,  660,  660,  660,  660,
      660,  660,  660,  661,  661,  661,  661,  661,  661,  662,
      662,  662,  663,  663,  663,  663,  663,  665,  665,  665,

      665,  666,  668,  669,  670,  671,  672,  673,  675,  676,
      677,  678,  678,  679,  679,  679,  680,  681,  681,  681,
      681,  682,  682,  682,  682,  682,  682,  682,  682,  682,
      682,  682,  682,  682,  682,  682,  682,  682,  682,  682,
      682,  682,  682,  682,  682,  682,  682,  682,  682,  682,
      682,  682,  682,  682,  682,  682,  682,  682,  682,  682,
      682,  682,  682,  682,  682,  682,  682,  683,  684,  684,
      684,  684,  684,  684,  684,  685,  686,  687,  688,  689,
      690,  691,  692,  693,  693,  693,  694,  695,  695,  695,
      695,  696,  696,  696,  696,  696,  696,  697,  697,  697,

      697,  697,  697,  697,  697,  697,  697,  697,  697,  697,
      697,  697,  697,  697,  697,  697,  697,  698,  698,  698,
      698,  698,  699,  699,  699,  699,  699,  699,  699,  699,
      699,  699,  699,  699,  699,  699,  699,  699,  699,  699,
      699,  699,  699,  699,  699,  699,  700,  701,  702,  703,
      704,  705,  706,  707,  707,  707,  708,  709,  709,  709,
      709,  710,  710,  710,  710,  710,  710,  710,  710,  710,
      710,  710,  710,  710,  710,  710,  710,  710,  710,  710,
      710,  710,  710,  710,  711,  712,  712,  712,  713,  713,
      713,  713,  713,  713,  713,  713,  713,  713,  713,  713,

      713,  713,  713,  713,  713,  713,  713,  713,  713,  713,
      714,  715,  716,  717,  718,  719,  720,  722,  723,  724,
      726,  728,  729,  730,  731,  733,  734,  735,  736,  737,
      738,  739,  740,  741,  742,  743,  743,  743,  743,  743,
      743,  743,  744,  745,  746,  747,  748,  748,  748,  748,
      748,  748,  749,  750,  751,  752,  753,  754,  755,  756,
      757,  758,  759,  760,  760,  760,  761,  762,  763,  764,
      765,  766,  767,  768,  768,  768,  768,  768,  768,  768,
      768,  768,  769,  769,  769,  770,  771,  772,  773,  773,
      774,  775,  775,  775,  775,  775,  775,  775,  775,  775,

      775,  775,  776,  776,  777,  777,  777,  777,  777,  778,
      778,  778,  780,  780,  782,  782,  783,  784,  784,  786,
      786,  787,  787,  787,  787,  787,  788,  789,  789
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    4,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    5,    6,    7,    8,    9,    8,    8,    1,   10,
       11,   12,   13,   14,   15,   16,   17,   18,   19,   19,
       19,   19,   19,   19,   20,   20,   20,   21,    1,   22,
        1,   23,    1,   24,   25,   26,   27,   28,   29,   27,
       30,   31,   32,   27,   27,   33,   34,   27,   35,   36,
       27,   37,   27,   38,   39,   27,   27,   27,   27,   27,
       40,   41,   42,    1,   43,    1,   44,   45,   46,   47,

       48,   49,   50,   51,   52,   27,   53,   54,   55,   56,
       57,   58,   27,   59,   60,   61,   62,   63,   27,   64,
       65,   27,   66,   67,   68,   69,    1,   70,   70,   70,
       70,   70,   70,   70,   70,   70,   70,   70,   70,   70,
       70,   70,   70,   70,   70,   70,   70,   70,   70,   70,
       70,   70,   70,   70,   70,   70,   70,   70,   70,   70,
       70,   70,   70,   70,   70,   70,   70,   70,   70,   70,
       70,   70,   70,   70,   70,   70,   70,   70,   70,   70,
       70,   70,   70,   70,   70,   70,   70,   70,   70,   70,
       70,   70,   70,   70,   70,   70,   70,   70,   70,   70,

       70,   70,   70,   70,   70,   70,   70,   70,   70,   70,
       70,   70,   70,   70,   70,   70,   70,   70,   70,   70,
       70,   70,   70,   70,   70,   70,   70,   70,   70,   70,
       70,   70,   70,   70,   70,   70,   70,   70,   70,   70,
       70,   70,   70,   70,   70,   70,   70,   70,   70,   70,
       70,   70,   70,   70,   70
    } ;

static yyconst flex_int32_t yy_meta[71] =
    {   0,
        1,    2,    3,    4,    5,    1,    6,    7,    8,    9,
       10,   11,   12,   13,   14,   15,   16,   17,   17,   17,
       18,    7,   19,   20,   21,   21,   21,   21,   21,   21,
       21,   21,   21,   21,   21,   21,   21,   21,   21,    1,
       22,    1,   23,   21,   21,   21,   21,   21,   21,   21,
       21,   24,   21,   21,   21,   25,   21,   21,   21,   21,
       21,   21,   21,   21,   21,    7,   26,   27,   28,   29
    } ;

static yyconst flex_int16_t yy_base[1347] =
    {   0,
        0,    0,    0,   69,  136,  205, 4935, 4933,  274,    0,
      344,    0,  414,  483,  552,  621,  690,    0,  760,    0,
       69,   70,   72,   80,  830,  899,  968,    0, 1038,    0,
     1108,    0, 1178,    0,   83,   88, 1248,    0,   90,   91,
     1318,    0,   94,  115,  158,  220,   75,   89, 1388,    0,
      123,  183,  215,  228,  424,  429,  124,  130, 1458,    0,
      436,  498,  131,  146, 1528,    0, 1598,    0,  159,  227,
      437,  438, 1668,    0,  151,  152,  507,  567, 1738,    0,
      148,  193, 4935, 8670, 8670,  541,  461, 4926, 4923, 4907,
       83,  572, 1803, 1858,  514, 1920, 1988,  103,  233,  858,

      644,  246,  859, 8670, 8670, 4923,  428,  455, 1808, 4926,
     8670, 8670, 8670,    0,   88,  596, 8670,  238,  648, 1867,
     1888, 4907,  873,  881,  509, 8670, 8670, 4919,  499,  593,
     4902, 1816, 8670, 8670, 2055,  911, 1879, 1894, 8670, 1975,
      933,  940, 1950, 2018, 4898, 1929,  602, 8670, 8670,    0,
      888, 8670, 8670, 4911, 1825, 8670, 8670, 4910, 1841, 8670,
     8670, 4904,  871, 1857, 2086, 8670, 8670,    0, 2028, 1944,
     8670, 2078, 2109, 2129, 2137, 4883, 2152, 1970,  668, 8670,
     8670,    0, 4886, 1992, 8670, 4885, 2049,    0, 8670, 2146,
     8670, 8670,    0, 4857,  600, 8670, 4858, 2096, 2205, 8670,

        0, 4855, 8670,  248, 8670, 4863, 4823,    0, 8670, 8670,
     4848, 4852, 4810,  125, 8670, 8670, 2157, 8670, 8670,    0,
     2161, 8670,  539, 8670, 4814,    0, 8670, 8670,   71,  215,
        0, 8670, 8670,  626,  807, 8670, 8670, 2169, 8670, 8670,
        0, 2173,    0, 8670, 8670, 8670, 8670, 2177, 8670, 8670,
     2181, 8670, 8670,    0,  153, 4808, 8670, 8670,    0,  163,
     4780,    0, 8670, 4770, 4769, 8670, 8670,    0, 4774,    0,
     8670, 4798, 4768,    0, 8670, 8670, 4741,   37, 8670, 8670,
        0, 4766,    0, 8670, 4765,  576, 2267, 2329, 1812, 1935,
     4764, 4799, 8670,    0, 4784, 4780,    0,  166, 8670, 8670,

     2398, 4779,  189, 4787,  415,  147,  617,  492,  562, 2186,
      408,  812, 4753, 4738, 8670,  468, 2467, 4729, 4735, 4743,
     4734, 1847,  402, 4730, 8670, 8670,    0, 2177,  912, 2197,
     2012, 1997, 2213, 2217, 2229, 2237, 2535,  193, 2235,  677,
      939, 2247,  928, 2258, 2279,  945, 8670, 1821, 2293, 2283,
     2305, 4778, 8670, 2069, 1795, 2302, 2023, 8670, 2313, 4780,
     8670,  482, 4773,  551, 4758, 2038, 8670, 4723, 2353, 2359,
     4755, 2380, 2421, 2262, 2427, 2442, 2230, 8670, 4721, 2448,
     2475,    0, 4767, 8670, 2324, 2126, 2465, 2290, 8670, 2471,
     4766,  435, 2602, 2671, 4765, 8670, 2478, 2164, 2486, 4764,

     2319, 8670, 2545, 2513, 2568, 4749, 2576, 2625, 2519, 2645,
     2694,    0, 2714, 2540, 2591, 1946,    0, 2385, 8670, 4715,
     4755, 8670, 2389, 8670, 4707, 4750, 8670, 2457, 8670, 4701,
     4747, 8670, 2615, 2200, 2617, 2468, 8670, 2704, 2744, 2729,
        0, 2752, 4731, 2772, 2495, 8670, 4697, 2764, 2792, 4728,
     2800, 2815, 2698, 2821, 2830, 2508, 8670, 4694, 2836, 2845,
        0, 4731, 4737, 4729, 2536, 8670, 4690, 4726, 4690, 2555,
     8670, 4681,    0, 2562, 8670, 4680,    0, 4679, 1882, 8670,
     4688, 4684, 8670, 4717, 2585, 8670, 4669,    0, 4666, 2068,
     4712, 4711, 8670, 4660,    0, 8670, 8670, 4626, 4627, 2650,

     8670, 4626,    0, 2657, 8670, 4620, 2703, 8670, 4630, 4613,
        0,  611, 4590, 4580,    0, 4570, 4576, 4580,  395, 4569,
     2662, 8670, 4568,    0, 2724, 8670, 4567,    0, 2781, 8670,
     4566, 2809, 8670, 4565,  568, 4609,  581, 4596, 4557,  827,
     4599,  841, 4586, 4551,    0, 4593,  503,    0, 4544,    0,
      660, 4536,    0,    0, 4535,    0, 4534,    0, 4533, 4537,
     4531, 4563,    0, 4567, 4558, 8670, 8670, 4557, 2890, 4548,
     4555, 8670, 4554,  892, 4516, 4497, 2326,  819, 2337, 8670,
     1871,  627, 1832, 4501, 4500,  958, 2853,    0, 1916, 2777,
     2342, 2371, 8670, 8670,    0, 2805, 2861, 2096,    0,    0,

     2868, 2874, 2869, 2875, 2876, 2882, 2880, 2932, 2104, 2922,
     2946, 8670, 2960, 2967, 2242, 2851, 2957, 2969,    0, 4501,
     4498,    0, 2975, 2984, 2987,  939, 3039, 3050, 3061, 3069,
     4536, 2854, 2966, 4494, 4493, 4489, 2990, 3001, 3048, 3094,
     3114, 3122, 3142, 4487, 4486,    0,    0, 4518, 4477, 4439,
     3771, 3769, 3768,    0,    0, 3767, 3762, 3755, 3759, 3753,
     3747, 3746, 3737, 3727, 3738, 3722, 3717, 3717, 2941, 3704,
     3712, 3712, 3681, 3672, 3671, 3659, 3657,    0, 3655,    0,
     3651, 8670, 8670, 8670, 3637, 3652, 2596, 3614,    0, 3613,
     3607, 3606, 1970, 3601, 3635,    0, 3059, 2615, 8670, 1912,

     3583, 3577, 3606, 3007, 1939, 3031, 1952, 3583, 3570, 2684,
     8670,    0, 3163, 2978, 2881, 3548, 3027, 3099, 3232, 3573,
     3233, 3289, 3273, 3274, 3275, 3280, 3320, 3250, 3339, 3347,
     3227, 3552, 3551, 3307, 3414, 3483, 3357, 8670, 3550, 3540,
     3539, 3349,    0, 3382, 3390, 3237, 3530, 3492, 3518, 3470,
     3467, 3465, 3454, 3453,    0, 3447, 3446, 3445, 3394, 3440,
     3430, 3409, 3405, 3404, 3392, 8670, 3377, 3377, 3375, 8670,
     3355, 3353, 3335, 3328, 3327, 3321, 3311, 3297, 3295, 3291,
     3289, 3284, 2855, 3283, 3278, 3277, 3271, 3232, 8670, 3270,
     3246, 8670, 3250, 3216, 3201, 3127, 8670, 1976, 3190, 3201,

        0, 2950, 3333, 3262, 3170, 3267, 3341, 3552, 3402, 3457,
     3427, 3512, 3430, 3111, 3109, 3495, 3582, 3105, 3100, 3091,
     3561, 3526, 3090, 3082, 3080, 3068, 3072, 3063, 3061, 3047,
     3045, 3039, 3002, 3001, 2991, 2982, 1914, 2963, 2971, 2960,
     2966, 2954, 2947, 2946, 2941, 2940, 2926, 2931,  472, 2916,
     2916, 2912,  833, 2906, 2902, 2897, 2896, 2891, 2878, 2877,
     2870, 2847, 2841, 2840, 2827, 2805, 2836, 8670, 2785, 2799,
     2806, 3131, 2775, 2763, 3462, 3033, 8670, 3458, 3583, 3585,
     3595, 3599, 3594, 2770, 2761, 3596, 3626, 2755, 2754, 2753,
     3629, 3659, 3679, 2744, 2743, 2742, 8670, 2733, 2715, 2714,

     2707, 2706, 2698, 2695, 2680, 2681, 2667, 2667, 2676, 2660,
     2632, 2636, 2639, 2629, 2618, 2612, 8670, 2602,    0,    0,
     2595, 8670, 2578, 3018, 2563, 2564, 2569, 2560, 2546, 2538,
     2537, 2530, 2529, 2524, 2518, 2508, 2501, 2487, 2486, 2485,
     2481, 2467, 2455, 2445, 2439, 3536, 3470, 3472, 3646, 3650,
     3667, 3671, 3669, 2424, 2415, 3685, 3697, 2402, 2397, 2396,
     3700, 2395, 2382, 2376, 2375, 2374, 2368, 2358, 2357, 2344,
     2345,    0, 2332, 2333, 2322, 2314, 2321, 2302, 2289, 2273,
     2268, 2247,    0, 8670, 8670, 2246, 2253, 8670, 2255, 2241,
     2226, 2220, 2213, 2202, 2200, 2196, 2194, 2184, 2177, 2166,

     2144, 2135, 2128, 2118, 2111, 2109, 2096, 2129, 2113, 3471,
     3261, 3579, 3690, 3720, 3725, 3727, 3719, 8670, 8670, 3726,
     3732, 8670, 8670, 8670, 3729, 8670, 8670, 8670, 8670, 8670,
     8670, 8670, 8670, 8670, 8670, 2078, 2064, 2070, 2061, 2072,
     2059, 8670, 8670, 8670, 8670, 8670, 2041, 2026, 3132, 2006,
     1996, 8670, 8670, 8670, 8670, 8670, 8670, 8670, 8670, 8670,
     8670, 8670, 8670, 2019, 1992, 8670, 8670, 3535, 3732, 3749,
      815, 3760, 3769, 1955, 1913, 1908, 1862, 1851, 1835, 1823,
     1824, 8670, 1765,  918, 8670, 8670, 3370, 3652,  195, 3770,
     3774,  865,  829,  803,  616,  596,  575,  571, 3147,  534,

      516, 3537, 1873, 3775,  471,  481,  413,  413, 8670, 3153,
      208, 3245, 2052, 3781,  183, 3249, 8670,  140, 3282, 1799,
     3374,   56, 1807, 3437, 2009, 8670, 3789, 8670, 3830, 3859,
     3888, 3917, 3946, 3975, 4004, 4033, 4062, 4091, 4120, 4149,
     4178, 4207, 4236, 4265, 4294, 4323, 4352, 4381, 4410, 4439,
     4468, 4497, 4519, 4537, 4553, 4572, 4589, 4608, 4636, 4654,
     4683, 4692, 4707, 4735, 4763, 4791, 4820, 4838, 4867, 4891,
     4919, 4947, 4975, 4991, 5020, 5049, 5078, 5096, 5105, 5133,
     5161, 5189, 5217, 5226, 5241, 5257, 5286, 5302, 5331, 5360,
     5376, 5405, 5434, 5450, 5479, 5508, 5524, 5553, 5562, 5577,

     5586, 5601, 5630, 5646, 5675, 5704, 5720, 5749, 5772, 5800,
     5809, 5822, 5840, 5852, 5877, 5886, 3772, 5903, 5927, 5952,
     5970, 5988, 6017, 6032, 6054, 6082, 6110, 6138, 6151, 6180,
     6198, 6216, 6245, 6274, 6298, 6316, 6344, 6372, 6400, 6429,
     6457, 6473, 6502, 6531, 6560, 6578, 6596, 6624, 6633, 6661,
     6689, 6717, 6745, 6758, 6773, 6795, 6811, 6840, 6856, 6885,
     6914, 6936, 6952, 6981, 7010, 7026, 7055, 7084, 7100, 7129,
     7144, 7166, 7181, 7203, 7232, 7248, 7277, 7306, 3445, 7322,
     7351, 7364, 7393, 7409, 7423, 7448, 7477, 7505, 3779, 7529,
     7554, 3803, 4507, 7582, 7596, 7614, 7623, 7636, 7654, 7672,

     7701, 7725, 7749, 7778, 7806, 7824, 7842, 7870, 7898, 7926,
     7939, 7948, 7963, 7972, 7985, 8014, 8023, 8032, 3788, 8061,
     8077, 8093, 8118, 4512, 8146, 8171, 8180, 8204, 8228, 8243,
     8261, 8290, 8314, 8332, 8341, 8369, 8397, 8413, 8438, 8467,
     8495, 8524, 8553, 8582, 8611, 8640
    } ;

static yyconst flex_int16_t yy_def[1347] =
    {   0,
     1129, 1129, 1128,    3, 1130, 1130, 1131, 1131, 1128,    9,
     1128,   11, 1132, 1132, 1133, 1133, 1128,   17, 1128,   19,
     1134, 1134, 1135, 1135, 1136, 1136, 1128,   27, 1128,   29,
     1128,   31, 1128,   33, 1137, 1137, 1128,   37, 1138, 1138,
     1128,   41, 1139, 1139, 1140, 1140, 1141, 1141, 1128,   49,
     1142, 1142, 1143, 1143, 1144, 1144, 1145, 1145, 1128,   59,
     1146, 1146, 1147, 1147, 1128,   65, 1128,   67, 1148, 1148,
     1148, 1148, 1128,   73, 1149, 1149, 1150, 1150, 1128,   79,
     1151, 1151, 1128, 1128, 1128, 1128, 1128, 1152, 1153, 1154,
     1154, 1155, 1128, 1156, 1157, 1158, 1128, 1128, 1154, 1154,

     1155, 1154, 1128, 1128, 1128, 1159, 1160, 1160, 1160, 1161,
     1128, 1128, 1128, 1162, 1163, 1128, 1128, 1128, 1128, 1164,
     1164, 1128, 1165, 1128, 1166, 1128, 1128, 1167, 1168, 1168,
     1128, 1168, 1128, 1128, 1169, 1170, 1170, 1170, 1128, 1170,
     1128, 1128, 1171, 1171, 1128, 1172, 1173, 1128, 1128, 1174,
     1128, 1128, 1128, 1175, 1128, 1128, 1128, 1176, 1128, 1128,
     1128, 1177, 1178, 1178, 1178, 1128, 1128, 1179, 1180, 1128,
     1128, 1128, 1128, 1181, 1181, 1128, 1182, 1128, 1183, 1128,
     1128, 1184, 1185, 1128, 1128, 1186, 1128, 1187, 1128, 1128,
     1128, 1128, 1188, 1128, 1189, 1128, 1190, 1128, 1128, 1128,

     1191, 1128, 1128, 1128, 1128, 1192, 1128, 1193, 1128, 1128,
     1128, 1128, 1128, 1128, 1128, 1128, 1128, 1128, 1128, 1194,
     1128, 1128, 1128, 1128, 1128, 1195, 1128, 1128, 1128, 1128,
     1196, 1128, 1128, 1128, 1128, 1128, 1128, 1128, 1128, 1128,
     1197, 1128, 1198, 1128, 1128, 1128, 1128, 1128, 1128, 1128,
     1128, 1128, 1128, 1199, 1200, 1128, 1128, 1128, 1201, 1202,
     1128, 1203, 1128, 1128, 1128, 1128, 1128, 1204, 1128, 1205,
     1128, 1128, 1128, 1206, 1128, 1128, 1128, 1128, 1128, 1128,
     1207, 1128, 1208, 1128, 1128, 1128, 1209, 1209, 1128, 1128,
     1128, 1210, 1128, 1211, 1212, 1213, 1214, 1213, 1128, 1128,

     1215, 1213, 1128, 1128, 1128, 1128, 1128, 1128, 1128, 1128,
     1128, 1128, 1128, 1128, 1128, 1216, 1209, 1216,  317,  317,
      317,  317,  317,  317, 1128, 1128, 1217, 1218, 1219, 1219,
     1219, 1219, 1219, 1219, 1219, 1219, 1128, 1128, 1128, 1128,
     1128, 1128, 1128, 1128, 1213, 1128, 1128, 1213, 1213, 1128,
     1128, 1220, 1128, 1221, 1222, 1221, 1128, 1128, 1221, 1223,
     1128, 1224, 1225, 1224, 1128, 1128, 1128, 1128, 1128, 1226,
     1128, 1226, 1227, 1228, 1226, 1227, 1128, 1128, 1128, 1228,
     1228, 1229, 1230, 1128, 1231, 1232, 1231, 1128, 1128, 1231,
     1233, 1233, 1234, 1234, 1233, 1128, 1235, 1236, 1235, 1233,

     1128, 1128, 1235, 1128, 1237, 1128, 1237, 1238, 1239, 1237,
     1128, 1240, 1238, 1239, 1239, 1241, 1242, 1128, 1128, 1128,
     1243, 1128, 1128, 1128, 1128, 1244, 1128, 1128, 1128, 1128,
     1245, 1128, 1246, 1247, 1246, 1128, 1128, 1246, 1248, 1128,
     1249, 1248, 1128, 1250, 1128, 1128, 1128, 1128, 1251, 1128,
     1251, 1252, 1253, 1251, 1252, 1128, 1128, 1128, 1253, 1253,
     1254, 1255, 1256, 1255, 1128, 1128, 1128, 1257, 1128, 1128,
     1128, 1128, 1258, 1128, 1128, 1128, 1259, 1128, 1260, 1128,
     1261, 1128, 1128, 1262, 1128, 1128, 1128, 1263, 1128, 1128,
     1264, 1264, 1128, 1128, 1265, 1128, 1128, 1128, 1128, 1128,

     1128, 1128, 1266, 1128, 1128, 1128, 1128, 1128, 1128, 1128,
     1267, 1128, 1128, 1128, 1268, 1128, 1128, 1128, 1128, 1128,
     1128, 1128, 1128, 1269, 1128, 1128, 1128, 1270, 1128, 1128,
     1128, 1128, 1128, 1128, 1271, 1272, 1271, 1128, 1128, 1273,
     1274, 1273, 1128, 1128, 1275, 1128, 1128, 1276, 1128, 1277,
     1128, 1128, 1278, 1279, 1128, 1280, 1128, 1281, 1128, 1128,
     1128, 1282, 1283, 1284, 1285, 1128, 1128, 1285, 1286, 1285,
     1284, 1128, 1128, 1128, 1128, 1128, 1128, 1128, 1287, 1128,
     1128, 1128, 1128, 1128, 1128, 1288, 1288, 1289, 1128, 1290,
     1290, 1290, 1128, 1128, 1291, 1290, 1290, 1290, 1292, 1293,

     1294, 1294, 1294, 1294, 1294, 1294, 1294, 1128, 1128, 1128,
     1128, 1128, 1285, 1128, 1128, 1295, 1295, 1296, 1297, 1128,
     1128, 1298, 1299, 1299, 1300, 1128, 1301, 1302, 1302, 1303,
     1304, 1128, 1305, 1128, 1128, 1128, 1306, 1306, 1307, 1308,
     1309, 1310, 1310, 1128, 1128, 1311, 1312, 1313, 1128, 1128,
     1128, 1128, 1128, 1314, 1315, 1128, 1128, 1128, 1128, 1128,
     1128, 1128, 1128, 1128, 1128, 1316, 1128, 1128, 1128, 1128,
     1128, 1128, 1128, 1128, 1128, 1128, 1128, 1317, 1128, 1318,
     1128, 1128, 1128, 1128, 1128, 1128, 1128, 1128, 1319, 1128,
     1128, 1128, 1128, 1128, 1320, 1321, 1322, 1128, 1128, 1128,

     1128, 1128, 1323, 1323, 1128, 1128, 1128, 1128, 1128, 1128,
     1128, 1324, 1128, 1325, 1325, 1326, 1325, 1325, 1325, 1327,
     1328, 1328, 1328, 1328, 1328, 1328, 1328, 1128, 1128, 1329,
     1330, 1128, 1128, 1331, 1332, 1332, 1333, 1128, 1128, 1128,
     1128, 1334, 1335, 1336, 1336, 1337, 1128, 1128, 1313, 1128,
     1128, 1128, 1128, 1128, 1315, 1128, 1128, 1128, 1128, 1128,
     1128, 1128, 1128, 1128, 1128, 1128, 1128, 1128, 1128, 1128,
     1128, 1128, 1128, 1128, 1128, 1128, 1128, 1128, 1128, 1128,
     1128, 1128, 1128, 1128, 1128, 1128, 1128, 1128, 1128, 1338,
     1322, 1128, 1128, 1128, 1128, 1339, 1128, 1128, 1128, 1128,

     1340, 1340, 1325, 1325, 1128, 1325, 1328, 1327, 1328, 1328,
     1328, 1128, 1330, 1128, 1128, 1331, 1333, 1128, 1128, 1128,
     1334, 1341, 1128, 1128, 1128, 1128, 1128, 1128, 1128, 1128,
     1128, 1128, 1128, 1128, 1128, 1128, 1128, 1128, 1128, 1128,
     1128, 1128, 1128, 1128, 1342, 1128, 1128, 1128, 1128, 1128,
     1128, 1128, 1128, 1128, 1128, 1128, 1128, 1128, 1128, 1128,
     1128, 1128, 1128, 1128, 1128, 1128, 1338, 1128, 1128, 1128,
     1339, 1339, 1128, 1128, 1325, 1325, 1128, 1325, 1328, 1328,
     1328, 1328, 1330, 1128, 1128, 1331, 1333, 1128, 1128, 1128,
     1334, 1341, 1341, 1128, 1128, 1128, 1128, 1128, 1128, 1128,

     1128, 1128, 1128, 1128, 1128, 1128, 1128, 1128, 1128, 1128,
     1128, 1128, 1128, 1128, 1128, 1128, 1128, 1128, 1343, 1344,
     1128, 1128, 1128, 1128, 1128, 1128, 1128, 1128, 1128, 1128,
     1128, 1128, 1128, 1128, 1128, 1128, 1128, 1128, 1128, 1128,
     1128, 1128, 1128, 1128, 1128, 1325, 1325, 1325, 1328, 1328,
     1328, 1328, 1330, 1128, 1128, 1331, 1333, 1128, 1128, 1128,
     1334, 1128, 1128, 1128, 1128, 1128, 1128, 1128, 1128, 1128,
     1128, 1345, 1128, 1128, 1128, 1128, 1128, 1128, 1128, 1128,
     1128, 1128, 1346, 1128, 1128, 1128, 1128, 1128, 1128, 1128,
     1128, 1128, 1128, 1128, 1128, 1128, 1128, 1128, 1128, 1128,

     1128, 1128, 1128, 1128, 1128, 1128, 1128, 1128, 1128, 1325,
     1325, 1325, 1328, 1328, 1328, 1328, 1330, 1128, 1128, 1331,
     1333, 1128, 1128, 1128, 1334, 1128, 1128, 1128, 1128, 1128,
     1128, 1128, 1128, 1128, 1128, 1128, 1128, 1128, 1128, 1128,
     1128, 1128, 1128, 1128, 1128, 1128, 1128, 1128, 1128, 1128,
     1128, 1128, 1128, 1128, 1128, 1128, 1128, 1128, 1128, 1128,
     1128, 1128, 1128, 1128, 1128, 1128, 1128, 1325, 1325, 1128,
     1327, 1328, 1328, 1128, 1128, 1128, 1128, 1128, 1128, 1128,
     1128, 1128, 1128, 1128, 1128, 1128, 1325, 1325, 1327, 1328,
     1328, 1128, 1128, 1128, 1128, 1128, 1128, 1128, 1128, 1128,

     1128, 1325, 1327, 1328, 1128, 1128, 1128, 1128, 1128, 1128,
     1128, 1325, 1327, 1328, 1128, 1128, 1128, 1128, 1128, 1327,
     1128, 1128, 1327, 1128, 1327, 1128, 1327,    0, 1128, 1128,
     1128, 1128, 1128, 1128, 1128, 1128, 1128, 1128, 1128, 1128,
     1128, 1128, 1128, 1128, 1128, 1128, 1128, 1128, 1128, 1128,
     1128, 1128, 1128, 1128, 1128, 1128, 1128, 1128, 1128, 1128,
     1128, 1128, 1128, 1128, 1128, 1128, 1128, 1128, 1128, 1128,
     1128, 1128, 1128, 1128, 1128, 1128, 1128, 1128, 1128, 1128,
     1128, 1128, 1128, 1128, 1128, 1128, 1128, 1128, 1128, 1128,
     1128, 1128, 1128, 1128, 1128, 1128, 1128, 1128, 1128, 1128,

     1128, 1128, 1128, 1128, 1128, 1128, 1128, 1128, 1128, 1128,
     1128, 1128, 1128, 1128, 1128, 1128, 1128, 1128, 1128, 1128,
     1128, 1128, 1128, 1128, 1128, 1128, 1128, 1128, 1128, 1128,
     1128, 1128, 1128, 1128, 1128, 1128, 1128, 1128, 1128, 1128,
     1128, 1128, 1128, 1128, 1128, 1128, 1128, 1128, 1128, 1128,
     1128, 1128, 1128, 1128, 1128, 1128, 1128, 1128, 1128, 1128,
     1128, 1128, 1128, 1128, 1128, 1128, 1128, 1128, 1128, 1128,
     1128, 1128, 1128, 1128, 1128, 1128, 1128, 1128, 1128, 1128,
     1128, 1128, 1128, 1128, 1128, 1128, 1128, 1128, 1128, 1128,
     1128, 1128, 1128, 1128, 1128, 1128, 1128, 1128, 1128, 1128,

     1128, 1128, 1128, 1128, 1128, 1128, 1128, 1128, 1128, 1128,
     1128, 1128, 1128, 1128, 1128, 1128, 1128, 1128, 1128, 1128,
     1128, 1128, 1128, 1128, 1128, 1128, 1128, 1128, 1128, 1128,
     1128, 1128, 1128, 1128, 1128, 1128, 1128, 1128, 1128, 1128,
     1128, 1128, 1128, 1128, 1128, 1128
    } ;

static yyconst flex_int16_t yy_nxt[8741] =
    {   0,
       85,   86,   87,   85,   86,   85,   88,   85,   89,   85,
       85,   85,   90,   85,   91,   92,   85,   90,   90,   90,
       85,   93,   85,   94,   95,   95,   95,   95,   95,   95,
       95,   95,   95,   95,   95,   95,   95,   95,   95,   85,
       96,   85,   95,   95,   95,   95,   95,   95,   95,   95,
       95,   95,   95,   95,   95,   95,   95,   95,   95,   95,
       95,   95,   95,   95,   95,   85,   85,   85,   85,   85,
       97,  153,  153,   97,  157,  154,  154,  216,  158,  555,
       98,   99,  157,  100,  101,  189,  158,  102,  102,  103,
      189,  216,  196,  196,   84,  204,  205,  298,  204,   84,

      206,  197,  197,  363,  343,  554,  297,  343,  365,  155,
      155, 1124,  159,  198,  198,  217,  204,  205,  512,  204,
      159,  206,  513,  190,  223,  224,  237,  223,  190,  217,
      199,  199,  237,  250,  207,  103,  104,  104,  105,  104,
      104,  104,  106,  104,  104,  104,  104,  104,  250,  104,
      284,  104,  108,  271,  271,  207,  108,  104,  104,  104,
      209,  263,  210,  225,  238,  272,  272,  499,  536,  211,
      238,  251,  498,  538,  212,  104,  109,  104,  541,  577,
      565,  213,  264,  543,  223,  224,  251,  223,  285,  297,
      572,  273,  273,  572,  343,  284, 1122,  343,  214,  264,

      577,  104,  104,  104,  104,  104,  104,  105,  104,  104,
      104,  106,  104,  104,  104,  104,  104,  227,  104,  228,
      104,  108,  209,  225,  210,  108,  104,  104,  104,  263,
      227,  211,  228,  285,  343,  600,  212,  343,  229,  369,
      369,  369,  369,  213,  104,  109,  104,  972, 1103,  490,
      264,  229,  490,  370,  491,  230,  297,  514,  371, 1118,
      214,  348,  512,  349,  349,  349,  513,  264,  230,  297,
      104,  104,  104,  104,  112,  112,  113,  112,  112,  112,
      112,  112,  114,  112,  112,  112,  112,  112,  112,  112,
      112,  112,  112,  112,  112,  112,  112,  112,  115,  115,

      115,  115,  115,  115,  115,  115,  115,  115,  115,  115,
      115,  115,  115,  112,  116,  112,  115,  115,  115,  115,
      115,  115,  115,  115,  115,  115,  115,  115,  115,  115,
      115,  115,  115,  115,  115,  115,  115,  115,  115,  112,
      112,  112,  112,  115,  117,  118,  119,  118,  118,  117,
      117,  117,  120,  117,  117,  117,  117,  117,  117,  121,
      117,  117,  117,  117,  122,  117,  117,  117,  123,  123,
      123,  123,  123,  123,  123,  123,  123,  123,  123,  123,
      123,  123,  123,  117,  124,  117,  123,  123,  123,  123,
      123,  123,  123,  123,  123,  123,  123,  123,  123,  123,

      123,  123,  123,  123,  123,  123,  123,  123,  123,  117,
      117,  117,  125,  123,  126,  126,  127,  126,  126,  126,
      128,  126,  126,  126,  126,  126,  232,  126,  233,  126,
      130,  232,  583,  233,  130,  131,  126,  126,  244,  263,
      263,  626,  671,  355,  356,  245,  246,  234,  356,  596,
      574,  583,  234,  126,  132,  126,  672,  395,  597,  247,
      265,  265,  289,  290,  235,  289, 1116,  972,  356,  235,
     1128,  356,  574,  575,  576,  356,  248,  265,  265,  126,
      126,  126,  126,  126,  126,  127,  126,  126,  126,  128,
      126,  126,  126,  126,  126,  356,  126,  363,  126,  130,

      244,  291,  365,  130,  131,  126,  126,  245,  246,  275,
      380,  380,  380,  380,  386,  387,  587,  381,  276,  387,
      922,  247,  126,  132,  126,  578,  296,  923,  296,  296,
      277,  296,  296,  296, 1115,  972,  588,  297,  248,  387,
      507,  508,  286,  507,  683,  286,  578,  278,  126,  126,
      126,  126,  133,  133,  134,  133,  133,  133,  135,  133,
      133,  133,  133,  133,  287,  133,  363,  133,  137,  275,
      684,  365,  137,  138,  139,  133, 1111,  286,  276,  509,
      286,  288,  299,  536,  296,  300,  296,  301,  538, 1110,
      277,  133,  140,  133,  577,  297,  536,  366,  367,  287,

      366,  538,  480,  414,  414,  414,  414,  278, 1128,  387,
      415,  481,  303,  387, 1108,  577,  288,  133,  133,  133,
      133,  133,  133,  134,  133,  133,  133,  135,  133,  133,
      133,  133,  133,  387,  133,  577,  133,  137,  368,  972,
      482,  137,  138,  139,  133,  346,  347, 1107,  346,  369,
      369,  369,  369,  577,  299,  706,  296,  300,  296,  301,
      133,  140,  133,  370,  664,  686,  665,  297,  371,  459,
      459,  459,  459,  516,  706,  577,  460,  517,  346,  347,
      972,  346,  687,  518,  303,  519,  133,  133,  133,  133,
      117,  141,  142,  141,  141,  117,  117,  117,  143,  117,

      117,  117,  117,  117,  117,  144,  117,  117,  117,  117,
      145,  117,  117,  117,  146,  146,  146,  146,  146,  146,
      146,  146,  146,  146,  146,  146,  146,  146,  146,  117,
      124,  117,  146,  146,  146,  146,  146,  146,  146,  146,
      146,  146,  146,  146,  146,  146,  146,  146,  146,  146,
      146,  146,  146,  146,  146,  117,  117,  117,  147,  146,
      148,  148,  149,  148,  148,  148,  148,  148,  148,  148,
      148,  148,  148,  148,  148,  148,  148,  148,  148,  148,
      148,  148,  148,  148,  150,  150,  150,  150,  150,  150,
      150,  150,  150,  150,  150,  150,  150,  150,  150,  148,

      151,  148,  150,  150,  150,  150,  150,  150,  150,  150,
      150,  150,  150,  150,  150,  150,  150,  150,  150,  150,
      150,  150,  150,  150,  150,  148,  148,  148,  148,  150,
      160,  160,  161,  160,  160,  160,  162,  160,  160,  160,
      160,  160,  541,  160,  577,  160,  164,  543,  577,  520,
      164,  160,  160,  160,  516, 1128,  541, 1089,  517,  344,
      350,  543,  344,  350,  518,  577,  519,  972,  577,  160,
      165,  160,  345,  351,  369,  369,  369,  369,  342,  342,
      927,  297,  377,  378, 1106,  377,  434,  435,  370,  418,
      419,  435,  418,  371,  928,  160,  160,  160,  160,  160,

      160,  161,  160,  160,  160,  162,  160,  160,  160,  160,
      160,  435,  160,  589,  160,  164,  589,  396, 1105,  164,
      160,  160,  160,  379,  342,  342,  398,  399,  700,  343,
      420,  399,  343,  396,  404,  404,  404,  404,  160,  165,
      160,  404,  404,  404,  404,  396,  346,  347,  405,  346,
      700,  399,  600,  406,  609,  405,  610,  610,  610,  710,
      406,  396,  710, 1101,  160,  160,  160,  160,  166,  166,
      167,  166,  166,  166,  166,  166,  168,  166,  166,  166,
      166,  166,  166,  166,  166,  166,  166,  166,  166,  166,
      166,  166,  169,  169,  169,  169,  169,  169,  169,  169,

      169,  169,  169,  169,  169,  169,  169,  166,  170,  166,
      169,  169,  169,  169,  169,  169,  169,  169,  169,  169,
      169,  169,  169,  169,  169,  169,  169,  169,  169,  169,
      169,  169,  169,  166,  166,  166,  166,  169,  171,  172,
      173,  172,  172,  171,  171,  171,  174,  171,  171,  171,
      171,  171,  171,  175,  171,  171,  171,  171,  176,  171,
      171,  171,  177,  177,  177,  177,  177,  177,  177,  177,
      177,  177,  177,  177,  177,  177,  177,  171,  178,  171,
      177,  177,  177,  177,  177,  177,  177,  177,  177,  177,
      177,  177,  177,  177,  177,  177,  177,  177,  177,  177,

      177,  177,  177,  171,  171,  171,  179,  177,  180,  180,
      181,  180,  180,  180,  180,  180,  182,  180,  180,  180,
      180,  180,  180,  180,  180,  180,  180,  180,  180,  180,
      180,  180,  183,  183,  183,  183,  183,  183,  183,  183,
      183,  183,  183,  183,  183,  183,  183,  180,  184,  180,
      183,  183,  183,  183,  183,  183,  183,  183,  183,  183,
      183,  183,  183,  183,  183,  183,  183,  183,  183,  183,
      183,  183,  183,  180,  180,  180,  180,  183,   84,   84,
      185,   84,   84,   84,   84,   84,   84,   84,   84,   84,
       84,   84,   84,   84,   84,   84,   84,   84,   84,   84,

       84,   84,  186,  186,  186,  186,  186,  186,  186,  186,
      186,  186,  186,  186,  186,  186,  186,   84,  187,   84,
      186,  186,  186,  186,  186,  186,  186,  186,  186,  186,
      186,  186,  186,  186,  186,  186,  186,  186,  186,  186,
      186,  186,  186,   84,   84,   84,   84,  186,  191,  191,
      192,  191,  191,  191,  191,  191,  191,  191,  191,  191,
      191,  191,  191,  191,  191,  191,  191,  191,  191,  191,
      191,  191,  193,  193,  193,  193,  193,  193,  193,  193,
      193,  193,  193,  193,  193,  193,  193,  191,  194,  191,
      193,  193,  193,  193,  193,  193,  193,  193,  193,  193,

      193,  193,  193,  193,  193,  193,  193,  193,  193,  193,
      193,  193,  193,  191,  191,  191,  191,  193,   84,   84,
      200,   84,   84,   84,   84,   84,   84,   84,   84,   84,
       84,   84,   84,   84,   84,   84,   84,   84,   84,   84,
       84,   84,  201,  201,  201,  201,  201,  201,  201,  201,
      201,  201,  201,  201,  201,  201,  201,   84,  202,   84,
      201,  201,  201,  201,  201,  201,  201,  201,  201,  201,
      201,  201,  201,  201,  201,  201,  201,  201,  201,  201,
      201,  201,  201,   84,   84,   84,   84,  201,  218,  218,
      219,  218,  218,  218,  218,  218,  218,  218,  218,  218,

      218,  218,  218,  218,  218,  218,  218,  218,  218,  218,
      218,  218,  220,  220,  220,  220,  220,  220,  220,  220,
      220,  220,  220,  220,  220,  220,  220,  218,  221,  218,
      220,  220,  220,  220,  220,  220,  220,  220,  220,  220,
      220,  220,  220,  220,  220,  220,  220,  220,  220,  220,
      220,  220,  220,  218,  218,  218,  218,  220,  239,  239,
      240,  239,  239,  239,  239,  239,  239,  239,  239,  239,
      239,  239,  239,  239,  239,  239,  239,  239,  239,  239,
      239,  239,  241,  241,  241,  241,  241,  241,  241,  241,
      241,  241,  241,  241,  241,  241,  241,  239,  242,  239,

      241,  241,  241,  241,  241,  241,  241,  241,  241,  241,
      241,  241,  241,  241,  241,  241,  241,  241,  241,  241,
      241,  241,  241,  239,  239,  239,  239,  241,  252,  252,
      253,  252,  252,  252,  252,  252,  254,  252,  252,  252,
      252,  252,  252,  252,  252,  252,  252,  252,  252,  252,
      252,  252,  255,  255,  255,  255,  255,  255,  255,  255,
      255,  255,  255,  255,  255,  255,  255,  252,  256,  252,
      255,  255,  255,  255,  255,  255,  255,  255,  255,  255,
      255,  255,  255,  255,  255,  255,  255,  255,  255,  255,
      255,  255,  255,  252,  252,  252,  252,  255,  257,  257,

      258,  257,  257,  257,  257,  257,  259,  257,  257,  257,
      257,  257,  257,  257,  257,  257,  257,  257,  257,  257,
      257,  257,  260,  260,  260,  260,  260,  260,  260,  260,
      260,  260,  260,  260,  260,  260,  260,  257,  261,  257,
      260,  260,  260,  260,  260,  260,  260,  260,  260,  260,
      260,  260,  260,  260,  260,  260,  260,  260,  260,  260,
      260,  260,  260,  257,  257,  257,  257,  260,  266,  266,
      267,  266,  266,  266,  266,  266,  266,  266,  266,  266,
      266,  266,  266,  266,  266,  266,  266,  266,  266,  266,
      266,  266,  268,  268,  268,  268,  268,  268,  268,  268,

      268,  268,  268,  268,  268,  268,  268,  266,  269,  266,
      268,  268,  268,  268,  268,  268,  268,  268,  268,  268,
      268,  268,  268,  268,  268,  268,  268,  268,  268,  268,
      268,  268,  268,  266,  266,  266,  266,  268,  279,  279,
      280,  279,  279,  279,  279,  279,  279,  279,  279,  279,
      279,  279,  279,  279,  279,  279,  279,  279,  279,  279,
      279,  279,  281,  281,  281,  281,  281,  281,  281,  281,
      281,  281,  281,  281,  281,  281,  281,  279,  282,  279,
      281,  281,  281,  281,  281,  281,  281,  281,  281,  281,
      281,  281,  281,  281,  281,  281,  281,  281,  281,  281,

      281,  281,  281,  279,  279,  279,  279,  281,  304,  357,
      358,  617,  357,  289,  290,  617,  289,  388,  389,  305,
      388, 1100,  615, 1128,  356,  615,  423,  424,  356,  423,
      306, 1128,  387,  307,  308,  617,  387,  309,  310,  600,
      311,  312,  428,  429,  297,  428, 1123,  600,  356,  306,
      359, 1125,  291,  307,  308,  593,  387,  707,  390,  309,
      310,  313,  314,  311,  312,  315,  315,  425,  369,  369,
      369,  369, 1128,  435, 1099,  372,  707,  435, 1098,  315,
      315,  316,  370,  430,  480, 1128,  594,  371, 1097,  375,
      375,  375,  375,  481, 1128,  399,  372,  435,  318,  399,

      400, 1128,  319,  370,  320,  321,  322,  705,  371, 1128,
      399, 1096,  595,  600,  399, 1095,  396,  589,  323,  399,
      589,  324,  482,  325, 1113,  326,  327,  315,  315,  705,
      411,  404,  404,  411,  399,  374,  289,  290,  412,  289,
      793,  315,  315,  318,  405,  445,  446,  632,  445,  406,
      632,  404,  404,  404,  404,  412,  374,  908,  407,  793,
      316, 1094,  330,  577,  331,  405,  332,  333,  334, 1093,
      406,  456,  457,  909,  456,  291,  401,  402,  711,  401,
      335, 1128,  577,  336,  798,  325,  447,  326,  327,  337,
     1128,  399,  337,  465,  466,  399,  465, 1128,  589,  338,

      338,  589,  339,  340,  577,  798,  341,  341,  342,  711,
     1092,  287,  458,  589, 1086,  399,  589,  403,  409,  410,
      410,  410,  410,  577,  357,  358,  407,  357,  288,  440,
      440,  440,  440,  405,  467,  711,  441,  600,  406,  366,
      367, 1085,  366, 1084,  603,  442,  442,  442,  443,  600,
      470,  471,  600,  470,  342,  391,  391, 1083,  391,  391,
      391,  392,  391,  391,  391,  391,  391, 1127,  391,  490,
      391,  394,  490,  602,  491,  394,  391,  395,  391,  448,
      448,  448,  448, 1081,  355,  356,  409,  436,  437,  356,
      436,  472,  600,  449,  391,  394,  391,  589,  450, 1080,

      589, 1128,  435,  483,  483,  615,  435, 1120,  615,  356,
      448,  448,  448,  448, 1079, 1078, 1077,  483,  483,  484,
      391,  391,  391,  391,  449, 1076,  435, 1075,  438,  450,
      448,  448,  448,  448, 1074, 1067,  483,  451,  454,  454,
      454,  454,  624,  719,  449,  451,  624,  474,  475,  450,
      474, 1066,  449,  448,  448,  448,  448,  450,  500,  501,
     1065,  500,  504,  505,  483,  504,  624,  449, 1064,  290,
      521,  522,  450,  521,  525,  526, 1063,  525,  529,  530,
      629,  529,  532,  533,  629,  532, 1062,  579,  476,  296,
      579,  296,  296, 1061,  296,  296,  296,  453,  589,  502,

      297,  589, 1060,  506,  629,  453,  485,  486,  580,  485,
      581,  523,  483,  483,  589,  527,  638,  589,  589,  531,
      638,  589,  582,  534, 1059,  593,  483,  483,  483,  581,
      589,  377,  378,  589,  377, 1058,  344,  600,  589,  344,
      638,  589, 1057,  615,  582,  484,  615,  487,  350,  608,
      601,  350, 1056,  600, 1055,  342,  594,  600, 1054,  344,
     1053,  351,  344,  380,  380,  380,  380,  342,  604,  600,
      381, 1052,  351,  483,  315,  315,  605,  600,  342, 1051,
      611,  612,  595,  611,  350,  606, 1050,  350,  315,  315,
      560,  388,  389,  613,  388,  607, 1049,  351, 1048,  614,

     1047,  342,  297,  342, 1046,  508,  350,  315,  348,  350,
      349,  349,  349,  342,  321,  322,  297, 1128,  356,  608,
      401,  402,  356,  401,  342,  342, 1044,  579,  355,  356,
      579, 1043,  325,  356,  326,  327,  315,  315,  704,  386,
      387,  704,  356,  589,  387,  614,  589, 1042,  580,  342,
      315,  315,  315,  356,  369,  369,  369,  369, 1041,  580,
      375,  375,  375,  375,  387, 1040,  618,  372,  370,  560,
     1039,  342,  589,  371,  370,  589,  321,  322, 1038,  371,
     1037, 1128, 1128, 1128, 1128, 1036,  418,  419, 1128,  418,
      423,  424,  972,  423,  325, 1128,  326,  327,  566,  714,

     1128,  566, 1034,  566,  566,  566,  566,  566,  567,  566,
      568,  566,  568,  569,  566, 1033, 1032,  715,  566,  566,
      566,  571,  369,  369,  369,  369, 1031,  374,  375,  375,
      375,  375, 1030, 1029, 1028,  372,  370,  566,  566,  566,
     1027,  371,  370,  369,  369,  369,  369,  371, 1128,  380,
      380,  380,  380, 1026, 1024, 1023,  381,  370,  428,  429,
     1022,  428,  371,  566,  566,  566,  566,  566,  589,  436,
      437,  589,  436, 1019, 1128, 1128, 1128, 1128, 1128, 1128,
     1128,  387, 1018, 1128,  396,  387,  386,  387, 1128, 1128,
     1128,  387, 1128,  398,  399,  374,  445,  446,  399,  445,

      396, 1128,  399, 1009, 1008,  387,  399, 1128, 1128,  456,
      457,  387,  456, 1007,  404,  404,  404,  404,  399, 1006,
      414,  414,  414,  414,  625, 1005,  399,  415,  405, 1004,
     1003, 1002, 1128,  406, 1128, 1128,  337,  465,  466,  337,
      465,  414,  414,  414,  414, 1001,  338,  338,  415,  339,
      340,  396, 1000,  341,  341,  342,  470,  471,  287,  470,
      398,  399,  999,  474,  475,  399,  474,  396,  998,  410,
      410,  410,  410,  997,  996,  288,  407, 1128, 1128, 1128,
     1128,  995,  994,  405, 1128,  399,  485,  486,  406,  485,
      993, 1128, 1128, 1128, 1128, 1128, 1128,  783,  630, 1128,

      783,  342,  391,  391,  992,  391,  391,  391,  626,  391,
      391,  391,  391,  391,  991,  391,  792,  627,  394,  792,
      990,  989,  394,  391,  395,  391,  411,  404,  404,  411,
      434,  435, 1128,  435,  412,  435,  409,  435,  987,  986,
      405,  391,  394,  391, 1128,  406,  410,  410,  410,  410,
      983,  500,  501,  407,  500,  435,  982,  435,  504,  505,
      405,  504,  981,  521,  522,  406,  521,  391,  391,  391,
      391,  391,  391,  980,  391,  391,  391,  626,  391,  391,
      391,  391,  391,  979,  391,  710,  391,  394,  710,  978,
      977,  394,  391,  391,  391,  411,  404,  404,  411,  459,

      459,  459,  459,  412,  507,  508,  460,  507,  976,  405,
      391,  394,  391,  409,  406,  411,  404,  404,  411,  434,
      435,  972,  975,  412,  435,  525,  526,  974,  525,  405,
      440,  440,  440,  440,  406,  973,  391,  391,  391,  391,
      972,  971,  970,  509,  435,  440,  440,  440,  440,  443,
      969,  968,  441,  440,  440,  440,  440,  639,  967,  966,
      441,  442,  442,  442,  443,  448,  448,  448,  448,  442,
      442,  442,  443,  440,  440,  440,  440,  965,  589,  449,
      441,  589,  529,  530,  450,  529,  964,  963,  962,  642,
      642,  642,  443,  454,  454,  454,  454,  960,  959,  958,

      451, 1128, 1128, 1128, 1128,  955,  589,  449, 1128,  589,
      532,  533,  450,  532,  954, 1128,  448,  448,  448,  448,
     1128,  945,  454,  454,  454,  454,  713,  944,  797,  451,
      449,  448,  448,  448,  448,  450,  449,  459,  459,  459,
      459,  450,  943,  942,  460,  449, 1128, 1128, 1128, 1128,
      450,  696,  941, 1128,  710,  632,  783,  710,  632,  783,
      453,  711,  589,  412,  717,  589,  355,  617, 1128,  589,
      589,  617,  589,  589,  940,  589,  589,  589,  589,  589,
      589,  589,  589,  589,  589,  589,  589,  939,  938,  453,
      566,  617,  711,  566,  937,  566,  566,  566,  566,  566,

      567,  566,  568,  566,  568,  697,  566,  718,  600,  600,
      566,  566,  566,  571,  600,  600,  600,  936,  711,  721,
      600,  724,  600,  722,  935,  934,  723,  727,  726,  566,
      698,  566,  804,  611,  612,  725,  611,  609,  933,  610,
      610,  610,  770,  932,  931,  770,  728,  611,  612,  930,
      611,  802,  614,  929,  802,  566,  566,  566,  566,  566,
      729,  611,  612,  926,  611,  925,  614,  632,  611,  612,
      632,  611, 1128,  617,  730,  412,  924,  617,  921,  589,
      614,  729,  589,  297,  355,  356,  920,  614,  919,  356,
      386,  624,  918,  916,  915,  624,  771,  617,  614, 1128,

      624,  914,  386,  387,  624,  434,  638,  387,  704,  356,
      638,  704,  614,  913,  912,  624, 1128,  638,  911,  988,
      731,  638,  988,  910,  624,  907,  614,  387,  589,  580,
      638,  589,  796,  614,  589,  796,  803,  589,  734,  391,
      391,  638,  391,  391,  391,  626,  391,  391,  391,  391,
      391,  906,  391,  797,  391,  736,  396,  905,  904,  736,
      391,  391,  391,  434,  435,  398,  629, 1128,  435,  299,
      629,  296,  396,  296,  791,  396, 1128,  629,  391,  736,
      391,  629,  297, 1128,  398,  399,  903,  713,  435,  399,
      629,  396,  902,  947,  901,  440,  440,  440,  440,  742,

      589,  629,  743,  589,  391,  391,  391,  391,  900,  399,
      899,  744,  744,  744,  443,  746,  746,  746,  746,  898,
      737,  897,  441,  440,  440,  440,  440,  896,  872,  895,
      441,  872,  872, 1082,  443,  872, 1082,  894,  890,  642,
      642,  642,  443,  440,  440,  440,  440,  889, 1109,  797,
      441, 1109,  888,  797, 1117,  713,  885, 1117,  884,  642,
      642,  642,  443,  801,  802,  801,  801,  802,  801,  801,
      801,  801,  801,  801,  801,  801,  801,  801,  801,  801,
      801,  801,  801,  801,  801,  801,  801,  317,  317,  317,
      317,  317,  317,  317,  317,  317,  317,  317,  317,  317,

      317,  317,  801,  801,  801,  317,  317,  317,  317,  317,
      317,  317,  317,  317,  317,  317,  317,  317,  317,  317,
      317,  317,  317,  317,  317,  317,  317,  317,  801,  801,
      801,  801,  801,  589,  589,  877,  589,  589,  746,  746,
      746,  746,  355,  356,  874,  441, 1119,  356,  873, 1119,
     1121,  611,  612, 1121,  611,  870,  299,  443,  296,  869,
      296,  791,  589,  589,  728,  589,  589,  356,  589,  297,
      614,  589,  868,  600,  589,  589,  589,  589,  589,  589,
      806,  589,  813, 1119,  589,  696, 1119,  866,  807,  801,
      802,  801,  801,  802,  801,  801,  801,  801,  801,  801,

      801,  801,  801,  801,  801,  801,  801,  801,  801,  801,
      801,  801,  801,  600,  600,  600,  614,  876,  878, 1069,
      600,  589,  386,  387,  589,  810,  865,  387,  801,  808,
      801,  809,  864,  863,  589,  722,  722,  589,  862,  861,
      611,  612,  589,  611,  860,  589,  859,  387,  611,  612,
      858,  611,  857,  812,  801,  801,  801,  801,  801,  614,
      600,  730,  816,  396,  434,  435,  856,  614,  811,  435,
      297,  589,  398,  399,  589, 1121,  855,  399, 1121,  396,
      875,  600,  854,  440,  440,  440,  440,  853,  879,  435,
      743,  440,  440,  440,  440,  852,  851,  399,  743,  744,

      744,  744,  443,  589,  821,  614,  589,  744,  744,  744,
      443,  850,  817,  614,  391,  391,  713,  391,  391,  391,
      626,  391,  391,  391,  391,  391,  849,  391,  589,  627,
      736,  589,  848,  847,  736,  391,  395,  391, 1126,  833,
      834, 1126,  600,  846,  835,  355,  356,  836,  837,  880,
      356,  845,  838,  391,  736,  391,  839,  840,  589,  589,
      844,  589,  589,  589,  843,  689,  589,  600,  689,  689,
      356,  589,  589,  589,  589,  589,  589,  883,  882,  391,
      391,  391,  391,  391,  391,  842,  391,  391,  391,  626,
      391,  391,  391,  391,  391,  841,  391,  600,  391,  736,

      832,  831,  830,  736,  391,  391,  391,  946,  829,  828,
      386,  387,  881,  611,  612,  387,  611, 1011,  948, 1012,
      827,  826,  391,  736,  391,  825,  728,  440,  440,  440,
      440, 1068,  614,  463,  743,  387,  589,  589,  589,  589,
      589,  589,  886,  892,  892,  892,  443,  824,  391,  391,
      391,  391,  801,  801,  801,  801,  801,  801,  801,  801,
      801,  801,  801,  801,  801,  801,  801,  801,  801,  801,
      801,  801,  801,  801,  801,  801,  434,  435,  614, 1010,
      589,  435, 1087,  589,  589,  823,  589,  589,  396,  589,
     1112,  801,  801,  801,  820,  819,  589,  398,  399,  589,

      589,  435,  399,  589,  396,  818,  815,  814,  891,  355,
      356,  386,  387,  600,  356,  805,  387,  801,  801,  801,
      801,  801,  399,  600,  800,  600,  799,  949,  580,  887,
      950,  795,  396,  713,  356,  600,  387,  794,  953,  600,
      956,  398,  399,  789,  434,  435,  399,  589,  396,  435,
      589,  589,  788,  589,  589,  951,  589,  787,  786,  952,
      440,  440,  440,  440,  785,  784,  399,  743,  589,  435,
      957,  589,  589,  961,  687,  589,  892,  892,  892,  443,
      440,  440,  440,  440,  355,  356,  600,  743,  782,  356,
      600, 1070,  290, 1014, 1070, 1102,  892,  892,  892,  443,

      386,  387,  781,  396, 1013,  387,  780,  600,  779,  356,
      778,  600,  398,  399, 1015,  434,  435,  399, 1016,  396,
      435,  589,  777,  776,  589,  387,  589, 1017,  589,  589,
     1071,  589,  775,  589,  355,  356,  589,  399,  396,  356,
      435,  386,  387, 1020,  434,  435,  387,  398,  399,  435,
     1070,  290,  399, 1070,  396, 1021,  774,  773, 1025,  356,
      600,  589,  772,  769,  589,  600,  387,  600,  768,  435,
      589,  589,  399,  589,  589,  589,  589,  767,  589,  589,
     1072,  722, 1119, 1073,  765, 1119,  764, 1088,  763,  291,
      289,  290,  599,  289,  599,  599,  599,  762,  761,  712,

      600,  712,  712,  712,  760,  759,  758, 1090,  689,  600,
      600,  689,  689,  757,  600,  600,  722, 1104,  756,  754,
      753,  600,  752,  599, 1091,  599,  599,  599, 1114, 1071,
       84,   84,   84,   84,   84,   84,   84,   84,   84,   84,
       84,   84,   84,   84,   84,   84,   84,   84,   84,   84,
       84,   84,   84,   84,   84,   84,   84,   84,   84,  107,
      107,  107,  107,  107,  107,  107,  107,  107,  107,  107,
      107,  107,  107,  107,  107,  107,  107,  107,  107,  107,
      107,  107,  107,  107,  107,  107,  107,  107,  110,  110,
      110,  110,  110,  110,  110,  110,  110,  110,  110,  110,

      110,  110,  110,  110,  110,  110,  110,  110,  110,  110,
      110,  110,  110,  110,  110,  110,  110,  129,  129,  129,
      129,  129,  129,  129,  129,  129,  129,  129,  129,  129,
      129,  129,  129,  129,  129,  129,  129,  129,  129,  129,
      129,  129,  129,  129,  129,  129,  136,  136,  136,  136,
      136,  136,  136,  136,  136,  136,  136,  136,  136,  136,
      136,  136,  136,  136,  136,  136,  136,  136,  136,  136,
      136,  136,  136,  136,  136,  152,  152,  152,  152,  152,
      152,  152,  152,  152,  152,  152,  152,  152,  152,  152,
      152,  152,  152,  152,  152,  152,  152,  152,  152,  152,

      152,  152,  152,  152,  156,  156,  156,  156,  156,  156,
      156,  156,  156,  156,  156,  156,  156,  156,  156,  156,
      156,  156,  156,  156,  156,  156,  156,  156,  156,  156,
      156,  156,  156,  163,  163,  163,  163,  163,  163,  163,
      163,  163,  163,  163,  163,  163,  163,  163,  163,  163,
      163,  163,  163,  163,  163,  163,  163,  163,  163,  163,
      163,  163,  188,  188,  188,  188,  188,  188,  188,  188,
      188,  188,  188,  188,  188,  188,  188,  188,  188,  188,
      188,  188,  188,  188,  188,  188,  188,  188,  188,  188,
      188,  195,  195,  195,  195,  195,  195,  195,  195,  195,

      195,  195,  195,  195,  195,  195,  195,  195,  195,  195,
      195,  195,  195,  195,  195,  195,  195,  195,  195,  195,
      203,  203,  203,  203,  203,  203,  203,  203,  203,  203,
      203,  203,  203,  203,  203,  203,  203,  203,  203,  203,
      203,  203,  203,  203,  203,  203,  203,  203,  203,  208,
      208,  208,  208,  208,  208,  208,  208,  208,  208,  208,
      208,  208,  208,  208,  208,  208,  208,  208,  208,  208,
      208,  208,  208,  208,  208,  208,  208,  208,  215,  215,
      215,  215,  215,  215,  215,  215,  215,  215,  215,  215,
      215,  215,  215,  215,  215,  215,  215,  215,  215,  215,

      215,  215,  215,  215,  215,  215,  215,  222,  222,  222,
      222,  222,  222,  222,  222,  222,  222,  222,  222,  222,
      222,  222,  222,  222,  222,  222,  222,  222,  222,  222,
      222,  222,  222,  222,  222,  222,  226,  226,  226,  226,
      226,  226,  226,  226,  226,  226,  226,  226,  226,  226,
      226,  226,  226,  226,  226,  226,  226,  226,  226,  226,
      226,  226,  226,  226,  226,  231,  231,  231,  231,  231,
      231,  231,  231,  231,  231,  231,  231,  231,  231,  231,
      231,  231,  231,  231,  231,  231,  231,  231,  231,  231,
      231,  231,  231,  231,  236,  236,  236,  236,  236,  236,

      236,  236,  236,  236,  236,  236,  236,  236,  236,  236,
      236,  236,  236,  236,  236,  236,  236,  236,  236,  236,
      236,  236,  236,  243,  243,  243,  243,  243,  243,  243,
      243,  243,  243,  243,  243,  243,  243,  243,  243,  243,
      243,  243,  243,  243,  243,  243,  243,  243,  243,  243,
      243,  243,  249,  249,  249,  249,  249,  249,  249,  249,
      249,  249,  249,  249,  249,  249,  249,  249,  249,  249,
      249,  249,  249,  249,  249,  249,  249,  249,  249,  249,
      249,  262,  262,  262,  262,  262,  262,  262,  262,  262,
      262,  262,  262,  262,  262,  262,  262,  262,  262,  262,

      262,  262,  262,  262,  262,  262,  262,  262,  262,  262,
      270,  270,  270,  270,  270,  270,  270,  270,  270,  270,
      270,  270,  270,  270,  270,  270,  270,  270,  270,  270,
      270,  270,  270,  270,  270,  270,  270,  270,  270,  274,
      274,  274,  274,  274,  274,  274,  274,  274,  274,  274,
      274,  274,  274,  274,  274,  274,  274,  274,  274,  274,
      274,  274,  274,  274,  274,  274,  274,  274,  283,  283,
      283,  283,  283,  283,  283,  283,  283,  283,  283,  283,
      283,  283,  283,  283,  283,  283,  283,  283,  283,  283,
      283,  283,  283,  283,  283,  283,  283,  292,  292,  751,

      292,  292,  292,  292,  292,  292,  292,  292,  292,  292,
      292,  292,  292,  292,  292,  292,  292,  292,  292,  292,
      292,  292,  292,  292,  292,  292,  295,  720,  750,  720,
      720,  720,  712,  463,  712,  712,  712,  748,  747,  295,
      741,  295,  295,  295,  740,  739,  738,  295,  296,  733,
      296,  296,  732,  296,  709,  708,  296,  296,  702,  296,
      296,  296,  302,  701,  302,  302,  302,  302,  699,  302,
     1128,  297,  302,  302,  302,  302,  302,  302,  317,  317,
      297,  297,  696,  563,  694,  693,  692,  691,  690,  688,
      317,  317,  317,  317,  317,  317,  317,  685,  317,  317,

      328,  682,  328,  328,  681,  328,  541,  680,  328,  328,
      679,  328,  328,  328,  329,  329,  536,  678,  677,  676,
      675,  674,  673,  670,  669,  668,  329,  329,  329,  329,
      329,  329,  329,  667,  329,  329,  352,  352,  666,  352,
      352,  352,  352,  352,  352,  352,  352,  352,  352,  352,
      352,  352,  352,  352,  352,  352,  352,  352,  352,  352,
      352,  352,  352,  352,  352,  354,  663,  354,  354,  354,
      354,  354,  510,  662,  354,  354,  354,  354,  354,  661,
      660,  659,  354,  360,  360,  360,  360,  360,  360,  360,
      360,  360,  360,  360,  360,  360,  360,  360,  360,  360,

      360,  360,  360,  360,  360,  360,  360,  360,  360,  360,
      360,  360,  362,  658,  362,  362,  362,  493,  493,  657,
      362,  364,  656,  364,  364,  654,  487,  364,  482,  364,
      364,  364,  653,  652,  651,  364,  373,  373,  373,  373,
      650,  469,  373,  649,  463,  647,  463,  645,  449,  373,
      644,  641,  373,  432,  636,  373,  427,  373,  373,  373,
      635,  422,  373,  373,  376,  376,  376,  376,  634,  405,
      626,  626,  626,  384,  621,  370,  620,  376,  363,  376,
      376,  619,  361,  376,  353,  376,  376,  376,  598,  592,
      591,  376,  382,  382,  382,  382,  590,  588,  382,  585,

      584,  573,  297,  297,  563,  293,  561,  559,  557,  554,
      552,  382,  551,  382,  382,  382,  549,  547,  546,  382,
      383,  383,  544,  383,  383,  383,  383,  383,  383,  383,
      383,  383,  383,  383,  383,  383,  383,  383,  383,  383,
      383,  383,  383,  383,  383,  383,  383,  383,  383,  385,
      539,  385,  385,  385,  385,  385,  510,  498,  385,  385,
      385,  385,  385,  497,  496,  494,  385,  393,  393,  493,
      393,  393,  393,  393,  393,  393,  393,  393,  393,  393,
      393,  393,  393,  393,  393,  393,  393,  393,  393,  393,
      393,  393,  393,  393,  393,  393,  397,  489,  482,  478,

      469,  463,  397,  449,  397,  397,  397,  397,  397,  397,
      432,  397,  397,  397,  397,  397,  427,  422,  405,  397,
      408,  408,  408,  408,  384,  384,  408,  370,  361,  353,
      297,  294,  293,  408, 1128,  111,  408,  111, 1128,  408,
     1128,  408,  408,  408, 1128, 1128,  408,  408,  413,  413,
      413,  413, 1128, 1128, 1128,  413, 1128, 1128, 1128, 1128,
     1128,  413, 1128,  413,  413, 1128, 1128,  413, 1128,  413,
      413,  413, 1128, 1128, 1128,  413,  416,  416,  416,  416,
     1128, 1128,  416, 1128, 1128, 1128, 1128, 1128, 1128, 1128,
     1128, 1128, 1128, 1128, 1128,  416, 1128,  416,  416,  416,

     1128, 1128, 1128,  416,  417, 1128, 1128,  417, 1128, 1128,
     1128,  417, 1128,  417,  417,  417, 1128, 1128, 1128,  417,
      421,  421, 1128,  421,  421,  421,  421,  421,  421,  421,
      421,  421,  421,  421,  421,  421,  421,  421,  421,  421,
      421,  421,  421,  421,  421,  421,  421,  421,  421,  426,
      426, 1128,  426,  426,  426,  426,  426,  426,  426,  426,
      426,  426,  426,  426,  426,  426,  426,  426,  426,  426,
      426,  426,  426,  426,  426,  426,  426,  426,  431,  431,
     1128,  431,  431,  431,  431,  431,  431,  431,  431,  431,
      431,  431,  431,  431,  431,  431,  431,  431,  431,  431,

      431,  431,  431,  431,  431,  431,  431,  433, 1128,  433,
      433,  433,  433,  433, 1128, 1128,  433,  433,  433,  433,
      433, 1128, 1128, 1128,  433,  439, 1128,  439,  439,  439,
     1128, 1128, 1128,  439,  444,  444,  444,  444, 1128, 1128,
      444, 1128, 1128, 1128, 1128, 1128, 1128, 1128, 1128,  444,
      444, 1128, 1128,  444, 1128,  444,  444,  444, 1128, 1128,
     1128,  444,  452,  452,  452,  452, 1128, 1128,  452, 1128,
     1128, 1128, 1128, 1128, 1128,  452, 1128, 1128,  452, 1128,
     1128,  452, 1128,  452,  452,  452, 1128, 1128,  452,  452,
      455,  455,  455,  455, 1128, 1128, 1128, 1128, 1128, 1128,

     1128, 1128, 1128,  455, 1128,  455,  455, 1128, 1128,  455,
     1128,  455,  455,  455, 1128, 1128, 1128,  455,  461,  461,
      461,  461, 1128, 1128,  461, 1128, 1128, 1128, 1128, 1128,
     1128, 1128, 1128, 1128, 1128, 1128, 1128,  461, 1128,  461,
      461,  461, 1128, 1128, 1128,  461,  462, 1128,  462,  462,
      462, 1128, 1128, 1128,  462,  464, 1128,  464, 1128, 1128,
     1128,  464, 1128,  464,  464,  464, 1128, 1128, 1128,  464,
      468,  468, 1128,  468, 1128, 1128, 1128,  468, 1128,  468,
      468,  468, 1128, 1128, 1128,  468,  473,  473, 1128,  473,
      473,  473,  473,  473,  473,  473, 1128,  473,  473,  473,

      473,  473,  473,  473,  473,  473,  473, 1128,  473,  473,
      473,  473,  473,  473,  473,  477, 1128, 1128,  477, 1128,
     1128, 1128,  477, 1128,  477,  477,  477, 1128, 1128, 1128,
      477,  479,  479,  479,  479,  479,  479,  479,  479,  479,
      479,  479,  479,  479,  479,  479,  479,  479,  479,  479,
     1128,  479,  479,  479,  479,  479,  479,  479,  479,  479,
      481,  481, 1128,  481,  481,  481,  481,  481,  481,  481,
      481,  481,  481,  481,  481,  481,  481,  481,  481, 1128,
      481,  481,  481,  481,  481,  481,  481,  481,  481,  488,
     1128, 1128,  488, 1128, 1128, 1128,  488, 1128,  488,  488,

      488, 1128, 1128, 1128,  488,  492,  492, 1128,  492,  492,
      492,  492,  492,  492,  492,  492,  492,  492,  492,  492,
      492,  492,  492,  492,  492,  492,  492,  492,  492,  492,
      492,  492,  492,  492,  495,  495, 1128,  495, 1128,  495,
      495,  495,  495,  495, 1128,  495,  495,  495,  495, 1128,
      495,  495,  495, 1128,  495, 1128,  495,  495,  495,  495,
      495,  495,  495,  503, 1128, 1128,  503, 1128, 1128, 1128,
      503, 1128,  503,  503,  503, 1128, 1128, 1128,  503,  511,
      511, 1128,  511, 1128,  511,  511,  511,  511,  511,  511,
      511,  511,  511,  511,  511,  511,  511,  511, 1128,  511,

     1128,  511,  511,  511,  511,  511,  511,  511,  515,  515,
     1128,  515, 1128,  515,  515,  515,  515,  515,  515,  515,
      515,  515,  515,  515,  515,  515,  515, 1128,  515, 1128,
      515,  515,  515,  515,  515,  515,  515,  524, 1128, 1128,
      524, 1128, 1128, 1128,  524, 1128,  524,  524,  524, 1128,
     1128, 1128,  524,  528,  528, 1128,  528,  528,  528,  528,
      528, 1128, 1128,  528,  528,  528,  528,  528,  528,  528,
      528,  528, 1128,  528, 1128,  528,  528,  528,  528,  528,
      528,  528,  535, 1128,  535,  535,  535, 1128, 1128, 1128,
      535,  537, 1128,  537,  537, 1128, 1128,  537, 1128,  537,

      537,  537, 1128, 1128, 1128,  537,  540, 1128,  540,  540,
      540, 1128, 1128, 1128,  540,  542, 1128,  542,  542, 1128,
     1128,  542, 1128,  542,  542,  542, 1128, 1128, 1128,  542,
      545,  545, 1128,  545,  545,  545,  545,  545,  545,  545,
      545,  545,  545,  545,  545,  545,  545,  545,  545, 1128,
      545, 1128,  545,  545,  545,  545,  545,  545,  545,  548,
     1128, 1128,  548, 1128, 1128, 1128,  548, 1128,  548,  548,
      548, 1128, 1128, 1128,  548,  550,  550, 1128,  550,  550,
      550,  550,  550,  550,  550,  550,  550,  550, 1128,  550,
      550,  550,  550,  550,  550,  550, 1128,  550,  550,  550,

      550,  550,  550,  550,  553,  553, 1128,  553,  553,  553,
      553,  553,  553,  553, 1128,  553,  553,  553,  553,  553,
      553,  553,  553, 1128,  553, 1128,  553,  553,  553,  553,
      553,  553,  553,  556, 1128,  556,  556,  556, 1128, 1128,
      556, 1128,  556,  556,  556, 1128, 1128, 1128,  556,  558,
      558, 1128,  558,  558,  558,  558,  558,  558,  558,  558,
      558,  558,  558,  558,  558,  558,  558,  558,  558,  558,
     1128,  558,  558,  558,  558,  558,  558,  558,  317,  317,
     1128, 1128, 1128, 1128, 1128, 1128, 1128, 1128, 1128, 1128,
      317,  317,  317,  317,  317,  317,  317, 1128,  317,  317,

      292,  292, 1128,  292,  292,  292,  292,  292,  292,  292,
      292,  292,  292,  292,  292,  292,  292,  292,  292,  292,
      292,  292,  292,  292,  292,  292,  292,  292,  292,  295,
     1128,  295,  295,  295, 1128, 1128, 1128,  295,  562,  562,
     1128, 1128,  562, 1128,  562,  562,  562, 1128, 1128, 1128,
      562,  296, 1128,  296,  296, 1128,  296, 1128, 1128,  296,
      296, 1128,  296,  296,  296,  564, 1128, 1128,  564, 1128,
     1128, 1128,  564, 1128,  564,  564,  564,  570, 1128, 1128,
      570, 1128,  570,  570,  570,  570,  570,  570,  570,  570,
      570,  570,  570,  570,  570,  570,  570,  570,  570,  570,

      570,  570,  570,  570,  570,  570,  586, 1128,  586,  586,
      586, 1128, 1128,  586,  328, 1128,  328,  328, 1128,  328,
     1128, 1128,  328,  328, 1128,  328,  328,  328,  329, 1128,
     1128,  329, 1128, 1128, 1128, 1128, 1128, 1128, 1128, 1128,
     1128, 1128, 1128, 1128, 1128, 1128, 1128,  329,  329,  329,
      329,  329,  352,  352, 1128,  352,  352,  352,  352,  352,
      352,  352,  352,  352,  352,  352,  352,  352,  352,  352,
      352,  352,  352,  352,  352,  352,  352,  352,  352,  352,
      352,  354, 1128,  354,  354,  354,  354,  354, 1128, 1128,
      354,  354,  354,  354,  354, 1128, 1128, 1128,  354,  616,

     1128,  616, 1128,  616,  616,  616, 1128, 1128,  616,  616,
      616,  616,  616, 1128, 1128, 1128,  616,  360,  360,  360,
      360,  360,  360,  360,  360,  360,  360,  360,  360,  360,
      360,  360,  360,  360,  360,  360,  360,  360,  360,  360,
      360,  360,  360,  360,  360,  360,  364, 1128,  364,  364,
     1128, 1128,  364, 1128,  364,  364,  364, 1128, 1128, 1128,
      364,  362, 1128, 1128, 1128, 1128, 1128, 1128, 1128, 1128,
     1128, 1128, 1128, 1128,  362, 1128,  362,  362,  362, 1128,
     1128, 1128,  362,  373,  373,  373,  373, 1128, 1128,  373,
     1128, 1128, 1128, 1128, 1128, 1128,  373, 1128, 1128,  373,

     1128, 1128,  373, 1128,  373,  373,  373, 1128, 1128,  373,
      373,  376,  376,  376,  376, 1128, 1128, 1128, 1128, 1128,
     1128, 1128, 1128, 1128,  376, 1128,  376,  376, 1128, 1128,
      376, 1128,  376,  376,  376, 1128, 1128, 1128,  376,  382,
      382,  382,  382, 1128, 1128,  382, 1128, 1128, 1128, 1128,
     1128, 1128, 1128, 1128, 1128, 1128, 1128, 1128,  382, 1128,
      382,  382,  382, 1128, 1128, 1128,  382,  622, 1128, 1128,
     1128,  622, 1128,  622,  622,  622, 1128, 1128, 1128,  622,
      383,  383, 1128,  383,  383,  383,  383,  383,  383,  383,
      383,  383,  383,  383,  383,  383,  383,  383,  383,  383,

      383,  383,  383,  383,  383,  383,  383,  383,  383,  385,
     1128,  385,  385,  385,  385,  385, 1128, 1128,  385,  385,
      385,  385,  385, 1128, 1128, 1128,  385,  623, 1128,  623,
     1128,  623,  623,  623, 1128, 1128,  623,  623,  623,  623,
      623, 1128, 1128, 1128,  623,  391,  391, 1128,  391,  391,
      391,  391,  391,  391,  391,  391,  391,  391,  391,  391,
      391,  391,  391,  391,  391,  391,  391,  391,  391,  391,
      391,  391,  391,  391,  393,  393, 1128,  393,  393,  393,
      393,  393,  393,  393,  393,  393,  393,  393,  393,  393,
      393,  393,  393,  393,  393,  393,  393,  393,  393,  393,

      393,  393,  393,  397, 1128, 1128, 1128, 1128, 1128,  397,
     1128,  397,  397,  397,  397,  397,  397, 1128,  397,  397,
      397,  397,  397, 1128, 1128, 1128,  397,  628, 1128,  628,
     1128,  628,  628,  628, 1128, 1128,  628,  628,  628,  628,
      628, 1128, 1128, 1128,  628,  408,  408,  408,  408, 1128,
     1128,  408, 1128, 1128, 1128, 1128, 1128, 1128,  408, 1128,
     1128,  408, 1128, 1128,  408, 1128,  408,  408,  408, 1128,
     1128,  408,  408,  413,  413,  413,  413, 1128, 1128, 1128,
      413, 1128, 1128, 1128, 1128, 1128,  413, 1128,  413,  413,
     1128, 1128,  413, 1128,  413,  413,  413, 1128, 1128, 1128,

      413,  416,  416,  416,  416, 1128, 1128,  416, 1128, 1128,
     1128, 1128, 1128, 1128, 1128, 1128, 1128, 1128, 1128, 1128,
      416, 1128,  416,  416,  416, 1128, 1128, 1128,  416,  631,
      631,  631,  631,  631,  631,  631,  631,  631, 1128,  631,
      631,  631,  631,  631,  631,  631,  631,  631,  631,  631,
      631,  631,  631,  631,  631,  631,  631,  631,  633, 1128,
     1128,  633, 1128, 1128, 1128,  633, 1128, 1128, 1128, 1128,
     1128, 1128, 1128,  633, 1128, 1128, 1128,  633, 1128,  633,
      633,  633, 1128, 1128, 1128,  633,  417, 1128, 1128,  417,
     1128, 1128, 1128,  417, 1128,  417,  417,  417, 1128, 1128,

     1128,  417,  421,  421, 1128,  421,  421,  421,  421,  421,
      421,  421,  421,  421,  421,  421,  421,  421,  421,  421,
      421,  421,  421,  421,  421,  421,  421,  421,  421,  421,
      421,  426,  426, 1128,  426,  426,  426,  426,  426,  426,
      426,  426,  426,  426,  426,  426,  426,  426,  426,  426,
      426,  426,  426,  426,  426,  426,  426,  426,  426,  426,
      431,  431, 1128,  431,  431,  431,  431,  431,  431,  431,
      431,  431,  431,  431,  431,  431,  431,  431,  431,  431,
      431,  431,  431,  431,  431,  431,  431,  431,  431,  433,
     1128,  433,  433,  433,  433,  433, 1128, 1128,  433,  433,

      433,  433,  433, 1128, 1128, 1128,  433,  637, 1128,  637,
     1128,  637,  637,  637, 1128, 1128,  637,  637,  637,  637,
      637, 1128, 1128, 1128,  637,  444,  444,  444,  444, 1128,
     1128,  444, 1128, 1128, 1128, 1128, 1128, 1128, 1128, 1128,
      444,  444, 1128, 1128,  444, 1128,  444,  444,  444, 1128,
     1128, 1128,  444,  640, 1128,  640,  640,  640, 1128, 1128,
     1128,  640,  643,  643,  643,  643, 1128, 1128,  643, 1128,
     1128, 1128, 1128, 1128, 1128, 1128, 1128,  643,  643, 1128,
     1128,  643, 1128,  643,  643,  643, 1128, 1128, 1128,  643,
      452,  452,  452,  452, 1128, 1128,  452, 1128, 1128, 1128,

     1128, 1128, 1128,  452, 1128, 1128,  452, 1128, 1128,  452,
     1128,  452,  452,  452, 1128, 1128,  452,  452,  455,  455,
      455,  455, 1128, 1128, 1128, 1128, 1128, 1128, 1128, 1128,
     1128,  455, 1128,  455,  455, 1128, 1128,  455, 1128,  455,
      455,  455, 1128, 1128, 1128,  455,  461,  461,  461,  461,
     1128, 1128,  461, 1128, 1128, 1128, 1128, 1128, 1128, 1128,
     1128, 1128, 1128, 1128, 1128,  461, 1128,  461,  461,  461,
     1128, 1128, 1128,  461,  646, 1128, 1128, 1128,  646, 1128,
      646,  646,  646, 1128, 1128, 1128,  646,  464, 1128,  464,
     1128, 1128, 1128,  464, 1128,  464,  464,  464, 1128, 1128,

     1128,  464,  648, 1128, 1128, 1128, 1128, 1128, 1128, 1128,
     1128, 1128, 1128, 1128, 1128,  648, 1128,  648,  648,  648,
     1128, 1128, 1128,  648,  468,  468, 1128,  468, 1128, 1128,
     1128,  468, 1128,  468,  468,  468, 1128, 1128, 1128,  468,
      473,  473, 1128,  473,  473,  473,  473,  473,  473,  473,
     1128,  473,  473,  473,  473,  473,  473,  473,  473,  473,
      473, 1128,  473,  473,  473,  473,  473,  473,  473,  477,
     1128, 1128,  477, 1128, 1128, 1128,  477, 1128,  477,  477,
      477, 1128, 1128, 1128,  477,  479,  479,  479,  479,  479,
      479,  479,  479,  479,  479,  479,  479,  479,  479,  479,

      479,  479,  479,  479, 1128,  479,  479,  479,  479,  479,
      479,  479,  479,  479,  481,  481, 1128,  481,  481,  481,
      481,  481,  481,  481,  481,  481,  481,  481,  481,  481,
      481,  481,  481, 1128,  481,  481,  481,  481,  481,  481,
      481,  481,  481,  655, 1128, 1128, 1128, 1128, 1128, 1128,
     1128, 1128, 1128, 1128, 1128, 1128,  655, 1128,  655,  655,
      655, 1128, 1128, 1128,  655,  488, 1128, 1128,  488, 1128,
     1128, 1128,  488, 1128,  488,  488,  488, 1128, 1128, 1128,
      488,  492,  492, 1128,  492,  492,  492,  492,  492,  492,
      492,  492,  492,  492,  492,  492,  492,  492,  492,  492,

      492,  492,  492,  492,  492,  492,  492,  492,  492,  492,
      495,  495, 1128,  495, 1128,  495,  495,  495,  495,  495,
     1128,  495,  495,  495,  495, 1128,  495,  495,  495, 1128,
      495, 1128,  495,  495,  495,  495,  495,  495,  495,  503,
     1128, 1128,  503, 1128, 1128, 1128,  503, 1128,  503,  503,
      503, 1128, 1128, 1128,  503,  511,  511, 1128,  511, 1128,
      511,  511,  511,  511,  511,  511,  511,  511,  511,  511,
      511,  511,  511,  511, 1128,  511, 1128,  511,  511,  511,
      511,  511,  511,  511,  515,  515, 1128,  515, 1128,  515,
      515,  515,  515,  515,  515,  515,  515,  515,  515,  515,

      515,  515,  515, 1128,  515, 1128,  515,  515,  515,  515,
      515,  515,  515,  524, 1128, 1128,  524, 1128, 1128, 1128,
      524, 1128,  524,  524,  524, 1128, 1128, 1128,  524,  528,
      528, 1128,  528,  528,  528,  528,  528, 1128, 1128,  528,
      528,  528,  528,  528,  528,  528,  528,  528, 1128,  528,
     1128,  528,  528,  528,  528,  528,  528,  528,  537, 1128,
      537,  537, 1128, 1128,  537, 1128,  537,  537,  537, 1128,
     1128, 1128,  537,  535, 1128, 1128, 1128, 1128, 1128, 1128,
     1128, 1128, 1128, 1128, 1128, 1128,  535, 1128,  535,  535,
      535, 1128, 1128, 1128,  535,  542, 1128,  542,  542, 1128,

     1128,  542, 1128,  542,  542,  542, 1128, 1128, 1128,  542,
      540, 1128, 1128, 1128, 1128, 1128, 1128, 1128, 1128, 1128,
     1128, 1128, 1128,  540, 1128,  540,  540,  540, 1128, 1128,
     1128,  540,  545,  545, 1128,  545,  545,  545,  545,  545,
      545,  545,  545,  545,  545,  545,  545,  545,  545,  545,
      545, 1128,  545, 1128,  545,  545,  545,  545,  545,  545,
      545,  548, 1128, 1128,  548, 1128, 1128, 1128,  548, 1128,
      548,  548,  548, 1128, 1128, 1128,  548,  550,  550, 1128,
      550,  550,  550,  550,  550,  550,  550,  550,  550,  550,
     1128,  550,  550,  550,  550,  550,  550,  550, 1128,  550,

      550,  550,  550,  550,  550,  550,  553,  553, 1128,  553,
      553,  553,  553,  553,  553,  553, 1128,  553,  553,  553,
      553,  553,  553,  553,  553, 1128,  553, 1128,  553,  553,
      553,  553,  553,  553,  553,  556, 1128,  556,  556,  556,
     1128, 1128,  556, 1128,  556,  556,  556, 1128, 1128, 1128,
      556,  558,  558, 1128,  558,  558,  558,  558,  558,  558,
      558,  558,  558,  558,  558,  558,  558,  558,  558,  558,
      558,  558, 1128,  558,  558,  558,  558,  558,  558,  558,
      562,  562, 1128, 1128,  562, 1128,  562,  562,  562, 1128,
     1128, 1128,  562,  695,  695, 1128,  695,  695,  695,  695,

     1128,  695,  695,  695,  695,  695,  695,  695,  695,  695,
      695,  695,  695,  695,  695,  695,  695,  695,  695,  695,
      695,  695,  564,  564, 1128,  564, 1128, 1128, 1128,  564,
     1128,  564,  564,  564,  296, 1128,  296,  296, 1128,  296,
     1128, 1128,  296,  296, 1128,  296,  296,  296,  570, 1128,
     1128,  570, 1128,  570,  570,  570,  570,  570,  570,  570,
      570,  570,  570,  570,  570,  570,  570,  570,  570,  570,
      570,  570,  570,  570,  570,  570,  570,  703,  703, 1128,
      703,  703,  703,  703,  703,  703,  703,  703,  703,  703,
      703,  703,  703,  703,  703,  703,  703,  703,  703,  703,

      703,  703,  703,  703,  703,  703,  586, 1128, 1128,  586,
     1128, 1128, 1128, 1128, 1128, 1128, 1128, 1128, 1128, 1128,
     1128, 1128, 1128, 1128, 1128,  586, 1128,  586,  586,  586,
      317, 1128, 1128,  317, 1128, 1128, 1128, 1128, 1128, 1128,
     1128, 1128, 1128, 1128, 1128, 1128, 1128, 1128, 1128,  317,
     1128,  317,  317,  317,  716,  716, 1128,  716,  716,  716,
      716,  716,  716,  716,  716,  716,  716,  716,  716,  716,
      716,  716,  716,  716,  716,  716,  716,  716,  716,  716,
     1128,  716,  716,  329, 1128, 1128,  329, 1128, 1128, 1128,
     1128, 1128, 1128, 1128, 1128, 1128, 1128, 1128, 1128, 1128,

     1128, 1128,  329,  329,  329,  329,  329,  616, 1128,  616,
      616,  616,  616,  616, 1128, 1128,  616,  616,  616,  616,
      616, 1128, 1128, 1128,  616,  354, 1128,  354,  354,  354,
      354,  354, 1128, 1128,  354,  354,  354,  354,  354, 1128,
     1128, 1128,  354,  362, 1128,  362,  362,  362, 1128, 1128,
     1128,  362,  622, 1128, 1128, 1128,  622, 1128,  622,  622,
      622, 1128, 1128, 1128,  622,  623, 1128,  623,  623,  623,
      623,  623, 1128, 1128,  623,  623,  623,  623,  623, 1128,
     1128, 1128,  623,  385, 1128,  385,  385,  385,  385,  385,
     1128, 1128,  385,  385,  385,  385,  385, 1128, 1128, 1128,

      385,  735,  735, 1128,  735,  735,  735,  735,  735,  735,
      735,  735,  735,  735,  735,  735,  735,  735,  735,  735,
      735,  735,  735,  735,  735,  735,  735,  735,  735,  735,
      628, 1128, 1128, 1128, 1128, 1128,  628, 1128,  628,  628,
      628,  628,  628,  628, 1128,  628,  628,  628,  628,  628,
     1128, 1128, 1128,  628,  397, 1128, 1128, 1128, 1128, 1128,
      397, 1128,  397,  397,  397,  397,  397,  397, 1128,  397,
      397,  397,  397,  397, 1128, 1128, 1128,  397,  631,  631,
      631,  631,  631,  631,  631,  631,  631,  631,  631,  631,
      631,  631,  631,  631,  631,  631,  631,  631,  631,  631,

      631,  631,  631,  631,  631,  631,  631,  633, 1128, 1128,
      633, 1128, 1128, 1128,  633, 1128, 1128, 1128, 1128, 1128,
     1128, 1128,  633, 1128, 1128, 1128,  633, 1128,  633,  633,
      633, 1128, 1128, 1128,  633,  637, 1128,  637,  637,  637,
      637,  637, 1128, 1128,  637,  637,  637,  637,  637, 1128,
     1128, 1128,  637,  433, 1128,  433,  433,  433,  433,  433,
     1128, 1128,  433,  433,  433,  433,  433, 1128, 1128, 1128,
      433,  745,  745,  745,  745, 1128, 1128,  745, 1128, 1128,
     1128, 1128, 1128, 1128, 1128, 1128,  745,  745, 1128, 1128,
      745, 1128,  745,  745,  745, 1128, 1128, 1128,  745,  640,

      640,  640,  640, 1128, 1128,  640, 1128, 1128, 1128, 1128,
     1128, 1128, 1128, 1128, 1128,  640, 1128, 1128,  640, 1128,
      640,  640,  640, 1128, 1128, 1128,  640,  643,  643,  643,
      643, 1128, 1128,  643, 1128, 1128, 1128, 1128, 1128, 1128,
     1128, 1128,  643,  643, 1128, 1128,  643, 1128,  643,  643,
      643, 1128, 1128, 1128,  643,  646, 1128, 1128, 1128,  646,
     1128,  646,  646,  646, 1128, 1128, 1128,  646,  648, 1128,
      648,  648,  648, 1128, 1128, 1128,  648,  749, 1128,  749,
     1128, 1128, 1128,  749, 1128,  749,  749,  749, 1128, 1128,
     1128,  749,  655, 1128,  655,  655,  655, 1128, 1128, 1128,

      655,  755, 1128, 1128, 1128,  755, 1128,  755,  755,  755,
     1128, 1128, 1128,  755,  766,  766,  766,  766,  766,  766,
      766,  766,  766,  766,  766,  766,  766,  766,  766,  766,
     1128,  766,  766,  766, 1128,  766, 1128, 1128,  766,  766,
      766,  766,  766,  535, 1128,  535,  535,  535, 1128, 1128,
     1128,  535,  540, 1128,  540,  540,  540, 1128, 1128, 1128,
      540,  695,  695, 1128,  695,  695,  695,  695,  695,  695,
      695,  695,  695,  695,  695,  695,  695,  695,  695,  695,
      695,  695,  695,  695,  695,  695,  695,  695,  695,  695,
      790, 1128, 1128,  790, 1128, 1128, 1128,  790, 1128,  790,

      790,  790,  302, 1128,  302, 1128,  302,  302, 1128,  302,
     1128, 1128,  302,  302, 1128,  302,  302,  302,  703,  703,
     1128,  703,  703,  703,  703,  703,  703,  703,  703,  703,
      703,  703,  703,  703,  703,  703,  703,  703,  703,  703,
      703,  703,  703,  703,  703,  703,  703,  317, 1128, 1128,
      317, 1128, 1128, 1128, 1128, 1128, 1128, 1128, 1128, 1128,
     1128, 1128, 1128, 1128, 1128, 1128,  317, 1128,  317,  317,
      317,  716,  716, 1128,  716,  716,  716,  716,  716,  716,
      716,  716,  716,  716,  716,  716,  716,  716,  716,  716,
      716,  716,  716,  716,  716,  716,  716,  716,  716,  716,

      720,  720,  720,  720,  720,  329, 1128, 1128,  329, 1128,
     1128, 1128, 1128, 1128, 1128, 1128, 1128, 1128, 1128, 1128,
     1128, 1128, 1128, 1128,  329,  329,  329,  329,  329,  296,
      296, 1128,  296, 1128, 1128, 1128, 1128, 1128, 1128,  296,
     1128,  296,  296, 1128,  296,  296, 1128,  296,  296, 1128,
      296,  296,  296,  296,  354, 1128,  354,  354,  354,  354,
      354, 1128, 1128,  354,  354,  354,  354,  354, 1128, 1128,
     1128,  354,  385, 1128,  385,  385,  385,  385,  385, 1128,
     1128,  385,  385,  385,  385,  385, 1128, 1128, 1128,  385,
      735,  735, 1128,  735,  735,  735,  735,  735,  735,  735,

      735,  735,  735,  735,  735,  735,  735,  735,  735,  735,
      735,  735,  735,  735,  735,  735,  735,  735,  735,  397,
     1128, 1128, 1128, 1128, 1128,  397, 1128,  397,  397,  397,
      397,  397,  397, 1128,  397,  397,  397,  397,  397, 1128,
     1128, 1128,  397,  433, 1128,  433,  433,  433,  433,  433,
     1128, 1128,  433,  433,  433,  433,  433, 1128, 1128, 1128,
      433,  822, 1128,  822,  822,  822, 1128, 1128, 1128,  822,
      745,  745,  745,  745, 1128, 1128,  745, 1128, 1128, 1128,
     1128, 1128, 1128, 1128, 1128,  745,  745, 1128, 1128,  745,
     1128,  745,  745,  745, 1128, 1128, 1128,  745,  640,  640,

      640,  640, 1128, 1128,  640, 1128, 1128, 1128, 1128, 1128,
     1128, 1128, 1128, 1128,  640, 1128, 1128,  640, 1128,  640,
      640,  640, 1128, 1128, 1128,  640,  867,  867, 1128,  867,
     1128, 1128, 1128,  867, 1128,  867,  867,  867,  871,  871,
     1128,  871,  871,  871,  871,  871,  871,  871,  871,  871,
      871,  871,  871,  871,  871,  871,  871,  871,  871,  871,
      871,  871,  871,  871,  871,  871,  871,  801,  801,  801,
      801,  801,  801,  801,  801,  801,  801,  801,  801,  801,
      801,  801,  801,  801,  801,  801,  801, 1128,  801, 1128,
     1128, 1128,  801,  801,  801,  801,  893,  893,  893,  893,

     1128, 1128,  893, 1128, 1128, 1128, 1128, 1128, 1128, 1128,
     1128,  893,  893, 1128, 1128,  893, 1128,  893,  893,  893,
     1128, 1128, 1128,  893,  917,  917,  917,  917,  917,  917,
      917,  917,  917,  917,  917,  917,  917,  917,  917,  917,
     1128,  917,  917,  917, 1128,  917, 1128,  917, 1128,  917,
      917,  917,  917,  984,  984,  984,  984,  984,  984,  984,
      984,  984,  984,  984,  984,  984,  984,  984,  984, 1128,
      984,  984,  984, 1128,  984, 1128, 1128, 1128,  984,  984,
      984,  984,  985,  985,  985,  985,  985,  985,  985,  985,
      985,  985,  985,  985,  985,  985,  985,  985, 1128,  985,

      985,  985, 1128,  985, 1128, 1128, 1128,  985,  985,  985,
      985, 1035, 1035, 1035, 1035, 1035, 1035, 1035, 1035, 1035,
     1035, 1035, 1035, 1035, 1035, 1035, 1035, 1128, 1035, 1035,
     1035, 1128, 1035, 1128, 1128, 1128, 1035, 1035, 1035, 1035,
     1045, 1045, 1045, 1045, 1045, 1045, 1045, 1045, 1045, 1045,
     1045, 1045, 1045, 1045, 1045, 1045, 1128, 1045, 1045, 1045,
     1128, 1045, 1128, 1128, 1128, 1045, 1045, 1045, 1045,   83,
     1128, 1128, 1128, 1128, 1128, 1128, 1128, 1128, 1128, 1128,
     1128, 1128, 1128, 1128, 1128, 1128, 1128, 1128, 1128, 1128,
     1128, 1128, 1128, 1128, 1128, 1128, 1128, 1128, 1128, 1128,

     1128, 1128, 1128, 1128, 1128, 1128, 1128, 1128, 1128, 1128,
     1128, 1128, 1128, 1128, 1128, 1128, 1128, 1128, 1128, 1128,
     1128, 1128, 1128, 1128, 1128, 1128, 1128, 1128, 1128, 1128,
     1128, 1128, 1128, 1128, 1128, 1128, 1128, 1128, 1128, 1128
    } ;

static yyconst flex_int16_t yy_chk[8741] =
    {   0,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        4,   21,   22,    4,   23,   21,   22,   47,   23,  278,
        4,    4,   24,    4,    4,   35,   24,    4,    4,    4,
       36,   48,   39,   40,   35,   43,   43,   91,   43,   36,

       43,   39,   40,  115,   98,  278,   91,   98,  115,   21,
       22, 1122,   23,   39,   40,   47,   44,   44,  229,   44,
       24,   44,  229,   35,   51,   51,   57,   51,   36,   48,
       39,   40,   58,   63,   43,    4,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,   64,    5,
       81,    5,    5,   75,   76,   44,    5,    5,    5,    5,
       45,   69,   45,   51,   57,   75,   76,  214,  255,   45,
       58,   63,  214,  255,   45,    5,    5,    5,  260,  306,
      298,   45,   69,  260,   52,   52,   64,   52,   81,  298,
      303,   75,   76,  303,  338,   82, 1118,  338,   45,   69,

      306,    5,    5,    5,    5,    6,    6,    6,    6,    6,
        6,    6,    6,    6,    6,    6,    6,   53,    6,   53,
        6,    6,   46,   52,   46,    6,    6,    6,    6,   70,
       54,   46,   54,   82,   99, 1089,   46,   99,   53,  118,
      118,  118,  118,   46,    6,    6,    6, 1115, 1089,  204,
       70,   54,  204,  118,  204,   53,   99,  230,  118, 1111,
       46,  102,  230,  102,  102,  102,  230,   70,   54,  102,
        6,    6,    6,    6,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,

        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,

       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   55,   13,   55,   13,
       13,   56,  311,   56,   13,   13,   13,   13,   61,   71,
       72,  392,  519,  107,  107,   61,   61,   55,  107,  323,
      305,  311,   56,   13,   13,   13,  519,  392,  323,   61,
       71,   72,   87,   87,   55,   87, 1108, 1107,  107,   56,
      108,  108,  305,  305,  305,  108,   61,   71,   72,   13,
       13,   13,   13,   14,   14,   14,   14,   14,   14,   14,
       14,   14,   14,   14,   14,  108,   14,  362,   14,   14,

       62,   87,  362,   14,   14,   14,   14,   62,   62,   77,
      125,  125,  125,  125,  129,  129,  316,  125,   77,  129,
      849,   62,   14,   14,   14,  308,   95,  849,   95,   95,
       77,   95,   95,   95, 1106, 1105,  316,   95,   62,  129,
      223,  223,   86,  223,  547,   86,  308,   77,   14,   14,
       14,   14,   15,   15,   15,   15,   15,   15,   15,   15,
       15,   15,   15,   15,   86,   15,  364,   15,   15,   78,
      547,  364,   15,   15,   15,   15, 1101,  286,   78,  223,
      286,   86,   92,  535,   92,   92,   92,   92,  535, 1100,
       78,   15,   15,   15,  309,   92,  537,  116,  116,  286,

      116,  537,  195,  147,  147,  147,  147,   78,  130,  130,
      147,  195,   92,  130, 1098,  309,  286,   15,   15,   15,
       15,   16,   16,   16,   16,   16,   16,   16,   16,   16,
       16,   16,   16,  130,   16,  307,   16,   16,  116, 1097,
      195,   16,   16,   16,   16,  101,  101, 1096,  101,  119,
      119,  119,  119,  307,  101,  582,  101,  101,  101,  101,
       16,   16,   16,  119,  512,  551,  512,  101,  119,  179,
      179,  179,  179,  234,  582,  307,  179,  234,  340,  340,
     1095,  340,  551,  234,  101,  234,   16,   16,   16,   16,
       17,   17,   17,   17,   17,   17,   17,   17,   17,   17,

       17,   17,   17,   17,   17,   17,   17,   17,   17,   17,
       17,   17,   17,   17,   17,   17,   17,   17,   17,   17,
       17,   17,   17,   17,   17,   17,   17,   17,   17,   17,
       17,   17,   17,   17,   17,   17,   17,   17,   17,   17,
       17,   17,   17,   17,   17,   17,   17,   17,   17,   17,
       17,   17,   17,   17,   17,   17,   17,   17,   17,   17,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,

       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
       25,   25,  540,   25,  312,   25,   25,  540,  578,  235,
       25,   25,   25,   25,  235, 1071,  542, 1071,  235,  100,
      103,  542,  100,  103,  235,  312,  235, 1094,  578,   25,
       25,   25,  100,  103,  123,  123,  123,  123,  100,  103,
      853,  100,  124,  124, 1093,  124,  163,  163,  123,  151,
      151,  163,  151,  123,  853,   25,   25,   25,   25,   26,

       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,  163,   26,  329,   26,   26,  329,  136, 1092,   26,
       26,   26,   26,  124,  100,  103,  136,  136,  574,  343,
      151,  136,  343,  136,  141,  141,  141,  141,   26,   26,
       26,  142,  142,  142,  142,  626,  346,  346,  141,  346,
      574,  136,  329,  141,  341,  142,  341,  341,  341,  586,
      142,  626,  586, 1084,   26,   26,   26,   26,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,

       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   29,   29,
       29,   29,   29,   29,   29,   29,   29,   29,   29,   29,
       29,   29,   29,   29,   29,   29,   29,   29,   29,   29,
       29,   29,   29,   29,   29,   29,   29,   29,   29,   29,
       29,   29,   29,   29,   29,   29,   29,   29,   29,   29,
       29,   29,   29,   29,   29,   29,   29,   29,   29,   29,
       29,   29,   29,   29,   29,   29,   29,   29,   29,   29,

       29,   29,   29,   29,   29,   29,   29,   29,   31,   31,
       31,   31,   31,   31,   31,   31,   31,   31,   31,   31,
       31,   31,   31,   31,   31,   31,   31,   31,   31,   31,
       31,   31,   31,   31,   31,   31,   31,   31,   31,   31,
       31,   31,   31,   31,   31,   31,   31,   31,   31,   31,
       31,   31,   31,   31,   31,   31,   31,   31,   31,   31,
       31,   31,   31,   31,   31,   31,   31,   31,   31,   31,
       31,   31,   31,   31,   31,   31,   31,   31,   33,   33,
       33,   33,   33,   33,   33,   33,   33,   33,   33,   33,
       33,   33,   33,   33,   33,   33,   33,   33,   33,   33,

       33,   33,   33,   33,   33,   33,   33,   33,   33,   33,
       33,   33,   33,   33,   33,   33,   33,   33,   33,   33,
       33,   33,   33,   33,   33,   33,   33,   33,   33,   33,
       33,   33,   33,   33,   33,   33,   33,   33,   33,   33,
       33,   33,   33,   33,   33,   33,   33,   33,   37,   37,
       37,   37,   37,   37,   37,   37,   37,   37,   37,   37,
       37,   37,   37,   37,   37,   37,   37,   37,   37,   37,
       37,   37,   37,   37,   37,   37,   37,   37,   37,   37,
       37,   37,   37,   37,   37,   37,   37,   37,   37,   37,
       37,   37,   37,   37,   37,   37,   37,   37,   37,   37,

       37,   37,   37,   37,   37,   37,   37,   37,   37,   37,
       37,   37,   37,   37,   37,   37,   37,   37,   41,   41,
       41,   41,   41,   41,   41,   41,   41,   41,   41,   41,
       41,   41,   41,   41,   41,   41,   41,   41,   41,   41,
       41,   41,   41,   41,   41,   41,   41,   41,   41,   41,
       41,   41,   41,   41,   41,   41,   41,   41,   41,   41,
       41,   41,   41,   41,   41,   41,   41,   41,   41,   41,
       41,   41,   41,   41,   41,   41,   41,   41,   41,   41,
       41,   41,   41,   41,   41,   41,   41,   41,   49,   49,
       49,   49,   49,   49,   49,   49,   49,   49,   49,   49,

       49,   49,   49,   49,   49,   49,   49,   49,   49,   49,
       49,   49,   49,   49,   49,   49,   49,   49,   49,   49,
       49,   49,   49,   49,   49,   49,   49,   49,   49,   49,
       49,   49,   49,   49,   49,   49,   49,   49,   49,   49,
       49,   49,   49,   49,   49,   49,   49,   49,   49,   49,
       49,   49,   49,   49,   49,   49,   49,   49,   59,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,

       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   65,   65,
       65,   65,   65,   65,   65,   65,   65,   65,   65,   65,
       65,   65,   65,   65,   65,   65,   65,   65,   65,   65,
       65,   65,   65,   65,   65,   65,   65,   65,   65,   65,
       65,   65,   65,   65,   65,   65,   65,   65,   65,   65,
       65,   65,   65,   65,   65,   65,   65,   65,   65,   65,
       65,   65,   65,   65,   65,   65,   65,   65,   65,   65,
       65,   65,   65,   65,   65,   65,   65,   65,   67,   67,

       67,   67,   67,   67,   67,   67,   67,   67,   67,   67,
       67,   67,   67,   67,   67,   67,   67,   67,   67,   67,
       67,   67,   67,   67,   67,   67,   67,   67,   67,   67,
       67,   67,   67,   67,   67,   67,   67,   67,   67,   67,
       67,   67,   67,   67,   67,   67,   67,   67,   67,   67,
       67,   67,   67,   67,   67,   67,   67,   67,   67,   67,
       67,   67,   67,   67,   67,   67,   67,   67,   73,   73,
       73,   73,   73,   73,   73,   73,   73,   73,   73,   73,
       73,   73,   73,   73,   73,   73,   73,   73,   73,   73,
       73,   73,   73,   73,   73,   73,   73,   73,   73,   73,

       73,   73,   73,   73,   73,   73,   73,   73,   73,   73,
       73,   73,   73,   73,   73,   73,   73,   73,   73,   73,
       73,   73,   73,   73,   73,   73,   73,   73,   73,   73,
       73,   73,   73,   73,   73,   73,   73,   73,   79,   79,
       79,   79,   79,   79,   79,   79,   79,   79,   79,   79,
       79,   79,   79,   79,   79,   79,   79,   79,   79,   79,
       79,   79,   79,   79,   79,   79,   79,   79,   79,   79,
       79,   79,   79,   79,   79,   79,   79,   79,   79,   79,
       79,   79,   79,   79,   79,   79,   79,   79,   79,   79,
       79,   79,   79,   79,   79,   79,   79,   79,   79,   79,

       79,   79,   79,   79,   79,   79,   79,   79,   93,  109,
      109,  355,  109,  289,  289,  355,  289,  132,  132,   93,
      132, 1083,  348,  109,  109,  348,  155,  155,  109,  155,
       93,  132,  132,   93,   93,  355,  132,   93,   93, 1120,
       93,   93,  159,  159,  348,  159, 1120, 1123,  109,   93,
      109, 1123,  289,   93,   93,  322,  132,  583,  132,   93,
       93,   93,   93,   93,   93,   94,   94,  155,  120,  120,
      120,  120,  164,  164, 1081,  120,  583,  164, 1080,   94,
       94,   94,  120,  159,  479,  137,  322,  120, 1079,  121,
      121,  121,  121,  479,  137,  137,  121,  164,   94,  137,

      138,  137,   94,  121,   94,   94,   94,  581,  121,  138,
      138, 1078,  322, 1103,  138, 1077,  138,  589,   94,  137,
      589,   94,  479,   94, 1103,   94,   94,   96,   96,  581,
      146,  146,  146,  146,  138,  120,  290,  290,  146,  290,
      700,   96,   96,   96,  146,  170,  170,  416,  170,  146,
      416,  143,  143,  143,  143,  416,  121,  837,  143,  700,
       96, 1076,   96,  705,   96,  143,   96,   96,   96, 1075,
      143,  178,  178,  837,  178,  290,  140,  140,  693,  140,
       96,  140,  705,   96,  707,   96,  170,   96,   96,   97,
      140,  140,   97,  184,  184,  140,  184,  140,  332,   97,

       97,  332,   97,   97,  798,  707,   97,   97,   97,  693,
     1074,   97,  178,  331, 1065,  140,  331,  140,  143,  144,
      144,  144,  144,  798,  357,  357,  144,  357,   97,  169,
      169,  169,  169,  144,  184,  693,  169,  332,  144,  366,
      366, 1064,  366, 1051,  332,  169,  169,  169,  169, 1125,
      187,  187,  331,  187,   97,  135,  135, 1050,  135,  135,
      135,  135,  135,  135,  135,  135,  135, 1125,  135,  490,
      135,  135,  490,  331,  490,  135,  135,  135,  135,  172,
      172,  172,  172, 1048,  354,  354,  144,  165,  165,  354,
      165,  187, 1113,  172,  135,  135,  135,  598,  172, 1047,

      598,  165,  165,  198,  198,  609,  165, 1113,  609,  354,
      173,  173,  173,  173, 1041, 1040, 1039,  198,  198,  198,
      135,  135,  135,  135,  173, 1038,  165, 1037,  165,  173,
      174,  174,  174,  174, 1036, 1009,  198,  174,  175,  175,
      175,  175,  386,  598,  174,  175,  386,  190,  190,  174,
      190, 1008,  175,  177,  177,  177,  177,  175,  217,  217,
     1007,  217,  221,  221,  198,  221,  386,  177, 1006, 1005,
      238,  238,  177,  238,  242,  242, 1004,  242,  248,  248,
      398,  248,  251,  251,  398,  251, 1003,  310,  190,  328,
      310,  328,  328, 1002,  328,  328,  328,  174,  330,  217,

      328,  330, 1001,  221,  398,  175,  199,  199,  310,  199,
      310,  238,  199,  199,  333,  242,  434,  333,  334,  248,
      434,  334,  310,  251, 1000,  334,  199,  199,  199,  310,
      335,  377,  377,  335,  377,  999,  339,  330,  336,  339,
      434,  336,  998,  615,  310,  199,  615,  199,  342,  339,
      330,  342,  997,  333,  996,  339,  334,  334,  995,  344,
      994,  342,  344,  374,  374,  374,  374,  342,  333,  335,
      374,  993,  344,  199,  287,  287,  335,  336,  344,  992,
      345,  345,  334,  345,  350,  335,  991,  350,  287,  287,
      287,  388,  388,  345,  388,  336,  990,  350,  989,  345,

      987,  339,  345,  350,  986,  982,  351,  287,  349,  351,
      349,  349,  349,  342,  287,  287,  349,  356,  356,  351,
      401,  401,  356,  401,  344,  351,  981,  577,  359,  359,
      577,  980,  287,  359,  287,  287,  288,  288,  579,  385,
      385,  579,  356,  591,  385,  345,  591,  979,  577,  350,
      288,  288,  288,  359,  369,  369,  369,  369,  978,  579,
      370,  370,  370,  370,  385,  977,  359,  370,  369,  288,
      976,  351,  592,  369,  370,  592,  288,  288,  975,  370,
      974,  372,  372,  372,  372,  973,  418,  418,  372,  418,
      423,  423,  971,  423,  288,  372,  288,  288,  301,  591,

      372,  301,  970,  301,  301,  301,  301,  301,  301,  301,
      301,  301,  301,  301,  301,  969,  968,  592,  301,  301,
      301,  301,  373,  373,  373,  373,  967,  370,  375,  375,
      375,  375,  966,  965,  964,  375,  373,  301,  301,  301,
      963,  373,  375,  376,  376,  376,  376,  375,  372,  380,
      380,  380,  380,  962,  960,  959,  380,  376,  428,  428,
      958,  428,  376,  301,  301,  301,  301,  301,  317,  436,
      436,  317,  436,  955,  317,  317,  381,  381,  381,  381,
      387,  387,  954,  381,  397,  387,  390,  390,  317,  317,
      317,  390,  399,  397,  397,  375,  445,  445,  397,  445,

      397,  399,  399,  945,  944,  387,  399,  317,  399,  456,
      456,  390,  456,  943,  404,  404,  404,  404,  397,  942,
      409,  409,  409,  409,  390,  941,  399,  409,  404,  940,
      939,  938,  317,  404,  317,  317,  337,  465,  465,  337,
      465,  414,  414,  414,  414,  937,  337,  337,  414,  337,
      337,  403,  936,  337,  337,  337,  470,  470,  337,  470,
      403,  403,  935,  474,  474,  403,  474,  403,  934,  405,
      405,  405,  405,  933,  932,  337,  405,  407,  407,  407,
      407,  931,  930,  405,  407,  403,  485,  485,  405,  485,
      929,  407,  415,  415,  415,  415,  407,  687,  403,  415,

      687,  337,  393,  393,  928,  393,  393,  393,  393,  393,
      393,  393,  393,  393,  927,  393,  698,  393,  393,  698,
      926,  925,  393,  393,  393,  393,  408,  408,  408,  408,
      433,  433,  435,  435,  408,  433,  405,  435,  923,  921,
      408,  393,  393,  393,  407,  408,  410,  410,  410,  410,
      918,  500,  500,  410,  500,  433,  916,  435,  504,  504,
      410,  504,  915,  521,  521,  410,  521,  393,  393,  393,
      393,  394,  394,  914,  394,  394,  394,  394,  394,  394,
      394,  394,  394,  913,  394,  710,  394,  394,  710,  912,
      911,  394,  394,  394,  394,  411,  411,  411,  411,  453,

      453,  453,  453,  411,  507,  507,  453,  507,  910,  411,
      394,  394,  394,  410,  411,  413,  413,  413,  413,  438,
      438,  909,  908,  413,  438,  525,  525,  907,  525,  413,
      440,  440,  440,  440,  413,  906,  394,  394,  394,  394,
      905,  904,  903,  507,  438,  439,  439,  439,  439,  440,
      902,  901,  439,  442,  442,  442,  442,  438,  900,  899,
      442,  439,  439,  439,  439,  448,  448,  448,  448,  442,
      442,  442,  442,  444,  444,  444,  444,  898,  590,  448,
      444,  590,  529,  529,  448,  529,  896,  895,  894,  444,
      444,  444,  444,  449,  449,  449,  449,  890,  889,  888,

      449,  451,  451,  451,  451,  885,  596,  449,  451,  596,
      532,  532,  449,  532,  884,  451,  452,  452,  452,  452,
      451,  874,  454,  454,  454,  454,  590,  873,  871,  454,
      452,  455,  455,  455,  455,  452,  454,  459,  459,  459,
      459,  454,  870,  869,  459,  455,  460,  460,  460,  460,
      455,  867,  866,  460,  587,  632,  783,  587,  632,  783,
      449,  587,  597,  632,  596,  597,  616,  616,  451,  601,
      603,  616,  601,  603,  865,  602,  604,  605,  602,  604,
      605,  607,  715,  606,  607,  715,  606,  864,  863,  454,
      569,  616,  587,  569,  862,  569,  569,  569,  569,  569,

      569,  569,  569,  569,  569,  569,  569,  597,  601,  603,
      569,  569,  569,  569,  602,  604,  605,  861,  587,  601,
      607,  604,  606,  602,  860,  859,  603,  607,  606,  569,
      569,  569,  715,  608,  608,  605,  608,  610,  858,  610,
      610,  610,  669,  857,  856,  669,  608,  611,  611,  855,
      611,  802,  608,  854,  802,  569,  569,  569,  569,  569,
      611,  613,  613,  852,  613,  851,  611,  633,  614,  614,
      633,  614,  617,  617,  613,  633,  850,  617,  848,  714,
      613,  614,  714,  613,  618,  618,  847,  614,  846,  618,
      623,  623,  845,  844,  843,  623,  669,  617,  608,  624,

      624,  842,  625,  625,  624,  637,  637,  625,  704,  618,
      637,  704,  611,  841,  840,  623,  638,  638,  839,  924,
      618,  638,  924,  838,  624,  836,  613,  625,  717,  704,
      637,  717,  706,  614,  876,  706,  714,  876,  625,  627,
      627,  638,  627,  627,  627,  627,  627,  627,  627,  627,
      627,  835,  627,  706,  627,  627,  628,  834,  833,  627,
      627,  627,  627,  639,  639,  628,  628,  629,  639,  697,
      628,  697,  628,  697,  697,  630,  629,  629,  627,  627,
      627,  629,  697,  629,  630,  630,  832,  717,  639,  630,
      628,  630,  831,  876,  830,  640,  640,  640,  640,  639,

      718,  629,  640,  718,  627,  627,  627,  627,  829,  630,
      828,  640,  640,  640,  640,  641,  641,  641,  641,  827,
      630,  826,  641,  642,  642,  642,  642,  825,  796,  824,
      642,  796,  872, 1049,  641,  872, 1049,  823,  820,  642,
      642,  642,  642,  643,  643,  643,  643,  819, 1099,  796,
      643, 1099,  818,  872, 1110,  718,  815, 1110,  814,  643,
      643,  643,  643,  713,  713,  713,  713,  713,  713,  713,
      713,  713,  713,  713,  713,  713,  713,  713,  713,  713,
      713,  713,  713,  713,  713,  713,  713,  713,  713,  713,
      713,  713,  713,  713,  713,  713,  713,  713,  713,  713,

      713,  713,  713,  713,  713,  713,  713,  713,  713,  713,
      713,  713,  713,  713,  713,  713,  713,  713,  713,  713,
      713,  713,  713,  713,  713,  713,  713,  713,  713,  713,
      713,  713,  713,  719,  721,  805,  719,  721,  746,  746,
      746,  746,  731,  731,  800,  746, 1112,  731,  799, 1112,
     1116,  728,  728, 1116,  728,  795,  791,  746,  791,  794,
      791,  791, 1011,  804,  728, 1011,  804,  731,  806,  791,
      728,  806,  793,  721,  723,  724,  725,  723,  724,  725,
      719,  726,  731, 1119,  726,  790, 1119,  788,  721,  722,
      722,  722,  722,  722,  722,  722,  722,  722,  722,  722,

      722,  722,  722,  722,  722,  722,  722,  722,  722,  722,
      722,  722,  722,  723,  724,  725,  728,  804,  806, 1011,
      726,  727,  734,  734,  727,  724,  787,  734,  722,  722,
      722,  723,  786,  785,  803,  725,  726,  803,  784,  782,
      729,  729,  807,  729,  781,  807,  780,  734,  730,  730,
      779,  730,  778,  729,  722,  722,  722,  722,  722,  729,
      727,  730,  734,  737,  742,  742,  777,  730,  727,  742,
      730, 1087,  737,  737, 1087, 1121,  776,  737, 1121,  737,
      803,  807,  775,  744,  744,  744,  744,  774,  807,  742,
      744,  745,  745,  745,  745,  773,  772,  737,  745,  744,

      744,  744,  744,  809,  742,  729,  809,  745,  745,  745,
      745,  771,  737,  730,  735,  735, 1087,  735,  735,  735,
      735,  735,  735,  735,  735,  735,  769,  735,  811,  735,
      735,  811,  768,  767,  735,  735,  735,  735, 1124,  759,
      759, 1124,  809,  765,  759,  813,  813,  759,  759,  809,
      813,  764,  759,  735,  735,  735,  759,  759,  810,  878,
      763,  810,  878,  875,  762, 1279,  875,  811, 1279, 1279,
      813,  947, 1010,  948,  947, 1010,  948,  813,  811,  735,
      735,  735,  735,  736,  736,  761,  736,  736,  736,  736,
      736,  736,  736,  736,  736,  760,  736,  810,  736,  736,

      758,  757,  756,  736,  736,  736,  736,  875,  754,  753,
      816,  816,  810,  812,  812,  816,  812,  947,  878,  948,
      752,  751,  736,  736,  736,  750,  812,  822,  822,  822,
      822, 1010,  812,  749,  822,  816, 1068,  946, 1102, 1068,
      946, 1102,  816,  822,  822,  822,  822,  748,  736,  736,
      736,  736,  808,  808,  808,  808,  808,  808,  808,  808,
      808,  808,  808,  808,  808,  808,  808,  808,  808,  808,
      808,  808,  808,  808,  808,  808,  821,  821,  812,  946,
     1012,  821, 1068, 1012,  879,  747,  880,  879,  817,  880,
     1102,  808,  808,  808,  741,  740,  881,  817,  817,  881,

      882,  821,  817,  882,  817,  739,  733,  732,  821,  883,
      883,  886,  886,  720,  883,  716,  886,  808,  808,  808,
      808,  808,  817,  879,  709,  880,  708,  879,  703,  817,
      880,  702,  887, 1012,  883,  881,  886,  701,  883,  882,
      886,  887,  887,  695,  891,  891,  887,  949,  887,  891,
      949,  950,  694, 1088,  950,  881, 1088,  692,  691,  882,
      892,  892,  892,  892,  690,  688,  887,  892,  951,  891,
      887,  951,  952,  891,  686,  952,  892,  892,  892,  892,
      893,  893,  893,  893,  953,  953,  949,  893,  685,  953,
      950, 1013, 1013,  950, 1013, 1088,  893,  893,  893,  893,

      956,  956,  681,  957,  949,  956,  679,  951,  677,  953,
      676,  952,  957,  957,  951,  961,  961,  957,  952,  957,
      961, 1014,  675,  674, 1014,  956, 1015,  953, 1016, 1015,
     1013, 1016,  673, 1069, 1017, 1017, 1069,  957, 1021, 1017,
      961, 1020, 1020,  956, 1025, 1025, 1020, 1021, 1021, 1025,
     1070, 1070, 1021, 1070, 1021,  957,  672,  671,  961, 1017,
     1014, 1072,  670,  668, 1072, 1015, 1020, 1016,  667, 1025,
     1073, 1090, 1021, 1073, 1090, 1091, 1104,  666, 1091, 1104,
     1014, 1016, 1114, 1015,  665, 1114,  664, 1069,  663, 1070,
     1127, 1127, 1217, 1127, 1217, 1217, 1217,  662,  661, 1289,

     1072, 1289, 1289, 1289,  660,  659,  658, 1072, 1319, 1073,
     1090, 1319, 1319,  657, 1091, 1104, 1090, 1091,  656,  653,
      652, 1114,  651, 1292, 1073, 1292, 1292, 1292, 1104, 1127,
     1129, 1129, 1129, 1129, 1129, 1129, 1129, 1129, 1129, 1129,
     1129, 1129, 1129, 1129, 1129, 1129, 1129, 1129, 1129, 1129,
     1129, 1129, 1129, 1129, 1129, 1129, 1129, 1129, 1129, 1130,
     1130, 1130, 1130, 1130, 1130, 1130, 1130, 1130, 1130, 1130,
     1130, 1130, 1130, 1130, 1130, 1130, 1130, 1130, 1130, 1130,
     1130, 1130, 1130, 1130, 1130, 1130, 1130, 1130, 1131, 1131,
     1131, 1131, 1131, 1131, 1131, 1131, 1131, 1131, 1131, 1131,

     1131, 1131, 1131, 1131, 1131, 1131, 1131, 1131, 1131, 1131,
     1131, 1131, 1131, 1131, 1131, 1131, 1131, 1132, 1132, 1132,
     1132, 1132, 1132, 1132, 1132, 1132, 1132, 1132, 1132, 1132,
     1132, 1132, 1132, 1132, 1132, 1132, 1132, 1132, 1132, 1132,
     1132, 1132, 1132, 1132, 1132, 1132, 1133, 1133, 1133, 1133,
     1133, 1133, 1133, 1133, 1133, 1133, 1133, 1133, 1133, 1133,
     1133, 1133, 1133, 1133, 1133, 1133, 1133, 1133, 1133, 1133,
     1133, 1133, 1133, 1133, 1133, 1134, 1134, 1134, 1134, 1134,
     1134, 1134, 1134, 1134, 1134, 1134, 1134, 1134, 1134, 1134,
     1134, 1134, 1134, 1134, 1134, 1134, 1134, 1134, 1134, 1134,

     1134, 1134, 1134, 1134, 1135, 1135, 1135, 1135, 1135, 1135,
     1135, 1135, 1135, 1135, 1135, 1135, 1135, 1135, 1135, 1135,
     1135, 1135, 1135, 1135, 1135, 1135, 1135, 1135, 1135, 1135,
     1135, 1135, 1135, 1136, 1136, 1136, 1136, 1136, 1136, 1136,
     1136, 1136, 1136, 1136, 1136, 1136, 1136, 1136, 1136, 1136,
     1136, 1136, 1136, 1136, 1136, 1136, 1136, 1136, 1136, 1136,
     1136, 1136, 1137, 1137, 1137, 1137, 1137, 1137, 1137, 1137,
     1137, 1137, 1137, 1137, 1137, 1137, 1137, 1137, 1137, 1137,
     1137, 1137, 1137, 1137, 1137, 1137, 1137, 1137, 1137, 1137,
     1137, 1138, 1138, 1138, 1138, 1138, 1138, 1138, 1138, 1138,

     1138, 1138, 1138, 1138, 1138, 1138, 1138, 1138, 1138, 1138,
     1138, 1138, 1138, 1138, 1138, 1138, 1138, 1138, 1138, 1138,
     1139, 1139, 1139, 1139, 1139, 1139, 1139, 1139, 1139, 1139,
     1139, 1139, 1139, 1139, 1139, 1139, 1139, 1139, 1139, 1139,
     1139, 1139, 1139, 1139, 1139, 1139, 1139, 1139, 1139, 1140,
     1140, 1140, 1140, 1140, 1140, 1140, 1140, 1140, 1140, 1140,
     1140, 1140, 1140, 1140, 1140, 1140, 1140, 1140, 1140, 1140,
     1140, 1140, 1140, 1140, 1140, 1140, 1140, 1140, 1141, 1141,
     1141, 1141, 1141, 1141, 1141, 1141, 1141, 1141, 1141, 1141,
     1141, 1141, 1141, 1141, 1141, 1141, 1141, 1141, 1141, 1141,

     1141, 1141, 1141, 1141, 1141, 1141, 1141, 1142, 1142, 1142,
     1142, 1142, 1142, 1142, 1142, 1142, 1142, 1142, 1142, 1142,
     1142, 1142, 1142, 1142, 1142, 1142, 1142, 1142, 1142, 1142,
     1142, 1142, 1142, 1142, 1142, 1142, 1143, 1143, 1143, 1143,
     1143, 1143, 1143, 1143, 1143, 1143, 1143, 1143, 1143, 1143,
     1143, 1143, 1143, 1143, 1143, 1143, 1143, 1143, 1143, 1143,
     1143, 1143, 1143, 1143, 1143, 1144, 1144, 1144, 1144, 1144,
     1144, 1144, 1144, 1144, 1144, 1144, 1144, 1144, 1144, 1144,
     1144, 1144, 1144, 1144, 1144, 1144, 1144, 1144, 1144, 1144,
     1144, 1144, 1144, 1144, 1145, 1145, 1145, 1145, 1145, 1145,

     1145, 1145, 1145, 1145, 1145, 1145, 1145, 1145, 1145, 1145,
     1145, 1145, 1145, 1145, 1145, 1145, 1145, 1145, 1145, 1145,
     1145, 1145, 1145, 1146, 1146, 1146, 1146, 1146, 1146, 1146,
     1146, 1146, 1146, 1146, 1146, 1146, 1146, 1146, 1146, 1146,
     1146, 1146, 1146, 1146, 1146, 1146, 1146, 1146, 1146, 1146,
     1146, 1146, 1147, 1147, 1147, 1147, 1147, 1147, 1147, 1147,
     1147, 1147, 1147, 1147, 1147, 1147, 1147, 1147, 1147, 1147,
     1147, 1147, 1147, 1147, 1147, 1147, 1147, 1147, 1147, 1147,
     1147, 1148, 1148, 1148, 1148, 1148, 1148, 1148, 1148, 1148,
     1148, 1148, 1148, 1148, 1148, 1148, 1148, 1148, 1148, 1148,

     1148, 1148, 1148, 1148, 1148, 1148, 1148, 1148, 1148, 1148,
     1149, 1149, 1149, 1149, 1149, 1149, 1149, 1149, 1149, 1149,
     1149, 1149, 1149, 1149, 1149, 1149, 1149, 1149, 1149, 1149,
     1149, 1149, 1149, 1149, 1149, 1149, 1149, 1149, 1149, 1150,
     1150, 1150, 1150, 1150, 1150, 1150, 1150, 1150, 1150, 1150,
     1150, 1150, 1150, 1150, 1150, 1150, 1150, 1150, 1150, 1150,
     1150, 1150, 1150, 1150, 1150, 1150, 1150, 1150, 1151, 1151,
     1151, 1151, 1151, 1151, 1151, 1151, 1151, 1151, 1151, 1151,
     1151, 1151, 1151, 1151, 1151, 1151, 1151, 1151, 1151, 1151,
     1151, 1151, 1151, 1151, 1151, 1151, 1151, 1152, 1152,  650,

     1152, 1152, 1152, 1152, 1152, 1152, 1152, 1152, 1152, 1152,
     1152, 1152, 1152, 1152, 1152, 1152, 1152, 1152, 1152, 1152,
     1152, 1152, 1152, 1152, 1152, 1152, 1153, 1293,  649, 1293,
     1293, 1293, 1324,  648, 1324, 1324, 1324,  645,  644, 1153,
      636, 1153, 1153, 1153,  635,  634,  631, 1153, 1154,  621,
     1154, 1154,  620, 1154,  585,  584, 1154, 1154,  576, 1154,
     1154, 1154, 1155,  575, 1155, 1155, 1155, 1155,  573, 1155,
      571,  570, 1155, 1155, 1155, 1155, 1155, 1155, 1156, 1156,
      568,  565,  564,  562,  561,  560,  559,  557,  555,  552,
     1156, 1156, 1156, 1156, 1156, 1156, 1156,  549, 1156, 1156,

     1157,  546, 1157, 1157,  544, 1157,  543,  541, 1157, 1157,
      539, 1157, 1157, 1157, 1158, 1158,  538,  536,  534,  531,
      527,  523,  520,  518,  517,  516, 1158, 1158, 1158, 1158,
     1158, 1158, 1158,  514, 1158, 1158, 1159, 1159,  513, 1159,
     1159, 1159, 1159, 1159, 1159, 1159, 1159, 1159, 1159, 1159,
     1159, 1159, 1159, 1159, 1159, 1159, 1159, 1159, 1159, 1159,
     1159, 1159, 1159, 1159, 1159, 1160,  510, 1160, 1160, 1160,
     1160, 1160,  509,  506, 1160, 1160, 1160, 1160, 1160,  502,
      499,  498, 1160, 1161, 1161, 1161, 1161, 1161, 1161, 1161,
     1161, 1161, 1161, 1161, 1161, 1161, 1161, 1161, 1161, 1161,

     1161, 1161, 1161, 1161, 1161, 1161, 1161, 1161, 1161, 1161,
     1161, 1161, 1162,  494, 1162, 1162, 1162,  492,  491,  489,
     1162, 1163,  487, 1163, 1163,  484,  482, 1163,  481, 1163,
     1163, 1163,  478,  476,  472, 1163, 1164, 1164, 1164, 1164,
      469,  468, 1164,  467,  464,  463,  462,  458,  450, 1164,
      447,  443, 1164,  431,  430, 1164,  426, 1164, 1164, 1164,
      425,  421, 1164, 1164, 1165, 1165, 1165, 1165,  420,  406,
      400,  395,  391,  383,  379,  371,  368, 1165,  365, 1165,
     1165,  363,  360, 1165,  352, 1165, 1165, 1165,  324,  321,
      320, 1165, 1166, 1166, 1166, 1166,  319,  318, 1166,  314,

      313,  304,  302,  296,  295,  292,  291,  285,  282,  277,
      273, 1166,  272, 1166, 1166, 1166,  269,  265,  264, 1166,
     1167, 1167,  261, 1167, 1167, 1167, 1167, 1167, 1167, 1167,
     1167, 1167, 1167, 1167, 1167, 1167, 1167, 1167, 1167, 1167,
     1167, 1167, 1167, 1167, 1167, 1167, 1167, 1167, 1167, 1168,
      256, 1168, 1168, 1168, 1168, 1168,  225,  213, 1168, 1168,
     1168, 1168, 1168,  212,  211,  207, 1168, 1169, 1169,  206,
     1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169,
     1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169,
     1169, 1169, 1169, 1169, 1169, 1169, 1170,  202,  197,  194,

      186,  183, 1170,  176, 1170, 1170, 1170, 1170, 1170, 1170,
      162, 1170, 1170, 1170, 1170, 1170,  158,  154,  145, 1170,
     1171, 1171, 1171, 1171,  131,  128, 1171,  122,  110,  106,
       90,   89,   88, 1171,   83,    8, 1171,    7,    0, 1171,
        0, 1171, 1171, 1171,    0,    0, 1171, 1171, 1172, 1172,
     1172, 1172,    0,    0,    0, 1172,    0,    0,    0,    0,
        0, 1172,    0, 1172, 1172,    0,    0, 1172,    0, 1172,
     1172, 1172,    0,    0,    0, 1172, 1173, 1173, 1173, 1173,
        0,    0, 1173,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0, 1173,    0, 1173, 1173, 1173,

        0,    0,    0, 1173, 1174,    0,    0, 1174,    0,    0,
        0, 1174,    0, 1174, 1174, 1174,    0,    0,    0, 1174,
     1175, 1175,    0, 1175, 1175, 1175, 1175, 1175, 1175, 1175,
     1175, 1175, 1175, 1175, 1175, 1175, 1175, 1175, 1175, 1175,
     1175, 1175, 1175, 1175, 1175, 1175, 1175, 1175, 1175, 1176,
     1176,    0, 1176, 1176, 1176, 1176, 1176, 1176, 1176, 1176,
     1176, 1176, 1176, 1176, 1176, 1176, 1176, 1176, 1176, 1176,
     1176, 1176, 1176, 1176, 1176, 1176, 1176, 1176, 1177, 1177,
        0, 1177, 1177, 1177, 1177, 1177, 1177, 1177, 1177, 1177,
     1177, 1177, 1177, 1177, 1177, 1177, 1177, 1177, 1177, 1177,

     1177, 1177, 1177, 1177, 1177, 1177, 1177, 1178,    0, 1178,
     1178, 1178, 1178, 1178,    0,    0, 1178, 1178, 1178, 1178,
     1178,    0,    0,    0, 1178, 1179,    0, 1179, 1179, 1179,
        0,    0,    0, 1179, 1180, 1180, 1180, 1180,    0,    0,
     1180,    0,    0,    0,    0,    0,    0,    0,    0, 1180,
     1180,    0,    0, 1180,    0, 1180, 1180, 1180,    0,    0,
        0, 1180, 1181, 1181, 1181, 1181,    0,    0, 1181,    0,
        0,    0,    0,    0,    0, 1181,    0,    0, 1181,    0,
        0, 1181,    0, 1181, 1181, 1181,    0,    0, 1181, 1181,
     1182, 1182, 1182, 1182,    0,    0,    0,    0,    0,    0,

        0,    0,    0, 1182,    0, 1182, 1182,    0,    0, 1182,
        0, 1182, 1182, 1182,    0,    0,    0, 1182, 1183, 1183,
     1183, 1183,    0,    0, 1183,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0, 1183,    0, 1183,
     1183, 1183,    0,    0,    0, 1183, 1184,    0, 1184, 1184,
     1184,    0,    0,    0, 1184, 1185,    0, 1185,    0,    0,
        0, 1185,    0, 1185, 1185, 1185,    0,    0,    0, 1185,
     1186, 1186,    0, 1186,    0,    0,    0, 1186,    0, 1186,
     1186, 1186,    0,    0,    0, 1186, 1187, 1187,    0, 1187,
     1187, 1187, 1187, 1187, 1187, 1187,    0, 1187, 1187, 1187,

     1187, 1187, 1187, 1187, 1187, 1187, 1187,    0, 1187, 1187,
     1187, 1187, 1187, 1187, 1187, 1188,    0,    0, 1188,    0,
        0,    0, 1188,    0, 1188, 1188, 1188,    0,    0,    0,
     1188, 1189, 1189, 1189, 1189, 1189, 1189, 1189, 1189, 1189,
     1189, 1189, 1189, 1189, 1189, 1189, 1189, 1189, 1189, 1189,
        0, 1189, 1189, 1189, 1189, 1189, 1189, 1189, 1189, 1189,
     1190, 1190,    0, 1190, 1190, 1190, 1190, 1190, 1190, 1190,
     1190, 1190, 1190, 1190, 1190, 1190, 1190, 1190, 1190,    0,
     1190, 1190, 1190, 1190, 1190, 1190, 1190, 1190, 1190, 1191,
        0,    0, 1191,    0,    0,    0, 1191,    0, 1191, 1191,

     1191,    0,    0,    0, 1191, 1192, 1192,    0, 1192, 1192,
     1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192,
     1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192,
     1192, 1192, 1192, 1192, 1193, 1193,    0, 1193,    0, 1193,
     1193, 1193, 1193, 1193,    0, 1193, 1193, 1193, 1193,    0,
     1193, 1193, 1193,    0, 1193,    0, 1193, 1193, 1193, 1193,
     1193, 1193, 1193, 1194,    0,    0, 1194,    0,    0,    0,
     1194,    0, 1194, 1194, 1194,    0,    0,    0, 1194, 1195,
     1195,    0, 1195,    0, 1195, 1195, 1195, 1195, 1195, 1195,
     1195, 1195, 1195, 1195, 1195, 1195, 1195, 1195,    0, 1195,

        0, 1195, 1195, 1195, 1195, 1195, 1195, 1195, 1196, 1196,
        0, 1196,    0, 1196, 1196, 1196, 1196, 1196, 1196, 1196,
     1196, 1196, 1196, 1196, 1196, 1196, 1196,    0, 1196,    0,
     1196, 1196, 1196, 1196, 1196, 1196, 1196, 1197,    0,    0,
     1197,    0,    0,    0, 1197,    0, 1197, 1197, 1197,    0,
        0,    0, 1197, 1198, 1198,    0, 1198, 1198, 1198, 1198,
     1198,    0,    0, 1198, 1198, 1198, 1198, 1198, 1198, 1198,
     1198, 1198,    0, 1198,    0, 1198, 1198, 1198, 1198, 1198,
     1198, 1198, 1199,    0, 1199, 1199, 1199,    0,    0,    0,
     1199, 1200,    0, 1200, 1200,    0,    0, 1200,    0, 1200,

     1200, 1200,    0,    0,    0, 1200, 1201,    0, 1201, 1201,
     1201,    0,    0,    0, 1201, 1202,    0, 1202, 1202,    0,
        0, 1202,    0, 1202, 1202, 1202,    0,    0,    0, 1202,
     1203, 1203,    0, 1203, 1203, 1203, 1203, 1203, 1203, 1203,
     1203, 1203, 1203, 1203, 1203, 1203, 1203, 1203, 1203,    0,
     1203,    0, 1203, 1203, 1203, 1203, 1203, 1203, 1203, 1204,
        0,    0, 1204,    0,    0,    0, 1204,    0, 1204, 1204,
     1204,    0,    0,    0, 1204, 1205, 1205,    0, 1205, 1205,
     1205, 1205, 1205, 1205, 1205, 1205, 1205, 1205,    0, 1205,
     1205, 1205, 1205, 1205, 1205, 1205,    0, 1205, 1205, 1205,

     1205, 1205, 1205, 1205, 1206, 1206,    0, 1206, 1206, 1206,
     1206, 1206, 1206, 1206,    0, 1206, 1206, 1206, 1206, 1206,
     1206, 1206, 1206,    0, 1206,    0, 1206, 1206, 1206, 1206,
     1206, 1206, 1206, 1207,    0, 1207, 1207, 1207,    0,    0,
     1207,    0, 1207, 1207, 1207,    0,    0,    0, 1207, 1208,
     1208,    0, 1208, 1208, 1208, 1208, 1208, 1208, 1208, 1208,
     1208, 1208, 1208, 1208, 1208, 1208, 1208, 1208, 1208, 1208,
        0, 1208, 1208, 1208, 1208, 1208, 1208, 1208, 1209, 1209,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
     1209, 1209, 1209, 1209, 1209, 1209, 1209,    0, 1209, 1209,

     1210, 1210,    0, 1210, 1210, 1210, 1210, 1210, 1210, 1210,
     1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210,
     1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210, 1211,
        0, 1211, 1211, 1211,    0,    0,    0, 1211, 1212, 1212,
        0,    0, 1212,    0, 1212, 1212, 1212,    0,    0,    0,
     1212, 1213,    0, 1213, 1213,    0, 1213,    0,    0, 1213,
     1213,    0, 1213, 1213, 1213, 1214,    0,    0, 1214,    0,
        0,    0, 1214,    0, 1214, 1214, 1214, 1215,    0,    0,
     1215,    0, 1215, 1215, 1215, 1215, 1215, 1215, 1215, 1215,
     1215, 1215, 1215, 1215, 1215, 1215, 1215, 1215, 1215, 1215,

     1215, 1215, 1215, 1215, 1215, 1215, 1216,    0, 1216, 1216,
     1216,    0,    0, 1216, 1218,    0, 1218, 1218,    0, 1218,
        0,    0, 1218, 1218,    0, 1218, 1218, 1218, 1219,    0,
        0, 1219,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0, 1219, 1219, 1219,
     1219, 1219, 1220, 1220,    0, 1220, 1220, 1220, 1220, 1220,
     1220, 1220, 1220, 1220, 1220, 1220, 1220, 1220, 1220, 1220,
     1220, 1220, 1220, 1220, 1220, 1220, 1220, 1220, 1220, 1220,
     1220, 1221,    0, 1221, 1221, 1221, 1221, 1221,    0,    0,
     1221, 1221, 1221, 1221, 1221,    0,    0,    0, 1221, 1222,

        0, 1222,    0, 1222, 1222, 1222,    0,    0, 1222, 1222,
     1222, 1222, 1222,    0,    0,    0, 1222, 1223, 1223, 1223,
     1223, 1223, 1223, 1223, 1223, 1223, 1223, 1223, 1223, 1223,
     1223, 1223, 1223, 1223, 1223, 1223, 1223, 1223, 1223, 1223,
     1223, 1223, 1223, 1223, 1223, 1223, 1224,    0, 1224, 1224,
        0,    0, 1224,    0, 1224, 1224, 1224,    0,    0,    0,
     1224, 1225,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0, 1225,    0, 1225, 1225, 1225,    0,
        0,    0, 1225, 1226, 1226, 1226, 1226,    0,    0, 1226,
        0,    0,    0,    0,    0,    0, 1226,    0,    0, 1226,

        0,    0, 1226,    0, 1226, 1226, 1226,    0,    0, 1226,
     1226, 1227, 1227, 1227, 1227,    0,    0,    0,    0,    0,
        0,    0,    0,    0, 1227,    0, 1227, 1227,    0,    0,
     1227,    0, 1227, 1227, 1227,    0,    0,    0, 1227, 1228,
     1228, 1228, 1228,    0,    0, 1228,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0, 1228,    0,
     1228, 1228, 1228,    0,    0,    0, 1228, 1229,    0,    0,
        0, 1229,    0, 1229, 1229, 1229,    0,    0,    0, 1229,
     1230, 1230,    0, 1230, 1230, 1230, 1230, 1230, 1230, 1230,
     1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230,

     1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230, 1231,
        0, 1231, 1231, 1231, 1231, 1231,    0,    0, 1231, 1231,
     1231, 1231, 1231,    0,    0,    0, 1231, 1232,    0, 1232,
        0, 1232, 1232, 1232,    0,    0, 1232, 1232, 1232, 1232,
     1232,    0,    0,    0, 1232, 1233, 1233,    0, 1233, 1233,
     1233, 1233, 1233, 1233, 1233, 1233, 1233, 1233, 1233, 1233,
     1233, 1233, 1233, 1233, 1233, 1233, 1233, 1233, 1233, 1233,
     1233, 1233, 1233, 1233, 1234, 1234,    0, 1234, 1234, 1234,
     1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234,
     1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234,

     1234, 1234, 1234, 1235,    0,    0,    0,    0,    0, 1235,
        0, 1235, 1235, 1235, 1235, 1235, 1235,    0, 1235, 1235,
     1235, 1235, 1235,    0,    0,    0, 1235, 1236,    0, 1236,
        0, 1236, 1236, 1236,    0,    0, 1236, 1236, 1236, 1236,
     1236,    0,    0,    0, 1236, 1237, 1237, 1237, 1237,    0,
        0, 1237,    0,    0,    0,    0,    0,    0, 1237,    0,
        0, 1237,    0,    0, 1237,    0, 1237, 1237, 1237,    0,
        0, 1237, 1237, 1238, 1238, 1238, 1238,    0,    0,    0,
     1238,    0,    0,    0,    0,    0, 1238,    0, 1238, 1238,
        0,    0, 1238,    0, 1238, 1238, 1238,    0,    0,    0,

     1238, 1239, 1239, 1239, 1239,    0,    0, 1239,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
     1239,    0, 1239, 1239, 1239,    0,    0,    0, 1239, 1240,
     1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240,    0, 1240,
     1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240,
     1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1241,    0,
        0, 1241,    0,    0,    0, 1241,    0,    0,    0,    0,
        0,    0,    0, 1241,    0,    0,    0, 1241,    0, 1241,
     1241, 1241,    0,    0,    0, 1241, 1242,    0,    0, 1242,
        0,    0,    0, 1242,    0, 1242, 1242, 1242,    0,    0,

        0, 1242, 1243, 1243,    0, 1243, 1243, 1243, 1243, 1243,
     1243, 1243, 1243, 1243, 1243, 1243, 1243, 1243, 1243, 1243,
     1243, 1243, 1243, 1243, 1243, 1243, 1243, 1243, 1243, 1243,
     1243, 1244, 1244,    0, 1244, 1244, 1244, 1244, 1244, 1244,
     1244, 1244, 1244, 1244, 1244, 1244, 1244, 1244, 1244, 1244,
     1244, 1244, 1244, 1244, 1244, 1244, 1244, 1244, 1244, 1244,
     1245, 1245,    0, 1245, 1245, 1245, 1245, 1245, 1245, 1245,
     1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245,
     1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1246,
        0, 1246, 1246, 1246, 1246, 1246,    0,    0, 1246, 1246,

     1246, 1246, 1246,    0,    0,    0, 1246, 1247,    0, 1247,
        0, 1247, 1247, 1247,    0,    0, 1247, 1247, 1247, 1247,
     1247,    0,    0,    0, 1247, 1248, 1248, 1248, 1248,    0,
        0, 1248,    0,    0,    0,    0,    0,    0,    0,    0,
     1248, 1248,    0,    0, 1248,    0, 1248, 1248, 1248,    0,
        0,    0, 1248, 1249,    0, 1249, 1249, 1249,    0,    0,
        0, 1249, 1250, 1250, 1250, 1250,    0,    0, 1250,    0,
        0,    0,    0,    0,    0,    0,    0, 1250, 1250,    0,
        0, 1250,    0, 1250, 1250, 1250,    0,    0,    0, 1250,
     1251, 1251, 1251, 1251,    0,    0, 1251,    0,    0,    0,

        0,    0,    0, 1251,    0,    0, 1251,    0,    0, 1251,
        0, 1251, 1251, 1251,    0,    0, 1251, 1251, 1252, 1252,
     1252, 1252,    0,    0,    0,    0,    0,    0,    0,    0,
        0, 1252,    0, 1252, 1252,    0,    0, 1252,    0, 1252,
     1252, 1252,    0,    0,    0, 1252, 1253, 1253, 1253, 1253,
        0,    0, 1253,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0, 1253,    0, 1253, 1253, 1253,
        0,    0,    0, 1253, 1254,    0,    0,    0, 1254,    0,
     1254, 1254, 1254,    0,    0,    0, 1254, 1255,    0, 1255,
        0,    0,    0, 1255,    0, 1255, 1255, 1255,    0,    0,

        0, 1255, 1256,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0, 1256,    0, 1256, 1256, 1256,
        0,    0,    0, 1256, 1257, 1257,    0, 1257,    0,    0,
        0, 1257,    0, 1257, 1257, 1257,    0,    0,    0, 1257,
     1258, 1258,    0, 1258, 1258, 1258, 1258, 1258, 1258, 1258,
        0, 1258, 1258, 1258, 1258, 1258, 1258, 1258, 1258, 1258,
     1258,    0, 1258, 1258, 1258, 1258, 1258, 1258, 1258, 1259,
        0,    0, 1259,    0,    0,    0, 1259,    0, 1259, 1259,
     1259,    0,    0,    0, 1259, 1260, 1260, 1260, 1260, 1260,
     1260, 1260, 1260, 1260, 1260, 1260, 1260, 1260, 1260, 1260,

     1260, 1260, 1260, 1260,    0, 1260, 1260, 1260, 1260, 1260,
     1260, 1260, 1260, 1260, 1261, 1261,    0, 1261, 1261, 1261,
     1261, 1261, 1261, 1261, 1261, 1261, 1261, 1261, 1261, 1261,
     1261, 1261, 1261,    0, 1261, 1261, 1261, 1261, 1261, 1261,
     1261, 1261, 1261, 1262,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0, 1262,    0, 1262, 1262,
     1262,    0,    0,    0, 1262, 1263,    0,    0, 1263,    0,
        0,    0, 1263,    0, 1263, 1263, 1263,    0,    0,    0,
     1263, 1264, 1264,    0, 1264, 1264, 1264, 1264, 1264, 1264,
     1264, 1264, 1264, 1264, 1264, 1264, 1264, 1264, 1264, 1264,

     1264, 1264, 1264, 1264, 1264, 1264, 1264, 1264, 1264, 1264,
     1265, 1265,    0, 1265,    0, 1265, 1265, 1265, 1265, 1265,
        0, 1265, 1265, 1265, 1265,    0, 1265, 1265, 1265,    0,
     1265,    0, 1265, 1265, 1265, 1265, 1265, 1265, 1265, 1266,
        0,    0, 1266,    0,    0,    0, 1266,    0, 1266, 1266,
     1266,    0,    0,    0, 1266, 1267, 1267,    0, 1267,    0,
     1267, 1267, 1267, 1267, 1267, 1267, 1267, 1267, 1267, 1267,
     1267, 1267, 1267, 1267,    0, 1267,    0, 1267, 1267, 1267,
     1267, 1267, 1267, 1267, 1268, 1268,    0, 1268,    0, 1268,
     1268, 1268, 1268, 1268, 1268, 1268, 1268, 1268, 1268, 1268,

     1268, 1268, 1268,    0, 1268,    0, 1268, 1268, 1268, 1268,
     1268, 1268, 1268, 1269,    0,    0, 1269,    0,    0,    0,
     1269,    0, 1269, 1269, 1269,    0,    0,    0, 1269, 1270,
     1270,    0, 1270, 1270, 1270, 1270, 1270,    0,    0, 1270,
     1270, 1270, 1270, 1270, 1270, 1270, 1270, 1270,    0, 1270,
        0, 1270, 1270, 1270, 1270, 1270, 1270, 1270, 1271,    0,
     1271, 1271,    0,    0, 1271,    0, 1271, 1271, 1271,    0,
        0,    0, 1271, 1272,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0, 1272,    0, 1272, 1272,
     1272,    0,    0,    0, 1272, 1273,    0, 1273, 1273,    0,

        0, 1273,    0, 1273, 1273, 1273,    0,    0,    0, 1273,
     1274,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0, 1274,    0, 1274, 1274, 1274,    0,    0,
        0, 1274, 1275, 1275,    0, 1275, 1275, 1275, 1275, 1275,
     1275, 1275, 1275, 1275, 1275, 1275, 1275, 1275, 1275, 1275,
     1275,    0, 1275,    0, 1275, 1275, 1275, 1275, 1275, 1275,
     1275, 1276,    0,    0, 1276,    0,    0,    0, 1276,    0,
     1276, 1276, 1276,    0,    0,    0, 1276, 1277, 1277,    0,
     1277, 1277, 1277, 1277, 1277, 1277, 1277, 1277, 1277, 1277,
        0, 1277, 1277, 1277, 1277, 1277, 1277, 1277,    0, 1277,

     1277, 1277, 1277, 1277, 1277, 1277, 1278, 1278,    0, 1278,
     1278, 1278, 1278, 1278, 1278, 1278,    0, 1278, 1278, 1278,
     1278, 1278, 1278, 1278, 1278,    0, 1278,    0, 1278, 1278,
     1278, 1278, 1278, 1278, 1278, 1280,    0, 1280, 1280, 1280,
        0,    0, 1280,    0, 1280, 1280, 1280,    0,    0,    0,
     1280, 1281, 1281,    0, 1281, 1281, 1281, 1281, 1281, 1281,
     1281, 1281, 1281, 1281, 1281, 1281, 1281, 1281, 1281, 1281,
     1281, 1281,    0, 1281, 1281, 1281, 1281, 1281, 1281, 1281,
     1282, 1282,    0,    0, 1282,    0, 1282, 1282, 1282,    0,
        0,    0, 1282, 1283, 1283,    0, 1283, 1283, 1283, 1283,

        0, 1283, 1283, 1283, 1283, 1283, 1283, 1283, 1283, 1283,
     1283, 1283, 1283, 1283, 1283, 1283, 1283, 1283, 1283, 1283,
     1283, 1283, 1284, 1284,    0, 1284,    0,    0,    0, 1284,
        0, 1284, 1284, 1284, 1285,    0, 1285, 1285,    0, 1285,
        0,    0, 1285, 1285,    0, 1285, 1285, 1285, 1286,    0,
        0, 1286,    0, 1286, 1286, 1286, 1286, 1286, 1286, 1286,
     1286, 1286, 1286, 1286, 1286, 1286, 1286, 1286, 1286, 1286,
     1286, 1286, 1286, 1286, 1286, 1286, 1286, 1287, 1287,    0,
     1287, 1287, 1287, 1287, 1287, 1287, 1287, 1287, 1287, 1287,
     1287, 1287, 1287, 1287, 1287, 1287, 1287, 1287, 1287, 1287,

     1287, 1287, 1287, 1287, 1287, 1287, 1288,    0,    0, 1288,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0, 1288,    0, 1288, 1288, 1288,
     1290,    0,    0, 1290,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0, 1290,
        0, 1290, 1290, 1290, 1291, 1291,    0, 1291, 1291, 1291,
     1291, 1291, 1291, 1291, 1291, 1291, 1291, 1291, 1291, 1291,
     1291, 1291, 1291, 1291, 1291, 1291, 1291, 1291, 1291, 1291,
        0, 1291, 1291, 1294,    0,    0, 1294,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0, 1294, 1294, 1294, 1294, 1294, 1295,    0, 1295,
     1295, 1295, 1295, 1295,    0,    0, 1295, 1295, 1295, 1295,
     1295,    0,    0,    0, 1295, 1296,    0, 1296, 1296, 1296,
     1296, 1296,    0,    0, 1296, 1296, 1296, 1296, 1296,    0,
        0,    0, 1296, 1297,    0, 1297, 1297, 1297,    0,    0,
        0, 1297, 1298,    0,    0,    0, 1298,    0, 1298, 1298,
     1298,    0,    0,    0, 1298, 1299,    0, 1299, 1299, 1299,
     1299, 1299,    0,    0, 1299, 1299, 1299, 1299, 1299,    0,
        0,    0, 1299, 1300,    0, 1300, 1300, 1300, 1300, 1300,
        0,    0, 1300, 1300, 1300, 1300, 1300,    0,    0,    0,

     1300, 1301, 1301,    0, 1301, 1301, 1301, 1301, 1301, 1301,
     1301, 1301, 1301, 1301, 1301, 1301, 1301, 1301, 1301, 1301,
     1301, 1301, 1301, 1301, 1301, 1301, 1301, 1301, 1301, 1301,
     1302,    0,    0,    0,    0,    0, 1302,    0, 1302, 1302,
     1302, 1302, 1302, 1302,    0, 1302, 1302, 1302, 1302, 1302,
        0,    0,    0, 1302, 1303,    0,    0,    0,    0,    0,
     1303,    0, 1303, 1303, 1303, 1303, 1303, 1303,    0, 1303,
     1303, 1303, 1303, 1303,    0,    0,    0, 1303, 1304, 1304,
     1304, 1304, 1304, 1304, 1304, 1304, 1304, 1304, 1304, 1304,
     1304, 1304, 1304, 1304, 1304, 1304, 1304, 1304, 1304, 1304,

     1304, 1304, 1304, 1304, 1304, 1304, 1304, 1305,    0,    0,
     1305,    0,    0,    0, 1305,    0,    0,    0,    0,    0,
        0,    0, 1305,    0,    0,    0, 1305,    0, 1305, 1305,
     1305,    0,    0,    0, 1305, 1306,    0, 1306, 1306, 1306,
     1306, 1306,    0,    0, 1306, 1306, 1306, 1306, 1306,    0,
        0,    0, 1306, 1307,    0, 1307, 1307, 1307, 1307, 1307,
        0,    0, 1307, 1307, 1307, 1307, 1307,    0,    0,    0,
     1307, 1308, 1308, 1308, 1308,    0,    0, 1308,    0,    0,
        0,    0,    0,    0,    0,    0, 1308, 1308,    0,    0,
     1308,    0, 1308, 1308, 1308,    0,    0,    0, 1308, 1309,

     1309, 1309, 1309,    0,    0, 1309,    0,    0,    0,    0,
        0,    0,    0,    0,    0, 1309,    0,    0, 1309,    0,
     1309, 1309, 1309,    0,    0,    0, 1309, 1310, 1310, 1310,
     1310,    0,    0, 1310,    0,    0,    0,    0,    0,    0,
        0,    0, 1310, 1310,    0,    0, 1310,    0, 1310, 1310,
     1310,    0,    0,    0, 1310, 1311,    0,    0,    0, 1311,
        0, 1311, 1311, 1311,    0,    0,    0, 1311, 1312,    0,
     1312, 1312, 1312,    0,    0,    0, 1312, 1313,    0, 1313,
        0,    0,    0, 1313,    0, 1313, 1313, 1313,    0,    0,
        0, 1313, 1314,    0, 1314, 1314, 1314,    0,    0,    0,

     1314, 1315,    0,    0,    0, 1315,    0, 1315, 1315, 1315,
        0,    0,    0, 1315, 1316, 1316, 1316, 1316, 1316, 1316,
     1316, 1316, 1316, 1316, 1316, 1316, 1316, 1316, 1316, 1316,
        0, 1316, 1316, 1316,    0, 1316,    0,    0, 1316, 1316,
     1316, 1316, 1316, 1317,    0, 1317, 1317, 1317,    0,    0,
        0, 1317, 1318,    0, 1318, 1318, 1318,    0,    0,    0,
     1318, 1320, 1320,    0, 1320, 1320, 1320, 1320, 1320, 1320,
     1320, 1320, 1320, 1320, 1320, 1320, 1320, 1320, 1320, 1320,
     1320, 1320, 1320, 1320, 1320, 1320, 1320, 1320, 1320, 1320,
     1321,    0,    0, 1321,    0,    0,    0, 1321,    0, 1321,

     1321, 1321, 1322,    0, 1322,    0, 1322, 1322,    0, 1322,
        0,    0, 1322, 1322,    0, 1322, 1322, 1322, 1323, 1323,
        0, 1323, 1323, 1323, 1323, 1323, 1323, 1323, 1323, 1323,
     1323, 1323, 1323, 1323, 1323, 1323, 1323, 1323, 1323, 1323,
     1323, 1323, 1323, 1323, 1323, 1323, 1323, 1325,    0,    0,
     1325,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0, 1325,    0, 1325, 1325,
     1325, 1326, 1326,    0, 1326, 1326, 1326, 1326, 1326, 1326,
     1326, 1326, 1326, 1326, 1326, 1326, 1326, 1326, 1326, 1326,
     1326, 1326, 1326, 1326, 1326, 1326, 1326, 1326, 1326, 1326,

     1327, 1327, 1327, 1327, 1327, 1328,    0,    0, 1328,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0, 1328, 1328, 1328, 1328, 1328, 1329,
     1329,    0, 1329,    0,    0,    0,    0,    0,    0, 1329,
        0, 1329, 1329,    0, 1329, 1329,    0, 1329, 1329,    0,
     1329, 1329, 1329, 1329, 1330,    0, 1330, 1330, 1330, 1330,
     1330,    0,    0, 1330, 1330, 1330, 1330, 1330,    0,    0,
        0, 1330, 1331,    0, 1331, 1331, 1331, 1331, 1331,    0,
        0, 1331, 1331, 1331, 1331, 1331,    0,    0,    0, 1331,
     1332, 1332,    0, 1332, 1332, 1332, 1332, 1332, 1332, 1332,

     1332, 1332, 1332, 1332, 1332, 1332, 1332, 1332, 1332, 1332,
     1332, 1332, 1332, 1332, 1332, 1332, 1332, 1332, 1332, 1333,
        0,    0,    0,    0,    0, 1333,    0, 1333, 1333, 1333,
     1333, 1333, 1333,    0, 1333, 1333, 1333, 1333, 1333,    0,
        0,    0, 1333, 1334,    0, 1334, 1334, 1334, 1334, 1334,
        0,    0, 1334, 1334, 1334, 1334, 1334,    0,    0,    0,
     1334, 1335,    0, 1335, 1335, 1335,    0,    0,    0, 1335,
     1336, 1336, 1336, 1336,    0,    0, 1336,    0,    0,    0,
        0,    0,    0,    0,    0, 1336, 1336,    0,    0, 1336,
        0, 1336, 1336, 1336,    0,    0,    0, 1336, 1337, 1337,

     1337, 1337,    0,    0, 1337,    0,    0,    0,    0,    0,
        0,    0,    0,    0, 1337,    0,    0, 1337,    0, 1337,
     1337, 1337,    0,    0,    0, 1337, 1338, 1338,    0, 1338,
        0,    0,    0, 1338,    0, 1338, 1338, 1338, 1339, 1339,
        0, 1339, 1339, 1339, 1339, 1339, 1339, 1339, 1339, 1339,
     1339, 1339, 1339, 1339, 1339, 1339, 1339, 1339, 1339, 1339,
     1339, 1339, 1339, 1339, 1339, 1339, 1339, 1340, 1340, 1340,
     1340, 1340, 1340, 1340, 1340, 1340, 1340, 1340, 1340, 1340,
     1340, 1340, 1340, 1340, 1340, 1340, 1340,    0, 1340,    0,
        0,    0, 1340, 1340, 1340, 1340, 1341, 1341, 1341, 1341,

        0,    0, 1341,    0,    0,    0,    0,    0,    0,    0,
        0, 1341, 1341,    0,    0, 1341,    0, 1341, 1341, 1341,
        0,    0,    0, 1341, 1342, 1342, 1342, 1342, 1342, 1342,
     1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342,
        0, 1342, 1342, 1342,    0, 1342,    0, 1342,    0, 1342,
     1342, 1342, 1342, 1343, 1343, 1343, 1343, 1343, 1343, 1343,
     1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343,    0,
     1343, 1343, 1343,    0, 1343,    0,    0,    0, 1343, 1343,
     1343, 1343, 1344, 1344, 1344, 1344, 1344, 1344, 1344, 1344,
     1344, 1344, 1344, 1344, 1344, 1344, 1344, 1344,    0, 1344,

     1344, 1344,    0, 1344,    0,    0,    0, 1344, 1344, 1344,
     1344, 1345, 1345, 1345, 1345, 1345, 1345, 1345, 1345, 1345,
     1345, 1345, 1345, 1345, 1345, 1345, 1345,    0, 1345, 1345,
     1345,    0, 1345,    0,    0,    0, 1345, 1345, 1345, 1345,
     1346, 1346, 1346, 1346, 1346, 1346, 1346, 1346, 1346, 1346,
     1346, 1346, 1346, 1346, 1346, 1346,    0, 1346, 1346, 1346,
        0, 1346,    0,    0,    0, 1346, 1346, 1346, 1346, 1128,
     1128, 1128, 1128, 1128, 1128, 1128, 1128, 1128, 1128, 1128,
     1128, 1128, 1128, 1128, 1128, 1128, 1128, 1128, 1128, 1128,
     1128, 1128, 1128, 1128, 1128, 1128, 1128, 1128, 1128, 1128,

     1128, 1128, 1128, 1128, 1128, 1128, 1128, 1128, 1128, 1128,
     1128, 1128, 1128, 1128, 1128, 1128, 1128, 1128, 1128, 1128,
     1128, 1128, 1128, 1128, 1128, 1128, 1128, 1128, 1128, 1128,
     1128, 1128, 1128, 1128, 1128, 1128, 1128, 1128, 1128, 1128
    } ;

extern int commentScanYY_flex_debug;
int commentScanYY_flex_debug = 0;

static yy_state_type *yy_state_buf=0, *yy_state_ptr=0;
static char *yy_full_match;
static int yy_lp;
static int yy_looking_for_trail_begin = 0;
static int yy_full_lp;
static int *yy_full_state;
#define YY_TRAILING_MASK 0x2000
#define YY_TRAILING_HEAD_MASK 0x4000
#define REJECT \
{ \
*yy_cp = (yy_hold_char); /* undo effects of setting up commentScanYYtext */ \
yy_cp = (yy_full_match); /* restore poss. backed-over text */ \
(yy_lp) = (yy_full_lp); /* restore orig. accepting pos. */ \
(yy_state_ptr) = (yy_full_state); /* restore orig. state */ \
yy_current_state = *(yy_state_ptr); /* restore curr. state */ \
++(yy_lp); \
goto find_rule; \
}

#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *commentScanYYtext;
#line 1 "commentscan.l"
/*****************************************************************************
 *
 * Copyright (C) 1997-2012 by Dimitri van Heesch.
 *
 * Permission to use, copy, modify, and distribute this software and its
 * documentation under the terms of the GNU General Public License is hereby 
 * granted. No representations are made about the suitability of this software 
 * for any purpose. It is provided "as is" without express or implied warranty.
 * See the GNU General Public License for more details.
 *
 * Documents produced by Doxygen are derivative works derived from the
 * input used in their production; they are not affected by this license.
 *
 */
#line 17 "commentscan.l"

/*
 *	includes
 */
#include <stdio.h>
#include <stdlib.h>
#include <assert.h>
#include <ctype.h>

#include "qtbc.h"
#include <qarray.h>
#include <qstack.h>
#include <qregexp.h>
#include <unistd.h>
#include <qfile.h>
  
#include "scanner.h"
#include "entry.h"
#include "doxygen.h"
#include "message.h"
#include "config.h"
#include "util.h"
#include "index.h"
#include "defargs.h"
#include "language.h"
#include "outputlist.h"
#include "membergroup.h"
#include "reflist.h"
#include "debug.h"
#include "parserintf.h"
#include "cite.h"
#include "markdown.h"

// forward declarations
static bool handleBrief(const QCString &);
static bool handleFn(const QCString &);
static bool handleDef(const QCString &);
static bool handleOverload(const QCString &);
static bool handleEnum(const QCString &);
static bool handleDefGroup(const QCString &);
static bool handleAddToGroup(const QCString &);
static bool handleWeakGroup(const QCString &);
static bool handleNamespace(const QCString &);
static bool handlePackage(const QCString &);
static bool handleClass(const QCString &);
static bool handleHeaderFile(const QCString &);
static bool handleProtocol(const QCString &);
static bool handleCategory(const QCString &);
static bool handleUnion(const QCString &);
static bool handleStruct(const QCString &);
static bool handleInterface(const QCString &);
static bool handleIdlException(const QCString &);
static bool handlePage(const QCString &);
static bool handleMainpage(const QCString &);
static bool handleFile(const QCString &);
static bool handleDir(const QCString &);
static bool handleExample(const QCString &);
static bool handleDetails(const QCString &);
static bool handleName(const QCString &);
static bool handleTodo(const QCString &);
static bool handleTest(const QCString &);
static bool handleBug(const QCString &);
static bool handleSubpage(const QCString &s);
static bool handleDeprecated(const QCString &);
static bool handleXRefItem(const QCString &);
static bool handleRelated(const QCString &);
static bool handleRelatedAlso(const QCString &);
static bool handleMemberOf(const QCString &);
static bool handleRefItem(const QCString &);
static bool handleSection(const QCString &);
static bool handleAnchor(const QCString &);
static bool handleCite(const QCString &);
static bool handleFormatBlock(const QCString &);
static bool handleAddIndex(const QCString &);
static bool handleIf(const QCString &);
static bool handleIfNot(const QCString &);
static bool handleElseIf(const QCString &);
static bool handleElse(const QCString &);
static bool handleEndIf(const QCString &);
static bool handleIngroup(const QCString &);
static bool handleNoSubGrouping(const QCString &);
static bool handleShowInitializer(const QCString &);
static bool handleHideInitializer(const QCString &);
static bool handleCallgraph(const QCString &);
static bool handleCallergraph(const QCString &);
static bool handleInternal(const QCString &);
static bool handleLineBr(const QCString &);
static bool handleStatic(const QCString &);
static bool handlePure(const QCString &);
static bool handlePrivate(const QCString &);
static bool handlePrivateSection(const QCString &);
static bool handleProtected(const QCString &);
static bool handleProtectedSection(const QCString &);
static bool handlePublic(const QCString &s);
static bool handlePublicSection(const QCString &s);
static bool handleToc(const QCString &s);
static bool handleInherit(const QCString &);
static bool handleExtends(const QCString &);
static bool handleCopyDoc(const QCString &);

typedef bool (*DocCmdFunc)(const QCString &name);

struct DocCmdMap
{
  const char *cmdName;
  DocCmdFunc handler;
  bool endsBrief;
};

// map of command to handler function
static DocCmdMap docCmdMap[] =
{
  // command name      handler function         ends brief description
  { "brief",           &handleBrief,            FALSE },
  { "short",           &handleBrief,            FALSE },
  { "fn",              &handleFn,               FALSE },
  { "var",             &handleFn,               FALSE },
  { "typedef",         &handleFn,               FALSE },
  { "property",        &handleFn,               FALSE },
  { "def",             &handleDef,              FALSE },
  { "overload",        &handleOverload,         FALSE },
  { "enum",            &handleEnum,             FALSE },
  { "defgroup",        &handleDefGroup,         FALSE },
  { "addtogroup",      &handleAddToGroup,       FALSE },
  { "weakgroup",       &handleWeakGroup,        FALSE },
  { "namespace",       &handleNamespace,        FALSE },
  { "package",         &handlePackage,          FALSE },
  { "class",           &handleClass,            FALSE },
  { "headerfile",      &handleHeaderFile,       FALSE },
  { "protocol",        &handleProtocol,         FALSE },
  { "category",        &handleCategory,         FALSE },
  { "union",           &handleUnion,            FALSE },
  { "struct",          &handleStruct,           FALSE },
  { "interface",       &handleInterface,        FALSE },
  { "idlexcept",       &handleIdlException,     FALSE },
  { "page",            &handlePage,             FALSE },
  { "mainpage",        &handleMainpage,         FALSE },
  { "file",            &handleFile,             FALSE },
  { "dir",             &handleDir,              FALSE },
  { "example",         &handleExample,          FALSE },
  { "details",         &handleDetails,          TRUE  },
  { "name",            &handleName,             FALSE },
  { "todo",            &handleTodo,             FALSE }, // end brief will be done differently
  { "test",            &handleTest,             FALSE }, // end brief will be done differently
  { "bug",             &handleBug,              FALSE }, // end brief will be done differently
  { "deprecated",      &handleDeprecated,       FALSE }, // end brief will be done differently
  { "xrefitem",        &handleXRefItem,         FALSE }, // end brief will be done differently
  { "related",         &handleRelated,          TRUE  },
  { "relates",         &handleRelated,          TRUE  },
  { "relatedalso",     &handleRelatedAlso,      TRUE  },
  { "relatesalso",     &handleRelatedAlso,      TRUE  },
  { "refitem",         &handleRefItem,          TRUE  },
  { "cite",            &handleCite,             TRUE  },
  { "subpage",         &handleSubpage,          TRUE  },
  { "section",         &handleSection,          TRUE  },
  { "subsection",      &handleSection,          TRUE  },
  { "subsubsection",   &handleSection,          TRUE  },
  { "paragraph",       &handleSection,          TRUE  },
  { "anchor",          &handleAnchor,           TRUE  },
  { "verbatim",        &handleFormatBlock,      TRUE },
  { "latexonly",       &handleFormatBlock,      FALSE },
  { "htmlonly",        &handleFormatBlock,      FALSE },
  { "xmlonly",         &handleFormatBlock,      FALSE },
  { "rtfonly",         &handleFormatBlock,      FALSE },
  { "manonly",         &handleFormatBlock,      FALSE },
  { "dot",             &handleFormatBlock,      TRUE  },
  { "msc",             &handleFormatBlock,      TRUE  },
  { "code",            &handleFormatBlock,      TRUE  },
  { "addindex",        &handleAddIndex,         FALSE },
  { "if",              &handleIf,               FALSE },
  { "ifnot",           &handleIfNot,            FALSE },
  { "elseif",          &handleElseIf,           FALSE },
  { "else",            &handleElse,             FALSE },
  { "endif",           &handleEndIf,            FALSE },
  { "ingroup",         &handleIngroup,          FALSE },
  { "nosubgrouping",   &handleNoSubGrouping,    FALSE },
  { "showinitializer", &handleShowInitializer,  FALSE },
  { "hideinitializer", &handleHideInitializer,  FALSE },
  { "callgraph",       &handleCallgraph,        FALSE },
  { "callergraph",     &handleCallergraph,      FALSE },
  { "internal",        &handleInternal,         TRUE  },
  { "_linebr",         &handleLineBr,           FALSE },
  { "static",          &handleStatic,           FALSE },
  { "pure",            &handlePure,             FALSE },
  { "private",         &handlePrivate,          FALSE },
  { "privatesection",  &handlePrivateSection,   FALSE },
  { "protected",       &handleProtected,        FALSE },
  { "protectedsection",&handleProtectedSection, FALSE },
  { "public",          &handlePublic,           FALSE },
  { "publicsection",   &handlePublicSection,    FALSE },
  { "tableofcontents", &handleToc,              FALSE },
  { "inherit",         &handleInherit,          TRUE  },
  { "extends",         &handleExtends,          TRUE  },
  { "implements",      &handleExtends,          TRUE  },
  { "memberof",        &handleMemberOf,         TRUE  },
  { "arg",             0,                       TRUE  },
  { "attention",       0,                       TRUE  },
  { "author",          0,                       TRUE  },
  { "authors",         0,                       TRUE  },
  { "copydoc",         &handleCopyDoc,          TRUE  },
  { "copybrief",       0,                       FALSE },
  { "copydetails",     0,                       TRUE  },
  { "date",            0,                       TRUE  },
  { "dotfile",         0,                       TRUE  },
  { "htmlinclude",     0,                       FALSE },
  { "image",           0,                       TRUE  },
  { "include",         0,                       TRUE  },
  { "includelineno",   0,                       TRUE  },
  { "invariant",       0,                       TRUE  },
  { "li",              0,                       TRUE  },
  { "line",            0,                       TRUE  },
  { "note",            0,                       TRUE  },
  { "par",             0,                       TRUE  },
  { "param",           0,                       TRUE  },
  { "tparam",          0,                       TRUE  },
  { "post",            0,                       TRUE  },
  { "pre",             0,                       TRUE  },
  { "remark",          0,                       TRUE  },
  { "remarks",         0,                       TRUE  },
  { "result",          0,                       TRUE  },
  { "return",          0,                       TRUE  },
  { "returns",         0,                       TRUE  },
  { "retval",          0,                       TRUE  },
  { "sa",              0,                       TRUE  },
  { "see",             0,                       TRUE  },
  { "since",           0,                       TRUE  },
  { "throw",           0,                       TRUE  },
  { "throws",          0,                       TRUE  },
  { "until",           0,                       TRUE  },
  { "verbinclude",     0,                       FALSE },
  { "version",         0,                       TRUE  },
  { "warning",         0,                       TRUE  },
  { 0, 0, FALSE }
};

/** @brief Command mapper.
 *
 *  Maps a command name (as found in a comment block) onto a
 *  specific handler function.
 */
class DocCmdMapper
{
  public:
    struct Cmd
    {
      DocCmdFunc func;
      bool endsBrief;
    };

    /** maps a command name to a handler function */
    static Cmd *map(const char *name)
    {
      return instance()->find(name);
    }

    /** release the singleton */
    static void freeInstance()
    {
      delete s_instance; s_instance=0;
    }

  private:
    static DocCmdMapper *instance()
    {
      if (s_instance==0) s_instance = new DocCmdMapper;
      return s_instance;
    }

    DocCmdMapper() : m_map(113)
    {
      m_map.setAutoDelete(TRUE);
      DocCmdMap *p = docCmdMap;
      while (p->cmdName)
      {
	if (m_map.find(p->cmdName)!=0)
	{
	  printf("Error: DocCmdMapper: command %s already added\n",p->cmdName);
	  exit(1);
	}
	Cmd *cmd = new Cmd;
	cmd->func = p->handler;
	cmd->endsBrief = p->endsBrief;
	m_map.insert(p->cmdName,cmd);
	p++;
      }
    }

    Cmd *find(const char *name)
    {
      return m_map.find(name);
    }
    QDict<Cmd> m_map;
    static DocCmdMapper *s_instance;
};

DocCmdMapper *DocCmdMapper::s_instance=0;
  
  
#define YY_NEVER_INTERACTIVE 1

enum XRefKind
{
  XRef_Item,
  XRef_Todo,
  XRef_Test,
  XRef_Bug,
  XRef_Deprecated,
  XRef_None
};

enum OutputContext
{
  OutputDoc,
  OutputBrief,
  OutputXRef,
  OutputInbody
};

enum GuardType
{
  Guard_If,
  Guard_IfNot,
  Guard_Skip
};

class GuardedSection
{
  public:
    GuardedSection(bool enabled,bool parentVisible) 
      : m_enabled(enabled),m_parentVisible(parentVisible) {}
    bool isEnabled() const { return m_enabled; }
    bool parentVisible() const { return m_parentVisible; }
  
  private:
    bool m_enabled;
    bool m_parentVisible;
};

void openGroup(Entry *e,const char *file,int line);
void closeGroup(Entry *e,const char *file,int line,bool foundInline=FALSE);
void initGroupInfo(Entry *e);
static void groupAddDocs(Entry *e,const char *fileName);

/* -----------------------------------------------------------------
 *
 *	statics
 */

static ParserInterface *langParser;          // the language parser that is calling us
static QCString         inputString;         // input string
static int		inputPosition;       // read pointer
static QCString		yyFileName;          // file name that is read from
static int		yyLineNr;            // line number in the input
static bool             inBody;              // was the comment found inside the body of a function?
static OutputContext    inContext;           // are we inside the brief, details or xref part
static bool             briefEndsAtDot;      // does the brief description stop at a dot?
static QCString         formulaText;         // Running text of a formula
static QCString         formulaEnv;          // environment name
static int              formulaNewLines;     // amount of new lines in the formula
static QCString        *pOutputString;       // pointer to string to which the output is appended.
static QCString         outputXRef;          // temp argument of todo/test/../xrefitem commands
static QCString         blockName;           // preformatted block name (e.g. verbatim, latexonly,...)
static XRefKind         xrefKind;            // kind of cross-reference command
static XRefKind         newXRefKind;         // 
static GuardType        guardType;           // kind of guard for conditional section
static bool             enabledSectionFound;
static QCString         functionProto;       // function prototype
static QStack<GuardedSection> guards;        // tracks nested conditional sections (if,ifnot,..)
static Entry*		current      = 0 ;   // working entry
//static Entry*		current_root = 0 ;   // parent of working entry


//static Entry*		previous     = 0 ;   // TODO: remove need for this
static bool             needNewEntry;

static QCString         g_sectionLabel;
static QCString		g_sectionTitle;
static int              g_sectionLevel;
static QCString         xrefItemKey;
static QCString         newXRefItemKey;
static QCString         xrefItemTitle;
static QCString         xrefListTitle;
static Protection	protection;

static bool             xrefAppendFlag;
static bool             inGroupParamFound;
static int              braceCount;
static bool             insidePre;
static bool             parseMore;
static int              g_condCount;

static int              g_commentCount;
static bool             g_spaceBeforeCmd;
static bool             g_spaceBeforeIf;
static QCString         g_copyDocArg;

//-----------------------------------------------------------------------------

static QStack<Grouping> g_autoGroupStack;
static int              g_memberGroupId = DOX_NOGROUP;
static QCString         g_memberGroupHeader;
static QCString         g_memberGroupDocs;
static QCString         g_memberGroupRelates;
static QCString         g_compoundName;

//-----------------------------------------------------------------------------

static void initParser()
{
  g_sectionLabel.resize(0);
  g_sectionTitle.resize(0);
  g_memberGroupHeader.resize(0);
}

//-----------------------------------------------------------------------------

static bool getDocSectionName(int s)
{
  switch(s)
  {
    case Entry::CLASSDOC_SEC:
    case Entry::STRUCTDOC_SEC:
    case Entry::UNIONDOC_SEC:
    case Entry::EXCEPTIONDOC_SEC:
    case Entry::NAMESPACEDOC_SEC:
    case Entry::PROTOCOLDOC_SEC:
    case Entry::CATEGORYDOC_SEC:
    case Entry::ENUMDOC_SEC:
    case Entry::PAGEDOC_SEC:
    case Entry::VARIABLEDOC_SEC:
    case Entry::MEMBERDOC_SEC:
    case Entry::OVERLOADDOC_SEC:
    case Entry::FILEDOC_SEC:
    case Entry::DEFINEDOC_SEC:
    case Entry::GROUPDOC_SEC:
    case Entry::MAINPAGEDOC_SEC:
    case Entry::PACKAGEDOC_SEC:
    case Entry::DIRDOC_SEC:
    case Entry::EXAMPLE_SEC:
    case Entry::MEMBERGRP_SEC:
      return TRUE;
    default: 
      return FALSE;
  }
}

//-----------------------------------------------------------------------------

static bool makeStructuralIndicator(Entry::Sections s)
{
  //printf("current->section=%x\n",current->section);
  if (getDocSectionName(current->section))
  {
    return TRUE;
  }
  else
  {
    needNewEntry = TRUE;
    current->section = s;
    current->fileName = yyFileName;
    current->startLine = yyLineNr;
    return FALSE;
  }
}

static void lineCount()
{
  for( const char* c = commentScanYYtext ; *c ; ++c )
    yyLineNr += (*c == '\n') ;
}


static QCString stripQuotes(const char *s)
{
  QCString name;
  if (s==0 || *s==0) return name;
  name=s;
  if (name.at(0)=='"' && name.at(name.length()-1)=='"')
  {
    name=name.mid(1,name.length()-2);
  }
  return name;
}

//-----------------------------------------------------------------

static void addXRefItem(const char *listName,const char *itemTitle,
                        const char *listTitle,bool append)
{
  Entry *docEntry = current; // inBody && previous ? previous : current;
  if (listName==0) return;
  //printf("addXRefItem(%s,%s,%s,%d)\n",listName,itemTitle,listTitle,append);

  ListItemInfo *lii=0;
  RefList *refList = Doxygen::xrefLists->find(listName);
  if (refList==0) // new list
  {
    refList = new RefList(listName,listTitle,itemTitle);
    Doxygen::xrefLists->insert(listName,refList);
    //printf("new list!\n");
  }
  if (docEntry->sli)
  {
    QListIterator<ListItemInfo> slii(*docEntry->sli);
    for (slii.toFirst();(lii=slii.current());++slii)
    {
      if (strcmp(lii->type,listName)==0) 
      {
        //printf("found %s lii->type=%s\n",listName,lii->type);
        break;
      }
    }
  }
  if (lii && append) // already found item of same type just before this one
  {
    //printf("listName=%s item id = %d existing\n",listName,lii->itemId);
    RefItem *item = refList->getRefItem(lii->itemId);
    ASSERT(item!=0);
    item->text += " <p>";
    item->text += outputXRef;
    //printf("%s: text +=%s\n",listName,item->text.data());
  }
  else // new item
  {
    int itemId  = refList->addRefItem();
    //printf("listName=%s item id = %d new current=%p\n",listName,itemId,current);

    // if we have already an item from the same list type (e.g. a second @todo)
    // in the same Entry (i.e. lii!=0) then we reuse its link anchor.
    char anchorLabel[1024];
    //sprintf(anchorLabel,"_%s%06d",listName,lii ? lii->itemId : itemId);
    sprintf(anchorLabel,"_%s%06d",listName,itemId);
    RefItem *item = refList->getRefItem(itemId);
    ASSERT(item!=0);
    item->text = outputXRef;
    item->listAnchor = anchorLabel;
    docEntry->addSpecialListItem(listName,itemId);
    QCString cmdString;
    cmdString.sprintf("\\xrefitem %s %d.",listName,itemId);
    if (inBody)
    {
      docEntry->inbodyDocs += cmdString;
    }
    else
    {
      docEntry->doc += cmdString;
    }
    SectionInfo *si=new SectionInfo(listName,anchorLabel,
	                            g_sectionTitle,SectionInfo::Anchor,
                                    g_sectionLevel);
    Doxygen::sectionDict.append(anchorLabel,si);
    docEntry->anchors->append(si);
  }
  outputXRef.resize(0);
}

//-----------------------------------------------------------------------------

// Adds a formula text to the list/dictionary of formulas if it was
// not already added. Returns the label of the formula.
static QCString addFormula()
{
  QCString formLabel;
  QCString fText=formulaText.simplifyWhiteSpace();
  Formula *f=0;
  if ((f=Doxygen::formulaDict[fText])==0)
  {
    f = new Formula(fText);
    Doxygen::formulaList.append(f);
    Doxygen::formulaDict.insert(fText,f);
    formLabel.sprintf("\\form#%d",f->getId());
    Doxygen::formulaNameDict.insert(formLabel,f);
  }
  else
  {
    formLabel.sprintf("\\form#%d",f->getId());
  }
  int i;
  for (i=0;i<formulaNewLines;i++) formLabel+="@_fakenl"; // add fake newlines to
                                                         // keep the warnings 
                                                         // correctly aligned.
  return formLabel;
}

//-----------------------------------------------------------------------------

static void checkFormula();
//-----------------------------------------------------------------------------

static SectionInfo::SectionType sectionLevelToType(int level)
{
  if (level>=0 && level<5) return (SectionInfo::SectionType)level;
  return SectionInfo::Anchor;
}

static void addSection()
{
  // create a new section element
  g_sectionTitle+=commentScanYYtext;
  g_sectionTitle=g_sectionTitle.stripWhiteSpace();
  SectionInfo *si = new SectionInfo(yyFileName,g_sectionLabel,
                          g_sectionTitle,sectionLevelToType(g_sectionLevel),g_sectionLevel);

  // add section to this entry
  current->anchors->append(si);

  // add section to the global dictionary
  Doxygen::sectionDict.append(g_sectionLabel,si);

}

//-----------------------------------------------------------------------------

static void addCite()
{
  Doxygen::citeDict->insert(commentScanYYtext);
}

//-----------------------------------------------------------------------------

// strip trailing whitespace (excluding newlines) from string s
static void stripTrailingWhiteSpace(QCString &s)
{
  uint len = s.length();
  int i = (int)len-1;
  char c;
  while (i>=0 && ((c = s.at(i))==' ' || c=='\t' || c=='\r')) i--;
  if (i!=(int)len-1) 
  {
    s.resize(i+2); // string upto and including char at pos i and \0 terminator
  }
}

// selects the output to write to
static inline void setOutput(OutputContext ctx)
{
  bool xrefAppendToPrev = xrefAppendFlag;
  // determine append flag for the next item (i.e. the end of this item)
  xrefAppendFlag = !inBody &&
                   inContext==OutputXRef && ctx==OutputXRef && // two consecutive xref items
                   newXRefKind==xrefKind &&                    // of the same kind
                   (xrefKind!=XRef_Item || 
		    newXRefItemKey==xrefItemKey);              // with the same key if \xrefitem
  //printf("%d && %d && %d && (%d || %d)\n",
  //                 inContext==OutputXRef,
  //                 ctx==OutputXRef,
  //                 newXRefKind==xrefKind,
  //                 xrefKind!=XRef_Item,
  //	  	     newXRefItemKey==xrefItemKey);
      
  //printf("refKind=%d newXRefKind=%d xrefAppendToPrev=%d xrefAppendFlag=%d\n",
  //   	  xrefKind,newXRefKind,xrefAppendToPrev,xrefAppendFlag);

  //printf("setOutput(inContext=%d ctx=%d)\n",inContext,ctx);
  if (inContext==OutputXRef) // end of XRef section => add the item 
  {
    // See if we can append this new xref item to the previous one.
    // We know this at the start of the next item of the same
    // type and need to remember this until the end of that item.
    switch(xrefKind)
    {
      case XRef_Todo:
	addXRefItem("todo",
	            theTranslator->trTodo(),
	            theTranslator->trTodoList(),
		    xrefAppendToPrev
		   );
	break;
      case XRef_Test:
	addXRefItem("test",
	            theTranslator->trTest(),
		    theTranslator->trTestList(),
		    xrefAppendToPrev
		   );
	break;
      case XRef_Bug:
	addXRefItem("bug",
	            theTranslator->trBug(),
		    theTranslator->trBugList(),
		    xrefAppendToPrev
		   );
	break;
      case XRef_Deprecated:
	addXRefItem("deprecated",
	            theTranslator->trDeprecated(),
		    theTranslator->trDeprecatedList(),
		    xrefAppendToPrev
		   );
	break;
      case XRef_Item:  // user defined list
	addXRefItem(xrefItemKey,
	            xrefItemTitle,
		    xrefListTitle,
		    xrefAppendToPrev
		   );
	break;
      case XRef_None:
	ASSERT(0);
	break;
    }
  }
  xrefItemKey = newXRefItemKey;

  int oldContext = inContext;
  inContext = ctx;
  if (inContext!=OutputXRef && inBody) inContext=OutputInbody;
  switch(inContext)
  {
    case OutputDoc:
      if (oldContext!=inContext)
      {
        stripTrailingWhiteSpace(current->doc);
        if (current->docFile.isEmpty())
        {
          current->docFile = yyFileName;
          current->docLine = yyLineNr;
        }
      }
      pOutputString = &current->doc;
      break;
    case OutputBrief:
      if (oldContext!=inContext)
      {
	if (current->briefFile.isEmpty())
	{
	  current->briefFile = yyFileName;
	  current->briefLine = yyLineNr;
	}
      }
      if (current->brief.stripWhiteSpace().isEmpty()) // we only want one brief
	                                              // description even if multiple
	                                              // are given...
      {
        pOutputString = &current->brief;
      }
      else
      {
        pOutputString = &current->doc;
	inContext = OutputDoc; // need to switch to detailed docs, see bug 631380
      }
      break;
    case OutputXRef:
      pOutputString = &outputXRef;
      // first item found, so can't append to previous
      //xrefAppendFlag = FALSE;
      break;
    case OutputInbody:
      pOutputString = &current->inbodyDocs;
      break;
  }
}

// add a string to the output
static inline void addOutput(const char *s)
{
  //printf("addOutput(%s)\n",s);
  *pOutputString+=s;
}

// add a character to the output
static inline void addOutput(char c)
{
  *pOutputString+=c;
}

static void endBrief(bool addToOutput=TRUE)
{
  if (!current->brief.stripWhiteSpace().isEmpty())
  { // only go to the detailed description if we have
    // found some brief description and not just whitespace
    briefEndsAtDot=FALSE;
    setOutput(OutputDoc);
    if (addToOutput) addOutput(commentScanYYtext);
  }
}

/* ----------------------------------------------------------------- */
#undef	YY_INPUT
#define	YY_INPUT(buf,result,max_size) result=yyread(buf,max_size);

static int prevPosition=0;

static int yyread(char *buf,int max_size)
{
    prevPosition=inputPosition;
    int c=0;
    while( c < max_size && inputString[inputPosition] )
    {
	*buf = inputString[inputPosition++] ;
	//printf("%d (%c)\n",*buf,*buf);
	c++; buf++;
    }
    return c;
}

/* start command character */
/* comment parsing states. */








































#line 3768 "<stdout>"

#define INITIAL 0
#define Comment 1
#define PageDocArg1 2
#define PageDocArg2 3
#define RelatesParam1 4
#define ClassDocArg1 5
#define ClassDocArg2 6
#define ClassDocArg3 7
#define CategoryDocArg1 8
#define XRefItemParam1 9
#define XRefItemParam2 10
#define XRefItemParam3 11
#define FileDocArg1 12
#define EnumDocArg1 13
#define NameSpaceDocArg1 14
#define PackageDocArg1 15
#define GroupDocArg1 16
#define GroupDocArg2 17
#define SectionLabel 18
#define SectionTitle 19
#define SubpageLabel 20
#define SubpageTitle 21
#define FormatBlock 22
#define LineParam 23
#define GuardParam 24
#define GuardParamEnd 25
#define SkipGuardedSection 26
#define SkipInternal 27
#define NameParam 28
#define InGroupParam 29
#define FnParam 30
#define OverloadParam 31
#define InheritParam 32
#define ExtendsParam 33
#define ReadFormulaShort 34
#define ReadFormulaLong 35
#define AnchorLabel 36
#define HtmlComment 37
#define SkipLang 38
#define CiteLabel 39
#define CopyDoc 40

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

static int yy_init_globals (void );

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int commentScanYYlex_destroy (void );

int commentScanYYget_debug (void );

void commentScanYYset_debug (int debug_flag  );

YY_EXTRA_TYPE commentScanYYget_extra (void );

void commentScanYYset_extra (YY_EXTRA_TYPE user_defined  );

FILE *commentScanYYget_in (void );

void commentScanYYset_in  (FILE * in_str  );

FILE *commentScanYYget_out (void );

void commentScanYYset_out  (FILE * out_str  );

yy_size_t commentScanYYget_leng (void );

char *commentScanYYget_text (void );

int commentScanYYget_lineno (void );

void commentScanYYset_lineno (int line_number  );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int commentScanYYwrap (void );
#else
extern int commentScanYYwrap (void );
#endif
#endif

    static void yyunput (int c,char *buf_ptr  );
    
#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT

#ifdef __cplusplus
static int yyinput (void );
#else
static int input (void );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 262144
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO fwrite( commentScanYYtext, commentScanYYleng, 1, commentScanYYout )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		yy_size_t n; \
		for ( n = 0; n < max_size && \
			     (c = getc( commentScanYYin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( commentScanYYin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = fread(buf, 1, max_size, commentScanYYin))==0 && ferror(commentScanYYin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(commentScanYYin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int commentScanYYlex (void);

#define YY_DECL int commentScanYYlex (void)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after commentScanYYtext and commentScanYYleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	if ( commentScanYYleng > 0 ) \
		YY_CURRENT_BUFFER_LVALUE->yy_at_bol = \
				(commentScanYYtext[commentScanYYleng - 1] == '\n'); \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    
#line 902 "commentscan.l"


  /* What can happen in while parsing a comment block:
   *   commands (e.g. @page, or \page)
   *   escaped commands (e.g. @@page or \\page).
   *   formulas (e.g. \f$ \f[ \f{..)
   *   directories (e.g. \doxygen\src\)
   *   autolist end. (e.g. a dot on an otherwise empty line)
   *   newlines.
   *   end of brief description due to blank line.
   *   end of brief description due to some command (@command, or <command>).
   *   words and whitespace and other characters (#,?!, etc).
   *   grouping commands (e.g. @{ and @})
   *   language switch (e.g. \~english or \~).
   *   mail adress (e.g. dimitri@stack.nl).
   *   quoted text, such as "foo@bar"
   *   XML commands, <summary></summary><remarks></remarks>
   */

#line 4013 "<stdout>"

	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

        /* Create the reject buffer large enough to save one state per allowed character. */
        if ( ! (yy_state_buf) )
            (yy_state_buf) = (yy_state_type *)commentScanYYalloc(YY_STATE_BUF_SIZE  );
            if ( ! (yy_state_buf) )
                YY_FATAL_ERROR( "out of dynamic memory in commentScanYYlex()" );

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! commentScanYYin )
			commentScanYYin = stdin;

		if ( ! commentScanYYout )
			commentScanYYout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			commentScanYYensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				commentScanYY_create_buffer(commentScanYYin,YY_BUF_SIZE );
		}

		commentScanYY_load_buffer_state( );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of commentScanYYtext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
		yy_current_state += YY_AT_BOL();

		(yy_state_ptr) = (yy_state_buf);
		*(yy_state_ptr)++ = yy_current_state;

yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 1129 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			*(yy_state_ptr)++ = yy_current_state;
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 8670 );

yy_find_action:
		yy_current_state = *--(yy_state_ptr);
		(yy_lp) = yy_accept[yy_current_state];
goto find_rule; /* Shut up GCC warning -Wall */
find_rule: /* we branch to this label when backing up */
		for ( ; ; ) /* until we find what rule we matched */
			{
			if ( (yy_lp) && (yy_lp) < yy_accept[yy_current_state + 1] )
				{
				yy_act = yy_acclist[(yy_lp)];
				if ( yy_act & YY_TRAILING_HEAD_MASK ||
				     (yy_looking_for_trail_begin) )
					{
					if ( yy_act == (yy_looking_for_trail_begin) )
						{
						(yy_looking_for_trail_begin) = 0;
						yy_act &= ~YY_TRAILING_HEAD_MASK;
						break;
						}
					}
				else if ( yy_act & YY_TRAILING_MASK )
					{
					(yy_looking_for_trail_begin) = yy_act & ~YY_TRAILING_MASK;
					(yy_looking_for_trail_begin) |= YY_TRAILING_HEAD_MASK;
					(yy_full_match) = yy_cp;
					(yy_full_state) = (yy_state_ptr);
					(yy_full_lp) = (yy_lp);
					}
				else
					{
					(yy_full_match) = yy_cp;
					(yy_full_state) = (yy_state_ptr);
					(yy_full_lp) = (yy_lp);
					break;
					}
				++(yy_lp);
				goto find_rule;
				}
			--yy_cp;
			yy_current_state = *--(yy_state_ptr);
			(yy_lp) = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
case 1:
YY_RULE_SETUP
#line 921 "commentscan.l"
{ // escaped command
  					  addOutput(commentScanYYtext);
  					}
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 924 "commentscan.l"
{ // escaped command
  					  addOutput(commentScanYYtext);
  					}
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 927 "commentscan.l"
{ // mail adress
  					  addOutput(commentScanYYtext);
  					}
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 930 "commentscan.l"
{ // quoted text
                                          addOutput(commentScanYYtext);
  					}
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 933 "commentscan.l"
{ // directory (or chain of commands!)
  					  addOutput(commentScanYYtext);
  					}
	YY_BREAK
case 6:
/* rule 6 can match eol */
YY_RULE_SETUP
#line 936 "commentscan.l"
{ // xref command 
					  if (inContext!=OutputXRef) 
					  {
					    briefEndsAtDot=FALSE;
					    setOutput(OutputDoc);
					  }
					  // continue with the same input
                                          REJECT;
					}
	YY_BREAK
/*
<Comment>{DETAILEDCMD}/[^a-z_A-Z]*	{ // command that can end a brief description
				          briefEndsAtDot=FALSE;
				          setOutput(OutputDoc);
					  // continue with the same input
                                          REJECT;
					}
   */
case 7:
YY_RULE_SETUP
#line 953 "commentscan.l"
{ // HTML command that ends a brief description
					  setOutput(OutputDoc);
					  // continue with the same input
                                          REJECT;
					}
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 958 "commentscan.l"
{ // start of a .NET XML style brief description
					  setOutput(OutputBrief);
                                          addOutput(commentScanYYtext);
  					}
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 962 "commentscan.l"
{ // start of a .NET XML style detailed description
					  setOutput(OutputDoc);
                                          addOutput(commentScanYYtext);
  					}
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 966 "commentscan.l"
{ // start of a .NET XML style detailed description
                                          addOutput(commentScanYYtext);
					  setOutput(OutputDoc);
  					}
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 970 "commentscan.l"
{ // end of a brief or detailed description
                                          addOutput(commentScanYYtext);
  					}
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 973 "commentscan.l"
{
                                          insidePre=TRUE;
                                          addOutput(commentScanYYtext);
                                        }
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 977 "commentscan.l"
{
                                          insidePre=FALSE;
                                          addOutput(commentScanYYtext);
                                        }
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 981 "commentscan.l"
{ // RCS tag which end a brief description
  					  setOutput(OutputDoc);
					  REJECT;
  					}
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 985 "commentscan.l"
{ 
  					  BEGIN(HtmlComment);
					}
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 988 "commentscan.l"
{
  					  warn(yyFileName,yyLineNr,
                                               "warning: found \\endinternal without matching \\internal"
                                              );
  					}
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 993 "commentscan.l"
{ // potentially interesting command
                                          // the {B}* in the front was added for bug620924
  					  QCString cmdName = QCString(commentScanYYtext).stripWhiteSpace().data()+1;
					  DocCmdMapper::Cmd *cmdPtr = DocCmdMapper::map(cmdName);
					  g_spaceBeforeCmd = commentScanYYtext[0]==' ' || commentScanYYtext[0]=='\t';
					  if (cmdPtr) // special action is required
					  {
					    if (cmdPtr->endsBrief)
					    { 
					      briefEndsAtDot=FALSE;
					      // this command forces the end of brief description
					      setOutput(OutputDoc);
					    }
                                            int i=0;
                                            while (commentScanYYtext[i]==' ' || commentScanYYtext[i]=='\t') i++;
                                            if (i>0) addOutput(QCString(commentScanYYtext).left(i));
					    if (cmdPtr->func && cmdPtr->func(cmdName))
					    {
					      // implicit split of the comment block into two
					      // entries. Restart the next block at the start
					      // of this command.
					      parseMore=TRUE;

					      // yuk, this is probably not very portable across lex implementations, 
					      // but we need to know the position in the input buffer where this 
					      // rule matched.
					      // for flex 2.5.33+ we should use YY_CURRENT_BUFFER_LVALUE
#if YY_FLEX_MINOR_VERSION>=5 && YY_FLEX_SUBMINOR_VERSION>=33
					      inputPosition=prevPosition + yy_bp - YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
#else
					      inputPosition=prevPosition + yy_bp - yy_current_buffer->yy_ch_buf;
#endif
					      yyterminate();
					    }
					    else if (cmdPtr->func==0)
					    {
					      // command without handler, to be processed
					      // later by parsedoc.cpp
					      addOutput(commentScanYYtext+i);
					    }
					  }
					  else // command not relevant
					  {
					    addOutput(commentScanYYtext);
					  }
  					}
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 1039 "commentscan.l"
{ // escaped formula command
  					  addOutput(commentScanYYtext);
  					}
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 1042 "commentscan.l"
{ // language switch command
                                          QCString langId = QString(commentScanYYtext).stripWhiteSpace().data()+2;
			       	          if (!langId.isEmpty() &&
					      stricmp(Config_getEnum("OUTPUT_LANGUAGE"),langId)!=0)
				          { // enable language specific section
				            BEGIN(SkipLang);
				          }
  					}
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 1050 "commentscan.l"
{ // start of a formula with custom environment
					  formulaText="\\begin";
					  formulaEnv=QString(commentScanYYtext).stripWhiteSpace().data()+2;
					  if (formulaEnv.at(formulaEnv.length()-1)=='{')
					  {
					    // remove trailing open brace
					    formulaEnv=formulaEnv.left(formulaEnv.length()-1);
					  }
					  formulaText+=formulaEnv;
					  formulaNewLines=0;
					  BEGIN(ReadFormulaLong);
  					}
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 1062 "commentscan.l"
{ // start of a inline formula
					  formulaText="$";
					  formulaNewLines=0;
					  BEGIN(ReadFormulaShort);
  					}
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 1067 "commentscan.l"
{ // start of a block formula
					  formulaText="\\[";
					  formulaNewLines=0;
					  BEGIN(ReadFormulaLong);
  					}
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 1072 "commentscan.l"
{ // begin of a group
                                          //langParser->handleGroupStartCommand(g_memberGroupHeader);
                                          openGroup(current,yyFileName,yyLineNr);
                                        }
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 1076 "commentscan.l"
{ // end of a group
                                          //langParser->handleGroupEndCommand();
                                          closeGroup(current,yyFileName,yyLineNr,TRUE);
                                          g_memberGroupHeader.resize(0);
					  parseMore=TRUE;
                                          needNewEntry = TRUE;
#if YY_FLEX_MINOR_VERSION>=5 && YY_FLEX_SUBMINOR_VERSION>=33
				          inputPosition=prevPosition + yy_bp - YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + strlen(commentScanYYtext);
#else
				          inputPosition=prevPosition + yy_bp - yy_current_buffer->yy_ch_buf + strlen(commentScanYYtext);
#endif
					  yyterminate();
                                        }
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 1089 "commentscan.l"
{ // escaped character
  					  addOutput(commentScanYYtext);
  					}
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 1092 "commentscan.l"
{ // normal word
					  addOutput(commentScanYYtext);
  					}
	YY_BREAK
case 27:
/* rule 27 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up commentScanYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up commentScanYYtext again */
YY_RULE_SETUP
#line 1095 "commentscan.l"
{ // explicit end autolist: e.g "  ."
  				          addOutput(commentScanYYtext); 
					}
	YY_BREAK
case 28:
#line 1099 "commentscan.l"
case 29:
YY_RULE_SETUP
#line 1099 "commentscan.l"
{ // start of autolist
                                          if (!Doxygen::markdownSupport)
                                          {
                                            REJECT;
                                          }
                                          else
                                          {
                                            if (inContext!=OutputXRef) 
                                            {
                                              briefEndsAtDot=FALSE;
                                              setOutput(OutputDoc);
                                            }
                                            addOutput(commentScanYYtext); 
                                          }
  					}
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 1114 "commentscan.l"
{ // start of autolist
					  if (inContext!=OutputXRef) 
					  {
					    briefEndsAtDot=FALSE;
					    setOutput(OutputDoc);
					  }
  				          addOutput(commentScanYYtext); 
  					}
	YY_BREAK
case 31:
/* rule 31 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up commentScanYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up commentScanYYtext again */
YY_RULE_SETUP
#line 1122 "commentscan.l"
{ // horizontal line (dashed)
  				          addOutput(commentScanYYtext); 
                                        }
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 1125 "commentscan.l"
{ // mdash
                                          addOutput(insidePre || Doxygen::markdownSupport ? commentScanYYtext : "&mdash;");
                                        }
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 1128 "commentscan.l"
{ // ndash
                                          addOutput(insidePre || Doxygen::markdownSupport ? commentScanYYtext : "&ndash;");
                                        }
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 1131 "commentscan.l"
{ // . at start or in the middle of a word, or ellipsis
  					  addOutput(commentScanYYtext);
  					}
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 1134 "commentscan.l"
{ // . with escaped space.
  					  addOutput(commentScanYYtext[0]);
  					  addOutput(commentScanYYtext[2]);
  					}
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 1138 "commentscan.l"
{ // . with comma such as "e.g.," 
  					  addOutput(commentScanYYtext);
  					}
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 1141 "commentscan.l"
{ // ellipsis with escaped space.
  					  addOutput("... ");
  					}
	YY_BREAK
case 38:
*yy_cp = (yy_hold_char); /* undo effects of setting up commentScanYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up commentScanYYtext again */
YY_RULE_SETUP
#line 1144 "commentscan.l"
{ // internal ellipsis 
  					  addOutput(commentScanYYtext);
  					}
	YY_BREAK
case 39:
/* rule 39 can match eol */
YY_RULE_SETUP
#line 1147 "commentscan.l"
{ // at least one blank line (or blank line command)
					  if (inContext==OutputXRef)
					  {
					    // see bug 613024, we need to put the newlines after ending the XRef section.
					    setOutput(OutputDoc);
  					    addOutput("\n\n");
					  }
					  else if (inContext!=OutputBrief)
					  {
  					    addOutput("\n\n");
					    setOutput(OutputDoc);
					  }
					  else // inContext==OutputBrief
					  { // only go to the detailed description if we have
					    // found some brief description and not just whitespace
					    endBrief(FALSE);
					  }
  					  lineCount();
  					}
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 1166 "commentscan.l"
{ // potential end of a JavaDoc style comment
  					  addOutput(*commentScanYYtext);
  					  if (briefEndsAtDot)
					  {
					    setOutput(OutputDoc);
					    briefEndsAtDot=FALSE;
					  }
  					}
	YY_BREAK
case 41:
/* rule 41 can match eol */
YY_RULE_SETUP
#line 1174 "commentscan.l"
{ // newline
  					  addOutput(*commentScanYYtext);
  					  yyLineNr++;
  					}
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 1178 "commentscan.l"
{ // catch-all for anything else
  					  addOutput(*commentScanYYtext);
  					}
	YY_BREAK
/* --------------   Rules for handling HTML comments ----------- */
case 43:
YY_RULE_SETUP
#line 1185 "commentscan.l"
{ BEGIN( Comment ); }
	YY_BREAK
case 44:
/* rule 44 can match eol */
YY_RULE_SETUP
#line 1186 "commentscan.l"
{ 
  					  if (*commentScanYYtext=='\n') yyLineNr++;
  					}
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 1189 "commentscan.l"
{ // ignore unimportant characters
  					}
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 1191 "commentscan.l"
{ // ignore every else
  					}
	YY_BREAK
/* --------------   Rules for handling formulas ---------------- */
case 47:
YY_RULE_SETUP
#line 1196 "commentscan.l"
{ // end of inline formula
  					  formulaText+="$";
					  addOutput(" "+addFormula());
					  BEGIN(Comment);
  					}
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 1201 "commentscan.l"
{ // end of block formula
					  formulaText+="\\]";
					  addOutput(" "+addFormula());
					  BEGIN(Comment);
  					}
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 1206 "commentscan.l"
{ // end of custom env formula
					  formulaText+="\\end";
					  formulaText+=formulaEnv;
					  addOutput(" "+addFormula());
					  BEGIN(Comment);
  					}
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 1212 "commentscan.l"
{ // any non-special character
                                          formulaText+=commentScanYYtext; 
 					} 
	YY_BREAK
case 51:
/* rule 51 can match eol */
YY_RULE_SETUP
#line 1215 "commentscan.l"
{ // new line
                                          formulaNewLines++;
                                          formulaText+=*commentScanYYtext; 
					  yyLineNr++; 
					}
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 1220 "commentscan.l"
{ // any othe character
                                          formulaText+=*commentScanYYtext; 
					}
	YY_BREAK
/* ------------ handle argument of enum command --------------- */
case 53:
/* rule 53 can match eol */
YY_RULE_SETUP
#line 1226 "commentscan.l"
{ // handle argument
  					  current->name = commentScanYYtext;
					  BEGIN( Comment );
  					}
	YY_BREAK
case 54:
/* rule 54 can match eol */
YY_RULE_SETUP
#line 1230 "commentscan.l"
{ // line continuation
  					  yyLineNr++;
					  addOutput('\n');
                                        }
	YY_BREAK
case 55:
/* rule 55 can match eol */
YY_RULE_SETUP
#line 1234 "commentscan.l"
{ // missing argument
  					  warn(yyFileName,yyLineNr,
                                               "warning: missing argument after \\enum."
                                              );
					  addOutput('\n');
  					  if (*commentScanYYtext=='\n') yyLineNr++;
					  BEGIN( Comment );
  					}
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 1242 "commentscan.l"
{ // ignore other stuff
  					}
	YY_BREAK
/* ------------ handle argument of namespace command --------------- */
case 57:
/* rule 57 can match eol */
YY_RULE_SETUP
#line 1247 "commentscan.l"
{ // handle argument
  					  current->name = substitute(commentScanYYtext,".","::");
					  BEGIN( Comment );
  					}
	YY_BREAK
case 58:
/* rule 58 can match eol */
YY_RULE_SETUP
#line 1251 "commentscan.l"
{ // line continuation
                                          yyLineNr++; 
					  addOutput('\n');
                                        }
	YY_BREAK
case 59:
/* rule 59 can match eol */
YY_RULE_SETUP
#line 1255 "commentscan.l"
{ // missing argument
  					  warn(yyFileName,yyLineNr,
                                               "warning: missing argument after "
					       "\\namespace."
                                              );
					  addOutput('\n');
  					  if (*commentScanYYtext=='\n') yyLineNr++;
					  BEGIN( Comment );
  					}
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 1264 "commentscan.l"
{ // ignore other stuff
  					}
	YY_BREAK
/* ------------ handle argument of package command --------------- */
case 61:
YY_RULE_SETUP
#line 1269 "commentscan.l"
{ // handle argument
  					  current->name = commentScanYYtext;
					  BEGIN( Comment );
  					}
	YY_BREAK
case 62:
/* rule 62 can match eol */
YY_RULE_SETUP
#line 1273 "commentscan.l"
{ // line continuation 
                                          yyLineNr++; 
					  addOutput('\n');
                                        }
	YY_BREAK
case 63:
/* rule 63 can match eol */
YY_RULE_SETUP
#line 1277 "commentscan.l"
{ // missing argument
  					  warn(yyFileName,yyLineNr,
                                               "warning: missing argument after "
					       "\\package."
                                              );
					  addOutput('\n');
  					  if (*commentScanYYtext=='\n') yyLineNr++;
					  BEGIN( Comment );
  					}
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 1286 "commentscan.l"
{ // ignore other stuff
  					}
	YY_BREAK
/* ------ handle argument of class/struct/union command --------------- */
case 65:
/* rule 65 can match eol */
YY_RULE_SETUP
#line 1291 "commentscan.l"
{ // first argument
  					  current->name = substitute(commentScanYYtext,".","::");
					  if (current->section==Entry::PROTOCOLDOC_SEC)
					  {
					    current->name+="-p";
					  }
					  // prepend outer scope name 
					  BEGIN( ClassDocArg2 );
					}
	YY_BREAK
case 66:
/* rule 66 can match eol */
YY_RULE_SETUP
#line 1300 "commentscan.l"
{
  					  current->name = substitute(commentScanYYtext,".","::");
					  BEGIN( ClassDocArg2 );
   					}
	YY_BREAK
case 67:
/* rule 67 can match eol */
YY_RULE_SETUP
#line 1304 "commentscan.l"
{ // line continuation
                                          yyLineNr++; 
					  addOutput('\n');
                                        }
	YY_BREAK
case 68:
/* rule 68 can match eol */
YY_RULE_SETUP
#line 1308 "commentscan.l"
{
  					  warn(yyFileName,yyLineNr,
                                               "warning: missing argument after "
					       "\\%s.",YY_START==ClassDocArg1?"class":"category"
                                              );
					  addOutput('\n');
  					  if (*commentScanYYtext=='\n') yyLineNr++;
					  BEGIN( Comment );
  					}
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 1317 "commentscan.l"
{ // ignore other stuff
  					}
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 1320 "commentscan.l"
{ // second argument; include file
					  current->includeFile = commentScanYYtext;
					  BEGIN( ClassDocArg3 );
					}
	YY_BREAK
case 71:
/* rule 71 can match eol */
YY_RULE_SETUP
#line 1324 "commentscan.l"
{ // line continuation
                                          yyLineNr++; 
					  addOutput('\n');
                                        }
	YY_BREAK
case 72:
/* rule 72 can match eol */
YY_RULE_SETUP
#line 1328 "commentscan.l"
{ 
					  addOutput('\n');
  					  if (*commentScanYYtext=='\n') yyLineNr++;
					  BEGIN( Comment );
					}
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 1333 "commentscan.l"
{ // ignore other stuff
  					}
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 1336 "commentscan.l"
{ // third argument; include file name
 					  current->includeName = commentScanYYtext;
					  BEGIN( Comment );
					}
	YY_BREAK
case 75:
/* rule 75 can match eol */
YY_RULE_SETUP
#line 1340 "commentscan.l"
{ // line continuation
                                          yyLineNr++;
					  addOutput('\n');
                                        }
	YY_BREAK
case 76:
/* rule 76 can match eol */
YY_RULE_SETUP
#line 1344 "commentscan.l"
{ 
  					  if (*commentScanYYtext=='\n') yyLineNr++;
  					  BEGIN( Comment );
					}
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 1348 "commentscan.l"
{ // ignore other stuff
  					}
	YY_BREAK
/* --------- handle arguments of {def,add,weak}group commands --------- */
case 78:
YY_RULE_SETUP
#line 1353 "commentscan.l"
{ // group name
  					  current->name = commentScanYYtext;
					  //lastDefGroup.groupname = commentScanYYtext;
					  //lastDefGroup.pri = current->groupingPri();
  					  // the .html stuff is for Qt compatibility
					  if (current->name.right(5)==".html") 
					  {
					    current->name=current->name.left(current->name.length()-5);
					  }
					  current->type.resize(0);
					  BEGIN(GroupDocArg2);
  					}
	YY_BREAK
case 79:
/* rule 79 can match eol */
YY_RULE_SETUP
#line 1365 "commentscan.l"
{ // line continuation
  					  yyLineNr++; 
					  addOutput('\n');
                                        }
	YY_BREAK
case 80:
/* rule 80 can match eol */
YY_RULE_SETUP
#line 1369 "commentscan.l"
{ // missing argument!
  					  warn(yyFileName,yyLineNr,
                                               "warning: missing group name after %s",
					       current->groupDocCmd()
                                              );
					  addOutput('\n');
  					  if (*commentScanYYtext=='\n') yyLineNr++;
					  BEGIN( Comment );
  					}
	YY_BREAK
case 81:
/* rule 81 can match eol */
YY_RULE_SETUP
#line 1378 "commentscan.l"
{ // line continuation
  					  yyLineNr++; 
					  addOutput('\n');
                                        }
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 1382 "commentscan.l"
{ // title (stored in type)
					  current->type += commentScanYYtext;
					  current->type = current->type.stripWhiteSpace();
  					}
	YY_BREAK
case 83:
/* rule 83 can match eol */
YY_RULE_SETUP
#line 1386 "commentscan.l"
{
                                          if ( current->groupDocType==Entry::GROUPDOC_NORMAL &&
                                               current->type.isEmpty() 
					     ) // defgroup requires second argument
					  {
  					    warn(yyFileName,yyLineNr,
                                                 "warning: missing title after "
					         "\\defgroup %s", current->name.data()
                                                );
					  }
  					  if (*commentScanYYtext=='\n') yyLineNr++; 
					  addOutput('\n');
					  BEGIN( Comment );
  					}
	YY_BREAK
/* --------- handle arguments of page/mainpage command ------------------- */
case 84:
YY_RULE_SETUP
#line 1403 "commentscan.l"
{ // first argument; page name
					  current->name = stripQuotes(commentScanYYtext);
					  BEGIN( PageDocArg2 ); 
					}
	YY_BREAK
case 85:
/* rule 85 can match eol */
YY_RULE_SETUP
#line 1407 "commentscan.l"
{ yyLineNr++; 
					  addOutput('\n');
                                        }
	YY_BREAK
case 86:
/* rule 86 can match eol */
YY_RULE_SETUP
#line 1410 "commentscan.l"
{
  					  warn(yyFileName,yyLineNr,
                                               "warning: missing argument after "
					       "\\page."
                                              );
  					  if (*commentScanYYtext=='\n') yyLineNr++;
					  addOutput('\n');
					  BEGIN( Comment );
  					}
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 1419 "commentscan.l"
{ // ignore other stuff
  					}
	YY_BREAK
case 88:
/* rule 88 can match eol */
YY_RULE_SETUP
#line 1421 "commentscan.l"
{ // second argument; page title
  				          yyLineNr++;
					  current->args = commentScanYYtext;
					  addOutput('\n');
					  BEGIN( Comment );
					}
	YY_BREAK
/* --------- handle arguments of the file/dir/example command ------------ */
case 89:
/* rule 89 can match eol */
YY_RULE_SETUP
#line 1430 "commentscan.l"
{ // no file name specfied
  					  if (*commentScanYYtext=='\n') yyLineNr++;
					  addOutput('\n');
					  BEGIN( Comment );
					}
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 1435 "commentscan.l"
{ // first argument; name
  					  current->name = stripQuotes(commentScanYYtext);
					  BEGIN( Comment );
  				        }
	YY_BREAK
case 91:
/* rule 91 can match eol */
YY_RULE_SETUP
#line 1439 "commentscan.l"
{ yyLineNr++; 
					  addOutput('\n');
                                        }
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 1442 "commentscan.l"
{ // ignore other stuff
  					}
	YY_BREAK
/* --------- handle arguments of the xrefitem command ------------ */
case 93:
YY_RULE_SETUP
#line 1447 "commentscan.l"
{ // first argument
  					  newXRefItemKey=commentScanYYtext;
                                          setOutput(OutputXRef);
					  BEGIN(XRefItemParam2);
					}
	YY_BREAK
case 94:
/* rule 94 can match eol */
YY_RULE_SETUP
#line 1452 "commentscan.l"
{ // line continuation
                                          yyLineNr++; 
					  addOutput('\n');
                                        }
	YY_BREAK
case 95:
/* rule 95 can match eol */
YY_RULE_SETUP
#line 1456 "commentscan.l"
{ // missing arguments
  					  warn(yyFileName,yyLineNr,
					       "warning: Missing first argument of \\xrefitem"
					      );
  					  if (*commentScanYYtext=='\n') yyLineNr++;
					  addOutput('\n');
					  inContext = OutputDoc;
					  BEGIN( Comment );
  					}
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 1465 "commentscan.l"
{ // ignore other stuff 
  					}
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 1468 "commentscan.l"
{ // second argument
  					  xrefItemTitle = stripQuotes(commentScanYYtext);
					  BEGIN(XRefItemParam3);
  					}
	YY_BREAK
case 98:
/* rule 98 can match eol */
YY_RULE_SETUP
#line 1472 "commentscan.l"
{ // line continuation
                                          yyLineNr++; 
					  addOutput('\n');
  					}
	YY_BREAK
case 99:
/* rule 99 can match eol */
YY_RULE_SETUP
#line 1476 "commentscan.l"
{ // missing argument
  					  warn(yyFileName,yyLineNr,
					      "warning: Missing second argument of \\xrefitem"
					      );
  					  if (*commentScanYYtext=='\n') yyLineNr++;
					  addOutput('\n');
					  inContext = OutputDoc;
					  BEGIN( Comment );
  					}
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 1485 "commentscan.l"
{ // ignore other stuff
  					}
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 1488 "commentscan.l"
{ // third argument
  					  xrefListTitle = stripQuotes(commentScanYYtext);
                                          xrefKind = XRef_Item;
					  BEGIN( Comment );
  					}
	YY_BREAK
case 102:
/* rule 102 can match eol */
YY_RULE_SETUP
#line 1493 "commentscan.l"
{ // line continuation
                                          yyLineNr++; 
					  addOutput('\n');
  					}
	YY_BREAK
case 103:
/* rule 103 can match eol */
YY_RULE_SETUP
#line 1497 "commentscan.l"
{ // missing argument
  					  warn(yyFileName,yyLineNr,
					      "warning: Missing third argument of \\xrefitem"
					      );
  					  if (*commentScanYYtext=='\n') yyLineNr++;
					  addOutput('\n');
					  inContext = OutputDoc;
					  BEGIN( Comment );
  					}
	YY_BREAK
case 104:
YY_RULE_SETUP
#line 1506 "commentscan.l"
{ // ignore other stuff
  					}
	YY_BREAK
/* ----- handle arguments of the relates(also)/memberof command ------- */
case 105:
YY_RULE_SETUP
#line 1512 "commentscan.l"
{ // argument
  					  current->relates = commentScanYYtext;
                                          //if (current->mGrpId!=DOX_NOGROUP) 
                                          //{
                                          //  memberGroupRelates = commentScanYYtext;
                                          //}
					  BEGIN( Comment );
					}
	YY_BREAK
case 106:
/* rule 106 can match eol */
YY_RULE_SETUP
#line 1520 "commentscan.l"
{ // line continuation
                                          yyLineNr++; 
					  addOutput('\n');
  					}
	YY_BREAK
case 107:
/* rule 107 can match eol */
YY_RULE_SETUP
#line 1524 "commentscan.l"
{ // missing argument
  					  warn(yyFileName,yyLineNr,
					      "warning: Missing argument of \\relates or \\memberof command"
					      );
  					  if (*commentScanYYtext=='\n') yyLineNr++;
					  addOutput('\n');
					  BEGIN( Comment );
  					}
	YY_BREAK
case 108:
YY_RULE_SETUP
#line 1532 "commentscan.l"
{ // ignore other stuff
  					}
	YY_BREAK
/* ----- handle arguments of the relates(also)/addindex commands ----- */
case 109:
/* rule 109 can match eol */
YY_RULE_SETUP
#line 1538 "commentscan.l"
{ // end of argument
  					  if (*commentScanYYtext=='\n') yyLineNr++;
					  addOutput('\n');
					  BEGIN( Comment );
  					}
	YY_BREAK
case 110:
/* rule 110 can match eol */
YY_RULE_SETUP
#line 1543 "commentscan.l"
{ // line continuation
                                          yyLineNr++; 
					  addOutput('\n');
  					}
	YY_BREAK
case 111:
YY_RULE_SETUP
#line 1547 "commentscan.l"
{ // ignore other stuff
  					  addOutput(*commentScanYYtext);
  					}
	YY_BREAK
/* ----- handle arguments of the section/subsection/.. commands ------- */
case 112:
YY_RULE_SETUP
#line 1553 "commentscan.l"
{ // first argyment
  					  g_sectionLabel=commentScanYYtext;
                                          addOutput(commentScanYYtext);
					  g_sectionTitle.resize(0);
					  BEGIN(SectionTitle);
  					}
	YY_BREAK
case 113:
/* rule 113 can match eol */
YY_RULE_SETUP
#line 1559 "commentscan.l"
{ // missing argument
  					  warn(yyFileName,yyLineNr,
					      "warning: \\section command has no label"
					      );
  					  if (*commentScanYYtext=='\n') yyLineNr++;
					  addOutput('\n');
					  BEGIN( Comment );
  					}
	YY_BREAK
case 114:
YY_RULE_SETUP
#line 1567 "commentscan.l"
{ // invalid character for section label
  					  warn(yyFileName,yyLineNr,
					      "warning: Invalid or missing section label"
					      );
					  BEGIN(Comment);
  					}
	YY_BREAK
case 115:
/* rule 115 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up commentScanYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up commentScanYYtext again */
YY_RULE_SETUP
#line 1573 "commentscan.l"
{ // end of section title
  					  addSection();
                                          addOutput(commentScanYYtext);
					  BEGIN( Comment );
  					}
	YY_BREAK
case 116:
*yy_cp = (yy_hold_char); /* undo effects of setting up commentScanYYtext */
(yy_c_buf_p) = yy_cp -= 8;
YY_DO_BEFORE_ACTION; /* set up commentScanYYtext again */
YY_RULE_SETUP
#line 1578 "commentscan.l"
{ // end of section title
  					  addSection();
                                          addOutput(commentScanYYtext);
					  BEGIN( Comment );
  					}
	YY_BREAK
case 117:
/* rule 117 can match eol */
YY_RULE_SETUP
#line 1583 "commentscan.l"
{ // line continuation
                                          yyLineNr++; 
					  addOutput('\n');
  					}
	YY_BREAK
case 118:
YY_RULE_SETUP
#line 1587 "commentscan.l"
{ // any character without special meaning
  					  g_sectionTitle+=commentScanYYtext;
					  addOutput(commentScanYYtext);
  					}
	YY_BREAK
case 119:
YY_RULE_SETUP
#line 1591 "commentscan.l"
{ // unescape escaped command
  					  g_sectionTitle+=&commentScanYYtext[1];
					  addOutput(commentScanYYtext);
  					}
	YY_BREAK
case 120:
YY_RULE_SETUP
#line 1595 "commentscan.l"
{ // unescape escaped character
  					  g_sectionTitle+=commentScanYYtext[1];
  					  addOutput(commentScanYYtext);
  					}
	YY_BREAK
case 121:
YY_RULE_SETUP
#line 1599 "commentscan.l"
{ // anything else
  					  g_sectionTitle+=commentScanYYtext;
					  addOutput(*commentScanYYtext);
  					}
	YY_BREAK
/* ----- handle arguments of the subpage command ------- */
case 122:
YY_RULE_SETUP
#line 1606 "commentscan.l"
{ // first argument
                                          addOutput(commentScanYYtext);
					  // we add subpage labels as a kind of "inheritance" relation to prevent
					  // needing to add another list to the Entry class.
					  current->extends->append(new BaseInfo(commentScanYYtext,Public,Normal));
					  BEGIN(SubpageTitle);
  					}
	YY_BREAK
case 123:
/* rule 123 can match eol */
YY_RULE_SETUP
#line 1613 "commentscan.l"
{ // missing argument
  					  warn(yyFileName,yyLineNr,
					      "warning: \\subpage command has no label"
					      );
  					  if (*commentScanYYtext=='\n') yyLineNr++;
					  addOutput('\n');
					  BEGIN( Comment );
  					}
	YY_BREAK
case 124:
/* rule 124 can match eol */
YY_RULE_SETUP
#line 1621 "commentscan.l"
{ // no title, end command
  					  addOutput(commentScanYYtext);
					  BEGIN( Comment );
  					}
	YY_BREAK
case 125:
YY_RULE_SETUP
#line 1625 "commentscan.l"
{ // add title, end of command
  					  addOutput(commentScanYYtext);
					  BEGIN( Comment );
  					}
	YY_BREAK
case 126:
YY_RULE_SETUP
#line 1629 "commentscan.l"
{ // no title, end of command
  					  unput(*commentScanYYtext);
					  BEGIN( Comment );
  					}
	YY_BREAK
/* ----- handle arguments of the anchor command ------- */
case 127:
YY_RULE_SETUP
#line 1636 "commentscan.l"
{ // found argument
                                          SectionInfo  *si = new SectionInfo(yyFileName,commentScanYYtext,0,SectionInfo::Anchor,0);
                                          Doxygen::sectionDict.append(commentScanYYtext,si);
  					  current->anchors->append(si);
					  addOutput(commentScanYYtext);
					  BEGIN( Comment );
  					}
	YY_BREAK
case 128:
/* rule 128 can match eol */
YY_RULE_SETUP
#line 1643 "commentscan.l"
{ // missing argument
  					  warn(yyFileName,yyLineNr,
					      "warning: \\anchor command has no label"
					      );
  					  if (*commentScanYYtext=='\n') yyLineNr++;
					  addOutput('\n');
					  BEGIN( Comment );
  					}
	YY_BREAK
case 129:
YY_RULE_SETUP
#line 1651 "commentscan.l"
{ // invalid character for anchor label
  					  warn(yyFileName,yyLineNr,
					      "warning: Invalid or missing anchor label"
					      );
					  BEGIN(Comment);
  					}
	YY_BREAK
/* ----- handle arguments of the preformatted block commands ------- */
case 130:
/* rule 130 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up commentScanYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up commentScanYYtext again */
YY_RULE_SETUP
#line 1661 "commentscan.l"
{ // possible ends
  					  addOutput(commentScanYYtext);
					  if (&commentScanYYtext[4]==blockName) // found end of the block
					  {
  					    BEGIN(Comment);
					  }
  					}
	YY_BREAK
case 131:
YY_RULE_SETUP
#line 1668 "commentscan.l"
{ // some word
  					  addOutput(commentScanYYtext);
  					}
	YY_BREAK
case 132:
/* rule 132 can match eol */
YY_RULE_SETUP
#line 1671 "commentscan.l"
{ // new line
  					  if (*commentScanYYtext=='\n') yyLineNr++;
					  addOutput('\n');
  					}
	YY_BREAK
case 133:
YY_RULE_SETUP
#line 1675 "commentscan.l"
{ // start of a C-comment
  					  g_commentCount++;
  					  addOutput(commentScanYYtext);
  					}
	YY_BREAK
case 134:
YY_RULE_SETUP
#line 1679 "commentscan.l"
{ // end of a C-comment
  					  addOutput(commentScanYYtext);
  					  g_commentCount--;
					  if (g_commentCount<0 && blockName!="verbatim")
					  {
					    warn(yyFileName,yyLineNr,
					         "warning: found */ without matching /* while inside a \\%s block! Perhaps a missing \\end%s?\n",blockName.data(),blockName.data());
					  }
  					}
	YY_BREAK
case 135:
YY_RULE_SETUP
#line 1688 "commentscan.l"
{
  					  addOutput(*commentScanYYtext);
  					}
	YY_BREAK
case YY_STATE_EOF(FormatBlock):
#line 1691 "commentscan.l"
{
                                          warn(yyFileName,yyLineNr,
	                                    "warning: reached end of comment while inside a @%s block; check for missing @end%s tag!",
	                                    blockName.data(),blockName.data()
	                                  );				
					  yyterminate();
    					}
	YY_BREAK
/* ----- handle arguments of if/ifnot commands ------- */
case 136:
YY_RULE_SETUP
#line 1701 "commentscan.l"
{ // parameter of if/ifnot guard
                                          bool sectionEnabled = Config_getList("ENABLED_SECTIONS").find(commentScanYYtext)!=-1;
					  bool parentEnabled = TRUE;
					  if (!guards.isEmpty()) parentEnabled = guards.top()->isEnabled();
					  if (parentEnabled)
					  {
					    if (
						(sectionEnabled && guardType==Guard_If) ||  
						(!sectionEnabled && guardType==Guard_IfNot)
					       ) // section is visible
					    {
					      guards.push(new GuardedSection(TRUE,TRUE));
					      enabledSectionFound=TRUE;
					      BEGIN( GuardParamEnd );
					    }
					    else // section is invisible
					    {
					      if (guardType!=Guard_Skip)
					      {
					      	guards.push(new GuardedSection(FALSE,TRUE));
					      }
					      BEGIN( SkipGuardedSection );
					    }
					  }
					  else // invisible because of parent
					  {
					    guards.push(new GuardedSection(FALSE,FALSE));
					    BEGIN( SkipGuardedSection );
					  }
  					}
	YY_BREAK
case 137:
/* rule 137 can match eol */
YY_RULE_SETUP
#line 1731 "commentscan.l"
{ // end of argument
  					  if (*commentScanYYtext=='\n') yyLineNr++;
					  //next line is commented out due to bug620924
					  //addOutput('\n');
					  BEGIN( Comment );
  					}
	YY_BREAK
case 138:
/* rule 138 can match eol */
YY_RULE_SETUP
#line 1737 "commentscan.l"
{ // line continuation
                                          yyLineNr++; 
					  addOutput('\n');
  					}
	YY_BREAK
case 139:
YY_RULE_SETUP
#line 1741 "commentscan.l"
{ // ignore other stuff
  					  addOutput(*commentScanYYtext);
  					}
	YY_BREAK
case 140:
/* rule 140 can match eol */
YY_RULE_SETUP
#line 1744 "commentscan.l"
{
  					  g_spaceBeforeIf=FALSE;
  					  BEGIN(Comment);
  					}
	YY_BREAK
case 141:
YY_RULE_SETUP
#line 1748 "commentscan.l"
{
  					  if (g_spaceBeforeIf) // needed for 665313 in combation with bug620924
					  {
					    addOutput(" ");
					  }
  					  g_spaceBeforeIf=FALSE;
  					  BEGIN(Comment);
  					}
	YY_BREAK
case 142:
YY_RULE_SETUP
#line 1756 "commentscan.l"
{
  					  unput(*commentScanYYtext);
  					  BEGIN(Comment);
  					}
	YY_BREAK
/* ----- handle skipping of conditional sections ------- */
case 143:
/* rule 143 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up commentScanYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up commentScanYYtext again */
YY_RULE_SETUP
#line 1763 "commentscan.l"
{
                                          guardType = Guard_IfNot;
  					  BEGIN( GuardParam );
  					}
	YY_BREAK
case 144:
/* rule 144 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up commentScanYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up commentScanYYtext again */
YY_RULE_SETUP
#line 1767 "commentscan.l"
{
                                          guardType = Guard_If;
  					  BEGIN( GuardParam );
  					}
	YY_BREAK
case 145:
/* rule 145 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up commentScanYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up commentScanYYtext again */
YY_RULE_SETUP
#line 1771 "commentscan.l"
{
  					  if (guards.isEmpty())
					  {
					    warn(yyFileName,yyLineNr,
						"warning: found @endif without matching start command");
					  }
					  else
					  {
					    delete guards.pop();
					    BEGIN( GuardParamEnd );
					  }
  					}
	YY_BREAK
case 146:
/* rule 146 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up commentScanYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up commentScanYYtext again */
YY_RULE_SETUP
#line 1783 "commentscan.l"
{
  					  if (guards.isEmpty())
					  {
					    warn(yyFileName,yyLineNr,
						"warning: found @else without matching start command");
					  }
					  else
					  {
					    if (!enabledSectionFound && guards.top()->parentVisible())
					    {
					      delete guards.pop();
					      guards.push(new GuardedSection(TRUE,TRUE));
					      enabledSectionFound=TRUE;
					      BEGIN( GuardParamEnd );
					    }
					  }
  					}
	YY_BREAK
case 147:
/* rule 147 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up commentScanYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up commentScanYYtext again */
YY_RULE_SETUP
#line 1800 "commentscan.l"
{
  					  if (guards.isEmpty())
					  {
					    warn(yyFileName,yyLineNr,
						"warning: found @elseif without matching start command");
					  }
					  else
					  {
					    if (!enabledSectionFound && guards.top()->parentVisible())
					    {
					      delete guards.pop();
					      BEGIN( GuardParam );
					    }
					  }
  					}
	YY_BREAK
case 148:
/* rule 148 can match eol */
YY_RULE_SETUP
#line 1815 "commentscan.l"
{ // skip line
  					  if (*commentScanYYtext=='\n') yyLineNr++;
					  //addOutput('\n');
  					}
	YY_BREAK
case 149:
YY_RULE_SETUP
#line 1819 "commentscan.l"
{ // skip non-special characters
  					}
	YY_BREAK
case 150:
YY_RULE_SETUP
#line 1821 "commentscan.l"
{ // any other character
  					}
	YY_BREAK
/* ----- handle skipping of internal section ------- */
case 151:
/* rule 151 can match eol */
YY_RULE_SETUP
#line 1827 "commentscan.l"
{ // skip line
  					  if (*commentScanYYtext=='\n') yyLineNr++;
					  addOutput('\n');
  					}
	YY_BREAK
case 152:
*yy_cp = (yy_hold_char); /* undo effects of setting up commentScanYYtext */
(yy_c_buf_p) = yy_cp = yy_bp + 3;
YY_DO_BEFORE_ACTION; /* set up commentScanYYtext again */
YY_RULE_SETUP
#line 1831 "commentscan.l"
{
                                          g_condCount++;
  					}
	YY_BREAK
case 153:
*yy_cp = (yy_hold_char); /* undo effects of setting up commentScanYYtext */
(yy_c_buf_p) = yy_cp = yy_bp + 6;
YY_DO_BEFORE_ACTION; /* set up commentScanYYtext again */
YY_RULE_SETUP
#line 1834 "commentscan.l"
{
                                          g_condCount++;
  					}
	YY_BREAK
case 154:
*yy_cp = (yy_hold_char); /* undo effects of setting up commentScanYYtext */
(yy_c_buf_p) = yy_cp = yy_bp + 1;
YY_DO_BEFORE_ACTION; /* set up commentScanYYtext again */
YY_RULE_SETUP
#line 1837 "commentscan.l"
{
                                          g_condCount--;
					  if (g_condCount<0) // handle conditional section around of \internal, see bug607743  
					  {
					    unput('\\');
					    BEGIN(Comment);
					  }
  					}
	YY_BREAK
case 155:
*yy_cp = (yy_hold_char); /* undo effects of setting up commentScanYYtext */
(yy_c_buf_p) = yy_cp = yy_bp + 1;
YY_DO_BEFORE_ACTION; /* set up commentScanYYtext again */
YY_RULE_SETUP
#line 1845 "commentscan.l"
{
  					  if (g_sectionLevel>0)
					  {
					    unput('\\');
					    BEGIN(Comment);
					  }
  					}
	YY_BREAK
case 156:
*yy_cp = (yy_hold_char); /* undo effects of setting up commentScanYYtext */
(yy_c_buf_p) = yy_cp = yy_bp + 1;
YY_DO_BEFORE_ACTION; /* set up commentScanYYtext again */
YY_RULE_SETUP
#line 1852 "commentscan.l"
{
  					  if (g_sectionLevel>1)
					  {
					    unput('\\');
					    BEGIN(Comment);
					  }
  					}
	YY_BREAK
case 157:
*yy_cp = (yy_hold_char); /* undo effects of setting up commentScanYYtext */
(yy_c_buf_p) = yy_cp = yy_bp + 1;
YY_DO_BEFORE_ACTION; /* set up commentScanYYtext again */
YY_RULE_SETUP
#line 1859 "commentscan.l"
{
  					  if (g_sectionLevel>2)
					  {
					    unput('\\');
					    BEGIN(Comment);
					  }
  					}
	YY_BREAK
case 158:
*yy_cp = (yy_hold_char); /* undo effects of setting up commentScanYYtext */
(yy_c_buf_p) = yy_cp = yy_bp + 1;
YY_DO_BEFORE_ACTION; /* set up commentScanYYtext again */
YY_RULE_SETUP
#line 1866 "commentscan.l"
{
  					  if (g_sectionLevel>3)
					  {
					    unput('\\');
					    BEGIN(Comment);
					  }
  					}
	YY_BREAK
case 159:
YY_RULE_SETUP
#line 1873 "commentscan.l"
{
					  BEGIN(Comment);
					}
	YY_BREAK
case 160:
YY_RULE_SETUP
#line 1876 "commentscan.l"
{ // skip non-special characters
  					}
	YY_BREAK
case 161:
YY_RULE_SETUP
#line 1878 "commentscan.l"
{ // any other character
  					}
	YY_BREAK
/* ----- handle argument of name command ------- */
case 162:
/* rule 162 can match eol */
YY_RULE_SETUP
#line 1884 "commentscan.l"
{ // end of argument
  					  if (*commentScanYYtext=='\n') yyLineNr++;
					  addOutput('\n');
					  BEGIN( Comment );
  					}
	YY_BREAK
case 163:
/* rule 163 can match eol */
YY_RULE_SETUP
#line 1889 "commentscan.l"
{ // line continuation
                                          yyLineNr++; 
					  addOutput('\n');
					  g_memberGroupHeader+=' ';
  					}
	YY_BREAK
case 164:
YY_RULE_SETUP
#line 1894 "commentscan.l"
{ // ignore other stuff
					  g_memberGroupHeader+=*commentScanYYtext;
					  current->name+=*commentScanYYtext;
  					}
	YY_BREAK
/* ----- handle argument of ingroup command ------- */
case 165:
YY_RULE_SETUP
#line 1901 "commentscan.l"
{ // group id
  					  current->groups->append(
					    new Grouping(commentScanYYtext, Grouping::GROUPING_INGROUP)
					  );
					  inGroupParamFound=TRUE;
  					}
	YY_BREAK
case 166:
/* rule 166 can match eol */
YY_RULE_SETUP
#line 1907 "commentscan.l"
{ // missing argument
  					  if (!inGroupParamFound)
					  {
  					    warn(yyFileName,yyLineNr,
					        "warning: Missing group name for \\ingroup command"
					        );
					  }
  					  if (*commentScanYYtext=='\n') yyLineNr++;
					  addOutput('\n');
					  BEGIN( Comment );
  					}
	YY_BREAK
case 167:
/* rule 167 can match eol */
YY_RULE_SETUP
#line 1918 "commentscan.l"
{ // line continuation
                                          yyLineNr++; 
					  addOutput('\n');
  					}
	YY_BREAK
case 168:
YY_RULE_SETUP
#line 1922 "commentscan.l"
{ // ignore other stuff
  					  addOutput(*commentScanYYtext);
  					}
	YY_BREAK
/* ----- handle argument of fn command ------- */
case 169:
/* rule 169 can match eol */
YY_RULE_SETUP
#line 1928 "commentscan.l"
{ // end of argument
  					  if (braceCount==0)
					  {
					    if (*commentScanYYtext=='\n') yyLineNr++;
					    addOutput('\n');
					    langParser->parsePrototype(functionProto);
					    BEGIN( Comment );
					  }
  					}
	YY_BREAK
case 170:
/* rule 170 can match eol */
YY_RULE_SETUP
#line 1937 "commentscan.l"
{ // line continuation
                                          yyLineNr++; 
					  functionProto+=' ';
  					}
	YY_BREAK
case 171:
YY_RULE_SETUP
#line 1941 "commentscan.l"
{ // non-special characters
                                          functionProto+=commentScanYYtext;
  					}
	YY_BREAK
case 172:
YY_RULE_SETUP
#line 1944 "commentscan.l"
{
                                          functionProto+=commentScanYYtext;
					  braceCount++;
					}
	YY_BREAK
case 173:
YY_RULE_SETUP
#line 1948 "commentscan.l"
{
                                          functionProto+=commentScanYYtext;
					  braceCount--;
					}
	YY_BREAK
case 174:
YY_RULE_SETUP
#line 1952 "commentscan.l"
{ // add other stuff
                                          functionProto+=*commentScanYYtext;
  					}
	YY_BREAK
/* ----- handle argument of overload command ------- */
case 175:
/* rule 175 can match eol */
YY_RULE_SETUP
#line 1960 "commentscan.l"
{ // end of argument
  					  if (*commentScanYYtext=='\n') yyLineNr++;
					  addOutput('\n');
					  if (functionProto.stripWhiteSpace().isEmpty())
					  { // plain overload command
					    addOutput(getOverloadDocs());
					  }
					  else // overload declaration
					  {
                                            makeStructuralIndicator(Entry::OVERLOADDOC_SEC);
					    langParser->parsePrototype(functionProto);
					  }
					  BEGIN( Comment );
  					}
	YY_BREAK
case 176:
/* rule 176 can match eol */
YY_RULE_SETUP
#line 1974 "commentscan.l"
{ // line continuation
                                          yyLineNr++; 
					  functionProto+=' ';
  					}
	YY_BREAK
case 177:
YY_RULE_SETUP
#line 1978 "commentscan.l"
{ // add other stuff
                                          functionProto+=*commentScanYYtext;
  					}
	YY_BREAK
/* ----- handle argument of inherit command ------- */
case 178:
YY_RULE_SETUP
#line 1984 "commentscan.l"
{ // found argument
					  current->extends->append(
					    new BaseInfo(removeRedundantWhiteSpace(commentScanYYtext),Public,Normal)
					  );
					  BEGIN( Comment );
  					}
	YY_BREAK
case 179:
/* rule 179 can match eol */
YY_RULE_SETUP
#line 1990 "commentscan.l"
{ // missing argument
  					  warn(yyFileName,yyLineNr,
					      "warning: \\inherit command has no argument"
					      );
  					  if (*commentScanYYtext=='\n') yyLineNr++;
					  addOutput('\n');
					  BEGIN( Comment );
  					}
	YY_BREAK
case 180:
YY_RULE_SETUP
#line 1998 "commentscan.l"
{ // invalid character for anchor label
  					  warn(yyFileName,yyLineNr,
					      "warning: Invalid or missing name for \\inherit command"
					      );
					  BEGIN(Comment);
  					}
	YY_BREAK
/* ----- handle argument of extends and implements commands ------- */
case 181:
YY_RULE_SETUP
#line 2007 "commentscan.l"
{ // found argument
					  current->extends->append(
					    new BaseInfo(removeRedundantWhiteSpace(commentScanYYtext),Public,Normal)
					  );
					  BEGIN( Comment );
  					}
	YY_BREAK
case 182:
/* rule 182 can match eol */
YY_RULE_SETUP
#line 2013 "commentscan.l"
{ // missing argument
  					  warn(yyFileName,yyLineNr,
					      "warning: \\extends or \\implements command has no argument"
					      );
  					  if (*commentScanYYtext=='\n') yyLineNr++;
					  addOutput('\n');
					  BEGIN( Comment );
  					}
	YY_BREAK
case 183:
YY_RULE_SETUP
#line 2021 "commentscan.l"
{ // ignore other stuff
  					}
	YY_BREAK
/* ----- handle language specific sections ------- */
case 184:
YY_RULE_SETUP
#line 2026 "commentscan.l"
{ /* language switch */
                                     QCString langId = &commentScanYYtext[2];
				     if (langId.isEmpty() ||
					 stricmp(Config_getEnum("OUTPUT_LANGUAGE"),langId)==0)
				     { // enable language specific section
				       BEGIN(Comment);
				     }
                                   }
	YY_BREAK
case 185:
YY_RULE_SETUP
#line 2034 "commentscan.l"
{ /* any character not a *, @, backslash or new line */
                                   }
	YY_BREAK
case 186:
/* rule 186 can match eol */
YY_RULE_SETUP
#line 2036 "commentscan.l"
{ /* new line in verbatim block */
  		                     if (*commentScanYYtext=='\n') yyLineNr++;
                                   }
	YY_BREAK
case 187:
YY_RULE_SETUP
#line 2039 "commentscan.l"
{ /* any other character */
                                   }
	YY_BREAK
/* ----- handle arguments of the cite command ------- */
case 188:
YY_RULE_SETUP
#line 2044 "commentscan.l"
{ // found argyment
  					  addCite();
                                          addOutput(commentScanYYtext);
					  BEGIN(Comment);
  					}
	YY_BREAK
case 189:
/* rule 189 can match eol */
YY_RULE_SETUP
#line 2049 "commentscan.l"
{ // missing argument
  					  warn(yyFileName,yyLineNr,
					      "warning: \\cite command has no label"
					      );
  					  if (*commentScanYYtext=='\n') yyLineNr++;
					  addOutput('\n');
					  BEGIN( Comment );
  					}
	YY_BREAK
case 190:
YY_RULE_SETUP
#line 2057 "commentscan.l"
{ // invalid character for cite label
  					  warn(yyFileName,yyLineNr,
					      "warning: Invalid or missing cite label"
					      );
					  BEGIN(Comment);
  					}
	YY_BREAK
/* ----- handle argument of the copydoc command ------- */
case YY_STATE_EOF(CopyDoc):
#line 2066 "commentscan.l"
case 191:
/* rule 191 can match eol */
YY_RULE_SETUP
#line 2067 "commentscan.l"
{
  					  if (*commentScanYYtext=='\n') yyLineNr++;
					  addOutput('\n');
					  setOutput(OutputDoc);
                                          addOutput("\\copydetails ");
					  addOutput(g_copyDocArg);
					  addOutput("\n");
					  BEGIN(Comment);
  					}
	YY_BREAK
case 192:
YY_RULE_SETUP
#line 2076 "commentscan.l"
{
  					  g_copyDocArg+=commentScanYYtext;
					  addOutput(commentScanYYtext);
  					}
	YY_BREAK
case 193:
YY_RULE_SETUP
#line 2080 "commentscan.l"
{
  					  g_copyDocArg+=commentScanYYtext;
					  addOutput(commentScanYYtext);
  					}
	YY_BREAK
case 194:
YY_RULE_SETUP
#line 2086 "commentscan.l"
ECHO;
	YY_BREAK
#line 6130 "<stdout>"
			case YY_STATE_EOF(INITIAL):
			case YY_STATE_EOF(Comment):
			case YY_STATE_EOF(PageDocArg1):
			case YY_STATE_EOF(PageDocArg2):
			case YY_STATE_EOF(RelatesParam1):
			case YY_STATE_EOF(ClassDocArg1):
			case YY_STATE_EOF(ClassDocArg2):
			case YY_STATE_EOF(ClassDocArg3):
			case YY_STATE_EOF(CategoryDocArg1):
			case YY_STATE_EOF(XRefItemParam1):
			case YY_STATE_EOF(XRefItemParam2):
			case YY_STATE_EOF(XRefItemParam3):
			case YY_STATE_EOF(FileDocArg1):
			case YY_STATE_EOF(EnumDocArg1):
			case YY_STATE_EOF(NameSpaceDocArg1):
			case YY_STATE_EOF(PackageDocArg1):
			case YY_STATE_EOF(GroupDocArg1):
			case YY_STATE_EOF(GroupDocArg2):
			case YY_STATE_EOF(SectionLabel):
			case YY_STATE_EOF(SectionTitle):
			case YY_STATE_EOF(SubpageLabel):
			case YY_STATE_EOF(SubpageTitle):
			case YY_STATE_EOF(LineParam):
			case YY_STATE_EOF(GuardParam):
			case YY_STATE_EOF(GuardParamEnd):
			case YY_STATE_EOF(SkipGuardedSection):
			case YY_STATE_EOF(SkipInternal):
			case YY_STATE_EOF(NameParam):
			case YY_STATE_EOF(InGroupParam):
			case YY_STATE_EOF(FnParam):
			case YY_STATE_EOF(OverloadParam):
			case YY_STATE_EOF(InheritParam):
			case YY_STATE_EOF(ExtendsParam):
			case YY_STATE_EOF(ReadFormulaShort):
			case YY_STATE_EOF(ReadFormulaLong):
			case YY_STATE_EOF(AnchorLabel):
			case YY_STATE_EOF(HtmlComment):
			case YY_STATE_EOF(SkipLang):
			case YY_STATE_EOF(CiteLabel):
				yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed commentScanYYin at a new source and called
			 * commentScanYYlex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = commentScanYYin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( commentScanYYwrap( ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * commentScanYYtext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of commentScanYYlex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (void)
{
    	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = (yytext_ptr);
	register int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			yy_size_t num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			YY_FATAL_ERROR(
"input buffer overflow, can't enlarge buffer because scanner uses REJECT" );

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			commentScanYYrestart(commentScanYYin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yy_size_t) ((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) commentScanYYrealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (void)
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    
	yy_current_state = (yy_start);
	yy_current_state += YY_AT_BOL();

	(yy_state_ptr) = (yy_state_buf);
	*(yy_state_ptr)++ = yy_current_state;

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 1129 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		*(yy_state_ptr)++ = yy_current_state;
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state )
{
	register int yy_is_jam;
    
	register YY_CHAR yy_c = 1;
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 1129 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 1128);
	if ( ! yy_is_jam )
		*(yy_state_ptr)++ = yy_current_state;

	return yy_is_jam ? 0 : yy_current_state;
}

    static void yyunput (int c, register char * yy_bp )
{
	register char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up commentScanYYtext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register yy_size_t number_to_move = (yy_n_chars) + 2;
		register char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		register char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (void)
#else
    static int input  (void)
#endif

{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			yy_size_t offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					commentScanYYrestart(commentScanYYin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( commentScanYYwrap( ) )
						return 0;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve commentScanYYtext */
	(yy_hold_char) = *++(yy_c_buf_p);

	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = (c == '\n');

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void commentScanYYrestart  (FILE * input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        commentScanYYensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            commentScanYY_create_buffer(commentScanYYin,YY_BUF_SIZE );
	}

	commentScanYY_init_buffer(YY_CURRENT_BUFFER,input_file );
	commentScanYY_load_buffer_state( );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void commentScanYY_switch_to_buffer  (YY_BUFFER_STATE  new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		commentScanYYpop_buffer_state();
	 *		commentScanYYpush_buffer_state(new_buffer);
     */
	commentScanYYensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	commentScanYY_load_buffer_state( );

	/* We don't actually know whether we did this switch during
	 * EOF (commentScanYYwrap()) processing, but the only time this flag
	 * is looked at is after commentScanYYwrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

static void commentScanYY_load_buffer_state  (void)
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	commentScanYYin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE commentScanYY_create_buffer  (FILE * file, int  size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) commentScanYYalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in commentScanYY_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) commentScanYYalloc(b->yy_buf_size + 2  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in commentScanYY_create_buffer()" );

	b->yy_is_our_buffer = 1;

	commentScanYY_init_buffer(b,file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with commentScanYY_create_buffer()
 * 
 */
    void commentScanYY_delete_buffer (YY_BUFFER_STATE  b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		commentScanYYfree((void *) b->yy_ch_buf  );

	commentScanYYfree((void *) b  );
}

#ifndef __cplusplus
extern int isatty (int );
#endif /* __cplusplus */
    
/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a commentScanYYrestart() or at EOF.
 */
    static void commentScanYY_init_buffer  (YY_BUFFER_STATE  b, FILE * file )

{
	int oerrno = errno;
    
	commentScanYY_flush_buffer(b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then commentScanYY_init_buffer was _probably_
     * called from commentScanYYrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void commentScanYY_flush_buffer (YY_BUFFER_STATE  b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		commentScanYY_load_buffer_state( );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void commentScanYYpush_buffer_state (YY_BUFFER_STATE new_buffer )
{
    	if (new_buffer == NULL)
		return;

	commentScanYYensure_buffer_stack();

	/* This block is copied from commentScanYY_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from commentScanYY_switch_to_buffer. */
	commentScanYY_load_buffer_state( );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void commentScanYYpop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	commentScanYY_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		commentScanYY_load_buffer_state( );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void commentScanYYensure_buffer_stack (void)
{
	yy_size_t num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		(yy_buffer_stack) = (struct yy_buffer_state**)commentScanYYalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in commentScanYYensure_buffer_stack()" );
								  
		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)commentScanYYrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in commentScanYYensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * 
 * @return the newly allocated buffer state object. 
 */
YY_BUFFER_STATE commentScanYY_scan_buffer  (char * base, yy_size_t  size )
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) commentScanYYalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in commentScanYY_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	commentScanYY_switch_to_buffer(b  );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to commentScanYYlex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * 
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       commentScanYY_scan_bytes() instead.
 */
YY_BUFFER_STATE commentScanYY_scan_string (yyconst char * yystr )
{
    
	return commentScanYY_scan_bytes(yystr,strlen(yystr) );
}

/** Setup the input buffer state to scan the given bytes. The next call to commentScanYYlex() will
 * scan from a @e copy of @a bytes.
 * @param bytes the byte buffer to scan
 * @param len the number of bytes in the buffer pointed to by @a bytes.
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE commentScanYY_scan_bytes  (yyconst char * yybytes, yy_size_t  _yybytes_len )
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n, i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = _yybytes_len + 2;
	buf = (char *) commentScanYYalloc(n  );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in commentScanYY_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = commentScanYY_scan_buffer(buf,n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in commentScanYY_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yy_fatal_error (yyconst char* msg )
{
    	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up commentScanYYtext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		commentScanYYtext[commentScanYYleng] = (yy_hold_char); \
		(yy_c_buf_p) = commentScanYYtext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		commentScanYYleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the current line number.
 * 
 */
int commentScanYYget_lineno  (void)
{
        
    return commentScanYYlineno;
}

/** Get the input stream.
 * 
 */
FILE *commentScanYYget_in  (void)
{
        return commentScanYYin;
}

/** Get the output stream.
 * 
 */
FILE *commentScanYYget_out  (void)
{
        return commentScanYYout;
}

/** Get the length of the current token.
 * 
 */
yy_size_t commentScanYYget_leng  (void)
{
        return commentScanYYleng;
}

/** Get the current token.
 * 
 */

char *commentScanYYget_text  (void)
{
        return commentScanYYtext;
}

/** Set the current line number.
 * @param line_number
 * 
 */
void commentScanYYset_lineno (int  line_number )
{
    
    commentScanYYlineno = line_number;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param in_str A readable stream.
 * 
 * @see commentScanYY_switch_to_buffer
 */
void commentScanYYset_in (FILE *  in_str )
{
        commentScanYYin = in_str ;
}

void commentScanYYset_out (FILE *  out_str )
{
        commentScanYYout = out_str ;
}

int commentScanYYget_debug  (void)
{
        return commentScanYY_flex_debug;
}

void commentScanYYset_debug (int  bdebug )
{
        commentScanYY_flex_debug = bdebug ;
}

static int yy_init_globals (void)
{
        /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from commentScanYYlex_destroy(), so don't allocate here.
     */

    (yy_buffer_stack) = 0;
    (yy_buffer_stack_top) = 0;
    (yy_buffer_stack_max) = 0;
    (yy_c_buf_p) = (char *) 0;
    (yy_init) = 0;
    (yy_start) = 0;

    (yy_state_buf) = 0;
    (yy_state_ptr) = 0;
    (yy_full_match) = 0;
    (yy_lp) = 0;

/* Defined in main.c */
#ifdef YY_STDINIT
    commentScanYYin = stdin;
    commentScanYYout = stdout;
#else
    commentScanYYin = (FILE *) 0;
    commentScanYYout = (FILE *) 0;
#endif

    /* For future reference: Set errno on error, since we are called by
     * commentScanYYlex_init()
     */
    return 0;
}

/* commentScanYYlex_destroy is for both reentrant and non-reentrant scanners. */
int commentScanYYlex_destroy  (void)
{
    
    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		commentScanYY_delete_buffer(YY_CURRENT_BUFFER  );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		commentScanYYpop_buffer_state();
	}

	/* Destroy the stack itself. */
	commentScanYYfree((yy_buffer_stack) );
	(yy_buffer_stack) = NULL;

    commentScanYYfree ( (yy_state_buf) );
    (yy_state_buf)  = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * commentScanYYlex() is called, initialization will occur. */
    yy_init_globals( );

    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *commentScanYYalloc (yy_size_t  size )
{
	return (void *) malloc( size );
}

void *commentScanYYrealloc  (void * ptr, yy_size_t  size )
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void commentScanYYfree (void * ptr )
{
	free( (char *) ptr );	/* see commentScanYYrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 2086 "commentscan.l"



//----------------------------------------------------------------------------

static bool handleBrief(const QCString &)
{
  //printf("handleBrief\n");
  setOutput(OutputBrief);
  return FALSE;
}

static bool handleFn(const QCString &)
{
  bool stop=makeStructuralIndicator(Entry::MEMBERDOC_SEC);
  functionProto.resize(0);
  braceCount=0;
  BEGIN(FnParam);
  return stop;
}

static bool handleDef(const QCString &)
{
  bool stop=makeStructuralIndicator(Entry::DEFINEDOC_SEC);
  functionProto.resize(0);
  BEGIN(FnParam);
  return stop;
}

static bool handleOverload(const QCString &)
{
  functionProto.resize(0);
  BEGIN(OverloadParam);
  return FALSE;
}

static bool handleEnum(const QCString &)
{
  bool stop=makeStructuralIndicator(Entry::ENUMDOC_SEC);
  BEGIN(EnumDocArg1);
  return stop;
}

static bool handleDefGroup(const QCString &)
{
  bool stop=makeStructuralIndicator(Entry::GROUPDOC_SEC);
  current->groupDocType = Entry::GROUPDOC_NORMAL;
  BEGIN( GroupDocArg1 );
  return stop;
}

static bool handleAddToGroup(const QCString &)
{
  bool stop=makeStructuralIndicator(Entry::GROUPDOC_SEC);
  current->groupDocType = Entry::GROUPDOC_ADD;
  BEGIN( GroupDocArg1 );
  return stop;
}

static bool handleWeakGroup(const QCString &)
{
  bool stop=makeStructuralIndicator(Entry::GROUPDOC_SEC);
  current->groupDocType = Entry::GROUPDOC_WEAK;
  BEGIN( GroupDocArg1 );
  return stop;
}

static bool handleNamespace(const QCString &)
{
  bool stop=makeStructuralIndicator(Entry::NAMESPACEDOC_SEC);
  BEGIN( NameSpaceDocArg1 );
  return stop;
}

static bool handlePackage(const QCString &)
{
  bool stop=makeStructuralIndicator(Entry::PACKAGEDOC_SEC);
  BEGIN( PackageDocArg1 );
  return stop;
}

static bool handleClass(const QCString &)
{
  bool stop=makeStructuralIndicator(Entry::CLASSDOC_SEC);
  BEGIN( ClassDocArg1 ); 
  return stop;
}

static bool handleHeaderFile(const QCString &)
{
  BEGIN( ClassDocArg2 );
  return FALSE;
}

static bool handleProtocol(const QCString &)
{ // Obj-C protocol
  bool stop=makeStructuralIndicator(Entry::PROTOCOLDOC_SEC);
  BEGIN( ClassDocArg1 ); 
  return stop;
}

static bool handleCategory(const QCString &)
{ // Obj-C category
  bool stop=makeStructuralIndicator(Entry::CATEGORYDOC_SEC);
  BEGIN( CategoryDocArg1 ); 
  return stop;
}

static bool handleUnion(const QCString &)
{
  bool stop=makeStructuralIndicator(Entry::UNIONDOC_SEC);
  BEGIN( ClassDocArg1 ); 
  return stop;
}

static bool handleStruct(const QCString &)
{
  bool stop=makeStructuralIndicator(Entry::STRUCTDOC_SEC);
  BEGIN( ClassDocArg1 ); 
  return stop;
}

static bool handleInterface(const QCString &)
{
  bool stop=makeStructuralIndicator(Entry::INTERFACEDOC_SEC);
  BEGIN( ClassDocArg1 ); 
  return stop;
}

static bool handleIdlException(const QCString &)
{
  bool stop=makeStructuralIndicator(Entry::EXCEPTIONDOC_SEC);
  BEGIN( ClassDocArg1 ); 
  return stop;
}

static bool handlePage(const QCString &)
{
  bool stop=makeStructuralIndicator(Entry::PAGEDOC_SEC);
  BEGIN( PageDocArg1 );
  return stop;
}

static bool handleMainpage(const QCString &)
{
  bool stop=makeStructuralIndicator(Entry::MAINPAGEDOC_SEC);
  if (!stop) 
  {
    current->name = "mainpage";
  }
  BEGIN( PageDocArg2 );
  return stop;
}

static bool handleFile(const QCString &)
{
  bool stop=makeStructuralIndicator(Entry::FILEDOC_SEC);
  if (!stop) 
  {
    current->name = yyFileName;
  }
  BEGIN( FileDocArg1 );
  return stop;
}

static bool handleDir(const QCString &)
{
  bool stop=makeStructuralIndicator(Entry::DIRDOC_SEC);
  if (!stop) current->name = yyFileName;
  BEGIN( FileDocArg1 );
  return stop;
}

static bool handleExample(const QCString &)
{
  bool stop=makeStructuralIndicator(Entry::EXAMPLE_SEC);
  if (!stop) current->name = yyFileName;
  BEGIN( FileDocArg1 );
  return stop;
}

static bool handleDetails(const QCString &)
{
  if (inContext!=OutputBrief)
  {
    addOutput("\n\n"); // treat @details outside brief description
                       // as a new paragraph
  }
  setOutput(OutputDoc);
  return FALSE;
}

static bool handleName(const QCString &)
{
  bool stop=makeStructuralIndicator(Entry::MEMBERGRP_SEC);
  if (!stop)
  {
    g_memberGroupHeader.resize(0);
    BEGIN( NameParam );
    if (g_memberGroupId!=DOX_NOGROUP) // end of previous member group
    {
      closeGroup(current,yyFileName,yyLineNr,TRUE);
    }
  }
  return stop;
}

static bool handleTodo(const QCString &)
{
  newXRefKind = XRef_Todo;
  setOutput(OutputXRef);
  xrefKind = XRef_Todo;
  return FALSE;
}

static bool handleTest(const QCString &)
{
  newXRefKind = XRef_Test;
  setOutput(OutputXRef);
  xrefKind = XRef_Test;
  return FALSE;
}

static bool handleBug(const QCString &)
{
  newXRefKind = XRef_Bug;
  setOutput(OutputXRef);
  xrefKind = XRef_Bug;
  return FALSE;
}

static bool handleDeprecated(const QCString &)
{
  newXRefKind = XRef_Deprecated;
  setOutput(OutputXRef);
  xrefKind = XRef_Deprecated;
  return FALSE;
}

static bool handleXRefItem(const QCString &)
{
  BEGIN(XRefItemParam1);
  return FALSE;
}

static bool handleRelated(const QCString &)
{
  BEGIN(RelatesParam1);
  return FALSE;
}

static bool handleRelatedAlso(const QCString &)
{
  current->relatesType = Duplicate;
  BEGIN(RelatesParam1);
  return FALSE;
}

static bool handleMemberOf(const QCString &)
{
  current->relatesType = MemberOf;
  BEGIN(RelatesParam1);
  return FALSE;
}

static bool handleRefItem(const QCString &)
{
  addOutput("@refitem ");
  BEGIN(LineParam);
  return FALSE;
}

static bool handleSection(const QCString &s)
{
  setOutput(OutputDoc);
  addOutput("@"+s+" ");
  BEGIN(SectionLabel);
  if      (s=="section")       g_sectionLevel=1;
  else if (s=="subsection")    g_sectionLevel=2;
  else if (s=="subsubsection") g_sectionLevel=3;
  else if (s=="paragraph")     g_sectionLevel=4;
  return FALSE;
}

static bool handleSubpage(const QCString &s)
{
  if (current->section!=Entry::EMPTY_SEC && 
      current->section!=Entry::PAGEDOC_SEC &&
      current->section!=Entry::MAINPAGEDOC_SEC
     )
  {
    warn(yyFileName,yyLineNr,
	"warning: found \\subpage command in a comment block that is not marked as a page!");
  }
  addOutput("@"+s+" ");
  BEGIN(SubpageLabel);
  return FALSE;
}

static bool handleAnchor(const QCString &s)
{
  addOutput("@"+s+" ");
  BEGIN(AnchorLabel);
  return FALSE;
}

static bool handleCite(const QCString &s)
{
  addOutput("@"+s+" ");
  BEGIN(CiteLabel);
  return FALSE;
}

static bool handleFormatBlock(const QCString &s)
{
  addOutput("@"+s+" ");
  //printf("handleFormatBlock(%s)\n",s.data());
  blockName=s;
  g_commentCount=0;
  BEGIN(FormatBlock);
  return FALSE;
}

static bool handleAddIndex(const QCString &)
{
  addOutput("@addindex ");
  BEGIN(LineParam);
  return FALSE;
}

static bool handleIf(const QCString &)
{
  enabledSectionFound=FALSE;
  guardType = Guard_If;
  g_spaceBeforeIf = g_spaceBeforeCmd;
  BEGIN(GuardParam);
  return FALSE;
}

static bool handleIfNot(const QCString &)
{
  enabledSectionFound=FALSE;
  guardType = Guard_IfNot;
  g_spaceBeforeIf = g_spaceBeforeCmd;
  BEGIN(GuardParam);
  return FALSE;
}

static bool handleElseIf(const QCString &)
{
  if (guards.isEmpty())
  {
    warn(yyFileName,yyLineNr,
	"warning: found \\else without matching start command");
  }
  else
  {
    guardType = enabledSectionFound ? Guard_Skip : Guard_If;
    BEGIN(GuardParam);
  }
  return FALSE;
}

static bool handleElse(const QCString &)
{
  if (guards.isEmpty())
  {
    warn(yyFileName,yyLineNr,
	"warning: found \\else without matching start command");
  }
  else
  {
    BEGIN( SkipGuardedSection );
  }
  return FALSE;
}

static bool handleEndIf(const QCString &)
{
  if (guards.isEmpty())
  {
    warn(yyFileName,yyLineNr,
	"warning: found \\endif without matching start command");
  }
  else
  {
    delete guards.pop();
  }
  enabledSectionFound=FALSE;
  BEGIN( GuardParamEnd );
  return FALSE;
}

static bool handleIngroup(const QCString &)
{
  inGroupParamFound=FALSE;
  BEGIN( InGroupParam );
  return FALSE;
}

static bool handleNoSubGrouping(const QCString &)
{
  current->subGrouping = FALSE; 
  return FALSE;
}

static bool handleShowInitializer(const QCString &)
{
  current->initLines = 100000; // ON
  return FALSE;
}

static bool handleHideInitializer(const QCString &)
{
  current->initLines = 0; // OFF
  return FALSE;
}

static bool handleCallgraph(const QCString &)
{
  current->callGraph = TRUE; // ON
  return FALSE;
}

static bool handleCallergraph(const QCString &)
{
  current->callerGraph = TRUE; // ON
  return FALSE;
}

static bool handleInternal(const QCString &)
{
  if (!Config_getBool("INTERNAL_DOCS"))
  {
    // make sure some whitespace before a \internal command
    // is not treated as "documentation"
    if (current->doc.stripWhiteSpace().isEmpty())
    { 
      current->doc.resize(0);
    }
    g_condCount=0;
    BEGIN( SkipInternal );
  }
  else
  {
    // re-enabled for bug640828
    addOutput("\\internal "); 
  }
  return FALSE;
}

static bool handleLineBr(const QCString &)
{
  addOutput('\n');
  return FALSE;
}

static bool handleStatic(const QCString &)
{
  endBrief();
  current->stat = TRUE; 
  return FALSE;
}

static bool handlePure(const QCString &)
{
  endBrief();
  current->virt = Pure; 
  return FALSE;
}

static bool handlePrivate(const QCString &)
{
  current->protection = Private;
  return FALSE;
}

static bool handlePrivateSection(const QCString &)
{
  current->protection = protection = Private;
  return FALSE;
}

static bool handleProtected(const QCString &)
{
  current->protection = Protected;
  return FALSE;
}

static bool handleProtectedSection(const QCString &)
{
  current->protection = protection = Protected ;
  return FALSE;
}

static bool handlePublic(const QCString &)
{
  current->protection = Public;
  return FALSE;
}

static bool handlePublicSection(const QCString &)
{
  current->protection = protection = Public;
  return FALSE;
}

static bool handleToc(const QCString &)
{
  if (current->section==Entry::PAGEDOC_SEC || 
      current->section==Entry::MAINPAGEDOC_SEC)
  {
    current->stat=TRUE;  // we 'abuse' stat to pass whether or the TOC is enabled
  }
  return FALSE;
}

static bool handleInherit(const QCString &)
{
  BEGIN(InheritParam);
  return FALSE;
}

static bool handleExtends(const QCString &)
{
  BEGIN(ExtendsParam);
  return FALSE;
}

static bool handleCopyDoc(const QCString &)
{
  setOutput(OutputBrief);
  addOutput("\\copybrief ");
  g_copyDocArg.resize(0);
  BEGIN(CopyDoc);
  return FALSE;
}

//----------------------------------------------------------------------------

static void checkFormula()
{
  if (YY_START==ReadFormulaShort || YY_START==ReadFormulaLong)
  {
    warn(yyFileName,yyLineNr,"warning: End of comment block while inside formula.");
  }
}

//----------------------------------------------------------------------------

bool parseCommentBlock(/* in */     ParserInterface *parser,
                       /* in */     Entry *curEntry,
                       /* in */     const QCString &comment,
		       /* in */     const QCString &fileName,
		       /* in,out */ int  &lineNr,
		       /* in */     bool isBrief,
		       /* in */     bool isAutoBriefOn,
		       /* in */     bool isInbody,
		       /* in,out */ Protection &prot,
		       /* in,out */ int &position,
		       /* out */    bool &newEntryNeeded
		      )
{
  //printf("parseCommentBlock() isBrief=%d isAutoBriefOn=%d lineNr=%d\n",
  //    isBrief,isAutoBriefOn,lineNr);

  initParser();
  guards.setAutoDelete(TRUE);
  guards.clear();
  langParser     = parser;
  current        = curEntry;
  if (comment.isEmpty()) return FALSE; // avoid empty strings
  inputString    = comment;
  inputString.append(" ");
  inputPosition  = position;
  yyLineNr       = lineNr;
  yyFileName     = fileName;
  protection     = prot;
  needNewEntry   = FALSE;
  xrefKind       = XRef_None;
  xrefAppendFlag = FALSE;
  insidePre      = FALSE;
  parseMore      = FALSE;
  inBody         = isInbody;
  outputXRef.resize(0);
  setOutput( isBrief || isAutoBriefOn ? OutputBrief : OutputDoc );
  briefEndsAtDot = isAutoBriefOn;
  g_condCount    = 0;
  g_sectionLevel = 0;
  g_spaceBeforeCmd = FALSE;
  g_spaceBeforeIf  = FALSE;

  if (!current->inbodyDocs.isEmpty() && isInbody) // separate in body fragments
  {
    current->inbodyDocs+="\n\n";
  }

  Debug::print(Debug::CommentScan,0,"-----------\nCommentScanner: %s:%d\n"
               "input=[\n%s]\n",fileName.data(),lineNr,comment.data()
              );
  
  commentScanYYrestart( commentScanYYin );
  BEGIN( Comment );
  commentScanYYlex();
  setOutput( OutputDoc );

  if (YY_START==OverloadParam) // comment ended with \overload
  {
    addOutput(getOverloadDocs());
  }

  if (!guards.isEmpty())
  {
    warn(yyFileName,yyLineNr,"Documentation block ended in the middle of a conditional section!");
  }

  current->doc=stripLeadingAndTrailingEmptyLines(current->doc,current->docLine);

  if (current->section==Entry::FILEDOC_SEC && current->doc.isEmpty())
  {
    // to allow a comment block with just a @file command.
    current->doc="\n\n";
  }

  if (current->section==Entry::MEMBERGRP_SEC &&
      g_memberGroupId==DOX_NOGROUP) // @name section but no group started yet
  {
    openGroup(current,yyFileName,yyLineNr);
  }

  if (Doxygen::markdownSupport)
  {
    current->brief      = processMarkdown(fileName,current,current->brief);
    current->doc        = processMarkdown(fileName,current,current->doc);
    current->inbodyDocs = processMarkdown(fileName,current,current->inbodyDocs);
  }

  Debug::print(Debug::CommentScan,0,
               "brief=[line=%d\n%s]\ndocs=[line=%d\n%s]\ninbody=[line=%d\n%s]\n===========\n",
	       current->briefLine,current->brief.data(),
               current->docLine,current->doc.data(),
               current->inbodyLine,current->inbodyDocs.data()
              );
  
  checkFormula();
  prot = protection;
  
  groupAddDocs(curEntry,fileName);

  newEntryNeeded = needNewEntry;

  // if we did not proceed during this call, it does not make
  // sense to continue, since we get stuck. See bug 567346 for situations
  // were this happens
  if (parseMore && position==inputPosition) parseMore=FALSE;

  if (parseMore) position=inputPosition; else position=0;

  lineNr = yyLineNr;
  //printf("position=%d parseMore=%d\n",position,parseMore);

  return parseMore;
}

//---------------------------------------------------------------------------

void groupEnterFile(const char *fileName,int)
{
  g_autoGroupStack.setAutoDelete(TRUE);
  g_autoGroupStack.clear();
  g_memberGroupId = DOX_NOGROUP;
  g_memberGroupDocs.resize(0);
  g_memberGroupRelates.resize(0);
  g_compoundName=fileName;
}

void groupLeaveFile(const char *fileName,int line)
{
  //if (g_memberGroupId!=DOX_NOGROUP)
  //{
  //  warn(fileName,line,"warning: end of file while inside a member group\n");
  //}
  g_memberGroupId=DOX_NOGROUP;
  g_memberGroupRelates.resize(0);
  g_memberGroupDocs.resize(0);
  if (!g_autoGroupStack.isEmpty())
  {
    warn(fileName,line,"warning: end of file while inside a group\n");
  }
}

void groupEnterCompound(const char *fileName,int line,const char *name)
{
  if (g_memberGroupId!=DOX_NOGROUP)
  {
    warn(fileName,line,"warning: try to put compound %s inside a member group\n",name);
  }
  g_memberGroupId=DOX_NOGROUP;
  g_memberGroupRelates.resize(0);
  g_memberGroupDocs.resize(0);
  g_compoundName = name;
  int i = g_compoundName.find('(');
  if (i!=-1) 
  {
    g_compoundName=g_compoundName.left(i); // strip category (Obj-C)
  }
  if (g_compoundName.isEmpty())
  {
    g_compoundName=fileName;
  }
  //printf("groupEnterCompound(%s)\n",name);
}

void groupLeaveCompound(const char *,int,const char * /*name*/)
{
  //printf("groupLeaveCompound(%s)\n",name);
  //if (g_memberGroupId!=DOX_NOGROUP)
  //{
  //  warn(fileName,line,"warning: end of compound %s while inside a member group\n",name);
  //}
  g_memberGroupId=DOX_NOGROUP;
  g_memberGroupRelates.resize(0);
  g_memberGroupDocs.resize(0);
  g_compoundName.resize(0);
}

static int findExistingGroup(int &groupId,const MemberGroupInfo *info)
{
  //printf("findExistingGroup %s:%s\n",info->header.data(),info->compoundName.data());
  QIntDictIterator<MemberGroupInfo> di(Doxygen::memGrpInfoDict);
  MemberGroupInfo *mi;
  for (di.toFirst();(mi=di.current());++di)
  {
    if (g_compoundName==mi->compoundName &&  // same file or scope
	!mi->header.isEmpty() &&             // not a nameless group
	stricmp(mi->header,info->header)==0  // same header name
       )
    {
      //printf("Found it!\n");
      return di.currentKey(); // put the item in this group
    }
  }
  groupId++; // start new group
  return groupId;
}

void openGroup(Entry *e,const char *,int)
{
  //printf("==> openGroup(name=%s,sec=%x) g_autoGroupStack=%d\n",
  //  	e->name.data(),e->section,g_autoGroupStack.count());
  if (e->section==Entry::GROUPDOC_SEC) // auto group
  {
    g_autoGroupStack.push(new Grouping(e->name,e->groupingPri()));
  }
  else // start of a member group
  {
    //printf("    membergroup id=%d %s\n",g_memberGroupId,g_memberGroupHeader.data());
    if (g_memberGroupId==DOX_NOGROUP) // no group started yet
    {
      static int curGroupId=0;

      MemberGroupInfo *info = new MemberGroupInfo;
      info->header = g_memberGroupHeader.stripWhiteSpace();
      info->compoundName = g_compoundName;
      g_memberGroupId = findExistingGroup(curGroupId,info);
      //printf("    use membergroup %d\n",g_memberGroupId);
      Doxygen::memGrpInfoDict.insert(g_memberGroupId,info);

      g_memberGroupRelates = e->relates;
      e->mGrpId = g_memberGroupId;
    }
  }
}

void closeGroup(Entry *e,const char *fileName,int,bool foundInline)
{
  //printf("==> closeGroup(name=%s,sec=%x) g_autoGroupStack=%d\n",
  //    e->name.data(),e->section,g_autoGroupStack.count());
  if (g_memberGroupId!=DOX_NOGROUP) // end of member group
  {
    MemberGroupInfo *info=Doxygen::memGrpInfoDict.find(g_memberGroupId);
    if (info) // known group
    {
      info->doc = g_memberGroupDocs;
      info->docFile = fileName;
    }
    g_memberGroupId=DOX_NOGROUP;
    g_memberGroupRelates.resize(0);
    g_memberGroupDocs.resize(0);
    e->mGrpId=DOX_NOGROUP;
    //printf("new group id=%d\n",g_memberGroupId);
  }
  else if (!g_autoGroupStack.isEmpty()) // end of auto group
  {
    Grouping *grp = g_autoGroupStack.pop();
    // see bug577005: we should not remove the last group for e
    if (!foundInline) e->groups->removeLast();
    //printf("Removing %s e=%p\n",grp->groupname.data(),e);
    delete grp;
    if (!foundInline) initGroupInfo(e);
  }
}

void initGroupInfo(Entry *e)
{
  //printf("==> initGroup(id=%d,related=%s,e=%p)\n",g_memberGroupId,
  //       g_memberGroupRelates.data(),e);
  e->mGrpId     = g_memberGroupId;
  e->relates    = g_memberGroupRelates;
  if (!g_autoGroupStack.isEmpty())
  {
    //printf("Appending group %s to %s: count=%d entry=%p\n",
    //	g_autoGroupStack.top()->groupname.data(),
    //	e->name.data(),e->groups->count(),e);
    e->groups->append(new Grouping(*g_autoGroupStack.top()));
  }
}

static void groupAddDocs(Entry *e,const char *fileName)
{
  if (e->section==Entry::MEMBERGRP_SEC)
  {
    g_memberGroupDocs=e->brief.stripWhiteSpace();
    e->doc = stripLeadingAndTrailingEmptyLines(e->doc,e->docLine);
    if (!g_memberGroupDocs.isEmpty() && !e->doc.isEmpty())
    {
      g_memberGroupDocs+="\n\n";
    }
    g_memberGroupDocs+=e->doc;
    MemberGroupInfo *info=Doxygen::memGrpInfoDict.find(g_memberGroupId);
    if (info) 
    {
      info->doc = g_memberGroupDocs;
      info->docFile = fileName;
      info->setRefItems(e->sli);
    }
    e->doc.resize(0);
    e->brief.resize(0);
  }
}


#if !defined(YY_FLEX_SUBMINOR_VERSION) 
//----------------------------------------------------------------------------
extern "C" { // some bogus code to keep the compiler happy
  void commentScanYYdummy() { yy_flex_realloc(0,0); } 
}
#endif


