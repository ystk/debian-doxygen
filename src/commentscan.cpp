
#line 3 "<stdout>"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define yy_create_buffer commentScanYY_create_buffer
#define yy_delete_buffer commentScanYY_delete_buffer
#define yy_flex_debug commentScanYY_flex_debug
#define yy_init_buffer commentScanYY_init_buffer
#define yy_flush_buffer commentScanYY_flush_buffer
#define yy_load_buffer_state commentScanYY_load_buffer_state
#define yy_switch_to_buffer commentScanYY_switch_to_buffer
#define yyin commentScanYYin
#define yyleng commentScanYYleng
#define yylex commentScanYYlex
#define yylineno commentScanYYlineno
#define yyout commentScanYYout
#define yyrestart commentScanYYrestart
#define yytext commentScanYYtext
#define yywrap commentScanYYwrap
#define yyalloc commentScanYYalloc
#define yyrealloc commentScanYYrealloc
#define yyfree commentScanYYfree

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 35
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;
#endif /* ! C99 */

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! FLEXINT_H */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE commentScanYYrestart(commentScanYYin  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#define YY_BUF_SIZE 262144
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

extern yy_size_t commentScanYYleng;

extern FILE *commentScanYYin, *commentScanYYout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    #define YY_LESS_LINENO(n)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up commentScanYYtext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up commentScanYYtext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	yy_size_t yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via commentScanYYrestart()), so that the user can continue scanning by
	 * just pointing commentScanYYin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* Stack of input buffers. */
static size_t yy_buffer_stack_top = 0; /**< index of top of stack. */
static size_t yy_buffer_stack_max = 0; /**< capacity of stack. */
static YY_BUFFER_STATE * yy_buffer_stack = 0; /**< Stack as an array. */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* yy_hold_char holds the character lost when commentScanYYtext is formed. */
static char yy_hold_char;
static yy_size_t yy_n_chars;		/* number of characters read into yy_ch_buf */
yy_size_t commentScanYYleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 0;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow commentScanYYwrap()'s to do buffer switches
 * instead of setting up a fresh commentScanYYin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void commentScanYYrestart (FILE *input_file  );
void commentScanYY_switch_to_buffer (YY_BUFFER_STATE new_buffer  );
YY_BUFFER_STATE commentScanYY_create_buffer (FILE *file,int size  );
void commentScanYY_delete_buffer (YY_BUFFER_STATE b  );
void commentScanYY_flush_buffer (YY_BUFFER_STATE b  );
void commentScanYYpush_buffer_state (YY_BUFFER_STATE new_buffer  );
void commentScanYYpop_buffer_state (void );

static void commentScanYYensure_buffer_stack (void );
static void commentScanYY_load_buffer_state (void );
static void commentScanYY_init_buffer (YY_BUFFER_STATE b,FILE *file  );

#define YY_FLUSH_BUFFER commentScanYY_flush_buffer(YY_CURRENT_BUFFER )

YY_BUFFER_STATE commentScanYY_scan_buffer (char *base,yy_size_t size  );
YY_BUFFER_STATE commentScanYY_scan_string (yyconst char *yy_str  );
YY_BUFFER_STATE commentScanYY_scan_bytes (yyconst char *bytes,yy_size_t len  );

void *commentScanYYalloc (yy_size_t  );
void *commentScanYYrealloc (void *,yy_size_t  );
void commentScanYYfree (void *  );

#define yy_new_buffer commentScanYY_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        commentScanYYensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            commentScanYY_create_buffer(commentScanYYin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        commentScanYYensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            commentScanYY_create_buffer(commentScanYYin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define commentScanYYwrap(n) 1
#define YY_SKIP_YYWRAP

typedef unsigned char YY_CHAR;

FILE *commentScanYYin = (FILE *) 0, *commentScanYYout = (FILE *) 0;

typedef int yy_state_type;

extern int commentScanYYlineno;

int commentScanYYlineno = 1;

extern char *commentScanYYtext;
#define yytext_ptr commentScanYYtext

static yy_state_type yy_get_previous_state (void );
static yy_state_type yy_try_NUL_trans (yy_state_type current_state  );
static int yy_get_next_buffer (void );
static void yy_fatal_error (yyconst char msg[]  );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up commentScanYYtext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	commentScanYYleng = (size_t) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;

#define YY_NUM_RULES 177
#define YY_END_OF_BUFFER 178
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_acclist[716] =
    {   0,
       64,   64,  108,  108,  121,  121,  131,  131,  174,  174,
      178,  177,   32,  177,   32,  177,   31,  177,   32,  177,
       32,  177,   32,  177,   30,   32,  177,   32,  177,   32,
      177,   22,   32,  177,   32,  177,   32,  177,   30,   32,
      177,   77,  177,   76,  177,   77,  177,   74,   77,  177,
       77,  177,   77,  177,  177,   78,  177,   98,  177,   97,
      177,   98,  177,   95,   98,  177,   98,  177,   59,  177,
       59,  177,   58,  177,   59,  177,   59,  177,   59,  177,
       55,   59,  177,   59,  177,   59,  177,   63,  177,   62,
      177,   63,  177,   60,   63,  177,   63,  177,   63,  177,

       63,  177,   67,  177,   66,  177,   67,  177,   64,   67,
      177,   67,  177,   64,   67,  177,   64,   67,  177,   67,
      177,   59,  177,   58,  177,   59,  177,   59,  177,   59,
      177,   59,  177,   59,  177,   86,  177,   85,  177,   86,
      177,   83,   86,  177,   86,  177,   90,  177,   89,  177,
       90,  177,   90,  177,   94,  177,   93,  177,   94,  177,
       94,  177,   82,  177,   79,  177,   82,  177,   80,   82,
      177,   82,  177,   82,  177,   46,  177,   45,  177,   46,
      177,   43,   46,  177,   46,  177,   50,  177,   50,  177,
       49,  177,   50,  177,   50,  177,   50,  177,   47,   50,

      177,   50,  177,   50,  177,   54,  177,   53,  177,   54,
      177,   51,   54,  177,   54,  177,   70,  177,  177,   68,
      177,  177,   72,  177,   73,  177,  177,  104,  177,  103,
      177,  102,  104,  177,  104,  177,  108,  111,  177,  105,
      177,  108,  111,  177,  111,  177,  111,  177,  113,  177,
      112,  177,  177,  116,  177,  116,  177,  114,  177,  116,
      177,  116,  177,  121,  125,  177,  122,  177,  125,  177,
      125,  177,  125,  177,  125,  177,  125,  177,  101,  177,
       99,  177,  101,  177,  129,  177,  127,  177,  126,  129,
      177,  129,  177,  132,  177,  131,  132,  177,  130,  177,

      132,  177,  139,  140,  177,  138,  177,  140,  177,  140,
      177,  140,  177,  149,  150,  177,  141,  177,  150,  177,
      150,  177,  150,  177,  153,  177,  151,  177,  153,  177,
      157,  177,  155,  177,  157,  177,  154,  157,  177,  157,
      177,  160,  163,  177,  158,  177,  161,  163,  177,  162,
      163,  177,  163,  177,  163,  177,  166,  177,  164,  177,
      166,  177,  169,  177,  168,  177,  169,  177,  167,  169,
      177,  169,  177,  172,  177,  171,  177,  172,  177,  170,
      172,  177,  172,  177,   40,   42,  177,   41,  177,   42,
      177,   42,  177,  119,  177,  118,  177,  117,  119,  177,

      119,  177,   35,   36,  177,   34,  177,   36,  177,   36,
      177,  174,  176,  177,  175,  177,  176,  177,  176,  177,
      176,  177,   29,    4,   26,   24,   21,   21,   13,   21,
       13,   13,   13,   13,   13,   19,   20,   15,   21,   22,
       13,   13,   13,   13,   13,   13,   13,   23,   74,   74,
       75,   74,   78,   95,   95,   96,   55,   55,   57,   55,
       60,   60,   61,   60,   64,   64,   64,   65,   64,   83,
       83,   84,   87,   88,   92,   91,   92,   80,   80,   81,
       80,   43,   43,   43,   44,   47,   47,   48,   47,   51,
       51,   52,   68,   68,   69,   72,   71,  102,  108,  105,

      108,  110,  110,  107,  112,  115,  121,  124,  123,  100,
      126,  128,  131,  130,  139,  149,  152,  154,  154,  156,
      160,  159,  165,  167,  167,  170,  170,   40,  117,   35,
      174,  173,   21,   28,   28,   28,   24,   28,   28,   25,
        7,    1,    1,    2,   13,   13,   13,   17,   18,   13,
       13,   13,   15,    5,   13,   13,   13,   13,   13,   13,
       74,   74,   55,   60,   60,   64,   64,   80,   80,   43,
       43,   43,   43,   47,   51,  109,   37,   38,   39,   33,
      173,   28,   28,   12,    1,   14,    2, 8198,   13,16390,
       13,   13,   13,   13,   13, 8198,   13,16390,   13,   13,

       13,   13,   74,   60,   64,   56,   80,   43,   43,   43,
       51,  109,  134,  142,   33,   11,   27, 8198, 8198,   13,
       13,   16,   13,   13,    5, 8198,   13,   13,   74,   60,
       64,   80,    3,   13,   16,   13,   13,   13,   13,   74,
       60,   64,   80,   68,  136,  144,   13,   13,   13,   13,
       13,   74,   60,   64,   80,  135,  133,  143,   13,   13,
       13,   13,   13,   74,   76,   97,   58,   60,   62,   64,
       66,   85,   89,   93,   79,   80,   45,   49,   53,   70,
       73,  103,  106,  113,  114,  120,  122,   99,  127,  137,
      138,  141,  151,  155,  158,  164,  168,  171,  118,   34,

      175,    9,    8,   13,   13,    5,   13,  145,   10,   13,
       13,  148,  146,  147,   29
    } ;

static yyconst flex_int16_t yy_accept[1026] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    2,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    4,
        5,    5,    5,    5,    5,    6,    7,    7,    7,    7,
        7,    8,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,   10,   11,   12,
       13,   15,   17,   19,   21,   23,   25,   28,   30,   32,
       35,   37,   39,   42,   44,   46,   48,   51,   53,   55,

       56,   58,   60,   62,   64,   67,   69,   71,   73,   75,
       77,   79,   81,   84,   86,   88,   90,   92,   94,   97,
       99,  101,  103,  105,  107,  109,  112,  114,  117,  120,
      122,  124,  126,  128,  130,  132,  134,  136,  138,  140,
      142,  145,  147,  149,  151,  153,  155,  157,  159,  161,
      163,  165,  167,  169,  172,  174,  176,  178,  180,  182,
      185,  187,  189,  191,  193,  195,  197,  199,  202,  204,
      206,  208,  210,  212,  215,  217,  219,  220,  222,  223,
      225,  227,  228,  230,  232,  235,  237,  240,  242,  245,
      247,  249,  251,  253,  254,  256,  258,  260,  262,  264,

      267,  269,  271,  273,  275,  277,  279,  281,  283,  285,
      287,  289,  292,  294,  296,  299,  301,  303,  306,  308,
      310,  312,  314,  317,  319,  321,  323,  325,  327,  329,
      331,  333,  335,  337,  340,  342,  345,  347,  350,  353,
      355,  357,  359,  361,  363,  365,  367,  369,  372,  374,
      376,  378,  380,  383,  385,  388,  390,  392,  394,  396,
      398,  401,  403,  406,  408,  410,  412,  415,  417,  419,
      421,  423,  423,  423,  423,  423,  424,  424,  424,  425,
      425,  425,  425,  425,  426,  426,  427,  427,  427,  427,
      427,  427,  427,  427,  427,  427,  427,  427,  427,  428,

      429,  430,  431,  432,  433,  434,  435,  436,  437,  438,
      440,  441,  442,  443,  444,  445,  446,  447,  448,  448,
      448,  448,  449,  449,  450,  451,  451,  451,  451,  452,
      453,  453,  454,  455,  455,  456,  456,  456,  457,  457,
      457,  457,  457,  457,  458,  458,  458,  459,  459,  460,
      460,  460,  460,  461,  461,  462,  463,  463,  463,  463,
      464,  465,  465,  466,  467,  467,  467,  468,  468,  468,
      469,  470,  470,  470,  470,  470,  470,  470,  470,  470,
      470,  470,  470,  470,  470,  471,  472,  472,  473,  473,
      473,  474,  474,  476,  476,  476,  477,  477,  478,  478,

      478,  479,  480,  480,  480,  480,  481,  482,  483,  483,
      483,  484,  484,  485,  485,  486,  486,  486,  486,  486,
      486,  487,  487,  487,  488,  488,  489,  489,  489,  489,
      490,  491,  491,  492,  492,  493,  493,  494,  494,  495,
      495,  496,  496,  497,  497,  498,  498,  499,  499,  500,
      501,  502,  502,  503,  504,  504,  505,  505,  506,  506,
      506,  506,  506,  507,  507,  508,  509,  510,  510,  510,
      510,  511,  511,  512,  512,  513,  513,  514,  515,  515,
      515,  516,  516,  516,  516,  517,  517,  517,  517,  517,
      517,  517,  518,  518,  519,  520,  520,  521,  521,  522,

      522,  523,  523,  523,  524,  524,  525,  525,  526,  526,
      526,  527,  527,  528,  528,  528,  529,  529,  529,  530,
      530,  531,  531,  531,  532,  533,  533,  534,  534,  534,
      534,  534,  535,  536,  537,  539,  540,  541,  541,  541,
      541,  541,  541,  541,  542,  542,  542,  542,  542,  543,
      544,  545,  546,  547,  548,  549,  550,  550,  551,  552,
      553,  554,  555,  556,  557,  558,  559,  560,  561,  562,
      562,  563,  563,  563,  563,  564,  565,  565,  566,  567,
      567,  568,  568,  568,  568,  568,  568,  568,  569,  569,
      570,  571,  572,  573,  574,  574,  574,  575,  575,  576,

      576,  576,  576,  576,  576,  576,  577,  577,  577,  577,
      577,  577,  577,  577,  577,  577,  577,  577,  577,  577,
      577,  577,  577,  577,  577,  577,  577,  577,  577,  577,
      577,  577,  577,  578,  579,  580,  580,  580,  581,  581,
      582,  582,  582,  582,  582,  582,  583,  584,  585,  585,
      585,  585,  585,  585,  585,  585,  586,  587,  588,  591,
      592,  592,  593,  594,  595,  595,  596,  599,  600,  601,
      602,  603,  604,  604,  604,  605,  606,  607,  607,  607,
      607,  608,  608,  609,  610,  611,  611,  611,  612,  612,
      612,  612,  612,  612,  613,  613,  613,  613,  613,  613,

      613,  613,  613,  613,  613,  614,  614,  614,  614,  615,
      615,  615,  615,  615,  615,  615,  615,  615,  615,  615,
      615,  615,  616,  616,  616,  616,  617,  617,  617,  618,
      618,  618,  618,  618,  618,  619,  621,  622,  623,  624,
      625,  627,  628,  629,  630,  630,  630,  631,  632,  632,
      632,  632,  633,  633,  633,  633,  633,  633,  633,  633,
      633,  633,  633,  633,  633,  633,  633,  633,  633,  633,
      633,  633,  633,  633,  633,  633,  633,  633,  633,  633,
      633,  633,  633,  633,  633,  633,  633,  633,  633,  633,
      633,  633,  633,  633,  633,  633,  634,  634,  634,  634,

      634,  635,  636,  637,  638,  639,  640,  641,  641,  641,
      642,  643,  643,  643,  643,  644,  644,  644,  644,  644,
      644,  645,  645,  645,  645,  645,  645,  645,  645,  645,
      645,  645,  645,  645,  645,  645,  645,  645,  645,  645,
      645,  646,  646,  646,  646,  646,  647,  647,  647,  647,
      647,  647,  647,  647,  647,  647,  647,  647,  647,  647,
      647,  647,  647,  647,  647,  647,  647,  648,  649,  650,
      651,  652,  653,  653,  653,  654,  655,  655,  655,  655,
      656,  656,  656,  656,  656,  656,  656,  656,  656,  656,
      656,  656,  656,  656,  656,  656,  656,  656,  656,  656,

      656,  656,  656,  657,  658,  658,  659,  659,  659,  659,
      659,  659,  659,  659,  659,  659,  659,  659,  659,  659,
      659,  659,  659,  659,  659,  659,  660,  661,  662,  663,
      664,  666,  667,  668,  670,  672,  673,  674,  675,  677,
      678,  679,  680,  681,  682,  683,  684,  685,  686,  687,
      687,  687,  687,  687,  687,  687,  688,  689,  690,  691,
      692,  692,  692,  692,  692,  693,  694,  695,  696,  697,
      698,  699,  700,  701,  702,  702,  702,  703,  704,  705,
      706,  707,  708,  708,  708,  708,  708,  708,  708,  708,
      709,  709,  709,  710,  711,  711,  712,  712,  712,  712,

      712,  712,  712,  712,  712,  712,  712,  712,  712,  712,
      713,  713,  713,  713,  713,  714,  714,  714,  714,  714,
      714,  714,  715,  716,  716
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    4,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    5,    6,    7,    8,    9,    8,    8,    1,   10,
       11,   12,   13,   14,   15,   16,   17,   18,   19,   19,
       19,   19,   19,   19,   18,   18,   18,   20,    1,   21,
        1,   22,    1,   23,   24,   25,   26,   27,   28,   26,
       29,   30,   31,   26,   26,   32,   33,   26,   34,   35,
       26,   36,   26,   37,   38,   26,   26,   26,   26,   26,
       39,   40,   41,    1,   42,    1,   43,   44,   45,   46,

       47,   48,   49,   50,   51,   26,   52,   53,   54,   55,
       56,   57,   26,   58,   59,   60,   61,   62,   26,   63,
       64,   26,   65,    1,   66,   67,    1,   68,   68,   68,
       68,   68,   68,   68,   68,   68,   68,   68,   68,   68,
       68,   68,   68,   68,   68,   68,   68,   68,   68,   68,
       68,   68,   68,   68,   68,   68,   68,   68,   68,   68,
       68,   68,   68,   68,   68,   68,   68,   68,   68,   68,
       68,   68,   68,   68,   68,   68,   68,   68,   68,   68,
       68,   68,   68,   68,   68,   68,   68,   68,   68,   68,
       68,   68,   68,   68,   68,   68,   68,   68,   68,   68,

       68,   68,   68,   68,   68,   68,   68,   68,   68,   68,
       68,   68,   68,   68,   68,   68,   68,   68,   68,   68,
       68,   68,   68,   68,   68,   68,   68,   68,   68,   68,
       68,   68,   68,   68,   68,   68,   68,   68,   68,   68,
       68,   68,   68,   68,   68,   68,   68,   68,   68,   68,
       68,   68,   68,   68,   68
    } ;

static yyconst flex_int32_t yy_meta[69] =
    {   0,
        1,    2,    3,    4,    5,    1,    1,    6,    7,    8,
        9,   10,   11,   12,   13,   14,   15,   16,   16,   17,
        6,   18,   19,   20,   20,   20,   20,   20,   20,   20,
       20,   20,   20,   20,   20,   20,   20,   20,    1,   21,
        1,   22,   20,   20,   20,   20,   20,   20,   20,   20,
       23,   20,   20,   20,   24,   20,   20,   20,   20,   20,
       20,   20,   20,   20,    6,   25,   26,   27
    } ;

static yyconst flex_int16_t yy_base[1233] =
    {   0,
        0,    0,    0,   67,   83,  150, 4395, 4392,  217,    0,
      285,    0,  353,  420,  487,  554,  621,    0,  689,    0,
       67,   68,   70,   73,  757,  824,  891,    0,  959,    0,
     1027,    0, 1095,    0,   99,  106, 1163,    0,  162,  165,
     1231,    0,  123,  129,  374,  393,   75,   76, 1299,    0,
      135,  139,  173,  377,  441,  442,   79,   93, 1367,    0,
      460,  502,   95,  140, 1435,    0, 1503,    0,  412,  435,
      499,  508, 1571,    0,  363,  368,  511,  566, 4394, 7407,
     7407,  527,  399, 4381, 4378, 4358,  567, 1634, 1688,  185,
     1748,  770,  846, 7407, 7407, 4348,  166,  433,  797, 4325,

     7407, 7407, 7407,    0,  101,  464, 7407,  452,  582,  785,
     1639, 4281,  851,  474,  190, 7407, 7407, 4290,  501,  775,
     4274, 1684, 7407, 7407, 4285, 1630, 1659, 1698, 7407, 1742,
     1763, 1771, 1796, 1815, 4270, 1823,  606, 7407, 7407,    0,
        0,  779, 7407, 7407, 4282,  801, 7407, 7407, 4281, 1738,
     7407, 7407, 4278, 1637, 1769, 1835, 7407, 7407,    0, 1865,
     1839, 7407, 1844, 1884, 1889, 1908, 4264, 1916, 1854,  870,
     7407, 7407,    0, 4264, 1920, 7407,    0, 4261, 1924,    0,
     7407, 1928, 7407, 7407,    0, 4234,  369, 7407, 4232, 1929,
     1995, 7407,    0, 4228, 7407,  205, 7407, 4262, 4226,    0,

     7407, 7407, 4250, 4254, 4218,  167, 7407, 7407, 1937, 7407,
     7407,    0, 1941, 7407,  533, 7407, 4222,    0, 7407, 7407,
      337,  348,    0, 7407, 7407,  486, 1666, 7407, 7407, 1952,
     7407, 7407,    0,    0, 1969,    0, 7407, 7407, 7407, 7407,
     1979, 7407, 7407, 1983, 7407, 7407,    0,  369, 4221, 7407,
     7407,    0,  391, 4220,    0, 7407, 4213, 4212, 7407, 7407,
        0, 4217,    0, 7407, 4242, 4209,    0, 7407, 7407, 4183,
       78, 1737, 1984, 2005, 1962, 1975, 4204, 4237, 7407,    0,
     4223, 4217,    0, 7407, 2072, 4215,  179, 4222,  354,  487,
      560,  558,  560, 2007,  344,  825, 4189, 4174, 7407,  482,

     2139, 4167, 4171, 4184,  803,  468, 4166, 7407, 7407,    0,
     2023, 1658, 1805, 1874, 1901, 2058, 2059, 2017, 2102,  598,
      806, 7407, 4213, 7407, 2014, 1710, 2110,  878, 7407, 2112,
     4215, 7407,  458, 4208,  464, 4195,  882, 7407, 4161, 2151,
     2171, 4192, 2179, 2198, 2206, 2217, 2225, 1801, 7407, 4158,
     2245, 2253,    0, 4203, 7407, 2129, 1732, 2173, 1827, 7407,
     2219, 4202, 4186, 2247, 1833, 2254, 7407, 4200, 1956, 7407,
     2261, 2286, 2295, 4185, 2314, 2322, 2341, 2349, 2368,    0,
     2387, 2391, 2406, 1897,    0,    0, 2053, 7407, 4146, 4191,
     7407, 2098, 7407, 4139, 4178, 7407, 2114, 7407, 4106, 4148,

     7407, 2293, 1970, 2319, 2119, 7407, 2359, 2415, 2131,    0,
     2423, 4134, 2435, 2161, 7407, 4095, 2443, 2462, 4127, 2470,
     2489, 2447, 2494, 2514, 2229, 7407, 4088, 2518, 2536,    0,
     4099, 4102, 4094, 2263, 7407, 4053, 4088, 4053, 4086, 2277,
     7407, 4048,    0, 2290, 7407, 4047,    0, 4046, 1868, 7407,
     4058, 4055, 7407, 4087, 2326, 7407, 4042,    0, 4041, 1714,
     4086, 4084, 7407, 4032,    0, 7407, 7407, 4029, 4027, 2358,
     7407, 4025,    0, 2380, 7407, 4024, 2455, 7407, 4032, 4019,
        0,   59, 4023, 4017,    0, 4014, 4020, 4024,  150, 4013,
     2399, 7407, 4012,    0,    0, 2478, 7407, 4005,    0, 2482,

     7407, 4001, 2499, 7407, 3999,  800, 4042,  850, 4029, 3995,
     1629, 4037, 1642, 4025, 3991,    0, 4034,  506,    0, 3989,
        0,  582, 3988,    0,    0, 3986, 3985, 3979, 4008,    0,
     4010, 7407, 4002, 2561, 3999, 4003, 7407, 4003, 3967, 3923,
     2018,   52, 2238, 7407,  569,  833, 3929, 3923,  446, 2541,
        0,  612, 2042, 2100, 7407, 7407,    0, 2072, 1776, 2375,
        0,    0, 2546, 2547, 2551, 2526, 2552, 2602, 2495, 2573,
     2594,    0, 3925, 3919,    0, 2599, 2601, 2615, 2630, 2637,
     2645, 3933, 1958, 2553, 3881, 3880, 3879, 2620, 2652, 2658,
     2684, 2703, 2711, 2723, 3878, 3877,    0,    0, 3911, 3875,

     3865, 3873, 3872, 3866,    0,    0, 3863, 3862, 3860, 3862,
     3846, 3845, 3844, 3843, 3834, 3846, 3836, 3839, 3843, 1860,
     3830, 3834, 3834, 3825, 3817, 3814, 3813, 3811,    0, 3808,
        0, 3805, 7407, 7407, 7407, 3804, 3829, 1971, 3798,    0,
     3797, 1664, 3796, 3837,    0, 2351, 2064, 7407, 3791, 3790,
     3821, 2335, 1635, 3799, 3787, 2192, 7407,    0, 2743, 2618,
     3774, 2620, 2607, 2531, 3799, 2679, 2811, 2677, 2833, 2834,
     2835, 2825, 3783, 3757, 2827, 2841, 7407, 3159, 3158, 3157,
     2852,    0, 2882, 2901, 2851, 3152, 3145, 3178, 3138, 3138,
     3115, 3110, 3101,    0, 3090, 3083, 3079, 2872, 3074, 3053,

     3047, 3038, 3037, 3031, 7407, 3019, 3010, 3008, 7407, 2999,
     3010, 2986, 2985, 2988, 2982, 2980, 2976, 2969, 2948, 2947,
     2940, 2303, 2938, 2936, 2934, 7407, 2965, 2900, 7407, 2934,
     2922, 1655, 2917, 2931,    0, 2542, 2689, 2905, 2646, 2892,
     2939, 2926, 2931, 2947, 2891, 2890, 2952, 2968, 2882, 2867,
     2852, 2980, 3014, 2848, 2842, 2841, 2817, 2819, 2817, 2801,
     2692, 2691, 2686, 2668, 2666, 2651, 2667, 1623, 2641, 2653,
     2645, 2648, 2643, 2636, 2624, 2613, 2610, 2596, 2597, 2595,
     2578, 2575, 2554, 2049, 2556, 2552, 2548, 2547, 2541, 2517,
     2513, 2512, 2495, 2485, 2479, 2509, 2466, 2470, 2456, 2449,

     2628, 7407, 2981, 2996, 3007, 3008, 3005, 2462, 2456, 3022,
     3034, 2445, 2444, 2433, 3041, 3068, 3087, 2432, 2426, 2425,
     7407, 2424, 2418, 2417, 2392, 2387, 2386, 2383, 2363, 2367,
     2354, 2358, 2361, 2357, 2340, 2334, 2342, 2324, 2312, 2311,
     7407, 2301,    0,    0, 2304, 7407, 2716, 2289, 2285, 2277,
     2277, 2276, 2268, 2263, 2259, 2252, 2242, 2241, 2231, 2229,
     2217, 2209, 2200, 2193, 2185, 2178, 2922, 3062, 3058, 3074,
     3078, 3083, 2167, 2166, 3095, 3104, 2165, 2159, 2158, 3111,
     2154, 2149, 2140, 2138, 2134, 2128, 2127, 2120, 2119, 2125,
        0, 2117, 2121, 2103, 2102, 2099, 2064, 2056, 2051, 2050,

     2032,    0, 7407, 7407, 2010, 7407, 2016, 1997, 1988, 1974,
     1950, 1943, 1941, 1937, 1933, 1931, 1895, 1891, 1889, 1887,
     1876, 1857, 1837, 1875, 1873, 3009, 2844, 3092, 3099, 3117,
     3120, 7407, 7407, 3126, 3132, 7407, 7407, 7407, 3147, 7407,
     7407, 7407, 7407, 7407, 7407, 7407, 7407, 7407, 7407, 1834,
     1815, 1817, 1811, 1818, 1779, 7407, 7407, 7407, 7407, 7407,
     1766, 2735, 1770, 1750, 7407, 7407, 7407, 7407, 7407, 7407,
     7407, 7407, 7407, 7407, 1771, 1741, 7407, 7407, 3108, 3171,
       87, 3128, 1706, 1690, 1684, 1682, 1673, 1678, 1662, 7407,
     1600,  843, 7407, 3145,  730, 3156,  829,  821,  786,  755,

      734,  712, 2857,  550,  539,  767,  482,  491,  466, 7407,
     2906,  411, 1667,  342, 7407,  131, 1755,   92, 1634, 2907,
     1796, 7407, 3175, 7407, 3215, 3242, 3269, 3296, 3323, 3350,
     3377, 3404, 3431, 3458, 3485, 3512, 3539, 3566, 3593, 3620,
     3647, 3674, 3701, 3728, 3755, 3782, 3809, 3830, 3847, 3861,
     3880, 3896, 3915, 3941, 3958, 3985, 3993, 4007, 4033, 4059,
     4085, 4112, 4129, 4156, 4173, 4199, 4225, 4251, 4259, 4271,
     4298, 4325, 4352, 4369, 4377, 4403, 4429, 4455, 4481, 4489,
     4503, 4511, 4525, 4552, 4567, 4594, 4621, 4636, 4663, 4690,
     4705, 4732, 4759, 4767, 4779, 4806, 4814, 4828, 4836, 4850,

     4877, 4892, 4919, 4946, 4968, 4994, 5002, 5014, 5031, 5043,
     5067, 5075, 3006, 5091, 5114, 5138, 5155, 5172, 5199, 5213,
     5234, 5260, 5286, 5312, 5324, 5351, 5368, 5385, 5412, 5429,
     5446, 5472, 5498, 5524, 5551, 5577, 5589, 5616, 5643, 5670,
     5687, 5704, 5730, 5738, 5764, 5790, 5816, 5842, 5854, 5868,
     5889, 5903, 5930, 5945, 5972, 5999, 6020, 6035, 6062, 6089,
     6104, 6131, 6158, 6170, 6197, 6211, 6232, 6246, 6267, 6294,
     6309, 6336, 6363, 3159, 6375, 6402, 6417, 6431, 6455, 6482,
     6508, 3166, 6531, 6555, 3175, 3181, 6581, 6595, 6612, 6620,
     6632, 6649, 6666, 6683, 6700, 6727, 6753, 6770, 6787, 6813,

     6839, 6865, 6877, 6885, 6899, 6907, 6919, 6946, 6954, 6962,
     3161, 6989, 7004, 7018, 7042, 3186, 7068, 7092, 7100, 7123,
     7137, 7154, 7171, 7179, 7194, 7218, 7244, 7271, 7298, 7325,
     7352, 7379
    } ;

static yyconst flex_int16_t yy_def[1233] =
    {   0,
     1025, 1025, 1024,    3, 1026, 1026, 1027, 1027, 1024,    9,
     1024,   11, 1028, 1028, 1029, 1029, 1024,   17, 1024,   19,
     1030, 1030, 1031, 1031, 1032, 1032, 1024,   27, 1024,   29,
     1024,   31, 1024,   33, 1033, 1033, 1024,   37, 1034, 1034,
     1024,   41, 1035, 1035, 1036, 1036, 1037, 1037, 1024,   49,
     1038, 1038, 1039, 1039, 1040, 1040, 1041, 1041, 1024,   59,
     1042, 1042, 1043, 1043, 1024,   65, 1024,   67, 1044, 1044,
     1044, 1044, 1024,   73, 1045, 1045, 1046, 1046, 1024, 1024,
     1024, 1024, 1024, 1047, 1048, 1049, 1050, 1024, 1051, 1052,
     1053, 1024, 1050, 1024, 1024, 1054, 1055, 1055, 1055, 1056,

     1024, 1024, 1024, 1057, 1058, 1024, 1024, 1024, 1024, 1059,
     1059, 1024, 1060, 1024, 1061, 1024, 1024, 1062, 1063, 1063,
     1024, 1063, 1024, 1024, 1064, 1065, 1065, 1065, 1024, 1065,
     1024, 1024, 1066, 1066, 1024, 1067, 1068, 1024, 1024, 1069,
     1070, 1024, 1024, 1024, 1071, 1024, 1024, 1024, 1072, 1024,
     1024, 1024, 1073, 1074, 1074, 1074, 1024, 1024, 1075, 1076,
     1024, 1024, 1024, 1024, 1077, 1077, 1024, 1078, 1024, 1079,
     1024, 1024, 1080, 1081, 1024, 1024, 1082, 1083, 1024, 1084,
     1024, 1024, 1024, 1024, 1085, 1024, 1086, 1024, 1087, 1024,
     1024, 1024, 1088, 1024, 1024, 1024, 1024, 1089, 1024, 1090,

     1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024,
     1024, 1091, 1024, 1024, 1024, 1024, 1024, 1092, 1024, 1024,
     1024, 1024, 1093, 1024, 1024, 1024, 1024, 1024, 1024, 1024,
     1024, 1024, 1094, 1095, 1024, 1096, 1024, 1024, 1024, 1024,
     1024, 1024, 1024, 1024, 1024, 1024, 1097, 1098, 1024, 1024,
     1024, 1099, 1100, 1024, 1101, 1024, 1024, 1024, 1024, 1024,
     1102, 1024, 1103, 1024, 1024, 1024, 1104, 1024, 1024, 1024,
     1024, 1024, 1105, 1105, 1024, 1024, 1024, 1106, 1024, 1107,
     1108, 1109, 1110, 1024, 1111, 1109, 1024, 1024, 1024, 1024,
     1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1112,

     1105, 1112,  301,  301,  301,  301,  301, 1024, 1024, 1113,
     1114, 1115, 1115, 1115, 1115, 1115, 1115, 1115, 1024, 1024,
     1024, 1024, 1116, 1024, 1117, 1118, 1117, 1024, 1024, 1117,
     1119, 1024, 1120, 1121, 1120, 1024, 1024, 1024, 1024, 1024,
     1122, 1024, 1122, 1123, 1124, 1122, 1123, 1024, 1024, 1024,
     1124, 1124, 1125, 1126, 1024, 1127, 1128, 1127, 1024, 1024,
     1127, 1129, 1024, 1130, 1131, 1130, 1024, 1129, 1024, 1024,
     1130, 1024, 1132, 1024, 1132, 1133, 1134, 1132, 1024, 1135,
     1133, 1134, 1134, 1136, 1137, 1137, 1024, 1024, 1024, 1138,
     1024, 1024, 1024, 1024, 1139, 1024, 1024, 1024, 1024, 1140,

     1024, 1141, 1142, 1141, 1024, 1024, 1141, 1143, 1024, 1144,
     1143, 1024, 1145, 1024, 1024, 1024, 1024, 1146, 1024, 1146,
     1147, 1148, 1146, 1147, 1024, 1024, 1024, 1148, 1148, 1149,
     1150, 1151, 1150, 1024, 1024, 1024, 1152, 1024, 1152, 1024,
     1024, 1024, 1153, 1024, 1024, 1024, 1154, 1024, 1155, 1024,
     1156, 1024, 1024, 1157, 1024, 1024, 1024, 1158, 1024, 1024,
     1159, 1159, 1024, 1024, 1160, 1024, 1024, 1024, 1024, 1024,
     1024, 1024, 1161, 1024, 1024, 1024, 1024, 1024, 1024, 1024,
     1162, 1024, 1024, 1024, 1163, 1024, 1024, 1024, 1024, 1024,
     1024, 1024, 1024, 1164, 1164, 1024, 1024, 1024, 1165, 1024,

     1024, 1024, 1024, 1024, 1024, 1166, 1167, 1166, 1024, 1024,
     1168, 1169, 1168, 1024, 1024, 1170, 1024, 1024, 1171, 1024,
     1172, 1024, 1024, 1173, 1174, 1024, 1024, 1024, 1175, 1176,
     1177, 1024, 1178, 1179, 1178, 1177, 1024, 1024, 1024, 1024,
     1024, 1024, 1180, 1024, 1024, 1024, 1024, 1024, 1181, 1181,
     1182, 1024, 1183, 1183, 1024, 1024, 1184, 1183, 1183, 1183,
     1185, 1186, 1187, 1187, 1187, 1187, 1187, 1187, 1188, 1188,
     1189, 1190, 1024, 1024, 1191, 1192, 1192, 1193, 1194, 1194,
     1195, 1196, 1024, 1197, 1024, 1024, 1024, 1198, 1198, 1199,
     1200, 1201, 1202, 1202, 1024, 1024, 1203, 1204, 1205, 1024,

     1024, 1024, 1024, 1024, 1206, 1207, 1024, 1024, 1024, 1024,
     1024, 1024, 1024, 1024, 1024, 1024, 1208, 1024, 1024, 1024,
     1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1209, 1024,
     1210, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1211,
     1024, 1024, 1024, 1212, 1213, 1214, 1024, 1024, 1024, 1024,
     1215, 1215, 1024, 1024, 1024, 1024, 1024, 1216, 1024, 1217,
     1218, 1217, 1217, 1217, 1219, 1220, 1220, 1220, 1220, 1220,
     1220, 1221, 1024, 1024, 1222, 1223, 1024, 1024, 1024, 1024,
     1199, 1224, 1200, 1200, 1201, 1024, 1024, 1205, 1024, 1024,
     1024, 1024, 1024, 1207, 1024, 1024, 1024, 1024, 1024, 1024,

     1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024,
     1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024,
     1024, 1024, 1024, 1024, 1024, 1024, 1225, 1214, 1024, 1024,
     1024, 1024, 1024, 1024, 1226, 1226, 1217, 1024, 1217, 1220,
     1219, 1220, 1220, 1221, 1024, 1024, 1222, 1223, 1024, 1024,
     1024, 1199, 1227, 1024, 1024, 1024, 1024, 1024, 1024, 1024,
     1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024,
     1024, 1024, 1024, 1024, 1024, 1228, 1024, 1024, 1024, 1024,
     1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024,
     1024, 1024, 1024, 1024, 1024, 1225, 1024, 1024, 1024, 1024,

     1217, 1024, 1217, 1220, 1220, 1220, 1221, 1024, 1024, 1222,
     1223, 1024, 1024, 1024, 1199, 1227, 1227, 1024, 1024, 1024,
     1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024,
     1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024,
     1024, 1024, 1229, 1230, 1024, 1024, 1024, 1024, 1024, 1024,
     1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024,
     1024, 1024, 1024, 1024, 1024, 1024, 1217, 1217, 1220, 1220,
     1220, 1221, 1024, 1024, 1222, 1223, 1024, 1024, 1024, 1199,
     1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024,
     1231, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024,

     1024, 1232, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024,
     1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024,
     1024, 1024, 1024, 1024, 1024, 1217, 1217, 1220, 1220, 1220,
     1221, 1024, 1024, 1222, 1223, 1024, 1024, 1024, 1199, 1024,
     1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024,
     1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024,
     1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024,
     1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1217, 1024,
     1219, 1220, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024,
     1024, 1024, 1024, 1217, 1219, 1220, 1024, 1024, 1024, 1024,

     1024, 1024, 1024, 1024, 1024, 1219, 1024, 1024, 1024, 1024,
     1024, 1024, 1219, 1024, 1024, 1024, 1219, 1024, 1219, 1024,
     1219, 1024, 1219,    0, 1024, 1024, 1024, 1024, 1024, 1024,
     1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024,
     1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024,
     1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024,
     1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024,
     1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024,
     1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024,
     1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024,

     1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024,
     1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024,
     1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024,
     1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024,
     1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024,
     1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024,
     1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024,
     1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024,
     1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024,
     1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024,

     1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024,
     1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024,
     1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024,
     1024, 1024
    } ;

static yyconst flex_int16_t yy_nxt[7476] =
    {   0,
       81,   82,   83,   81,   82,   81,   84,   81,   85,   81,
       81,   81,   86,   81,   86,   87,   81,   86,   86,   81,
       88,   81,   89,   90,   90,   90,   90,   90,   90,   90,
       90,   90,   90,   90,   90,   90,   90,   90,   81,   91,
       81,   90,   90,   90,   90,   90,   90,   90,   90,   90,
       90,   90,   90,   90,   90,   90,   90,   90,   90,   90,
       90,   90,   90,   90,   81,   81,   81,   81,   92,  144,
      144,   92,  148,  145,  145,  148,  149,  208,  208,  149,
      541,  229,   93,   94,   94,   95,   94,   94,   94,   96,
       94,   94,   94,   94,   94,  229,   94,  243,   94,   98,

      541,  181,   98,   94,   94,   94,  146,  146,  181,  150,
       80,  615,  150,  616,  209,  209,  334,   80,  230,  526,
      336,   94,   99,   94,  196,  197, 1024,  196,  995,  198,
      196,  197,  230,  196,  244,  198,  215,  216,  182,  215,
      215,  216,  243,  215,  525,  182, 1020,   94,   94,   94,
       94,   94,   95,   94,   94,   94,   96,   94,   94,   94,
       94,   94,  199,   94,  188,   94,   98,  188,  199,   98,
       94,   94,   94,  189,  217,  219,  189,  220,  217,  244,
      537,  326,  327,  537,  190,  327, 1018,  190,   94,   99,
       94,  351,  351,  351,  351,  221,  622,  282,  352,  282,

      282,  191,  282,  282,  191,  327,  460,  283,  469,  460,
      623,  461,  222,  468,   94,   94,   94,  102,  102,  103,
      102,  102,  102,  102,  102,  104,  102,  102,  102,  102,
      102,  102,  102,  102,  102,  102,  102,  102,  102,  102,
      105,  105,  105,  105,  105,  105,  105,  105,  105,  105,
      105,  105,  105,  105,  105,  102,  106,  102,  105,  105,
      105,  105,  105,  105,  105,  105,  105,  105,  105,  105,
      105,  105,  105,  105,  105,  105,  105,  105,  105,  105,
      105,  102,  102,  102,  105,  107,  108,  109,  108,  108,
      107,  107,  107,  110,  107,  107,  107,  107,  107,  107,

      111,  107,  107,  107,  112,  107,  107,  107,  113,  113,
      113,  113,  113,  113,  113,  113,  113,  113,  113,  113,
      113,  113,  113,  107,  114,  107,  113,  113,  113,  113,
      113,  113,  113,  113,  113,  113,  113,  113,  113,  113,
      113,  113,  113,  113,  113,  113,  113,  113,  113,  107,
      107,  115,  113,  116,  116,  117,  116,  116,  116,  118,
      116,  116,  116,  116,  116,  264,  116,  546,  116,  120,
      264,  450,  120,  121,  116,  116,  201,  265,  202,  219,
      451,  220,  265,  482,  507,  203,  546,  483,  509,  484,
      204,  116,  122,  116,  482,  201,  205,  202,  483,  221,

      275,  276,  266,  275,  203,  891,  512,  266,  452,  204,
      514,  539,  540,  206,  256,  205,  222,  116,  116,  116,
      116,  116,  117,  116,  116,  116,  118,  116,  116,  116,
      116,  116,  206,  116,  257,  116,  120,  256,  277,  120,
      121,  116,  116,  224,  224,  225,  225,  656, 1024,  327,
      656,  257,  327,  340,  340,  340,  340,  257,  116,  122,
      116, 1016,  237,  226,  226,  337,  338,  341,  337,  238,
      239,  342,  327,  334,  257,  348,  349,  336,  348,  334,
      227,  227,  240,  336,  116,  116,  116,  123,  123,  124,
      123,  123,  123,  125,  123,  123,  123,  123,  123,  241,

      123,  256,  123,  127,  237,  339,  127,  128,  129,  123,
      256,  238,  239,  268,  558,  350,  357,  358,  541,  891,
      358,  258,  269,  559,  240,  123,  130,  123,  272,  550,
      258,  272,  486,  270,  477,  478,  487,  477,  258,  541,
      358,  241,  488, 1014,  489,  891,  634,  258,  551,  273,
      271,  123,  123,  123,  123,  123,  124,  123,  123,  123,
      125,  123,  123,  123,  123,  123,  274,  123,  268,  123,
      127,  635,  479,  127,  128,  129,  123,  269,  541,  282,
      284,  282,  285,  340,  340,  340,  340,  637,  270,  283,
      542,  541,  123,  130,  123,  541,  541,  341, 1012,  321,

      322,  342,  321,  638, 1011,  271,  287,  382,  382,  382,
      382,  542,  541,  552,  383,  541,  552,  541,  123,  123,
      123,  107,  131,  132,  131,  131,  107,  107,  107,  133,
      107,  107,  107,  107,  107,  107,  134,  107,  107,  107,
      135,  107,  107,  107,  136,  136,  136,  136,  136,  136,
      136,  136,  136,  136,  136,  136,  136,  136,  136,  107,
      114,  107,  136,  136,  136,  136,  136,  136,  136,  136,
      136,  136,  136,  136,  136,  136,  136,  136,  136,  136,
      136,  136,  136,  136,  136,  107,  107,  137,  136,  138,
      138,  139,  138,  138,  138,  138,  138,  140,  138,  138,

      138,  138,  138,  138,  138,  138,  138,  138,  138,  138,
      138,  138,  141,  141,  141,  141,  141,  141,  141,  141,
      141,  141,  141,  141,  141,  141,  141,  138,  142,  138,
      141,  141,  141,  141,  141,  141,  141,  141,  141,  141,
      141,  141,  141,  141,  141,  141,  141,  141,  141,  141,
      141,  141,  141,  138,  138,  138,  141,  151,  151,  152,
      151,  151,  151,  153,  151,  151,  151,  151,  151,  562,
      151,  319,  151,  155,  319,  891,  155,  151,  151,  151,
      387,  388, 1006,  387, 1009,  320,  340,  340,  340,  340,
     1024,  358,  273,  343,  358,  151,  156,  151,  328,  329,

      341,  328,  392,  393,  342,  392,  562,  321,  322,  274,
      321,  555, 1024,  327,  358,  507,  327, 1013,  891,  509,
      389,  151,  151,  151,  151,  151,  152,  151,  151,  151,
      153,  151,  151,  151,  151,  151,  327,  151,  330,  151,
      155,  556,  394,  155,  151,  151,  151,  321,  322,  891,
      321,  345,  340,  340,  340,  340,  541,  653,  282,  284,
      282,  285,  151,  156,  151,  507,  341,  557,  283,  509,
      342,  428,  428,  428,  428, 1008,  653,  541,  429,  328,
      329, 1007,  328,  337,  338,  287,  337, 1005,  151,  151,
      151,  157,  157,  158,  157,  157,  157,  157,  157,  159,

      157,  157,  157,  157,  157,  157,  157,  157,  157,  157,
      157,  157,  157,  157,  160,  160,  160,  160,  160,  160,
      160,  160,  160,  160,  160,  160,  160,  160,  160,  157,
      161,  157,  160,  160,  160,  160,  160,  160,  160,  160,
      160,  160,  160,  160,  160,  160,  160,  160,  160,  160,
      160,  160,  160,  160,  160,  157,  157,  157,  160,  162,
      163,  164,  163,  163,  162,  162,  162,  165,  162,  162,
      162,  162,  162,  162,  166,  162,  162,  162,  167,  162,
      162,  162,  168,  168,  168,  168,  168,  168,  168,  168,
      168,  168,  168,  168,  168,  168,  168,  162,  169,  162,

      168,  168,  168,  168,  168,  168,  168,  168,  168,  168,
      168,  168,  168,  168,  168,  168,  168,  168,  168,  168,
      168,  168,  168,  162,  162,  170,  168,  171,  171,  172,
      171,  171,  171,  171,  171,  173,  171,  171,  171,  171,
      171,  171,  171,  171,  171,  171,  171,  171,  171,  171,
      174,  174,  174,  174,  174,  174,  174,  174,  174,  174,
      174,  174,  174,  174,  174,  171,  175,  171,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174,  174,  174,
      174,  171,  171,  171,  174,   80,   80,  176,   80,   80,

       80,   80,   80,  177,   80,   80,   80,   80,   80,   80,
       80,   80,   80,   80,   80,   80,   80,   80,  178,  178,
      178,  178,  178,  178,  178,  178,  178,  178,  178,  178,
      178,  178,  178,   80,  179,   80,  178,  178,  178,  178,
      178,  178,  178,  178,  178,  178,  178,  178,  178,  178,
      178,  178,  178,  178,  178,  178,  178,  178,  178,   80,
       80,   80,  178,  183,  183,  184,  183,  183,  183,  183,
      183,  183,  183,  183,  183,  183,  183,  183,  183,  183,
      183,  183,  183,  183,  183,  183,  185,  185,  185,  185,
      185,  185,  185,  185,  185,  185,  185,  185,  185,  185,

      185,  183,  186,  183,  185,  185,  185,  185,  185,  185,
      185,  185,  185,  185,  185,  185,  185,  185,  185,  185,
      185,  185,  185,  185,  185,  185,  185,  183,  183,  183,
      185,   80,   80,  192,   80,   80,   80,   80,   80,   80,
       80,   80,   80,   80,   80,   80,   80,   80,   80,   80,
       80,   80,   80,   80,  193,  193,  193,  193,  193,  193,
      193,  193,  193,  193,  193,  193,  193,  193,  193,   80,
      194,   80,  193,  193,  193,  193,  193,  193,  193,  193,
      193,  193,  193,  193,  193,  193,  193,  193,  193,  193,
      193,  193,  193,  193,  193,   80,   80,   80,  193,  210,

      210,  211,  210,  210,  210,  210,  210,  210,  210,  210,
      210,  210,  210,  210,  210,  210,  210,  210,  210,  210,
      210,  210,  212,  212,  212,  212,  212,  212,  212,  212,
      212,  212,  212,  212,  212,  212,  212,  210,  213,  210,
      212,  212,  212,  212,  212,  212,  212,  212,  212,  212,
      212,  212,  212,  212,  212,  212,  212,  212,  212,  212,
      212,  212,  212,  210,  210,  210,  212,  231,  231,  232,
      231,  231,  231,  231,  231,  233,  231,  231,  231,  231,
      231,  231,  231,  231,  231,  231,  231,  231,  231,  231,
      234,  234,  234,  234,  234,  234,  234,  234,  234,  234,

      234,  234,  234,  234,  234,  231,  235,  231,  234,  234,
      234,  234,  234,  234,  234,  234,  234,  234,  234,  234,
      234,  234,  234,  234,  234,  234,  234,  234,  234,  234,
      234,  231,  231,  231,  234,  245,  245,  246,  245,  245,
      245,  245,  245,  247,  245,  245,  245,  245,  245,  245,
      245,  245,  245,  245,  245,  245,  245,  245,  248,  248,
      248,  248,  248,  248,  248,  248,  248,  248,  248,  248,
      248,  248,  248,  245,  249,  245,  248,  248,  248,  248,
      248,  248,  248,  248,  248,  248,  248,  248,  248,  248,
      248,  248,  248,  248,  248,  248,  248,  248,  248,  245,

      245,  245,  248,  250,  250,  251,  250,  250,  250,  250,
      250,  252,  250,  250,  250,  250,  250,  250,  250,  250,
      250,  250,  250,  250,  250,  250,  253,  253,  253,  253,
      253,  253,  253,  253,  253,  253,  253,  253,  253,  253,
      253,  250,  254,  250,  253,  253,  253,  253,  253,  253,
      253,  253,  253,  253,  253,  253,  253,  253,  253,  253,
      253,  253,  253,  253,  253,  253,  253,  250,  250,  250,
      253,  259,  259,  260,  259,  259,  259,  259,  259,  259,
      259,  259,  259,  259,  259,  259,  259,  259,  259,  259,
      259,  259,  259,  259,  261,  261,  261,  261,  261,  261,

      261,  261,  261,  261,  261,  261,  261,  261,  261,  259,
      262,  259,  261,  261,  261,  261,  261,  261,  261,  261,
      261,  261,  261,  261,  261,  261,  261,  261,  261,  261,
      261,  261,  261,  261,  261,  259,  259,  259,  261,  288,
      346,  346,  346,  346,  512,  365,  366,  343,  514,  366,
      289,  367,  403,  404,  341, 1004,  404,  512,  342,  552,
      290,  514,  552,  291,  292,  832,  732,  293,  294,  366,
      295,  296,  657,  562, 1024,  366,  404, 1021,  366,  290,
     1024,  833,  541,  291,  292,  359,  360,  732,  359,  293,
      294,  297,  298,  295,  296,  299,  299,  562,  366, 1024,

      358,  541,  657,  358,  368,  345,  562,  490,  299,  299,
      300, 1003,  486, 1024,  366,  460,  487,  366,  460,  367,
      461, 1017,  488,  358,  489,  361,  570,  302,  657,  570,
     1002,  303, 1001,  304, 1000,  305,  999,  366,  272,  397,
      398,  272,  397,  369,  370,  998,  369,  306,  577,  570,
      307,  577,  308,  309,  310,  299,  299, 1024,  366,  273,
      997,  366,  977, 1024,  372,  372,  372,  372,  299,  299,
      302,  577,  372,  372,  372,  372,  274,  552,  373,  399,
      552,  366,  374,  371, 1024,  404,  373,  300,  404,  313,
      374,  314,  993,  315,  562,  316,  992,  372,  372,  372,

      372, 1019,  348,  349,  375,  348,  552,  317,  404,  552,
      318,  373,  308,  309,  310,  374,  378,  378,  378,  378,
      991,  663,  989,  375,  379,  372,  372,  379,  359,  360,
      373,  359,  380,  988,  374,  562,  405,  406,  373,  405,
      414,  415,  374,  414,  562,  417,  417,  417,  417,  580,
     1024,  404,  580, 1023,  404,  425,  426,  563,  425,  418,
      987,  709,  377,  419,  709,  986,  409,  409,  409,  409,
      450,  985,  580,  410,  404,  552,  407,  984,  552,  451,
      416,  377,  411,  411,  412,  417,  417,  417,  417,  983,
      417,  417,  417,  417,  978,  427,  977,  420,  583,  418,

      976,  583,  552,  419,  418,  552,  380,  452,  419,  423,
      423,  423,  423,  562,  710,  975,  420,  417,  417,  417,
      417,  434,  435,  418,  434,  440,  441,  419,  440,  444,
      445,  418,  444,  276,  564,  419,  453,  453,  470,  471,
      562,  470,  474,  475,  974,  474,  973,  565,  972,  453,
      453,  454,  971,  491,  492,  422,  491,  369,  370,  583,
      369,  436,  583,  275,  276,  442,  275,  380,  453,  446,
      496,  497,  722,  496,  422,  722,  275,  276,  472,  275,
      500,  501,  476,  500,  503,  504,  589,  503,  970,  589,
      969,  299,  299,  493,  968,  453,  455,  456,  967,  455,

      966,  277,  453,  453,  299,  299,  527,  965,  543,  589,
      498,  543,  299,  299,  277,  453,  453,  453,  552,  543,
      502,  552,  543,  299,  505,  299,  299,  299,  544,  326,
      327,  305,  964,  327,  454,  282,  457,  282,  282,  544,
      282,  282,  545,  552,  527,  283,  552,  963,  308,  309,
      310,  962,  305,  327,  387,  388,  562,  387,  961,  552,
      552,  453,  552,  552,  545,  729,  555,  960,  729,  308,
      309,  310,  532,  552,  568,  532,  552,  532,  532,  532,
      532,  532,  532,  532,  533,  532,  533,  534,  532,  478,
      659,  532,  532,  532,  536,  850,  556,  562,  562,  392,

      393,  552,  392,  319,  552,  566,  319,  958,  957,  851,
      532,  532,  532,  956,  567,  397,  398,  320,  397,  955,
      405,  406,  557,  405,  273, 1024,  327,  326,  327,  327,
      662,  327,  409,  409,  409,  409,  532,  532,  532,  532,
      552,  274,  954,  552,  357,  358, 1024, 1024,  358,  327,
      412,  327,  340,  340,  340,  340,  660,  953,  952, 1024,
     1024, 1024,  414,  415,  571,  414,  341,  951,  358,  950,
      342,  891,  346,  346,  346,  346,  948,  947, 1024,  343,
     1024, 1024, 1024, 1024,  946,  945,  341, 1024, 1024,  358,
      342,  944,  358,  656, 1024,  943,  656,  942, 1024,  340,

      340,  340,  340, 1024, 1024, 1024,  941,  351,  351,  351,
      351,  940,  358,  341,  352,  938,  937,  342,  346,  346,
      346,  346,  936,  933,  932,  343,  340,  340,  340,  340,
      425,  426,  341,  425,  357,  358,  342,  345,  358,  652,
      341,  925,  652,  924,  342, 1024,  351,  351,  351,  351,
      923,  922,  921,  352, 1024, 1024, 1024, 1024,  358,  544,
      920, 1024,  365,  366,  434,  435,  366,  434,  367, 1024,
      366,  578,  919,  366,  918, 1024,  365,  366,  440,  441,
      366,  440,  367,  345,  917,  916,  366,  372,  372,  372,
      372,  444,  445,  366,  444,  915,  378,  378,  378,  378,

      366,  373,  914,  375,  722,  374,  913,  722,  403,  404,
      373,  912,  404,  581,  374, 1024, 1024, 1024, 1024,  911,
      910,  909, 1024,  379,  372,  372,  379,  455,  456, 1024,
      455,  380,  404, 1024, 1024,  404,  652,  373,  404,  652,
      908,  374,  382,  382,  382,  382,  907,  905,  902,  383,
      378,  378,  378,  378,  901,  900,  544,  375,  404,  470,
      471,  377,  470,  282,  373,  282,  728,  899,  374,  379,
      372,  372,  379,  283,  403,  404,  552,  380,  404,  552,
     1024,  474,  475,  373,  474,  898,  897,  374,  379,  372,
      372,  379,  382,  382,  382,  382,  380,  896,  404,  383,

      491,  492,  373,  491,  895,  891,  374, 1024, 1024, 1024,
     1024,  590,  894,  893, 1024,  377,  409,  409,  409,  409,
      892,  664,  891,  410,  409,  409,  409,  409,  890,  889,
      888,  410,  411,  411,  412,  887,  409,  409,  409,  409,
      411,  411,  412,  410,  417,  417,  417,  417,  428,  428,
      428,  428,  593,  593,  412,  429,  477,  478,  418,  477,
      886,  885,  419,  423,  423,  423,  423,  884,  883,  882,
      420, 1024, 1024, 1024, 1024,  881,  879,  418, 1024,  496,
      497,  419,  496,  500,  501, 1024,  500,  878,  877, 1024,
      417,  417,  417,  417,  479,  423,  423,  423,  423,  874,

      503,  504,  420,  503,  418,  873,  866,  865,  419,  418,
      326,  570,  864,  419,  570,  417,  417,  417,  417,  428,
      428,  428,  428,  863,  645,  862,  429,  552,  422,  418,
      552,  861,  552,  419,  570,  552, 1024, 1024, 1024, 1024,
     1024,  860,  656,  736, 1024,  656,  736,  552,  552,  657,
      552,  552,  552,  552,  583,  552,  552,  583,  859,  858,
      422,  532,  380,  857,  532,  562,  532,  532,  532,  532,
      532,  532,  532,  533,  532,  533,  646,  532,  739,  657,
      532,  532,  532,  536,  669,  562,  562,  856, 1024,  570,
      562,  562,  570,  855,  854,  667,  666,  670,  853,  532,

      647,  532,  852,  552,  849,  657,  552,  668,  552,  326,
      327,  552,  570,  327,  357,  577, 1024,  577,  577,  552,
      577,  552,  552,  848,  552,  532,  532,  532,  532,  552,
      357,  358,  552,  327,  358,  403,  589,  847,  577,  589,
      577,  562,  846,  845,  672,  365,  580,  552,  671,  580,
      552,  367, 1024,  580,  358,  844,  580,  843, 1024,  589,
      365,  366,  659,  842,  366,  675,  367, 1024,  589,  580,
      840,  589,  867,  403,  404,  737,  580,  404,  552,  659,
      552,  552,  839,  552,  366,  409,  409,  409,  409,  838,
      552,  589,  682,  552,  837,  676,  803,  404,  836,  835,

      834,  683,  683,  412,  685,  685,  685,  685,  681,  831,
      830,  410,  409,  409,  409,  409,  562,  906,  562,  410,
      906,  829,  412,  828,  409,  409,  409,  409,  593,  593,
      412,  410,  827,  740,  742,  801,  990,  826,  825,  990,
      593,  593,  412,  735,  736,  735,  735,  736,  735,  735,
      735,  735,  735,  735,  735,  735,  735,  735,  735,  735,
      735,  735,  735,  735,  735,  735,  301,  301,  301,  301,
      301,  301,  301,  301,  301,  301,  301,  301,  301,  301,
      301,  735,  735,  735,  301,  301,  301,  301,  301,  301,
      301,  301,  301,  301,  301,  301,  301,  301,  301,  301,

      301,  301,  301,  301,  301,  301,  301,  735,  735,  735,
      735,  735,  736,  735,  735,  736,  735,  735,  735,  735,
      735,  735,  735,  735,  735,  735,  735,  735,  735,  735,
      735,  735,  735,  735,  552,  552,  552,  552,  552,  552,
      326,  327,  357,  358,  327,  552,  358,  824,  552,  735,
      741,  735,  685,  685,  685,  685,  365,  366, 1010,  410,
      366, 1010,  367,  823,  327,  822,  358,  403,  404,  821,
      412,  404,  562,  562,  562,  735,  735,  735,  735,  744,
      366,  747,  743,  409,  409,  409,  409,  820,  819,  667,
      682,  404,  667,  552,  818,  748,  552,  659,  814,  683,

      683,  412,  409,  409,  409,  409,  752, 1015, 1022,  682,
     1015, 1022,  282,  813,  282,  728,  764,  765,  683,  683,
      412,  766,  283,  552,  767,  768,  552,  552,  812,  769,
      552,  562,  552,  770,  771,  552,  809,  808,  804,  735,
      735,  735,  735,  735,  735,  735,  735,  735,  735,  735,
      735,  735,  735,  735,  735,  735,  735,  735,  735,  735,
      735,  735,  326,  327,  926,  562,  327,  357,  358,  802,
      562,  358,  805,  800,  799,  798,  797,  735,  735,  735,
      645,  806,  552,  365,  366,  552,  327,  366,  795,  367,
      794,  358,  793,  807,  792,  403,  404,  552,  810,  404,

      552,  791,  790,  735,  735,  735,  735,  366,  552,  552,
      552,  552,  552,  552,  811,  409,  409,  409,  409,  404,
      326,  327,  682,  789,  327,  561,  815,  561,  561,  561,
      788,  816,  816,  412,  787,  562,  786,  357,  358,  869,
      868,  358,  785,  784,  327,  783,  562,  562,  872,  365,
      366,  870,  782,  366,  781,  367,  403,  404,  780,  552,
      404,  358,  552,  552,  779,  875,  552,  871,  979,  409,
      409,  409,  409,  366,  778,  552,  682,  876,  552,  552,
      404,  777,  552,  776,  880,  816,  816,  412,  409,  409,
      409,  409,  775,  980,  276,  682,  980,  562,  326,  327,

      552,  774,  327,  552,  816,  816,  412,  773,  927,  552,
      357,  358,  552,  562,  358,  928,  929,  562,  552,  365,
      366,  552,  327,  366,  930,  367,  403,  404,  772,  552,
      404,  981,  552,  763,  358,  326,  327,  762,  562,  327,
      931,  357,  358,  366,  761,  358,  552,  365,  366,  552,
      404,  366,  934,  367,  994,  760,  562,  552,  982,  327,
      552,  935,  403,  404,  759,  358,  404,  562,  939,  758,
      667,  366,  980,  276,  996,  980,  275,  276,  640,  275,
      640,  640,  640,  640,  640,  658,  404,  658,  658,  658,
      659,  757,  756,  432,  561,  562,  561,  561,  561,  755,

      665,  667,  665,  665,  665,  658,  754,  658,  658,  658,
      277,  751,  750,  749,  981,   80,   80,   80,   80,   80,
       80,   80,   80,   80,   80,   80,   80,   80,   80,   80,
       80,   80,   80,   80,   80,   80,   80,   80,   80,   80,
       80,   80,   97,   97,   97,   97,   97,   97,   97,   97,
       97,   97,   97,   97,   97,   97,   97,   97,   97,   97,
       97,   97,   97,   97,   97,   97,   97,   97,   97,  100,
      100,  100,  100,  100,  100,  100,  100,  100,  100,  100,
      100,  100,  100,  100,  100,  100,  100,  100,  100,  100,
      100,  100,  100,  100,  100,  100,  119,  119,  119,  119,

      119,  119,  119,  119,  119,  119,  119,  119,  119,  119,
      119,  119,  119,  119,  119,  119,  119,  119,  119,  119,
      119,  119,  119,  126,  126,  126,  126,  126,  126,  126,
      126,  126,  126,  126,  126,  126,  126,  126,  126,  126,
      126,  126,  126,  126,  126,  126,  126,  126,  126,  126,
      143,  143,  143,  143,  143,  143,  143,  143,  143,  143,
      143,  143,  143,  143,  143,  143,  143,  143,  143,  143,
      143,  143,  143,  143,  143,  143,  143,  147,  147,  147,
      147,  147,  147,  147,  147,  147,  147,  147,  147,  147,
      147,  147,  147,  147,  147,  147,  147,  147,  147,  147,

      147,  147,  147,  147,  154,  154,  154,  154,  154,  154,
      154,  154,  154,  154,  154,  154,  154,  154,  154,  154,
      154,  154,  154,  154,  154,  154,  154,  154,  154,  154,
      154,  180,  180,  180,  180,  180,  180,  180,  180,  180,
      180,  180,  180,  180,  180,  180,  180,  180,  180,  180,
      180,  180,  180,  180,  180,  180,  180,  180,  187,  187,
      187,  187,  187,  187,  187,  187,  187,  187,  187,  187,
      187,  187,  187,  187,  187,  187,  187,  187,  187,  187,
      187,  187,  187,  187,  187,  195,  195,  195,  195,  195,
      195,  195,  195,  195,  195,  195,  195,  195,  195,  195,

      195,  195,  195,  195,  195,  195,  195,  195,  195,  195,
      195,  195,  200,  200,  200,  200,  200,  200,  200,  200,
      200,  200,  200,  200,  200,  200,  200,  200,  200,  200,
      200,  200,  200,  200,  200,  200,  200,  200,  200,  207,
      207,  207,  207,  207,  207,  207,  207,  207,  207,  207,
      207,  207,  207,  207,  207,  207,  207,  207,  207,  207,
      207,  207,  207,  207,  207,  207,  214,  214,  214,  214,
      214,  214,  214,  214,  214,  214,  214,  214,  214,  214,
      214,  214,  214,  214,  214,  214,  214,  214,  214,  214,
      214,  214,  214,  218,  218,  218,  218,  218,  218,  218,

      218,  218,  218,  218,  218,  218,  218,  218,  218,  218,
      218,  218,  218,  218,  218,  218,  218,  218,  218,  218,
      223,  223,  223,  223,  223,  223,  223,  223,  223,  223,
      223,  223,  223,  223,  223,  223,  223,  223,  223,  223,
      223,  223,  223,  223,  223,  223,  223,  228,  228,  228,
      228,  228,  228,  228,  228,  228,  228,  228,  228,  228,
      228,  228,  228,  228,  228,  228,  228,  228,  228,  228,
      228,  228,  228,  228,  236,  236,  236,  236,  236,  236,
      236,  236,  236,  236,  236,  236,  236,  236,  236,  236,
      236,  236,  236,  236,  236,  236,  236,  236,  236,  236,

      236,  242,  242,  242,  242,  242,  242,  242,  242,  242,
      242,  242,  242,  242,  242,  242,  242,  242,  242,  242,
      242,  242,  242,  242,  242,  242,  242,  242,  255,  255,
      255,  255,  255,  255,  255,  255,  255,  255,  255,  255,
      255,  255,  255,  255,  255,  255,  255,  255,  255,  255,
      255,  255,  255,  255,  255,  263,  263,  263,  263,  263,
      263,  263,  263,  263,  263,  263,  263,  263,  263,  263,
      263,  263,  263,  263,  263,  263,  263,  263,  263,  263,
      263,  263,  267,  267,  267,  267,  267,  267,  267,  267,
      267,  267,  267,  267,  267,  267,  267,  267,  267,  267,

      267,  267,  267,  267,  267,  267,  267,  267,  267,  278,
      278,  746,  278,  278,  278,  278,  278,  278,  278,  278,
      278,  278,  278,  278,  278,  278,  278,  278,  278,  278,
      278,  278,  278,  278,  278,  278,  281,  745,  562,  738,
      734,  733,  544,  731,  730,  726,  725,  724,  723,  281,
      638,  281,  281,  281,  721,  720,  281,  282,  719,  282,
      282,  718,  282,  717,  716,  282,  282,  715,  282,  282,
      282,  286,  286,  286,  286,  714,  286,  713,  712,  286,
      286,  286,  286,  286,  286,  301,  301,  711,  708,  707,
      706,  704,  703,  702,  701,  700,  699,  301,  301,  301,

      301,  301,  301,  301,  301,  301,  311,  698,  311,  311,
      697,  311,  696,  695,  311,  311,  693,  311,  311,  311,
      312,  312,  692,  691,  690,  689,  432,  687,  686,  680,
      679,  678,  312,  312,  312,  312,  312,  312,  312,  312,
      312,  323,  323,  677,  323,  323,  323,  323,  323,  323,
      323,  323,  323,  323,  323,  323,  323,  323,  323,  323,
      323,  323,  323,  323,  323,  323,  323,  323,  325,  674,
      325,  325,  325,  325,  325,  673,  655,  325,  325,  325,
      325,  325,  654,  650,  325,  331,  331,  331,  331,  331,
      331,  331,  331,  331,  331,  331,  331,  331,  331,  331,

      331,  331,  331,  331,  331,  331,  331,  331,  331,  331,
      331,  331,  333,  649,  333,  333,  333,  648, 1024,  333,
      335,  283,  335,  335,  283,  645,  335,  530,  335,  335,
      335,  643,  642,  335,  344,  344,  344,  344,  641,  344,
      639,  636,  633,  632,  512,  631,  344,  630,  507,  344,
      629,  628,  344,  627,  344,  344,  344,  626,  344,  344,
      347,  347,  347,  347,  625,  624,  621,  620,  619,  618,
      617,  614,  347,  480,  347,  347,  613,  612,  347,  611,
      347,  347,  347,  610,  609,  347,  353,  353,  353,  353,
      463,  353,  463,  608,  607,  605,  457,  452,  604,  603,

      602,  438,  601,  438,  353,  600,  353,  353,  353,  432,
      598,  353,  354,  354,  432,  354,  354,  354,  354,  354,
      354,  354,  354,  354,  354,  354,  354,  354,  354,  354,
      354,  354,  354,  354,  354,  354,  354,  354,  354,  356,
      596,  356,  356,  356,  356,  356,  418,  595,  356,  356,
      356,  356,  356,  592,  401,  356,  362,  362,  587,  362,
      362,  362,  362,  362,  362,  362,  362,  362,  362,  362,
      362,  362,  362,  362,  362,  362,  362,  362,  362,  362,
      362,  362,  362,  364,  396,  364,  364,  364,  364,  364,
      364,  586,  364,  364,  364,  364,  364,  391,  585,  364,

      376,  376,  376,  376,  373,  376,  363,  367,  363,  355,
      574,  341,  376,  573,  334,  376,  572,  332,  376,  324,
      376,  376,  376,  560,  376,  376,  381,  381,  381,  381,
      554,  553,  381,  551,  548,  547,  538,  283,  381,  283,
      381,  381,  530,  279,  381,  528,  381,  381,  381,  525,
      523,  381,  384,  384,  384,  384,  522,  384,  520,  518,
      517,  515,  510,  480,  468,  467,  466,  464,  463,  459,
      384,  452,  384,  384,  384,  448,  438,  384,  385,  432,
      385,  385,  385,  418,  401,  385,  386,  396,  391,  373,
      386,  363,  386,  386,  386,  355,  355,  386,  390,  390,

      341,  390,  390,  390,  390,  390,  390,  390,  390,  390,
      390,  390,  390,  390,  390,  390,  390,  390,  390,  390,
      390,  390,  390,  390,  390,  395,  395,  332,  395,  395,
      395,  395,  395,  395,  395,  395,  395,  395,  395,  395,
      395,  395,  395,  395,  395,  395,  395,  395,  395,  395,
      395,  395,  400,  400,  324,  400,  400,  400,  400,  400,
      400,  400,  400,  400,  400,  400,  400,  400,  400,  400,
      400,  400,  400,  400,  400,  400,  400,  400,  400,  402,
      283,  402,  402,  402,  402,  402,  280,  279,  402,  402,
      402,  402,  402, 1024,  101,  402,  408,  101,  408,  408,

      408, 1024, 1024,  408,  413,  413,  413,  413, 1024,  413,
     1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024,  413,  413,
     1024, 1024,  413, 1024,  413,  413,  413, 1024, 1024,  413,
      421,  421,  421,  421, 1024,  421, 1024, 1024, 1024, 1024,
     1024, 1024,  421, 1024, 1024,  421, 1024, 1024,  421, 1024,
      421,  421,  421, 1024,  421,  421,  424,  424,  424,  424,
     1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024,  424, 1024,
      424,  424, 1024, 1024,  424, 1024,  424,  424,  424, 1024,
     1024,  424,  430,  430,  430,  430, 1024,  430, 1024, 1024,
     1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024,

      430, 1024,  430,  430,  430, 1024, 1024,  430,  431, 1024,
      431,  431,  431, 1024, 1024,  431,  433, 1024,  433, 1024,
     1024, 1024,  433, 1024,  433,  433,  433, 1024, 1024,  433,
      437, 1024,  437,  437,  437, 1024, 1024,  437,  439, 1024,
      439, 1024, 1024, 1024,  439, 1024,  439,  439,  439, 1024,
     1024,  439,  443,  443, 1024,  443,  443,  443,  443,  443,
      443, 1024,  443,  443,  443,  443,  443,  443,  443,  443,
      443,  443, 1024,  443,  443,  443,  443,  443,  443,  447,
     1024, 1024,  447, 1024, 1024, 1024,  447, 1024,  447,  447,
      447, 1024, 1024,  447,  449,  449,  449,  449,  449,  449,

      449,  449,  449,  449,  449,  449,  449,  449,  449,  449,
      449,  449, 1024,  449,  449,  449,  449,  449,  449,  449,
      449,  451,  451, 1024,  451,  451,  451,  451,  451,  451,
      451,  451,  451,  451,  451,  451,  451,  451,  451, 1024,
      451,  451,  451,  451,  451,  451,  451,  451,  458, 1024,
     1024,  458, 1024, 1024, 1024,  458, 1024,  458,  458,  458,
     1024, 1024,  458,  462,  462, 1024,  462,  462,  462,  462,
      462,  462,  462,  462,  462,  462,  462,  462,  462,  462,
      462,  462,  462,  462,  462,  462,  462,  462,  462,  462,
      465,  465, 1024,  465, 1024,  465,  465,  465,  465, 1024,

      465,  465,  465,  465, 1024,  465,  465,  465, 1024,  465,
     1024,  465,  465,  465,  465,  465,  465,  473, 1024, 1024,
      473, 1024, 1024, 1024,  473, 1024,  473,  473,  473, 1024,
     1024,  473,  481,  481, 1024,  481, 1024,  481,  481,  481,
      481,  481,  481,  481,  481,  481,  481,  481,  481,  481,
     1024,  481, 1024,  481,  481,  481,  481,  481,  481,  485,
      485, 1024,  485, 1024,  485,  485,  485,  485,  485,  485,
      485,  485,  485,  485,  485,  485,  485, 1024,  485, 1024,
      485,  485,  485,  485,  485,  485,  494, 1024,  494,  494,
      494, 1024, 1024,  494,  495, 1024, 1024, 1024,  495, 1024,

      495,  495,  495, 1024, 1024,  495,  499,  499, 1024,  499,
      499,  499,  499, 1024, 1024,  499,  499,  499,  499,  499,
      499,  499,  499,  499, 1024,  499, 1024,  499,  499,  499,
      499,  499,  499,  506, 1024,  506,  506,  506, 1024, 1024,
      506,  508, 1024,  508,  508, 1024, 1024,  508, 1024,  508,
      508,  508, 1024, 1024,  508,  511, 1024,  511,  511,  511,
     1024, 1024,  511,  513, 1024,  513,  513, 1024, 1024,  513,
     1024,  513,  513,  513, 1024, 1024,  513,  516,  516, 1024,
      516,  516,  516,  516,  516,  516,  516,  516,  516,  516,
      516,  516,  516,  516,  516, 1024,  516, 1024,  516,  516,

      516,  516,  516,  516,  519, 1024, 1024,  519, 1024, 1024,
     1024,  519, 1024,  519,  519,  519, 1024, 1024,  519,  521,
      521, 1024,  521,  521,  521,  521,  521,  521,  521,  521,
      521, 1024,  521,  521,  521,  521,  521,  521,  521, 1024,
      521,  521,  521,  521,  521,  521,  524,  524, 1024,  524,
      524,  524,  524,  524,  524, 1024,  524,  524,  524,  524,
      524,  524,  524,  524, 1024,  524, 1024,  524,  524,  524,
      524,  524,  524,  301,  301, 1024, 1024, 1024, 1024, 1024,
     1024, 1024, 1024, 1024, 1024,  301,  301,  301,  301,  301,
      301,  301,  301,  301,  278,  278, 1024,  278,  278,  278,

      278,  278,  278,  278,  278,  278,  278,  278,  278,  278,
      278,  278,  278,  278,  278,  278,  278,  278,  278,  278,
      278,  281, 1024,  281,  281,  281, 1024, 1024,  281,  529,
      529, 1024, 1024,  529, 1024,  529,  529,  529, 1024, 1024,
      529,  282, 1024,  282,  282, 1024,  282, 1024, 1024,  282,
      282, 1024,  282,  282,  282,  531, 1024, 1024,  531, 1024,
     1024, 1024,  531, 1024,  531,  531,  531,  535, 1024, 1024,
      535, 1024,  535,  535,  535,  535,  535,  535,  535,  535,
      535,  535,  535,  535,  535,  535,  535,  535,  535,  535,
      535,  535,  535,  535,  549, 1024,  549,  549,  549, 1024,

      549,  311, 1024,  311,  311, 1024,  311, 1024, 1024,  311,
      311, 1024,  311,  311,  311,  312, 1024, 1024,  312, 1024,
     1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024,
     1024, 1024, 1024,  312,  312,  312,  312,  312,  323,  323,
     1024,  323,  323,  323,  323,  323,  323,  323,  323,  323,
      323,  323,  323,  323,  323,  323,  323,  323,  323,  323,
      323,  323,  323,  323,  323,  325, 1024,  325,  325,  325,
      325,  325, 1024, 1024,  325,  325,  325,  325,  325, 1024,
     1024,  325,  569, 1024,  569, 1024,  569,  569,  569, 1024,
     1024,  569,  569,  569,  569,  569, 1024, 1024,  569,  331,

      331,  331,  331,  331,  331,  331,  331,  331,  331,  331,
      331,  331,  331,  331,  331,  331,  331,  331,  331,  331,
      331,  331,  331,  331,  331,  331,  335, 1024,  335,  335,
     1024, 1024,  335, 1024,  335,  335,  335, 1024, 1024,  335,
      333, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024,
     1024, 1024, 1024,  333, 1024,  333,  333,  333, 1024, 1024,
      333,  344,  344,  344,  344, 1024,  344, 1024, 1024, 1024,
     1024, 1024, 1024,  344, 1024, 1024,  344, 1024, 1024,  344,
     1024,  344,  344,  344, 1024,  344,  344,  347,  347,  347,
      347, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024,  347,

     1024,  347,  347, 1024, 1024,  347, 1024,  347,  347,  347,
     1024, 1024,  347,  353,  353,  353,  353, 1024,  353, 1024,
     1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024,
     1024,  353, 1024,  353,  353,  353, 1024, 1024,  353,  575,
     1024, 1024, 1024,  575, 1024,  575,  575,  575, 1024, 1024,
      575,  354,  354, 1024,  354,  354,  354,  354,  354,  354,
      354,  354,  354,  354,  354,  354,  354,  354,  354,  354,
      354,  354,  354,  354,  354,  354,  354,  354,  356, 1024,
      356,  356,  356,  356,  356, 1024, 1024,  356,  356,  356,
      356,  356, 1024, 1024,  356,  576, 1024,  576, 1024,  576,

      576,  576, 1024, 1024,  576,  576,  576,  576,  576, 1024,
     1024,  576,  362,  362, 1024,  362,  362,  362,  362,  362,
      362,  362,  362,  362,  362,  362,  362,  362,  362,  362,
      362,  362,  362,  362,  362,  362,  362,  362,  362,  364,
     1024,  364,  364,  364,  364,  364,  364, 1024,  364,  364,
      364,  364,  364, 1024, 1024,  364,  579, 1024,  579, 1024,
      579,  579,  579, 1024, 1024,  579,  579,  579,  579,  579,
     1024, 1024,  579,  376,  376,  376,  376, 1024,  376, 1024,
     1024, 1024, 1024, 1024, 1024,  376, 1024, 1024,  376, 1024,
     1024,  376, 1024,  376,  376,  376, 1024,  376,  376,  381,

      381,  381,  381, 1024, 1024,  381, 1024, 1024, 1024, 1024,
     1024,  381, 1024,  381,  381, 1024, 1024,  381, 1024,  381,
      381,  381, 1024, 1024,  381,  384,  384,  384,  384, 1024,
      384, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024,
     1024, 1024, 1024,  384, 1024,  384,  384,  384, 1024, 1024,
      384,  582,  582,  582,  582,  582,  582,  582,  582, 1024,
      582,  582,  582,  582,  582,  582,  582,  582,  582,  582,
      582,  582,  582,  582,  582,  582,  582,  582,  584, 1024,
     1024,  584, 1024, 1024,  584, 1024, 1024, 1024, 1024, 1024,
     1024, 1024,  584, 1024, 1024, 1024,  584, 1024,  584,  584,

      584, 1024, 1024,  584,  386, 1024, 1024, 1024,  386, 1024,
      386,  386,  386, 1024, 1024,  386,  390,  390, 1024,  390,
      390,  390,  390,  390,  390,  390,  390,  390,  390,  390,
      390,  390,  390,  390,  390,  390,  390,  390,  390,  390,
      390,  390,  390,  395,  395, 1024,  395,  395,  395,  395,
      395,  395,  395,  395,  395,  395,  395,  395,  395,  395,
      395,  395,  395,  395,  395,  395,  395,  395,  395,  395,
      400,  400, 1024,  400,  400,  400,  400,  400,  400,  400,
      400,  400,  400,  400,  400,  400,  400,  400,  400,  400,
      400,  400,  400,  400,  400,  400,  400,  402, 1024,  402,

      402,  402,  402,  402, 1024, 1024,  402,  402,  402,  402,
      402, 1024, 1024,  402,  588, 1024,  588, 1024,  588,  588,
      588, 1024, 1024,  588,  588,  588,  588,  588, 1024, 1024,
      588,  413,  413,  413,  413, 1024,  413, 1024, 1024, 1024,
     1024, 1024, 1024, 1024, 1024,  413,  413, 1024, 1024,  413,
     1024,  413,  413,  413, 1024, 1024,  413,  591, 1024,  591,
      591,  591, 1024, 1024,  591,  594,  594,  594,  594, 1024,
      594, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024,  594,
      594, 1024, 1024,  594, 1024,  594,  594,  594, 1024, 1024,
      594,  421,  421,  421,  421, 1024,  421, 1024, 1024, 1024,

     1024, 1024, 1024,  421, 1024, 1024,  421, 1024, 1024,  421,
     1024,  421,  421,  421, 1024,  421,  421,  424,  424,  424,
      424, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024,  424,
     1024,  424,  424, 1024, 1024,  424, 1024,  424,  424,  424,
     1024, 1024,  424,  430,  430,  430,  430, 1024,  430, 1024,
     1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024,
     1024,  430, 1024,  430,  430,  430, 1024, 1024,  430,  597,
     1024, 1024, 1024,  597, 1024,  597,  597,  597, 1024, 1024,
      597,  433, 1024,  433, 1024, 1024, 1024,  433, 1024,  433,
      433,  433, 1024, 1024,  433,  599, 1024, 1024, 1024, 1024,

     1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024,  599, 1024,
      599,  599,  599, 1024, 1024,  599,  439, 1024,  439, 1024,
     1024, 1024,  439, 1024,  439,  439,  439, 1024, 1024,  439,
      443,  443, 1024,  443,  443,  443,  443,  443,  443, 1024,
      443,  443,  443,  443,  443,  443,  443,  443,  443,  443,
     1024,  443,  443,  443,  443,  443,  443,  447, 1024, 1024,
      447, 1024, 1024, 1024,  447, 1024,  447,  447,  447, 1024,
     1024,  447,  449,  449,  449,  449,  449,  449,  449,  449,
      449,  449,  449,  449,  449,  449,  449,  449,  449,  449,
     1024,  449,  449,  449,  449,  449,  449,  449,  449,  451,

      451, 1024,  451,  451,  451,  451,  451,  451,  451,  451,
      451,  451,  451,  451,  451,  451,  451, 1024,  451,  451,
      451,  451,  451,  451,  451,  451,  606, 1024, 1024, 1024,
     1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024,  606,
     1024,  606,  606,  606, 1024, 1024,  606,  458, 1024, 1024,
      458, 1024, 1024, 1024,  458, 1024,  458,  458,  458, 1024,
     1024,  458,  462,  462, 1024,  462,  462,  462,  462,  462,
      462,  462,  462,  462,  462,  462,  462,  462,  462,  462,
      462,  462,  462,  462,  462,  462,  462,  462,  462,  465,
      465, 1024,  465, 1024,  465,  465,  465,  465, 1024,  465,

      465,  465,  465, 1024,  465,  465,  465, 1024,  465, 1024,
      465,  465,  465,  465,  465,  465,  473, 1024, 1024,  473,
     1024, 1024, 1024,  473, 1024,  473,  473,  473, 1024, 1024,
      473,  481,  481, 1024,  481, 1024,  481,  481,  481,  481,
      481,  481,  481,  481,  481,  481,  481,  481,  481, 1024,
      481, 1024,  481,  481,  481,  481,  481,  481,  485,  485,
     1024,  485, 1024,  485,  485,  485,  485,  485,  485,  485,
      485,  485,  485,  485,  485,  485, 1024,  485, 1024,  485,
      485,  485,  485,  485,  485,  495, 1024, 1024, 1024,  495,
     1024,  495,  495,  495, 1024, 1024,  495,  499,  499, 1024,

      499,  499,  499,  499, 1024, 1024,  499,  499,  499,  499,
      499,  499,  499,  499,  499, 1024,  499, 1024,  499,  499,
      499,  499,  499,  499,  508, 1024,  508,  508, 1024, 1024,
      508, 1024,  508,  508,  508, 1024, 1024,  508,  506, 1024,
     1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024,
     1024,  506, 1024,  506,  506,  506, 1024, 1024,  506,  513,
     1024,  513,  513, 1024, 1024,  513, 1024,  513,  513,  513,
     1024, 1024,  513,  511, 1024, 1024, 1024, 1024, 1024, 1024,
     1024, 1024, 1024, 1024, 1024, 1024,  511, 1024,  511,  511,
      511, 1024, 1024,  511,  516,  516, 1024,  516,  516,  516,

      516,  516,  516,  516,  516,  516,  516,  516,  516,  516,
      516,  516, 1024,  516, 1024,  516,  516,  516,  516,  516,
      516,  519, 1024, 1024,  519, 1024, 1024, 1024,  519, 1024,
      519,  519,  519, 1024, 1024,  519,  521,  521, 1024,  521,
      521,  521,  521,  521,  521,  521,  521,  521, 1024,  521,
      521,  521,  521,  521,  521,  521, 1024,  521,  521,  521,
      521,  521,  521,  524,  524, 1024,  524,  524,  524,  524,
      524,  524, 1024,  524,  524,  524,  524,  524,  524,  524,
      524, 1024,  524, 1024,  524,  524,  524,  524,  524,  524,
      529,  529, 1024, 1024,  529, 1024,  529,  529,  529, 1024,

     1024,  529,  644,  644, 1024,  644,  644,  644, 1024,  644,
      644,  644,  644,  644,  644,  644,  644,  644,  644,  644,
      644,  644,  644,  644,  644,  644,  644,  644,  644,  531,
      531, 1024,  531, 1024, 1024, 1024,  531, 1024,  531,  531,
      531,  282, 1024,  282,  282, 1024,  282, 1024, 1024,  282,
      282, 1024,  282,  282,  282,  535, 1024, 1024,  535, 1024,
      535,  535,  535,  535,  535,  535,  535,  535,  535,  535,
      535,  535,  535,  535,  535,  535,  535,  535,  535,  535,
      535,  535,  651,  651, 1024,  651,  651,  651,  651,  651,
      651,  651,  651,  651,  651,  651,  651,  651,  651,  651,

      651,  651,  651,  651,  651,  651,  651,  651,  651,  549,
     1024, 1024,  549, 1024, 1024, 1024, 1024, 1024, 1024, 1024,
     1024, 1024, 1024, 1024, 1024, 1024, 1024,  549, 1024,  549,
      549,  549,  301, 1024, 1024,  301, 1024, 1024, 1024, 1024,
     1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024,
      301, 1024,  301,  301,  301,  661,  661, 1024,  661,  661,
      661,  661,  661,  661,  661,  661,  661,  661,  661,  661,
      661,  661,  661,  661,  661,  661,  661,  661,  661, 1024,
      661,  661,  312, 1024, 1024,  312, 1024, 1024, 1024, 1024,
     1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024,

      312,  312,  312,  312,  312,  569, 1024,  569,  569,  569,
      569,  569, 1024, 1024,  569,  569,  569,  569,  569, 1024,
     1024,  569,  325, 1024,  325,  325,  325,  325,  325, 1024,
     1024,  325,  325,  325,  325,  325, 1024, 1024,  325,  333,
     1024,  333,  333,  333, 1024, 1024,  333,  575, 1024, 1024,
     1024,  575, 1024,  575,  575,  575, 1024, 1024,  575,  576,
     1024,  576,  576,  576,  576,  576, 1024, 1024,  576,  576,
      576,  576,  576, 1024, 1024,  576,  356, 1024,  356,  356,
      356,  356,  356, 1024, 1024,  356,  356,  356,  356,  356,
     1024, 1024,  356,  579, 1024,  579,  579,  579,  579,  579,

      579, 1024,  579,  579,  579,  579,  579, 1024, 1024,  579,
      364, 1024,  364,  364,  364,  364,  364,  364, 1024,  364,
      364,  364,  364,  364, 1024, 1024,  364,  582,  582,  582,
      582,  582,  582,  582,  582,  582,  582,  582,  582,  582,
      582,  582,  582,  582,  582,  582,  582,  582,  582,  582,
      582,  582,  582,  582,  584, 1024, 1024,  584, 1024, 1024,
      584, 1024, 1024, 1024, 1024, 1024, 1024, 1024,  584, 1024,
     1024, 1024,  584, 1024,  584,  584,  584, 1024, 1024,  584,
      588, 1024,  588,  588,  588,  588,  588, 1024, 1024,  588,
      588,  588,  588,  588, 1024, 1024,  588,  402, 1024,  402,

      402,  402,  402,  402, 1024, 1024,  402,  402,  402,  402,
      402, 1024, 1024,  402,  684,  684,  684,  684, 1024,  684,
     1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024,  684,  684,
     1024, 1024,  684, 1024,  684,  684,  684, 1024, 1024,  684,
      591,  591,  591,  591, 1024,  591, 1024, 1024, 1024, 1024,
     1024, 1024, 1024, 1024, 1024,  591, 1024, 1024,  591, 1024,
      591,  591,  591, 1024, 1024,  591,  594,  594,  594,  594,
     1024,  594, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024,
      594,  594, 1024, 1024,  594, 1024,  594,  594,  594, 1024,
     1024,  594,  597, 1024, 1024, 1024,  597, 1024,  597,  597,

      597, 1024, 1024,  597,  599, 1024,  599,  599,  599, 1024,
     1024,  599,  688, 1024,  688, 1024, 1024, 1024,  688, 1024,
      688,  688,  688, 1024, 1024,  688,  606, 1024,  606,  606,
      606, 1024, 1024,  606,  694, 1024, 1024, 1024,  694, 1024,
      694,  694,  694, 1024, 1024,  694,  705,  705,  705,  705,
      705,  705,  705,  705,  705,  705,  705,  705,  705,  705,
      705, 1024,  705,  705,  705, 1024,  705, 1024, 1024,  705,
      705,  705,  705,  506, 1024,  506,  506,  506, 1024, 1024,
      506,  511, 1024,  511,  511,  511, 1024, 1024,  511,  644,
      644, 1024,  644,  644,  644,  644,  644,  644,  644,  644,

      644,  644,  644,  644,  644,  644,  644,  644,  644,  644,
      644,  644,  644,  644,  644,  644,  727, 1024, 1024,  727,
     1024, 1024, 1024,  727, 1024,  727,  727,  727,  286, 1024,
      286,  286, 1024,  286, 1024, 1024,  286,  286, 1024,  286,
      286,  286,  651,  651, 1024,  651,  651,  651,  651,  651,
      651,  651,  651,  651,  651,  651,  651,  651,  651,  651,
      651,  651,  651,  651,  651,  651,  651,  651,  651,  301,
     1024, 1024,  301, 1024, 1024, 1024, 1024, 1024, 1024, 1024,
     1024, 1024, 1024, 1024, 1024, 1024, 1024,  301, 1024,  301,
      301,  301,  661,  661, 1024,  661,  661,  661,  661,  661,

      661,  661,  661,  661,  661,  661,  661,  661,  661,  661,
      661,  661,  661,  661,  661,  661,  661,  661,  661,  665,
      665,  665,  665,  665,  312, 1024, 1024,  312, 1024, 1024,
     1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024,
     1024, 1024,  312,  312,  312,  312,  312,  325, 1024,  325,
      325,  325,  325,  325, 1024, 1024,  325,  325,  325,  325,
      325, 1024, 1024,  325,  356, 1024,  356,  356,  356,  356,
      356, 1024, 1024,  356,  356,  356,  356,  356, 1024, 1024,
      356,  364, 1024,  364,  364,  364,  364,  364,  364, 1024,
      364,  364,  364,  364,  364, 1024, 1024,  364,  753, 1024,

      753,  753,  753, 1024, 1024,  753,  796,  796, 1024,  796,
     1024, 1024, 1024,  796, 1024,  796,  796,  796,  735,  735,
      735,  735,  735,  735,  735,  735,  735,  735,  735,  735,
      735,  735,  735,  735,  735,  735,  735, 1024,  735, 1024,
     1024, 1024,  735,  735,  735,  817,  817,  817,  817, 1024,
      817, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024,  817,
      817, 1024, 1024,  817, 1024,  817,  817,  817, 1024, 1024,
      817,  841,  841,  841,  841,  841,  841,  841,  841,  841,
      841,  841,  841,  841,  841,  841, 1024,  841,  841,  841,
     1024,  841, 1024,  841, 1024,  841,  841,  841,  903,  903,

      903,  903,  903,  903,  903,  903,  903,  903,  903,  903,
      903,  903,  903, 1024,  903,  903,  903, 1024,  903, 1024,
     1024, 1024,  903,  903,  903,  904,  904,  904,  904,  904,
      904,  904,  904,  904,  904,  904,  904,  904,  904,  904,
     1024,  904,  904,  904, 1024,  904, 1024, 1024, 1024,  904,
      904,  904,  949,  949,  949,  949,  949,  949,  949,  949,
      949,  949,  949,  949,  949,  949,  949, 1024,  949,  949,
      949, 1024,  949, 1024, 1024, 1024,  949,  949,  949,  959,
      959,  959,  959,  959,  959,  959,  959,  959,  959,  959,
      959,  959,  959,  959, 1024,  959,  959,  959, 1024,  959,

     1024, 1024, 1024,  959,  959,  959,   79, 1024, 1024, 1024,
     1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024,
     1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024,
     1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024,
     1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024,
     1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024,
     1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024,
     1024, 1024, 1024, 1024, 1024
    } ;

static yyconst flex_int16_t yy_chk[7476] =
    {   0,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    4,   21,
       22,    4,   23,   21,   22,   24,   23,   47,   48,   24,
      542,   57,    4,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,   58,    5,   63,    5,    5,

      542,   35,    5,    5,    5,    5,   21,   22,   36,   23,
       35,  482,   24,  482,   47,   48,  105,   36,   57,  271,
      105,    5,    5,    5,   43,   43,  981,   43,  981,   43,
       44,   44,   58,   44,   63,   44,   51,   51,   35,   51,
       52,   52,   64,   52,  271,   36, 1018,    5,    5,    5,
        6,    6,    6,    6,    6,    6,    6,    6,    6,    6,
        6,    6,   43,    6,   39,    6,    6,   40,   44,    6,
        6,    6,    6,   39,   51,   53,   40,   53,   52,   64,
      287,   97,   97,  287,   39,   97, 1016,   40,    6,    6,
        6,  115,  115,  115,  115,   53,  489,   90,  115,   90,

       90,   39,   90,   90,   40,   97,  196,   90,  206,  196,
      489,  196,   53,  206,    6,    6,    6,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,

       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   75,   13,  295,   13,   13,
       76,  187,   13,   13,   13,   13,   45,   75,   45,   54,
      187,   54,   76,  221,  248,   45,  295,  221,  248,  222,
       45,   13,   13,   13,  222,   46,   45,   46,  222,   54,

       83,   83,   75,   83,   46, 1014,  253,   76,  187,   46,
      253,  289,  289,   45,   69,   46,   54,   13,   13,   13,
       14,   14,   14,   14,   14,   14,   14,   14,   14,   14,
       14,   14,   46,   14,   69,   14,   14,   70,   83,   14,
       14,   14,   14,   55,   56,   55,   56,  549,   98,   98,
      549,   69,   98,  108,  108,  108,  108,   70,   14,   14,
       14, 1012,   61,   55,   56,  106,  106,  108,  106,   61,
       61,  108,   98,  333,   70,  114,  114,  333,  114,  335,
       55,   56,   61,  335,   14,   14,   14,   15,   15,   15,
       15,   15,   15,   15,   15,   15,   15,   15,   15,   61,

       15,   71,   15,   15,   62,  106,   15,   15,   15,   15,
       72,   62,   62,   77,  306,  114,  119,  119,  290, 1009,
      119,   71,   77,  306,   62,   15,   15,   15,   82,  300,
       72,   82,  226,   77,  215,  215,  226,  215,   71,  290,
      119,   62,  226, 1008,  226, 1007,  518,   72,  300,   82,
       77,   15,   15,   15,   16,   16,   16,   16,   16,   16,
       16,   16,   16,   16,   16,   16,   82,   16,   78,   16,
       16,  518,  215,   16,   16,   16,   16,   78,  291,   87,
       87,   87,   87,  109,  109,  109,  109,  522,   78,   87,
      292,  293,   16,   16,   16,  291,  545,  109, 1005,  320,

      320,  109,  320,  522, 1004,   78,   87,  137,  137,  137,
      137,  292,  293,  552,  137,  545,  552,  291,   16,   16,
       16,   17,   17,   17,   17,   17,   17,   17,   17,   17,
       17,   17,   17,   17,   17,   17,   17,   17,   17,   17,
       17,   17,   17,   17,   17,   17,   17,   17,   17,   17,
       17,   17,   17,   17,   17,   17,   17,   17,   17,   17,
       17,   17,   17,   17,   17,   17,   17,   17,   17,   17,
       17,   17,   17,   17,   17,   17,   17,   17,   17,   17,
       17,   17,   17,   17,   17,   17,   17,   17,   17,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,

       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   25,   25,   25,
       25,   25,   25,   25,   25,   25,   25,   25,   25,  995,
       25,   92,   25,   25,   92, 1002,   25,   25,   25,   25,
      142,  142,  995,  142, 1001,   92,  110,  110,  110,  110,
      120,  120,   92,  110,  120,   25,   25,   25,   99,   99,

      110,   99,  146,  146,  110,  146, 1006,  321,  321,   92,
      321,  305,   99,   99,  120,  506,   99, 1006, 1000,  506,
      142,   25,   25,   25,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   99,   26,   99,   26,
       26,  305,  146,   26,   26,   26,   26,   93,   93,  999,
       93,  110,  113,  113,  113,  113,  296,  546,   93,   93,
       93,   93,   26,   26,   26,  508,  113,  305,   93,  508,
      113,  170,  170,  170,  170,  998,  546,  296,  170,  328,
      328,  997,  328,  337,  337,   93,  337,  992,   26,   26,
       26,   27,   27,   27,   27,   27,   27,   27,   27,   27,

       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   29,
       29,   29,   29,   29,   29,   29,   29,   29,   29,   29,
       29,   29,   29,   29,   29,   29,   29,   29,   29,   29,
       29,   29,   29,   29,   29,   29,   29,   29,   29,   29,
       29,   29,   29,   29,   29,   29,   29,   29,   29,   29,

       29,   29,   29,   29,   29,   29,   29,   29,   29,   29,
       29,   29,   29,   29,   29,   29,   29,   29,   29,   29,
       29,   29,   29,   29,   29,   29,   29,   31,   31,   31,
       31,   31,   31,   31,   31,   31,   31,   31,   31,   31,
       31,   31,   31,   31,   31,   31,   31,   31,   31,   31,
       31,   31,   31,   31,   31,   31,   31,   31,   31,   31,
       31,   31,   31,   31,   31,   31,   31,   31,   31,   31,
       31,   31,   31,   31,   31,   31,   31,   31,   31,   31,
       31,   31,   31,   31,   31,   31,   31,   31,   31,   31,
       31,   31,   31,   31,   31,   33,   33,   33,   33,   33,

       33,   33,   33,   33,   33,   33,   33,   33,   33,   33,
       33,   33,   33,   33,   33,   33,   33,   33,   33,   33,
       33,   33,   33,   33,   33,   33,   33,   33,   33,   33,
       33,   33,   33,   33,   33,   33,   33,   33,   33,   33,
       33,   33,   33,   33,   33,   33,   33,   33,   33,   33,
       33,   33,   33,   33,   33,   33,   33,   33,   33,   33,
       33,   33,   33,   37,   37,   37,   37,   37,   37,   37,
       37,   37,   37,   37,   37,   37,   37,   37,   37,   37,
       37,   37,   37,   37,   37,   37,   37,   37,   37,   37,
       37,   37,   37,   37,   37,   37,   37,   37,   37,   37,

       37,   37,   37,   37,   37,   37,   37,   37,   37,   37,
       37,   37,   37,   37,   37,   37,   37,   37,   37,   37,
       37,   37,   37,   37,   37,   37,   37,   37,   37,   37,
       37,   41,   41,   41,   41,   41,   41,   41,   41,   41,
       41,   41,   41,   41,   41,   41,   41,   41,   41,   41,
       41,   41,   41,   41,   41,   41,   41,   41,   41,   41,
       41,   41,   41,   41,   41,   41,   41,   41,   41,   41,
       41,   41,   41,   41,   41,   41,   41,   41,   41,   41,
       41,   41,   41,   41,   41,   41,   41,   41,   41,   41,
       41,   41,   41,   41,   41,   41,   41,   41,   41,   49,

       49,   49,   49,   49,   49,   49,   49,   49,   49,   49,
       49,   49,   49,   49,   49,   49,   49,   49,   49,   49,
       49,   49,   49,   49,   49,   49,   49,   49,   49,   49,
       49,   49,   49,   49,   49,   49,   49,   49,   49,   49,
       49,   49,   49,   49,   49,   49,   49,   49,   49,   49,
       49,   49,   49,   49,   49,   49,   49,   49,   49,   49,
       49,   49,   49,   49,   49,   49,   49,   59,   59,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,

       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59,   59,   59,   65,   65,   65,   65,   65,
       65,   65,   65,   65,   65,   65,   65,   65,   65,   65,
       65,   65,   65,   65,   65,   65,   65,   65,   65,   65,
       65,   65,   65,   65,   65,   65,   65,   65,   65,   65,
       65,   65,   65,   65,   65,   65,   65,   65,   65,   65,
       65,   65,   65,   65,   65,   65,   65,   65,   65,   65,
       65,   65,   65,   65,   65,   65,   65,   65,   65,   65,

       65,   65,   65,   67,   67,   67,   67,   67,   67,   67,
       67,   67,   67,   67,   67,   67,   67,   67,   67,   67,
       67,   67,   67,   67,   67,   67,   67,   67,   67,   67,
       67,   67,   67,   67,   67,   67,   67,   67,   67,   67,
       67,   67,   67,   67,   67,   67,   67,   67,   67,   67,
       67,   67,   67,   67,   67,   67,   67,   67,   67,   67,
       67,   67,   67,   67,   67,   67,   67,   67,   67,   67,
       67,   73,   73,   73,   73,   73,   73,   73,   73,   73,
       73,   73,   73,   73,   73,   73,   73,   73,   73,   73,
       73,   73,   73,   73,   73,   73,   73,   73,   73,   73,

       73,   73,   73,   73,   73,   73,   73,   73,   73,   73,
       73,   73,   73,   73,   73,   73,   73,   73,   73,   73,
       73,   73,   73,   73,   73,   73,   73,   73,   73,   73,
       73,   73,   73,   73,   73,   73,   73,   73,   73,   88,
      111,  111,  111,  111,  511,  126,  126,  111,  511,  126,
       88,  126,  154,  154,  111,  991,  154,  513,  111,  312,
       88,  513,  312,   88,   88,  768,  653,   88,   88,  126,
       88,   88,  642, 1019,  127,  127,  154, 1019,  127,   88,
      127,  768,  732,   88,   88,  122,  122,  653,  122,   88,
       88,   88,   88,   88,   88,   89,   89,  312,  127,  122,

      122,  732,  642,  122,  128,  111, 1013,  227,   89,   89,
       89,  989,  227,  128,  128,  460,  227,  128,  460,  128,
      460, 1013,  227,  122,  227,  122,  326,   89,  642,  326,
      988,   89,  987,   89,  986,   89,  985,  128,  272,  150,
      150,  272,  150,  130,  130,  984,  130,   89,  357,  326,
       89,  357,   89,   89,   89,   91,   91,  130,  130,  272,
      983,  130,  976,  130,  131,  131,  131,  131,   91,   91,
       91,  357,  132,  132,  132,  132,  272,  559,  131,  150,
      559,  130,  131,  130,  155,  155,  132,   91,  155,   91,
      132,   91,  975,   91, 1017,   91,  964,  133,  133,  133,

      133, 1017,  348,  348,  133,  348,  313,   91,  155,  313,
       91,  133,   91,   91,   91,  133,  134,  134,  134,  134,
      963,  559,  961,  134,  136,  136,  136,  136,  359,  359,
      134,  359,  136,  955,  134, 1021,  156,  156,  136,  156,
      161,  161,  136,  161,  313,  163,  163,  163,  163,  365,
      156,  156,  365, 1021,  156,  169,  169,  313,  169,  163,
      954,  620,  133,  163,  620,  953,  160,  160,  160,  160,
      449,  952,  365,  160,  156,  314,  156,  951,  314,  449,
      161,  134,  160,  160,  160,  164,  164,  164,  164,  950,
      165,  165,  165,  165,  925,  169,  924,  165,  384,  164,

      923,  384,  315,  164,  165,  315,  384,  449,  165,  166,
      166,  166,  166,  314,  620,  922,  166,  168,  168,  168,
      168,  175,  175,  166,  175,  179,  179,  166,  179,  182,
      182,  168,  182,  921,  314,  168,  190,  190,  209,  209,
      315,  209,  213,  213,  920,  213,  919,  315,  918,  190,
      190,  190,  917,  230,  230,  165,  230,  369,  369,  583,
      369,  175,  583,  275,  275,  179,  275,  583,  190,  182,
      235,  235,  638,  235,  166,  638,  276,  276,  209,  276,
      241,  241,  213,  241,  244,  244,  403,  244,  916,  403,
      915,  273,  273,  230,  914,  190,  191,  191,  913,  191,

      912,  275,  191,  191,  273,  273,  273,  911,  294,  403,
      235,  294,  274,  274,  276,  191,  191,  191,  318,  541,
      241,  318,  541,  273,  244,  274,  274,  274,  294,  325,
      325,  273,  910,  325,  191,  311,  191,  311,  311,  541,
      311,  311,  294,  553,  274,  311,  553,  909,  273,  273,
      273,  908,  274,  325,  387,  387,  318,  387,  907,  316,
      317,  191,  316,  317,  294,  647,  316,  905,  647,  274,
      274,  274,  285,  558,  318,  285,  558,  285,  285,  285,
      285,  285,  285,  285,  285,  285,  285,  285,  285,  901,
      553,  285,  285,  285,  285,  784,  316,  316,  317,  392,

      392,  554,  392,  319,  554,  317,  319,  900,  899,  784,
      285,  285,  285,  898,  317,  397,  397,  319,  397,  897,
      405,  405,  316,  405,  319,  327,  327,  330,  330,  327,
      558,  330,  409,  409,  409,  409,  285,  285,  285,  285,
      301,  319,  896,  301,  356,  356,  301,  301,  356,  327,
      409,  330,  340,  340,  340,  340,  554,  895,  894,  301,
      301,  301,  414,  414,  330,  414,  340,  893,  356,  892,
      340,  890,  341,  341,  341,  341,  889,  888,  301,  341,
      343,  343,  343,  343,  887,  886,  341,  343,  358,  358,
      341,  885,  358,  656,  343,  884,  656,  883,  343,  344,

      344,  344,  344,  301,  301,  301,  882,  345,  345,  345,
      345,  881,  358,  344,  345,  879,  878,  344,  346,  346,
      346,  346,  877,  874,  873,  346,  347,  347,  347,  347,
      425,  425,  346,  425,  361,  361,  346,  341,  361,  543,
      347,  866,  543,  865,  347,  343,  351,  351,  351,  351,
      864,  863,  862,  351,  352,  352,  352,  352,  361,  543,
      861,  352,  364,  364,  434,  434,  364,  434,  364,  366,
      366,  361,  860,  366,  859,  366,  371,  371,  440,  440,
      371,  440,  371,  346,  858,  857,  364,  372,  372,  372,
      372,  444,  444,  366,  444,  856,  373,  373,  373,  373,

      371,  372,  855,  373,  722,  372,  854,  722,  402,  402,
      373,  853,  402,  371,  373,  375,  375,  375,  375,  852,
      851,  850,  375,  376,  376,  376,  376,  455,  455,  375,
      455,  376,  402,  375,  404,  404,  652,  376,  404,  652,
      849,  376,  377,  377,  377,  377,  848,  845,  842,  377,
      378,  378,  378,  378,  840,  839,  652,  378,  404,  470,
      470,  373,  470,  646,  378,  646,  646,  838,  378,  379,
      379,  379,  379,  646,  407,  407,  560,  379,  407,  560,
      375,  474,  474,  379,  474,  837,  836,  379,  381,  381,
      381,  381,  382,  382,  382,  382,  381,  835,  407,  382,

      491,  491,  381,  491,  834,  833,  381,  383,  383,  383,
      383,  407,  832,  831,  383,  378,  408,  408,  408,  408,
      830,  560,  829,  408,  411,  411,  411,  411,  828,  827,
      826,  411,  408,  408,  408,  825,  413,  413,  413,  413,
      411,  411,  411,  413,  417,  417,  417,  417,  422,  422,
      422,  422,  413,  413,  413,  422,  477,  477,  417,  477,
      824,  823,  417,  418,  418,  418,  418,  822,  820,  819,
      418,  420,  420,  420,  420,  818,  814,  418,  420,  496,
      496,  418,  496,  500,  500,  420,  500,  813,  812,  420,
      421,  421,  421,  421,  477,  423,  423,  423,  423,  809,

      503,  503,  423,  503,  421,  808,  800,  799,  421,  423,
      569,  569,  798,  423,  569,  424,  424,  424,  424,  428,
      428,  428,  428,  797,  796,  795,  428,  566,  418,  424,
      566,  794,  664,  424,  569,  664,  420,  429,  429,  429,
      429,  793,  550,  736,  429,  550,  736,  563,  564,  550,
      563,  564,  565,  567,  584,  565,  567,  584,  792,  791,
      423,  534,  584,  790,  534,  566,  534,  534,  534,  534,
      534,  534,  534,  534,  534,  534,  534,  534,  664,  550,
      534,  534,  534,  534,  566,  563,  564,  789,  570,  570,
      565,  567,  570,  788,  787,  564,  563,  567,  786,  534,

      534,  534,  785,  568,  783,  550,  568,  565,  663,  571,
      571,  663,  570,  571,  576,  576,  577,  577,  576,  660,
      577,  662,  660,  782,  662,  534,  534,  534,  534,  801,
      578,  578,  801,  571,  578,  588,  588,  781,  576,  588,
      577,  568,  780,  779,  571,  579,  579,  739,  568,  579,
      739,  579,  580,  580,  578,  778,  580,  777,  580,  588,
      581,  581,  663,  776,  581,  578,  581,  589,  589,  579,
      775,  589,  801,  590,  590,  660,  580,  590,  668,  662,
      666,  668,  774,  666,  581,  591,  591,  591,  591,  773,
      737,  589,  591,  737,  772,  581,  739,  590,  771,  770,

      769,  591,  591,  591,  592,  592,  592,  592,  590,  767,
      766,  592,  593,  593,  593,  593,  668,  847,  666,  593,
      847,  765,  592,  764,  594,  594,  594,  594,  593,  593,
      593,  594,  763,  666,  668,  737,  962,  762,  761,  962,
      594,  594,  594,  659,  659,  659,  659,  659,  659,  659,
      659,  659,  659,  659,  659,  659,  659,  659,  659,  659,
      659,  659,  659,  659,  659,  659,  659,  659,  659,  659,
      659,  659,  659,  659,  659,  659,  659,  659,  659,  659,
      659,  659,  659,  659,  659,  659,  659,  659,  659,  659,
      659,  659,  659,  659,  659,  659,  659,  659,  659,  659,

      659,  659,  659,  659,  659,  659,  659,  659,  659,  659,
      659,  667,  667,  667,  667,  667,  667,  667,  667,  667,
      667,  667,  667,  667,  667,  667,  667,  667,  667,  667,
      667,  667,  667,  667,  669,  670,  671,  669,  670,  671,
      672,  672,  675,  675,  672,  927,  675,  760,  927,  667,
      667,  667,  685,  685,  685,  685,  676,  676, 1003,  685,
      676, 1003,  676,  759,  672,  758,  675,  681,  681,  757,
      685,  681,  669,  670,  671,  667,  667,  667,  667,  672,
      676,  675,  671,  683,  683,  683,  683,  756,  755,  670,
      683,  681,  669,  740,  754,  676,  740,  927,  751,  683,

      683,  683,  684,  684,  684,  684,  681, 1011, 1020,  684,
     1011, 1020,  728,  750,  728,  728,  698,  698,  684,  684,
      684,  698,  728,  867,  698,  698,  867,  742,  749,  698,
      742,  740,  743,  698,  698,  743,  746,  745,  740,  741,
      741,  741,  741,  741,  741,  741,  741,  741,  741,  741,
      741,  741,  741,  741,  741,  741,  741,  741,  741,  741,
      741,  741,  744,  744,  867,  742,  744,  747,  747,  738,
      743,  747,  742,  734,  733,  731,  730,  741,  741,  741,
      727,  743,  803,  748,  748,  803,  744,  748,  725,  748,
      724,  747,  723,  744,  721,  752,  752,  804,  747,  752,

      804,  720,  719,  741,  741,  741,  741,  748,  805,  806,
      926,  805,  806,  926,  748,  753,  753,  753,  753,  752,
      807,  807,  753,  718,  807, 1113,  752, 1113, 1113, 1113,
      717,  753,  753,  753,  716,  804,  715,  810,  810,  804,
      803,  810,  714,  713,  807,  712,  805,  806,  807,  811,
      811,  805,  711,  811,  710,  811,  815,  815,  708,  869,
      815,  810,  869,  868,  707,  810,  868,  806,  926,  816,
      816,  816,  816,  811,  706,  870,  816,  811,  870,  871,
      815,  704,  871,  703,  815,  816,  816,  816,  817,  817,
      817,  817,  702,  928,  928,  817,  928,  869,  872,  872,

      929,  701,  872,  929,  817,  817,  817,  700,  868,  979,
      875,  875,  979,  870,  875,  869,  870,  871,  930,  876,
      876,  930,  872,  876,  871,  876,  880,  880,  699,  982,
      880,  928,  982,  697,  875,  931,  931,  696,  929,  931,
      872,  934,  934,  876,  695,  934,  994,  935,  935,  994,
      880,  935,  875,  935,  979,  693,  930,  996,  929,  931,
      996,  876,  939,  939,  692,  934,  939,  982,  880,  691,
      930,  935,  980,  980,  982,  980, 1023, 1023, 1174, 1023,
     1211, 1174, 1174, 1211, 1211, 1182,  939, 1182, 1182, 1182,
      994,  690,  689,  688, 1185,  996, 1185, 1185, 1185,  687,

     1186,  996, 1186, 1186, 1186, 1216,  686, 1216, 1216, 1216,
      980,  680,  679,  678, 1023, 1025, 1025, 1025, 1025, 1025,
     1025, 1025, 1025, 1025, 1025, 1025, 1025, 1025, 1025, 1025,
     1025, 1025, 1025, 1025, 1025, 1025, 1025, 1025, 1025, 1025,
     1025, 1025, 1026, 1026, 1026, 1026, 1026, 1026, 1026, 1026,
     1026, 1026, 1026, 1026, 1026, 1026, 1026, 1026, 1026, 1026,
     1026, 1026, 1026, 1026, 1026, 1026, 1026, 1026, 1026, 1027,
     1027, 1027, 1027, 1027, 1027, 1027, 1027, 1027, 1027, 1027,
     1027, 1027, 1027, 1027, 1027, 1027, 1027, 1027, 1027, 1027,
     1027, 1027, 1027, 1027, 1027, 1027, 1028, 1028, 1028, 1028,

     1028, 1028, 1028, 1028, 1028, 1028, 1028, 1028, 1028, 1028,
     1028, 1028, 1028, 1028, 1028, 1028, 1028, 1028, 1028, 1028,
     1028, 1028, 1028, 1029, 1029, 1029, 1029, 1029, 1029, 1029,
     1029, 1029, 1029, 1029, 1029, 1029, 1029, 1029, 1029, 1029,
     1029, 1029, 1029, 1029, 1029, 1029, 1029, 1029, 1029, 1029,
     1030, 1030, 1030, 1030, 1030, 1030, 1030, 1030, 1030, 1030,
     1030, 1030, 1030, 1030, 1030, 1030, 1030, 1030, 1030, 1030,
     1030, 1030, 1030, 1030, 1030, 1030, 1030, 1031, 1031, 1031,
     1031, 1031, 1031, 1031, 1031, 1031, 1031, 1031, 1031, 1031,
     1031, 1031, 1031, 1031, 1031, 1031, 1031, 1031, 1031, 1031,

     1031, 1031, 1031, 1031, 1032, 1032, 1032, 1032, 1032, 1032,
     1032, 1032, 1032, 1032, 1032, 1032, 1032, 1032, 1032, 1032,
     1032, 1032, 1032, 1032, 1032, 1032, 1032, 1032, 1032, 1032,
     1032, 1033, 1033, 1033, 1033, 1033, 1033, 1033, 1033, 1033,
     1033, 1033, 1033, 1033, 1033, 1033, 1033, 1033, 1033, 1033,
     1033, 1033, 1033, 1033, 1033, 1033, 1033, 1033, 1034, 1034,
     1034, 1034, 1034, 1034, 1034, 1034, 1034, 1034, 1034, 1034,
     1034, 1034, 1034, 1034, 1034, 1034, 1034, 1034, 1034, 1034,
     1034, 1034, 1034, 1034, 1034, 1035, 1035, 1035, 1035, 1035,
     1035, 1035, 1035, 1035, 1035, 1035, 1035, 1035, 1035, 1035,

     1035, 1035, 1035, 1035, 1035, 1035, 1035, 1035, 1035, 1035,
     1035, 1035, 1036, 1036, 1036, 1036, 1036, 1036, 1036, 1036,
     1036, 1036, 1036, 1036, 1036, 1036, 1036, 1036, 1036, 1036,
     1036, 1036, 1036, 1036, 1036, 1036, 1036, 1036, 1036, 1037,
     1037, 1037, 1037, 1037, 1037, 1037, 1037, 1037, 1037, 1037,
     1037, 1037, 1037, 1037, 1037, 1037, 1037, 1037, 1037, 1037,
     1037, 1037, 1037, 1037, 1037, 1037, 1038, 1038, 1038, 1038,
     1038, 1038, 1038, 1038, 1038, 1038, 1038, 1038, 1038, 1038,
     1038, 1038, 1038, 1038, 1038, 1038, 1038, 1038, 1038, 1038,
     1038, 1038, 1038, 1039, 1039, 1039, 1039, 1039, 1039, 1039,

     1039, 1039, 1039, 1039, 1039, 1039, 1039, 1039, 1039, 1039,
     1039, 1039, 1039, 1039, 1039, 1039, 1039, 1039, 1039, 1039,
     1040, 1040, 1040, 1040, 1040, 1040, 1040, 1040, 1040, 1040,
     1040, 1040, 1040, 1040, 1040, 1040, 1040, 1040, 1040, 1040,
     1040, 1040, 1040, 1040, 1040, 1040, 1040, 1041, 1041, 1041,
     1041, 1041, 1041, 1041, 1041, 1041, 1041, 1041, 1041, 1041,
     1041, 1041, 1041, 1041, 1041, 1041, 1041, 1041, 1041, 1041,
     1041, 1041, 1041, 1041, 1042, 1042, 1042, 1042, 1042, 1042,
     1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042,
     1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042,

     1042, 1043, 1043, 1043, 1043, 1043, 1043, 1043, 1043, 1043,
     1043, 1043, 1043, 1043, 1043, 1043, 1043, 1043, 1043, 1043,
     1043, 1043, 1043, 1043, 1043, 1043, 1043, 1043, 1044, 1044,
     1044, 1044, 1044, 1044, 1044, 1044, 1044, 1044, 1044, 1044,
     1044, 1044, 1044, 1044, 1044, 1044, 1044, 1044, 1044, 1044,
     1044, 1044, 1044, 1044, 1044, 1045, 1045, 1045, 1045, 1045,
     1045, 1045, 1045, 1045, 1045, 1045, 1045, 1045, 1045, 1045,
     1045, 1045, 1045, 1045, 1045, 1045, 1045, 1045, 1045, 1045,
     1045, 1045, 1046, 1046, 1046, 1046, 1046, 1046, 1046, 1046,
     1046, 1046, 1046, 1046, 1046, 1046, 1046, 1046, 1046, 1046,

     1046, 1046, 1046, 1046, 1046, 1046, 1046, 1046, 1046, 1047,
     1047,  674, 1047, 1047, 1047, 1047, 1047, 1047, 1047, 1047,
     1047, 1047, 1047, 1047, 1047, 1047, 1047, 1047, 1047, 1047,
     1047, 1047, 1047, 1047, 1047, 1047, 1048,  673,  665,  661,
      655,  654,  651,  650,  649,  644,  643,  641,  639, 1048,
      637, 1048, 1048, 1048,  636,  632, 1048, 1049,  630, 1049,
     1049,  628, 1049,  627,  626, 1049, 1049,  625, 1049, 1049,
     1049, 1050, 1050, 1050, 1050,  624, 1050,  623,  622, 1050,
     1050, 1050, 1050, 1050, 1050, 1051, 1051,  621,  619,  618,
      617,  616,  615,  614,  613,  612,  611, 1051, 1051, 1051,

     1051, 1051, 1051, 1051, 1051, 1051, 1052,  610, 1052, 1052,
      609, 1052,  608,  607, 1052, 1052,  604, 1052, 1052, 1052,
     1053, 1053,  603,  602,  601,  600,  599,  596,  595,  587,
      586,  585, 1053, 1053, 1053, 1053, 1053, 1053, 1053, 1053,
     1053, 1054, 1054,  582, 1054, 1054, 1054, 1054, 1054, 1054,
     1054, 1054, 1054, 1054, 1054, 1054, 1054, 1054, 1054, 1054,
     1054, 1054, 1054, 1054, 1054, 1054, 1054, 1054, 1055,  574,
     1055, 1055, 1055, 1055, 1055,  573,  548, 1055, 1055, 1055,
     1055, 1055,  547,  540, 1055, 1056, 1056, 1056, 1056, 1056,
     1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056,

     1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056,
     1056, 1056, 1057,  539, 1057, 1057, 1057,  538,  536, 1057,
     1058,  535, 1058, 1058,  533,  531, 1058,  529, 1058, 1058,
     1058,  528,  527, 1058, 1059, 1059, 1059, 1059,  526, 1059,
      523,  520,  517,  515,  514,  512, 1059,  510,  509, 1059,
      507,  505, 1059,  502, 1059, 1059, 1059,  498, 1059, 1059,
     1060, 1060, 1060, 1060,  493,  490,  488,  487,  486,  484,
      483,  480, 1060,  479, 1060, 1060,  476,  472, 1060,  469,
     1060, 1060, 1060,  468,  464, 1060, 1061, 1061, 1061, 1061,
      462, 1061,  461,  459,  457,  454,  452,  451,  448,  446,

      442,  439,  438,  437, 1061,  436, 1061, 1061, 1061,  433,
      432, 1061, 1062, 1062,  431, 1062, 1062, 1062, 1062, 1062,
     1062, 1062, 1062, 1062, 1062, 1062, 1062, 1062, 1062, 1062,
     1062, 1062, 1062, 1062, 1062, 1062, 1062, 1062, 1062, 1063,
      427, 1063, 1063, 1063, 1063, 1063,  419,  416, 1063, 1063,
     1063, 1063, 1063,  412,  400, 1063, 1064, 1064,  399, 1064,
     1064, 1064, 1064, 1064, 1064, 1064, 1064, 1064, 1064, 1064,
     1064, 1064, 1064, 1064, 1064, 1064, 1064, 1064, 1064, 1064,
     1064, 1064, 1064, 1065,  395, 1065, 1065, 1065, 1065, 1065,
     1065,  394, 1065, 1065, 1065, 1065, 1065,  390,  389, 1065,

     1066, 1066, 1066, 1066,  374, 1066,  368,  363,  362,  354,
      350,  342, 1066,  339,  336, 1066,  334,  331, 1066,  323,
     1066, 1066, 1066,  307, 1066, 1066, 1067, 1067, 1067, 1067,
      304,  303, 1067,  302,  298,  297,  288,  286, 1067,  282,
     1067, 1067,  281,  278, 1067,  277, 1067, 1067, 1067,  270,
      266, 1067, 1068, 1068, 1068, 1068,  265, 1068,  262,  258,
      257,  254,  249,  217,  205,  204,  203,  199,  198,  194,
     1068,  189, 1068, 1068, 1068,  186,  178, 1068, 1069,  174,
     1069, 1069, 1069,  167,  153, 1069, 1070,  149,  145,  135,
     1070,  125, 1070, 1070, 1070,  121,  118, 1070, 1071, 1071,

      112, 1071, 1071, 1071, 1071, 1071, 1071, 1071, 1071, 1071,
     1071, 1071, 1071, 1071, 1071, 1071, 1071, 1071, 1071, 1071,
     1071, 1071, 1071, 1071, 1071, 1072, 1072,  100, 1072, 1072,
     1072, 1072, 1072, 1072, 1072, 1072, 1072, 1072, 1072, 1072,
     1072, 1072, 1072, 1072, 1072, 1072, 1072, 1072, 1072, 1072,
     1072, 1072, 1073, 1073,   96, 1073, 1073, 1073, 1073, 1073,
     1073, 1073, 1073, 1073, 1073, 1073, 1073, 1073, 1073, 1073,
     1073, 1073, 1073, 1073, 1073, 1073, 1073, 1073, 1073, 1074,
       86, 1074, 1074, 1074, 1074, 1074,   85,   84, 1074, 1074,
     1074, 1074, 1074,   79,    8, 1074, 1075,    7, 1075, 1075,

     1075,    0,    0, 1075, 1076, 1076, 1076, 1076,    0, 1076,
        0,    0,    0,    0,    0,    0,    0,    0, 1076, 1076,
        0,    0, 1076,    0, 1076, 1076, 1076,    0,    0, 1076,
     1077, 1077, 1077, 1077,    0, 1077,    0,    0,    0,    0,
        0,    0, 1077,    0,    0, 1077,    0,    0, 1077,    0,
     1077, 1077, 1077,    0, 1077, 1077, 1078, 1078, 1078, 1078,
        0,    0,    0,    0,    0,    0,    0,    0, 1078,    0,
     1078, 1078,    0,    0, 1078,    0, 1078, 1078, 1078,    0,
        0, 1078, 1079, 1079, 1079, 1079,    0, 1079,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

     1079,    0, 1079, 1079, 1079,    0,    0, 1079, 1080,    0,
     1080, 1080, 1080,    0,    0, 1080, 1081,    0, 1081,    0,
        0,    0, 1081,    0, 1081, 1081, 1081,    0,    0, 1081,
     1082,    0, 1082, 1082, 1082,    0,    0, 1082, 1083,    0,
     1083,    0,    0,    0, 1083,    0, 1083, 1083, 1083,    0,
        0, 1083, 1084, 1084,    0, 1084, 1084, 1084, 1084, 1084,
     1084,    0, 1084, 1084, 1084, 1084, 1084, 1084, 1084, 1084,
     1084, 1084,    0, 1084, 1084, 1084, 1084, 1084, 1084, 1085,
        0,    0, 1085,    0,    0,    0, 1085,    0, 1085, 1085,
     1085,    0,    0, 1085, 1086, 1086, 1086, 1086, 1086, 1086,

     1086, 1086, 1086, 1086, 1086, 1086, 1086, 1086, 1086, 1086,
     1086, 1086,    0, 1086, 1086, 1086, 1086, 1086, 1086, 1086,
     1086, 1087, 1087,    0, 1087, 1087, 1087, 1087, 1087, 1087,
     1087, 1087, 1087, 1087, 1087, 1087, 1087, 1087, 1087,    0,
     1087, 1087, 1087, 1087, 1087, 1087, 1087, 1087, 1088,    0,
        0, 1088,    0,    0,    0, 1088,    0, 1088, 1088, 1088,
        0,    0, 1088, 1089, 1089,    0, 1089, 1089, 1089, 1089,
     1089, 1089, 1089, 1089, 1089, 1089, 1089, 1089, 1089, 1089,
     1089, 1089, 1089, 1089, 1089, 1089, 1089, 1089, 1089, 1089,
     1090, 1090,    0, 1090,    0, 1090, 1090, 1090, 1090,    0,

     1090, 1090, 1090, 1090,    0, 1090, 1090, 1090,    0, 1090,
        0, 1090, 1090, 1090, 1090, 1090, 1090, 1091,    0,    0,
     1091,    0,    0,    0, 1091,    0, 1091, 1091, 1091,    0,
        0, 1091, 1092, 1092,    0, 1092,    0, 1092, 1092, 1092,
     1092, 1092, 1092, 1092, 1092, 1092, 1092, 1092, 1092, 1092,
        0, 1092,    0, 1092, 1092, 1092, 1092, 1092, 1092, 1093,
     1093,    0, 1093,    0, 1093, 1093, 1093, 1093, 1093, 1093,
     1093, 1093, 1093, 1093, 1093, 1093, 1093,    0, 1093,    0,
     1093, 1093, 1093, 1093, 1093, 1093, 1094,    0, 1094, 1094,
     1094,    0,    0, 1094, 1095,    0,    0,    0, 1095,    0,

     1095, 1095, 1095,    0,    0, 1095, 1096, 1096,    0, 1096,
     1096, 1096, 1096,    0,    0, 1096, 1096, 1096, 1096, 1096,
     1096, 1096, 1096, 1096,    0, 1096,    0, 1096, 1096, 1096,
     1096, 1096, 1096, 1097,    0, 1097, 1097, 1097,    0,    0,
     1097, 1098,    0, 1098, 1098,    0,    0, 1098,    0, 1098,
     1098, 1098,    0,    0, 1098, 1099,    0, 1099, 1099, 1099,
        0,    0, 1099, 1100,    0, 1100, 1100,    0,    0, 1100,
        0, 1100, 1100, 1100,    0,    0, 1100, 1101, 1101,    0,
     1101, 1101, 1101, 1101, 1101, 1101, 1101, 1101, 1101, 1101,
     1101, 1101, 1101, 1101, 1101,    0, 1101,    0, 1101, 1101,

     1101, 1101, 1101, 1101, 1102,    0,    0, 1102,    0,    0,
        0, 1102,    0, 1102, 1102, 1102,    0,    0, 1102, 1103,
     1103,    0, 1103, 1103, 1103, 1103, 1103, 1103, 1103, 1103,
     1103,    0, 1103, 1103, 1103, 1103, 1103, 1103, 1103,    0,
     1103, 1103, 1103, 1103, 1103, 1103, 1104, 1104,    0, 1104,
     1104, 1104, 1104, 1104, 1104,    0, 1104, 1104, 1104, 1104,
     1104, 1104, 1104, 1104,    0, 1104,    0, 1104, 1104, 1104,
     1104, 1104, 1104, 1105, 1105,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0, 1105, 1105, 1105, 1105, 1105,
     1105, 1105, 1105, 1105, 1106, 1106,    0, 1106, 1106, 1106,

     1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106,
     1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106,
     1106, 1107,    0, 1107, 1107, 1107,    0,    0, 1107, 1108,
     1108,    0,    0, 1108,    0, 1108, 1108, 1108,    0,    0,
     1108, 1109,    0, 1109, 1109,    0, 1109,    0,    0, 1109,
     1109,    0, 1109, 1109, 1109, 1110,    0,    0, 1110,    0,
        0,    0, 1110,    0, 1110, 1110, 1110, 1111,    0,    0,
     1111,    0, 1111, 1111, 1111, 1111, 1111, 1111, 1111, 1111,
     1111, 1111, 1111, 1111, 1111, 1111, 1111, 1111, 1111, 1111,
     1111, 1111, 1111, 1111, 1112,    0, 1112, 1112, 1112,    0,

     1112, 1114,    0, 1114, 1114,    0, 1114,    0,    0, 1114,
     1114,    0, 1114, 1114, 1114, 1115,    0,    0, 1115,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0, 1115, 1115, 1115, 1115, 1115, 1116, 1116,
        0, 1116, 1116, 1116, 1116, 1116, 1116, 1116, 1116, 1116,
     1116, 1116, 1116, 1116, 1116, 1116, 1116, 1116, 1116, 1116,
     1116, 1116, 1116, 1116, 1116, 1117,    0, 1117, 1117, 1117,
     1117, 1117,    0,    0, 1117, 1117, 1117, 1117, 1117,    0,
        0, 1117, 1118,    0, 1118,    0, 1118, 1118, 1118,    0,
        0, 1118, 1118, 1118, 1118, 1118,    0,    0, 1118, 1119,

     1119, 1119, 1119, 1119, 1119, 1119, 1119, 1119, 1119, 1119,
     1119, 1119, 1119, 1119, 1119, 1119, 1119, 1119, 1119, 1119,
     1119, 1119, 1119, 1119, 1119, 1119, 1120,    0, 1120, 1120,
        0,    0, 1120,    0, 1120, 1120, 1120,    0,    0, 1120,
     1121,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0, 1121,    0, 1121, 1121, 1121,    0,    0,
     1121, 1122, 1122, 1122, 1122,    0, 1122,    0,    0,    0,
        0,    0,    0, 1122,    0,    0, 1122,    0,    0, 1122,
        0, 1122, 1122, 1122,    0, 1122, 1122, 1123, 1123, 1123,
     1123,    0,    0,    0,    0,    0,    0,    0,    0, 1123,

        0, 1123, 1123,    0,    0, 1123,    0, 1123, 1123, 1123,
        0,    0, 1123, 1124, 1124, 1124, 1124,    0, 1124,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0, 1124,    0, 1124, 1124, 1124,    0,    0, 1124, 1125,
        0,    0,    0, 1125,    0, 1125, 1125, 1125,    0,    0,
     1125, 1126, 1126,    0, 1126, 1126, 1126, 1126, 1126, 1126,
     1126, 1126, 1126, 1126, 1126, 1126, 1126, 1126, 1126, 1126,
     1126, 1126, 1126, 1126, 1126, 1126, 1126, 1126, 1127,    0,
     1127, 1127, 1127, 1127, 1127,    0,    0, 1127, 1127, 1127,
     1127, 1127,    0,    0, 1127, 1128,    0, 1128,    0, 1128,

     1128, 1128,    0,    0, 1128, 1128, 1128, 1128, 1128,    0,
        0, 1128, 1129, 1129,    0, 1129, 1129, 1129, 1129, 1129,
     1129, 1129, 1129, 1129, 1129, 1129, 1129, 1129, 1129, 1129,
     1129, 1129, 1129, 1129, 1129, 1129, 1129, 1129, 1129, 1130,
        0, 1130, 1130, 1130, 1130, 1130, 1130,    0, 1130, 1130,
     1130, 1130, 1130,    0,    0, 1130, 1131,    0, 1131,    0,
     1131, 1131, 1131,    0,    0, 1131, 1131, 1131, 1131, 1131,
        0,    0, 1131, 1132, 1132, 1132, 1132,    0, 1132,    0,
        0,    0,    0,    0,    0, 1132,    0,    0, 1132,    0,
        0, 1132,    0, 1132, 1132, 1132,    0, 1132, 1132, 1133,

     1133, 1133, 1133,    0,    0, 1133,    0,    0,    0,    0,
        0, 1133,    0, 1133, 1133,    0,    0, 1133,    0, 1133,
     1133, 1133,    0,    0, 1133, 1134, 1134, 1134, 1134,    0,
     1134,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0, 1134,    0, 1134, 1134, 1134,    0,    0,
     1134, 1135, 1135, 1135, 1135, 1135, 1135, 1135, 1135,    0,
     1135, 1135, 1135, 1135, 1135, 1135, 1135, 1135, 1135, 1135,
     1135, 1135, 1135, 1135, 1135, 1135, 1135, 1135, 1136,    0,
        0, 1136,    0,    0, 1136,    0,    0,    0,    0,    0,
        0,    0, 1136,    0,    0,    0, 1136,    0, 1136, 1136,

     1136,    0,    0, 1136, 1137,    0,    0,    0, 1137,    0,
     1137, 1137, 1137,    0,    0, 1137, 1138, 1138,    0, 1138,
     1138, 1138, 1138, 1138, 1138, 1138, 1138, 1138, 1138, 1138,
     1138, 1138, 1138, 1138, 1138, 1138, 1138, 1138, 1138, 1138,
     1138, 1138, 1138, 1139, 1139,    0, 1139, 1139, 1139, 1139,
     1139, 1139, 1139, 1139, 1139, 1139, 1139, 1139, 1139, 1139,
     1139, 1139, 1139, 1139, 1139, 1139, 1139, 1139, 1139, 1139,
     1140, 1140,    0, 1140, 1140, 1140, 1140, 1140, 1140, 1140,
     1140, 1140, 1140, 1140, 1140, 1140, 1140, 1140, 1140, 1140,
     1140, 1140, 1140, 1140, 1140, 1140, 1140, 1141,    0, 1141,

     1141, 1141, 1141, 1141,    0,    0, 1141, 1141, 1141, 1141,
     1141,    0,    0, 1141, 1142,    0, 1142,    0, 1142, 1142,
     1142,    0,    0, 1142, 1142, 1142, 1142, 1142,    0,    0,
     1142, 1143, 1143, 1143, 1143,    0, 1143,    0,    0,    0,
        0,    0,    0,    0,    0, 1143, 1143,    0,    0, 1143,
        0, 1143, 1143, 1143,    0,    0, 1143, 1144,    0, 1144,
     1144, 1144,    0,    0, 1144, 1145, 1145, 1145, 1145,    0,
     1145,    0,    0,    0,    0,    0,    0,    0,    0, 1145,
     1145,    0,    0, 1145,    0, 1145, 1145, 1145,    0,    0,
     1145, 1146, 1146, 1146, 1146,    0, 1146,    0,    0,    0,

        0,    0,    0, 1146,    0,    0, 1146,    0,    0, 1146,
        0, 1146, 1146, 1146,    0, 1146, 1146, 1147, 1147, 1147,
     1147,    0,    0,    0,    0,    0,    0,    0,    0, 1147,
        0, 1147, 1147,    0,    0, 1147,    0, 1147, 1147, 1147,
        0,    0, 1147, 1148, 1148, 1148, 1148,    0, 1148,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0, 1148,    0, 1148, 1148, 1148,    0,    0, 1148, 1149,
        0,    0,    0, 1149,    0, 1149, 1149, 1149,    0,    0,
     1149, 1150,    0, 1150,    0,    0,    0, 1150,    0, 1150,
     1150, 1150,    0,    0, 1150, 1151,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0, 1151,    0,
     1151, 1151, 1151,    0,    0, 1151, 1152,    0, 1152,    0,
        0,    0, 1152,    0, 1152, 1152, 1152,    0,    0, 1152,
     1153, 1153,    0, 1153, 1153, 1153, 1153, 1153, 1153,    0,
     1153, 1153, 1153, 1153, 1153, 1153, 1153, 1153, 1153, 1153,
        0, 1153, 1153, 1153, 1153, 1153, 1153, 1154,    0,    0,
     1154,    0,    0,    0, 1154,    0, 1154, 1154, 1154,    0,
        0, 1154, 1155, 1155, 1155, 1155, 1155, 1155, 1155, 1155,
     1155, 1155, 1155, 1155, 1155, 1155, 1155, 1155, 1155, 1155,
        0, 1155, 1155, 1155, 1155, 1155, 1155, 1155, 1155, 1156,

     1156,    0, 1156, 1156, 1156, 1156, 1156, 1156, 1156, 1156,
     1156, 1156, 1156, 1156, 1156, 1156, 1156,    0, 1156, 1156,
     1156, 1156, 1156, 1156, 1156, 1156, 1157,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0, 1157,
        0, 1157, 1157, 1157,    0,    0, 1157, 1158,    0,    0,
     1158,    0,    0,    0, 1158,    0, 1158, 1158, 1158,    0,
        0, 1158, 1159, 1159,    0, 1159, 1159, 1159, 1159, 1159,
     1159, 1159, 1159, 1159, 1159, 1159, 1159, 1159, 1159, 1159,
     1159, 1159, 1159, 1159, 1159, 1159, 1159, 1159, 1159, 1160,
     1160,    0, 1160,    0, 1160, 1160, 1160, 1160,    0, 1160,

     1160, 1160, 1160,    0, 1160, 1160, 1160,    0, 1160,    0,
     1160, 1160, 1160, 1160, 1160, 1160, 1161,    0,    0, 1161,
        0,    0,    0, 1161,    0, 1161, 1161, 1161,    0,    0,
     1161, 1162, 1162,    0, 1162,    0, 1162, 1162, 1162, 1162,
     1162, 1162, 1162, 1162, 1162, 1162, 1162, 1162, 1162,    0,
     1162,    0, 1162, 1162, 1162, 1162, 1162, 1162, 1163, 1163,
        0, 1163,    0, 1163, 1163, 1163, 1163, 1163, 1163, 1163,
     1163, 1163, 1163, 1163, 1163, 1163,    0, 1163,    0, 1163,
     1163, 1163, 1163, 1163, 1163, 1164,    0,    0,    0, 1164,
        0, 1164, 1164, 1164,    0,    0, 1164, 1165, 1165,    0,

     1165, 1165, 1165, 1165,    0,    0, 1165, 1165, 1165, 1165,
     1165, 1165, 1165, 1165, 1165,    0, 1165,    0, 1165, 1165,
     1165, 1165, 1165, 1165, 1166,    0, 1166, 1166,    0,    0,
     1166,    0, 1166, 1166, 1166,    0,    0, 1166, 1167,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0, 1167,    0, 1167, 1167, 1167,    0,    0, 1167, 1168,
        0, 1168, 1168,    0,    0, 1168,    0, 1168, 1168, 1168,
        0,    0, 1168, 1169,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0, 1169,    0, 1169, 1169,
     1169,    0,    0, 1169, 1170, 1170,    0, 1170, 1170, 1170,

     1170, 1170, 1170, 1170, 1170, 1170, 1170, 1170, 1170, 1170,
     1170, 1170,    0, 1170,    0, 1170, 1170, 1170, 1170, 1170,
     1170, 1171,    0,    0, 1171,    0,    0,    0, 1171,    0,
     1171, 1171, 1171,    0,    0, 1171, 1172, 1172,    0, 1172,
     1172, 1172, 1172, 1172, 1172, 1172, 1172, 1172,    0, 1172,
     1172, 1172, 1172, 1172, 1172, 1172,    0, 1172, 1172, 1172,
     1172, 1172, 1172, 1173, 1173,    0, 1173, 1173, 1173, 1173,
     1173, 1173,    0, 1173, 1173, 1173, 1173, 1173, 1173, 1173,
     1173,    0, 1173,    0, 1173, 1173, 1173, 1173, 1173, 1173,
     1175, 1175,    0,    0, 1175,    0, 1175, 1175, 1175,    0,

        0, 1175, 1176, 1176,    0, 1176, 1176, 1176,    0, 1176,
     1176, 1176, 1176, 1176, 1176, 1176, 1176, 1176, 1176, 1176,
     1176, 1176, 1176, 1176, 1176, 1176, 1176, 1176, 1176, 1177,
     1177,    0, 1177,    0,    0,    0, 1177,    0, 1177, 1177,
     1177, 1178,    0, 1178, 1178,    0, 1178,    0,    0, 1178,
     1178,    0, 1178, 1178, 1178, 1179,    0,    0, 1179,    0,
     1179, 1179, 1179, 1179, 1179, 1179, 1179, 1179, 1179, 1179,
     1179, 1179, 1179, 1179, 1179, 1179, 1179, 1179, 1179, 1179,
     1179, 1179, 1180, 1180,    0, 1180, 1180, 1180, 1180, 1180,
     1180, 1180, 1180, 1180, 1180, 1180, 1180, 1180, 1180, 1180,

     1180, 1180, 1180, 1180, 1180, 1180, 1180, 1180, 1180, 1181,
        0,    0, 1181,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0, 1181,    0, 1181,
     1181, 1181, 1183,    0,    0, 1183,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
     1183,    0, 1183, 1183, 1183, 1184, 1184,    0, 1184, 1184,
     1184, 1184, 1184, 1184, 1184, 1184, 1184, 1184, 1184, 1184,
     1184, 1184, 1184, 1184, 1184, 1184, 1184, 1184, 1184,    0,
     1184, 1184, 1187,    0,    0, 1187,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

     1187, 1187, 1187, 1187, 1187, 1188,    0, 1188, 1188, 1188,
     1188, 1188,    0,    0, 1188, 1188, 1188, 1188, 1188,    0,
        0, 1188, 1189,    0, 1189, 1189, 1189, 1189, 1189,    0,
        0, 1189, 1189, 1189, 1189, 1189,    0,    0, 1189, 1190,
        0, 1190, 1190, 1190,    0,    0, 1190, 1191,    0,    0,
        0, 1191,    0, 1191, 1191, 1191,    0,    0, 1191, 1192,
        0, 1192, 1192, 1192, 1192, 1192,    0,    0, 1192, 1192,
     1192, 1192, 1192,    0,    0, 1192, 1193,    0, 1193, 1193,
     1193, 1193, 1193,    0,    0, 1193, 1193, 1193, 1193, 1193,
        0,    0, 1193, 1194,    0, 1194, 1194, 1194, 1194, 1194,

     1194,    0, 1194, 1194, 1194, 1194, 1194,    0,    0, 1194,
     1195,    0, 1195, 1195, 1195, 1195, 1195, 1195,    0, 1195,
     1195, 1195, 1195, 1195,    0,    0, 1195, 1196, 1196, 1196,
     1196, 1196, 1196, 1196, 1196, 1196, 1196, 1196, 1196, 1196,
     1196, 1196, 1196, 1196, 1196, 1196, 1196, 1196, 1196, 1196,
     1196, 1196, 1196, 1196, 1197,    0,    0, 1197,    0,    0,
     1197,    0,    0,    0,    0,    0,    0,    0, 1197,    0,
        0,    0, 1197,    0, 1197, 1197, 1197,    0,    0, 1197,
     1198,    0, 1198, 1198, 1198, 1198, 1198,    0,    0, 1198,
     1198, 1198, 1198, 1198,    0,    0, 1198, 1199,    0, 1199,

     1199, 1199, 1199, 1199,    0,    0, 1199, 1199, 1199, 1199,
     1199,    0,    0, 1199, 1200, 1200, 1200, 1200,    0, 1200,
        0,    0,    0,    0,    0,    0,    0,    0, 1200, 1200,
        0,    0, 1200,    0, 1200, 1200, 1200,    0,    0, 1200,
     1201, 1201, 1201, 1201,    0, 1201,    0,    0,    0,    0,
        0,    0,    0,    0,    0, 1201,    0,    0, 1201,    0,
     1201, 1201, 1201,    0,    0, 1201, 1202, 1202, 1202, 1202,
        0, 1202,    0,    0,    0,    0,    0,    0,    0,    0,
     1202, 1202,    0,    0, 1202,    0, 1202, 1202, 1202,    0,
        0, 1202, 1203,    0,    0,    0, 1203,    0, 1203, 1203,

     1203,    0,    0, 1203, 1204,    0, 1204, 1204, 1204,    0,
        0, 1204, 1205,    0, 1205,    0,    0,    0, 1205,    0,
     1205, 1205, 1205,    0,    0, 1205, 1206,    0, 1206, 1206,
     1206,    0,    0, 1206, 1207,    0,    0,    0, 1207,    0,
     1207, 1207, 1207,    0,    0, 1207, 1208, 1208, 1208, 1208,
     1208, 1208, 1208, 1208, 1208, 1208, 1208, 1208, 1208, 1208,
     1208,    0, 1208, 1208, 1208,    0, 1208,    0,    0, 1208,
     1208, 1208, 1208, 1209,    0, 1209, 1209, 1209,    0,    0,
     1209, 1210,    0, 1210, 1210, 1210,    0,    0, 1210, 1212,
     1212,    0, 1212, 1212, 1212, 1212, 1212, 1212, 1212, 1212,

     1212, 1212, 1212, 1212, 1212, 1212, 1212, 1212, 1212, 1212,
     1212, 1212, 1212, 1212, 1212, 1212, 1213,    0,    0, 1213,
        0,    0,    0, 1213,    0, 1213, 1213, 1213, 1214,    0,
     1214, 1214,    0, 1214,    0,    0, 1214, 1214,    0, 1214,
     1214, 1214, 1215, 1215,    0, 1215, 1215, 1215, 1215, 1215,
     1215, 1215, 1215, 1215, 1215, 1215, 1215, 1215, 1215, 1215,
     1215, 1215, 1215, 1215, 1215, 1215, 1215, 1215, 1215, 1217,
        0,    0, 1217,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0, 1217,    0, 1217,
     1217, 1217, 1218, 1218,    0, 1218, 1218, 1218, 1218, 1218,

     1218, 1218, 1218, 1218, 1218, 1218, 1218, 1218, 1218, 1218,
     1218, 1218, 1218, 1218, 1218, 1218, 1218, 1218, 1218, 1219,
     1219, 1219, 1219, 1219, 1220,    0,    0, 1220,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0, 1220, 1220, 1220, 1220, 1220, 1221,    0, 1221,
     1221, 1221, 1221, 1221,    0,    0, 1221, 1221, 1221, 1221,
     1221,    0,    0, 1221, 1222,    0, 1222, 1222, 1222, 1222,
     1222,    0,    0, 1222, 1222, 1222, 1222, 1222,    0,    0,
     1222, 1223,    0, 1223, 1223, 1223, 1223, 1223, 1223,    0,
     1223, 1223, 1223, 1223, 1223,    0,    0, 1223, 1224,    0,

     1224, 1224, 1224,    0,    0, 1224, 1225, 1225,    0, 1225,
        0,    0,    0, 1225,    0, 1225, 1225, 1225, 1226, 1226,
     1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226,
     1226, 1226, 1226, 1226, 1226, 1226, 1226,    0, 1226,    0,
        0,    0, 1226, 1226, 1226, 1227, 1227, 1227, 1227,    0,
     1227,    0,    0,    0,    0,    0,    0,    0,    0, 1227,
     1227,    0,    0, 1227,    0, 1227, 1227, 1227,    0,    0,
     1227, 1228, 1228, 1228, 1228, 1228, 1228, 1228, 1228, 1228,
     1228, 1228, 1228, 1228, 1228, 1228,    0, 1228, 1228, 1228,
        0, 1228,    0, 1228,    0, 1228, 1228, 1228, 1229, 1229,

     1229, 1229, 1229, 1229, 1229, 1229, 1229, 1229, 1229, 1229,
     1229, 1229, 1229,    0, 1229, 1229, 1229,    0, 1229,    0,
        0,    0, 1229, 1229, 1229, 1230, 1230, 1230, 1230, 1230,
     1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230,
        0, 1230, 1230, 1230,    0, 1230,    0,    0,    0, 1230,
     1230, 1230, 1231, 1231, 1231, 1231, 1231, 1231, 1231, 1231,
     1231, 1231, 1231, 1231, 1231, 1231, 1231,    0, 1231, 1231,
     1231,    0, 1231,    0,    0,    0, 1231, 1231, 1231, 1232,
     1232, 1232, 1232, 1232, 1232, 1232, 1232, 1232, 1232, 1232,
     1232, 1232, 1232, 1232,    0, 1232, 1232, 1232,    0, 1232,

        0,    0,    0, 1232, 1232, 1232, 1024, 1024, 1024, 1024,
     1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024,
     1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024,
     1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024,
     1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024,
     1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024,
     1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024,
     1024, 1024, 1024, 1024, 1024
    } ;

extern int commentScanYY_flex_debug;
int commentScanYY_flex_debug = 0;

static yy_state_type *yy_state_buf=0, *yy_state_ptr=0;
static char *yy_full_match;
static int yy_lp;
static int yy_looking_for_trail_begin = 0;
static int yy_full_lp;
static int *yy_full_state;
#define YY_TRAILING_MASK 0x2000
#define YY_TRAILING_HEAD_MASK 0x4000
#define REJECT \
{ \
*yy_cp = (yy_hold_char); /* undo effects of setting up commentScanYYtext */ \
yy_cp = (yy_full_match); /* restore poss. backed-over text */ \
(yy_lp) = (yy_full_lp); /* restore orig. accepting pos. */ \
(yy_state_ptr) = (yy_full_state); /* restore orig. state */ \
yy_current_state = *(yy_state_ptr); /* restore curr. state */ \
++(yy_lp); \
goto find_rule; \
}

#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *commentScanYYtext;
#line 1 "commentscan.l"
/*****************************************************************************
 *
 * Copyright (C) 1997-2010 by Dimitri van Heesch.
 *
 * Permission to use, copy, modify, and distribute this software and its
 * documentation under the terms of the GNU General Public License is hereby 
 * granted. No representations are made about the suitability of this software 
 * for any purpose. It is provided "as is" without express or implied warranty.
 * See the GNU General Public License for more details.
 *
 * Documents produced by Doxygen are derivative works derived from the
 * input used in their production; they are not affected by this license.
 *
 */
#line 17 "commentscan.l"

/*
 *	includes
 */
#include <stdio.h>
#include <stdlib.h>
#include <assert.h>
#include <ctype.h>

#include "qtbc.h"
#include <qarray.h>
#include <qstack.h>
#include <qregexp.h>
#include <unistd.h>
#include <qfile.h>
  
#include "scanner.h"
#include "entry.h"
#include "doxygen.h"
#include "message.h"
#include "config.h"
#include "util.h"
#include "index.h"
#include "defargs.h"
#include "language.h"
#include "outputlist.h"
#include "membergroup.h"
#include "reflist.h"
#include "debug.h"
#include "parserintf.h"

// forward declarations
static bool handleBrief(const QCString &);
static bool handleFn(const QCString &);
static bool handleDef(const QCString &);
static bool handleOverload(const QCString &);
static bool handleEnum(const QCString &);
static bool handleDefGroup(const QCString &);
static bool handleAddToGroup(const QCString &);
static bool handleWeakGroup(const QCString &);
static bool handleNamespace(const QCString &);
static bool handlePackage(const QCString &);
static bool handleClass(const QCString &);
static bool handleHeaderFile(const QCString &);
static bool handleProtocol(const QCString &);
static bool handleCategory(const QCString &);
static bool handleUnion(const QCString &);
static bool handleStruct(const QCString &);
static bool handleInterface(const QCString &);
static bool handleIdlException(const QCString &);
static bool handlePage(const QCString &);
static bool handleMainpage(const QCString &);
static bool handleFile(const QCString &);
static bool handleDir(const QCString &);
static bool handleExample(const QCString &);
static bool handleDetails(const QCString &);
static bool handleName(const QCString &);
static bool handleTodo(const QCString &);
static bool handleTest(const QCString &);
static bool handleBug(const QCString &);
static bool handleSubpage(const QCString &s);
static bool handleDeprecated(const QCString &);
static bool handleXRefItem(const QCString &);
static bool handleRelated(const QCString &);
static bool handleRelatedAlso(const QCString &);
static bool handleMemberOf(const QCString &);
static bool handleRefItem(const QCString &);
static bool handleSection(const QCString &);
static bool handleAnchor(const QCString &);
static bool handleFormatBlock(const QCString &);
static bool handleAddIndex(const QCString &);
static bool handleIf(const QCString &);
static bool handleIfNot(const QCString &);
static bool handleElseIf(const QCString &);
static bool handleElse(const QCString &);
static bool handleEndIf(const QCString &);
static bool handleIngroup(const QCString &);
static bool handleNoSubGrouping(const QCString &);
static bool handleShowInitializer(const QCString &);
static bool handleHideInitializer(const QCString &);
static bool handleCallgraph(const QCString &);
static bool handleCallergraph(const QCString &);
static bool handleInternal(const QCString &);
static bool handleLineBr(const QCString &);
static bool handleStatic(const QCString &);
static bool handlePure(const QCString &);
static bool handlePrivate(const QCString &);
static bool handlePrivateSection(const QCString &);
static bool handleProtected(const QCString &);
static bool handleProtectedSection(const QCString &);
static bool handlePublic(const QCString &s);
static bool handlePublicSection(const QCString &s);
static bool handleInherit(const QCString &);
static bool handleExtends(const QCString &);

typedef bool (*DocCmdFunc)(const QCString &name);

struct DocCmdMap
{
  const char *cmdName;
  DocCmdFunc handler;
  bool endsBrief;
};

// map of command to handler function
static DocCmdMap docCmdMap[] =
{
  // command name      handler function         ends brief description
  { "brief",           &handleBrief,            FALSE },
  { "short",           &handleBrief,            FALSE },
  { "fn",              &handleFn,               FALSE },
  { "var",             &handleFn,               FALSE },
  { "typedef",         &handleFn,               FALSE },
  { "property",        &handleFn,               FALSE },
  { "def",             &handleDef,              FALSE },
  { "overload",        &handleOverload,         FALSE },
  { "enum",            &handleEnum,             FALSE },
  { "defgroup",        &handleDefGroup,         FALSE },
  { "addtogroup",      &handleAddToGroup,       FALSE },
  { "weakgroup",       &handleWeakGroup,        FALSE },
  { "namespace",       &handleNamespace,        FALSE },
  { "package",         &handlePackage,          FALSE },
  { "class",           &handleClass,            FALSE },
  { "headerfile",      &handleHeaderFile,       FALSE },
  { "protocol",        &handleProtocol,         FALSE },
  { "category",        &handleCategory,         FALSE },
  { "union",           &handleUnion,            FALSE },
  { "struct",          &handleStruct,           FALSE },
  { "interface",       &handleInterface,        FALSE },
  { "idlexcept",       &handleIdlException,     FALSE },
  { "page",            &handlePage,             FALSE },
  { "mainpage",        &handleMainpage,         FALSE },
  { "file",            &handleFile,             FALSE },
  { "dir",             &handleDir,              FALSE },
  { "example",         &handleExample,          FALSE },
  { "details",         &handleDetails,          TRUE  },
  { "name",            &handleName,             FALSE },
  { "todo",            &handleTodo,             FALSE }, // end brief will be done differently
  { "test",            &handleTest,             FALSE }, // end brief will be done differently
  { "bug",             &handleBug,              FALSE }, // end brief will be done differently
  { "deprecated",      &handleDeprecated,       FALSE }, // end brief will be done differently
  { "xrefitem",        &handleXRefItem,         FALSE }, // end brief will be done differently
  { "related",         &handleRelated,          TRUE  },
  { "relates",         &handleRelated,          TRUE  },
  { "relatedalso",     &handleRelatedAlso,      TRUE  },
  { "relatesalso",     &handleRelatedAlso,      TRUE  },
  { "refitem",         &handleRefItem,          TRUE  },
  { "subpage",         &handleSubpage,          TRUE  },
  { "section",         &handleSection,          TRUE  },
  { "subsection",      &handleSection,          TRUE  },
  { "subsubsection",   &handleSection,          TRUE  },
  { "paragraph",       &handleSection,          TRUE  },
  { "anchor",          &handleAnchor,           TRUE  },
  { "verbatim",        &handleFormatBlock,      TRUE },
  { "latexonly",       &handleFormatBlock,      FALSE },
  { "htmlonly",        &handleFormatBlock,      FALSE },
  { "xmlonly",         &handleFormatBlock,      FALSE },
  { "rtfonly",         &handleFormatBlock,      FALSE },
  { "manonly",         &handleFormatBlock,      FALSE },
  { "dot",             &handleFormatBlock,      TRUE  },
  { "msc",             &handleFormatBlock,      TRUE  },
  { "code",            &handleFormatBlock,      TRUE  },
  { "addindex",        &handleAddIndex,         FALSE },
  { "if",              &handleIf,               FALSE },
  { "ifnot",           &handleIfNot,            FALSE },
  { "elseif",          &handleElseIf,           FALSE },
  { "else",            &handleElse,             FALSE },
  { "endif",           &handleEndIf,            FALSE },
  { "ingroup",         &handleIngroup,          FALSE },
  { "nosubgrouping",   &handleNoSubGrouping,    FALSE },
  { "showinitializer", &handleShowInitializer,  FALSE },
  { "hideinitializer", &handleHideInitializer,  FALSE },
  { "callgraph",       &handleCallgraph,        FALSE },
  { "callergraph",     &handleCallergraph,      FALSE },
  { "internal",        &handleInternal,         TRUE  },
  { "_linebr",         &handleLineBr,           FALSE },
  { "static",          &handleStatic,           FALSE },
  { "pure",            &handlePure,             FALSE },
  { "private",         &handlePrivate,          FALSE },
  { "privatesection",  &handlePrivateSection,   FALSE },
  { "protected",       &handleProtected,        FALSE },
  { "protectedsection",&handleProtectedSection, FALSE },
  { "public",          &handlePublic,           FALSE },
  { "publicsection",   &handlePublicSection,    FALSE },
  { "inherit",         &handleInherit,          TRUE  },
  { "extends",         &handleExtends,          TRUE  },
  { "implements",      &handleExtends,          TRUE  },
  { "memberof",        &handleMemberOf,         TRUE  },
  { "arg",             0,                       TRUE  },
  { "attention",       0,                       TRUE  },
  { "author",          0,                       TRUE  },
  { "authors",         0,                       TRUE  },
  { "copydoc",         0,                       TRUE  },
  { "copybrief",       0,                       FALSE },
  { "copydetails",     0,                       TRUE  },
  { "date",            0,                       TRUE  },
  { "dotfile",         0,                       TRUE  },
  { "htmlinclude",     0,                       TRUE  },
  { "image",           0,                       TRUE  },
  { "include",         0,                       TRUE  },
  { "includelineno",   0,                       TRUE  },
  { "invariant",       0,                       TRUE  },
  { "li",              0,                       TRUE  },
  { "line",            0,                       TRUE  },
  { "note",            0,                       TRUE  },
  { "par",             0,                       TRUE  },
  { "param",           0,                       TRUE  },
  { "tparam",          0,                       TRUE  },
  { "post",            0,                       TRUE  },
  { "pre",             0,                       TRUE  },
  { "remark",          0,                       TRUE  },
  { "remarks",         0,                       TRUE  },
  { "result",          0,                       TRUE  },
  { "return",          0,                       TRUE  },
  { "returns",         0,                       TRUE  },
  { "retval",          0,                       TRUE  },
  { "sa",              0,                       TRUE  },
  { "see",             0,                       TRUE  },
  { "since",           0,                       TRUE  },
  { "throw",           0,                       TRUE  },
  { "throws",          0,                       TRUE  },
  { "until",           0,                       TRUE  },
  { "verbinclude",     0,                       TRUE  },
  { "version",         0,                       TRUE  },
  { "warning",         0,                       TRUE  },
  { 0, 0, FALSE }
};

/** @brief Command mapper.
 *
 *  Maps a command name (as found in a comment block) onto a
 *  specific handler function.
 */
class DocCmdMapper
{
  public:
    struct Cmd
    {
      DocCmdFunc func;
      bool endsBrief;
    };

    /** maps a command name to a handler function */
    static Cmd *map(const char *name)
    {
      return instance()->find(name);
    }

    /** release the singleton */
    static void freeInstance()
    {
      delete s_instance; s_instance=0;
    }

  private:
    static DocCmdMapper *instance()
    {
      if (s_instance==0) s_instance = new DocCmdMapper;
      return s_instance;
    }

    DocCmdMapper() : m_map(113)
    {
      m_map.setAutoDelete(TRUE);
      DocCmdMap *p = docCmdMap;
      while (p->cmdName)
      {
	if (m_map.find(p->cmdName)!=0)
	{
	  printf("Error: DocCmdMapper: command %s already added\n",p->cmdName);
	  exit(1);
	}
	Cmd *cmd = new Cmd;
	cmd->func = p->handler;
	cmd->endsBrief = p->endsBrief;
	m_map.insert(p->cmdName,cmd);
	p++;
      }
    }

    Cmd *find(const char *name)
    {
      return m_map.find(name);
    }
    QDict<Cmd> m_map;
    static DocCmdMapper *s_instance;
};

DocCmdMapper *DocCmdMapper::s_instance=0;
  
  
#define YY_NEVER_INTERACTIVE 1

enum XRefKind
{
  XRef_Item,
  XRef_Todo,
  XRef_Test,
  XRef_Bug,
  XRef_Deprecated,
  XRef_None
};

enum OutputContext
{
  OutputDoc,
  OutputBrief,
  OutputXRef,
  OutputInbody
};

enum GuardType
{
  Guard_If,
  Guard_IfNot,
  Guard_Skip
};

class GuardedSection
{
  public:
    GuardedSection(bool enabled,bool parentVisible) 
      : m_enabled(enabled),m_parentVisible(parentVisible) {}
    bool isEnabled() const { return m_enabled; }
    bool parentVisible() const { return m_parentVisible; }
  
  private:
    bool m_enabled;
    bool m_parentVisible;
};

void openGroup(Entry *e,const char *file,int line);
void closeGroup(Entry *e,const char *file,int line,bool foundInline=FALSE);
void initGroupInfo(Entry *e);
static void groupAddDocs(Entry *e,const char *fileName);

/* -----------------------------------------------------------------
 *
 *	statics
 */

static ParserInterface *langParser;          // the language parser that is calling us
static QCString         inputString;         // input string
static int		inputPosition;       // read pointer
static QCString		yyFileName;          // file name that is read from
static int		yyLineNr;            // line number in the input
static bool             inBody;              // was the comment found inside the body of a function?
static OutputContext    inContext;           // are we inside the brief, details or xref part
static bool             briefEndsAtDot;      // does the brief description stop at a dot?
static QCString         formulaText;         // Running text of a formula
static QCString         formulaEnv;          // environment name
static int              formulaNewLines;     // amount of new lines in the formula
static QCString        *pOutputString;       // pointer to string to which the output is appended.
static QCString         outputXRef;          // temp argument of todo/test/../xrefitem commands
static QCString         blockName;           // preformatted block name (e.g. verbatim, latexonly,...)
static XRefKind         xrefKind;            // kind of cross-reference command
static XRefKind         newXRefKind;         // 
static GuardType        guardType;           // kind of guard for conditional section
static bool             enabledSectionFound;
static QCString         functionProto;       // function prototype
static QStack<GuardedSection> guards;        // tracks nested conditional sections (if,ifnot,..)
static Entry*		current      = 0 ;   // working entry
//static Entry*		current_root = 0 ;   // parent of working entry


//static Entry*		previous     = 0 ;   // TODO: remove need for this
static bool             needNewEntry;

static QCString         sectionLabel;
static QCString		sectionTitle;
static QCString         xrefItemKey;
static QCString         newXRefItemKey;
static QCString         xrefItemTitle;
static QCString         xrefListTitle;
static Protection	protection;

static bool             xrefAppendFlag;
static bool             inGroupParamFound;
static int              braceCount;
static bool             insidePre;
static bool             parseMore;
static int              g_condCount;
static int              g_sectionLevel;

static int              g_commentCount;

//-----------------------------------------------------------------------------

static QStack<Grouping> g_autoGroupStack;
static int              g_memberGroupId = DOX_NOGROUP;
static QCString         g_memberGroupHeader;
static QCString         g_memberGroupDocs;
static QCString         g_memberGroupRelates;
static QCString         g_compoundName;

//-----------------------------------------------------------------------------

static void initParser()
{
  sectionLabel.resize(0);
  sectionTitle.resize(0);
  g_memberGroupHeader.resize(0);
}

//-----------------------------------------------------------------------------

static QCString getDocSectionName(int s)
{
  switch(s)
  {
    case Entry::CLASSDOC_SEC:       return "\\class";
    case Entry::STRUCTDOC_SEC:      return "\\struct";
    case Entry::UNIONDOC_SEC:       return "\\union";
    case Entry::EXCEPTIONDOC_SEC:   return "\\exception";
    case Entry::NAMESPACEDOC_SEC:   return "\\namespace";
    case Entry::PROTOCOLDOC_SEC:    return "\\protocol";
    case Entry::CATEGORYDOC_SEC:    return "\\category";
    case Entry::ENUMDOC_SEC:        return "\\enum";
    case Entry::PAGEDOC_SEC:        return "\\page";
    case Entry::VARIABLEDOC_SEC:    return "\\var";
    case Entry::MEMBERDOC_SEC:      return "\\fn";
    case Entry::OVERLOADDOC_SEC:    return "\\overload";
    case Entry::FILEDOC_SEC:        return "\\file";
    case Entry::DEFINEDOC_SEC:      return "\\def";
    case Entry::GROUPDOC_SEC:       return "\\defgroup";
    case Entry::MAINPAGEDOC_SEC:    return "\\mainpage";
    case Entry::PACKAGEDOC_SEC:     return "\\package";
    case Entry::DIRDOC_SEC:         return "\\dir";
    case Entry::EXAMPLE_SEC:        return "\\example";
    case Entry::MEMBERGRP_SEC:      return "\\name";
    default: return "";
  }
}

//-----------------------------------------------------------------------------

static bool makeStructuralIndicator(Entry::Sections s)
{
  //printf("current->section=%x\n",current->section);
  if (!getDocSectionName(current->section).isEmpty())
  {
    return TRUE;
  }
  else
  {
    needNewEntry = TRUE;
    current->section = s;
    current->fileName = yyFileName;
    current->startLine = yyLineNr;
    return FALSE;
  }
}

static void lineCount()
{
  for( const char* c = commentScanYYtext ; *c ; ++c )
    yyLineNr += (*c == '\n') ;
}


static QCString stripQuotes(const char *s)
{
  QCString name;
  if (s==0 || *s==0) return name;
  name=s;
  if (name.at(0)=='"' && name.at(name.length()-1)=='"')
  {
    name=name.mid(1,name.length()-2);
  }
  return name;
}

//-----------------------------------------------------------------

static void addXRefItem(const char *listName,const char *itemTitle,
                        const char *listTitle,bool append)
{
  Entry *docEntry = current; // inBody && previous ? previous : current;
  if (listName==0) return;
  //printf("addXRefItem(%s,%s,%s,%d)\n",listName,itemTitle,listTitle,append);

  ListItemInfo *lii=0;
  RefList *refList = Doxygen::xrefLists->find(listName);
  if (refList==0) // new list
  {
    refList = new RefList(listName,listTitle,itemTitle);
    Doxygen::xrefLists->insert(listName,refList);
    //printf("new list!\n");
  }
  if (docEntry->sli)
  {
    QListIterator<ListItemInfo> slii(*docEntry->sli);
    for (slii.toFirst();(lii=slii.current());++slii)
    {
      if (strcmp(lii->type,listName)==0) 
      {
        //printf("found %s lii->type=%s\n",listName,lii->type);
        break;
      }
    }
  }
  if (lii && append) // already found item of same type just before this one
  {
    //printf("listName=%s item id = %d existing\n",listName,lii->itemId);
    RefItem *item = refList->getRefItem(lii->itemId);
    ASSERT(item!=0);
    item->text += " <p>";
    item->text += outputXRef;
    //printf("%s: text +=%s\n",listName,item->text.data());
  }
  else // new item
  {
    int itemId  = refList->addRefItem();
    //printf("listName=%s item id = %d new current=%p\n",listName,itemId,current);

    // if we have already an item from the same list type (e.g. a second @todo)
    // in the same Entry (i.e. lii!=0) then we reuse its link anchor.
    char anchorLabel[1024];
    //sprintf(anchorLabel,"_%s%06d",listName,lii ? lii->itemId : itemId);
    sprintf(anchorLabel,"_%s%06d",listName,itemId);
    RefItem *item = refList->getRefItem(itemId);
    ASSERT(item!=0);
    item->text = outputXRef;
    item->listAnchor = anchorLabel;
    docEntry->addSpecialListItem(listName,itemId);
    QCString cmdString;
    cmdString.sprintf("\\xrefitem %s %d.",listName,itemId);
    if (inBody)
    {
      docEntry->inbodyDocs += cmdString;
    }
    else
    {
      docEntry->doc += cmdString;
    }
    SectionInfo *si=new SectionInfo(listName,anchorLabel,
	                            sectionTitle,SectionInfo::Anchor);
    Doxygen::sectionDict.insert(anchorLabel,si);
    docEntry->anchors->append(si);
  }
  outputXRef.resize(0);
}

//-----------------------------------------------------------------------------

// Adds a formula text to the list/dictionary of formulas if it was
// not already added. Returns the label of the formula.
static QCString addFormula()
{
  QCString formLabel;
  QCString fText=formulaText.simplifyWhiteSpace();
  Formula *f=0;
  if ((f=Doxygen::formulaDict[fText])==0)
  {
    f = new Formula(fText);
    Doxygen::formulaList.append(f);
    Doxygen::formulaDict.insert(fText,f);
    formLabel.sprintf("\\form#%d",f->getId());
    Doxygen::formulaNameDict.insert(formLabel,f);
  }
  else
  {
    formLabel.sprintf("\\form#%d",f->getId());
  }
  int i;
  for (i=0;i<formulaNewLines;i++) formLabel+="\\_fakenl"; // add fake newlines to
                                                          // keep the warnings 
                                                          // correctly aligned.
  return formLabel;
}

//-----------------------------------------------------------------------------

static void checkFormula();
//-----------------------------------------------------------------------------

static void addSection()
{
  sectionTitle+=commentScanYYtext;
  sectionTitle=sectionTitle.stripWhiteSpace();
  //printf("Adding new section file=%s label=%s title=%s\n",yyFileName,sectionLabel.data(),sectionTitle.data()); 
  SectionInfo *si = new SectionInfo(yyFileName,sectionLabel,sectionTitle,SectionInfo::Anchor);
  current->anchors->append(si);
  Doxygen::sectionDict.insert(commentScanYYtext,si);
}

//-----------------------------------------------------------------------------

// strip trailing whitespace (excluding newlines) from string s
static void stripTrailingWhiteSpace(QCString &s)
{
  uint len = s.length();
  int i = (int)len-1;
  char c;
  while (i>=0 && ((c = s.at(i))==' ' || c=='\t' || c=='\r')) i--;
  if (i!=(int)len-1) 
  {
    s.resize(i+2); // string upto and including char at pos i and \0 terminator
  }
}

// selects the output to write to
static inline void setOutput(OutputContext ctx)
{
  bool xrefAppendToPrev = xrefAppendFlag;
  // determine append flag for the next item (i.e. the end of this item)
  xrefAppendFlag = !inBody &&
                   inContext==OutputXRef && ctx==OutputXRef && // two consecutive xref items
                   newXRefKind==xrefKind &&                    // of the same kind
                   (xrefKind!=XRef_Item || 
		    newXRefItemKey==xrefItemKey);              // with the same key if \xrefitem
  //printf("%d && %d && %d && (%d || %d)\n",
  //                 inContext==OutputXRef,
  //                 ctx==OutputXRef,
  //                 newXRefKind==xrefKind,
  //                 xrefKind!=XRef_Item,
  //	  	     newXRefItemKey==xrefItemKey);
      
  //printf("refKind=%d newXRefKind=%d xrefAppendToPrev=%d xrefAppendFlag=%d\n",
  //   	  xrefKind,newXRefKind,xrefAppendToPrev,xrefAppendFlag);

  //printf("setOutput(inContext=%d ctx=%d)\n",inContext,ctx);
  if (inContext==OutputXRef) // end of XRef section => add the item 
  {
    // See if we can append this new xref item to the previous one.
    // We know this at the start of the next item of the same
    // type and need to remember this until the end of that item.
    switch(xrefKind)
    {
      case XRef_Todo:
	addXRefItem("todo",
	            theTranslator->trTodo(),
	            theTranslator->trTodoList(),
		    xrefAppendToPrev
		   );
	break;
      case XRef_Test:
	addXRefItem("test",
	            theTranslator->trTest(),
		    theTranslator->trTestList(),
		    xrefAppendToPrev
		   );
	break;
      case XRef_Bug:
	addXRefItem("bug",
	            theTranslator->trBug(),
		    theTranslator->trBugList(),
		    xrefAppendToPrev
		   );
	break;
      case XRef_Deprecated:
	addXRefItem("deprecated",
	            theTranslator->trDeprecated(),
		    theTranslator->trDeprecatedList(),
		    xrefAppendToPrev
		   );
	break;
      case XRef_Item:  // user defined list
	addXRefItem(xrefItemKey,
	            xrefItemTitle,
		    xrefListTitle,
		    xrefAppendToPrev
		   );
	break;
      case XRef_None:
	ASSERT(0);
	break;
    }
  }
  xrefItemKey = newXRefItemKey;

  int oldContext = inContext;
  inContext = ctx;
  if (inContext!=OutputXRef && inBody) inContext=OutputInbody;
  switch(inContext)
  {
    case OutputDoc:
      if (oldContext!=inContext)
      {
        stripTrailingWhiteSpace(current->doc);
        if (current->docFile.isEmpty())
        {
          current->docFile = yyFileName;
          current->docLine = yyLineNr;
        }
      }
      pOutputString = &current->doc;
      break;
    case OutputBrief:
      if (oldContext!=inContext)
      {
	if (current->briefFile.isEmpty())
	{
	  current->briefFile = yyFileName;
	  current->briefLine = yyLineNr;
	}
      }
      if (current->brief.stripWhiteSpace().isEmpty()) // we only want one brief
	                                              // description even if multiple
	                                              // are given...
      {
        pOutputString = &current->brief;
      }
      else
      {
        pOutputString = &current->doc;
      }
      break;
    case OutputXRef:
      pOutputString = &outputXRef;
      // first item found, so can't append to previous
      //xrefAppendFlag = FALSE;
      break;
    case OutputInbody:
      pOutputString = &current->inbodyDocs;
      break;
  }
}

// add a string to the output
static inline void addOutput(const char *s)
{
  *pOutputString+=s;
}

// add a character to the output
static inline void addOutput(char c)
{
  *pOutputString+=c;
}

static void endBrief(bool addToOutput=TRUE)
{
  if (!current->brief.stripWhiteSpace().isEmpty())
  { // only go to the detailed description if we have
    // found some brief description and not just whitespace
    briefEndsAtDot=FALSE;
    setOutput(OutputDoc);
    if (addToOutput) addOutput(commentScanYYtext);
  }
}

/* ----------------------------------------------------------------- */
#undef	YY_INPUT
#define	YY_INPUT(buf,result,max_size) result=yyread(buf,max_size);

static int prevPosition=0;

static int yyread(char *buf,int max_size)
{
    prevPosition=inputPosition;
    int c=0;
    while( c < max_size && inputString[inputPosition] )
    {
	*buf = inputString[inputPosition++] ;
	//printf("%d (%c)\n",*buf,*buf);
	c++; buf++;
    }
    return c;
}

/* start command character */
/* comment parsing states. */






































#line 3412 "<stdout>"

#define INITIAL 0
#define Comment 1
#define PageDocArg1 2
#define PageDocArg2 3
#define RelatesParam1 4
#define ClassDocArg1 5
#define ClassDocArg2 6
#define ClassDocArg3 7
#define CategoryDocArg1 8
#define XRefItemParam1 9
#define XRefItemParam2 10
#define XRefItemParam3 11
#define FileDocArg1 12
#define EnumDocArg1 13
#define NameSpaceDocArg1 14
#define PackageDocArg1 15
#define GroupDocArg1 16
#define GroupDocArg2 17
#define SectionLabel 18
#define SectionTitle 19
#define SubpageLabel 20
#define SubpageTitle 21
#define FormatBlock 22
#define LineParam 23
#define GuardParam 24
#define GuardParamEnd 25
#define SkipGuardedSection 26
#define SkipInternal 27
#define NameParam 28
#define InGroupParam 29
#define FnParam 30
#define OverloadParam 31
#define InheritParam 32
#define ExtendsParam 33
#define ReadFormulaShort 34
#define ReadFormulaLong 35
#define AnchorLabel 36
#define HtmlComment 37
#define SkipLang 38

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

static int yy_init_globals (void );

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int commentScanYYlex_destroy (void );

int commentScanYYget_debug (void );

void commentScanYYset_debug (int debug_flag  );

YY_EXTRA_TYPE commentScanYYget_extra (void );

void commentScanYYset_extra (YY_EXTRA_TYPE user_defined  );

FILE *commentScanYYget_in (void );

void commentScanYYset_in  (FILE * in_str  );

FILE *commentScanYYget_out (void );

void commentScanYYset_out  (FILE * out_str  );

yy_size_t commentScanYYget_leng (void );

char *commentScanYYget_text (void );

int commentScanYYget_lineno (void );

void commentScanYYset_lineno (int line_number  );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int commentScanYYwrap (void );
#else
extern int commentScanYYwrap (void );
#endif
#endif

    static void yyunput (int c,char *buf_ptr  );
    
#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT

#ifdef __cplusplus
static int yyinput (void );
#else
static int input (void );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 262144
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO fwrite( commentScanYYtext, commentScanYYleng, 1, commentScanYYout )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		yy_size_t n; \
		for ( n = 0; n < max_size && \
			     (c = getc( commentScanYYin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( commentScanYYin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = fread(buf, 1, max_size, commentScanYYin))==0 && ferror(commentScanYYin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(commentScanYYin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int commentScanYYlex (void);

#define YY_DECL int commentScanYYlex (void)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after commentScanYYtext and commentScanYYleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	if ( commentScanYYleng > 0 ) \
		YY_CURRENT_BUFFER_LVALUE->yy_at_bol = \
				(commentScanYYtext[commentScanYYleng - 1] == '\n'); \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    
#line 864 "commentscan.l"


  /* What can happen in while parsing a comment block:
   *   commands (e.g. @page, or \page)
   *   escaped commands (e.g. @@page or \\page).
   *   formulas (e.g. \f$ \f[ \f{..)
   *   directories (e.g. \doxygen\src\)
   *   autolist end. (e.g. a dot on an otherwise empty line)
   *   newlines.
   *   end of brief description due to blank line.
   *   end of brief description due to some command (@command, or <command>).
   *   words and whitespace and other characters (#,?!, etc).
   *   grouping commands (e.g. @{ and @})
   *   language switch (e.g. \~english or \~).
   *   mail adress (e.g. dimitri@stack.nl).
   *   quoted text, such as "foo@bar"
   *   XML commands, <summary></summary><remarks></remarks>
   */

#line 3655 "<stdout>"

	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

        /* Create the reject buffer large enough to save one state per allowed character. */
        if ( ! (yy_state_buf) )
            (yy_state_buf) = (yy_state_type *)commentScanYYalloc(YY_STATE_BUF_SIZE  );
            if ( ! (yy_state_buf) )
                YY_FATAL_ERROR( "out of dynamic memory in commentScanYYlex()" );

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! commentScanYYin )
			commentScanYYin = stdin;

		if ( ! commentScanYYout )
			commentScanYYout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			commentScanYYensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				commentScanYY_create_buffer(commentScanYYin,YY_BUF_SIZE );
		}

		commentScanYY_load_buffer_state( );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of commentScanYYtext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
		yy_current_state += YY_AT_BOL();

		(yy_state_ptr) = (yy_state_buf);
		*(yy_state_ptr)++ = yy_current_state;

yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 1025 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			*(yy_state_ptr)++ = yy_current_state;
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 7407 );

yy_find_action:
		yy_current_state = *--(yy_state_ptr);
		(yy_lp) = yy_accept[yy_current_state];
goto find_rule; /* Shut up GCC warning -Wall */
find_rule: /* we branch to this label when backing up */
		for ( ; ; ) /* until we find what rule we matched */
			{
			if ( (yy_lp) && (yy_lp) < yy_accept[yy_current_state + 1] )
				{
				yy_act = yy_acclist[(yy_lp)];
				if ( yy_act & YY_TRAILING_HEAD_MASK ||
				     (yy_looking_for_trail_begin) )
					{
					if ( yy_act == (yy_looking_for_trail_begin) )
						{
						(yy_looking_for_trail_begin) = 0;
						yy_act &= ~YY_TRAILING_HEAD_MASK;
						break;
						}
					}
				else if ( yy_act & YY_TRAILING_MASK )
					{
					(yy_looking_for_trail_begin) = yy_act & ~YY_TRAILING_MASK;
					(yy_looking_for_trail_begin) |= YY_TRAILING_HEAD_MASK;
					(yy_full_match) = yy_cp;
					(yy_full_state) = (yy_state_ptr);
					(yy_full_lp) = (yy_lp);
					}
				else
					{
					(yy_full_match) = yy_cp;
					(yy_full_state) = (yy_state_ptr);
					(yy_full_lp) = (yy_lp);
					break;
					}
				++(yy_lp);
				goto find_rule;
				}
			--yy_cp;
			yy_current_state = *--(yy_state_ptr);
			(yy_lp) = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
case 1:
YY_RULE_SETUP
#line 883 "commentscan.l"
{ // escaped command
  					  addOutput(commentScanYYtext);
  					}
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 886 "commentscan.l"
{ // escaped command
  					  addOutput(commentScanYYtext);
  					}
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 889 "commentscan.l"
{ // mail adress
  					  addOutput(commentScanYYtext);
  					}
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 892 "commentscan.l"
{ // quoted text
                                          addOutput(commentScanYYtext);
  					}
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 895 "commentscan.l"
{ // directory (or chain of commands!)
  					  addOutput(commentScanYYtext);
  					}
	YY_BREAK
case 6:
/* rule 6 can match eol */
YY_RULE_SETUP
#line 898 "commentscan.l"
{ // xref command 
					  if (inContext!=OutputXRef) 
					  {
					    briefEndsAtDot=FALSE;
					    setOutput(OutputDoc);
					  }
					  // continue with the same input
                                          REJECT;
					}
	YY_BREAK
/*
<Comment>{DETAILEDCMD}/[^a-z_A-Z]*	{ // command that can end a brief description
				          briefEndsAtDot=FALSE;
				          setOutput(OutputDoc);
					  // continue with the same input
                                          REJECT;
					}
   */
case 7:
YY_RULE_SETUP
#line 915 "commentscan.l"
{ // HTML command that ends a brief description
					  setOutput(OutputDoc);
					  // continue with the same input
                                          REJECT;
					}
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 920 "commentscan.l"
{ // start of a .NET XML style brief description
					  setOutput(OutputBrief);
  					}
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 923 "commentscan.l"
{ // start of a .NET XML style detailed description
					  setOutput(OutputDoc);
  					}
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 926 "commentscan.l"
{ // end of a brief or detailed description
  					}
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 928 "commentscan.l"
{ // RCS tag which end a brief description
  					  setOutput(OutputDoc);
					  REJECT;
  					}
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 932 "commentscan.l"
{ 
  					  BEGIN(HtmlComment);
					}
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 935 "commentscan.l"
{ // potentially interesting command
                                          // the {B}* in the front was added for bug620924
  					  QCString cmdName = QCString(commentScanYYtext).stripWhiteSpace().data()+1;
					  DocCmdMapper::Cmd *cmdPtr = DocCmdMapper::map(cmdName);
					  if (cmdPtr) // special action is required
					  {
					    if (cmdPtr->endsBrief)
					    { 
					      briefEndsAtDot=FALSE;
					      // this command forces the end of brief description
					      setOutput(OutputDoc);
					    }
					    if (cmdPtr->func && cmdPtr->func(cmdName))
					    {
					      // implicit split of the comment block into two
					      // entries. Restart the next block at the start
					      // of this command.
					      parseMore=TRUE;

					      // yuk, this is probably not very portable across lex implementations, 
					      // but we need to know the position in the input buffer where this 
					      // rule matched.
					      // for flex 2.5.33+ we should use YY_CURRENT_BUFFER_LVALUE
#if YY_FLEX_MINOR_VERSION>=5 && YY_FLEX_SUBMINOR_VERSION>=33
					      inputPosition=prevPosition + yy_bp - YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
#else
					      inputPosition=prevPosition + yy_bp - yy_current_buffer->yy_ch_buf;
#endif
					      yyterminate();
					    }
					    else if (cmdPtr->func==0)
					    {
					      // command without handler, to be processed
					      // later by parsedoc.cpp
					      addOutput(commentScanYYtext);
					    }
					  }
					  else // command not relevant
					  {
					    addOutput(commentScanYYtext);
					  }
  					}
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 977 "commentscan.l"
{ // escaped formula command
  					  addOutput(commentScanYYtext);
  					}
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 980 "commentscan.l"
{ // language switch command
                                          QCString langId = QString(commentScanYYtext).stripWhiteSpace().data()+2;
			       	          if (!langId.isEmpty() &&
					      stricmp(Config_getEnum("OUTPUT_LANGUAGE"),langId)!=0)
				          { // enable language specific section
				            BEGIN(SkipLang);
				          }
  					}
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 988 "commentscan.l"
{ // start of a formula with custom environment
					  formulaText="\\begin";
					  formulaEnv=QString(commentScanYYtext).stripWhiteSpace().data()+2;
					  if (formulaEnv.at(formulaEnv.length()-1)=='{')
					  {
					    // remove trailing open brace
					    formulaEnv=formulaEnv.left(formulaEnv.length()-1);
					  }
					  formulaText+=formulaEnv;
					  formulaNewLines=0;
					  BEGIN(ReadFormulaLong);
  					}
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 1000 "commentscan.l"
{ // start of a inline formula
					  formulaText="$";
					  formulaNewLines=0;
					  BEGIN(ReadFormulaShort);
  					}
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 1005 "commentscan.l"
{ // start of a block formula
					  formulaText="\\[";
					  formulaNewLines=0;
					  BEGIN(ReadFormulaLong);
  					}
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 1010 "commentscan.l"
{ // begin of a group
                                          //langParser->handleGroupStartCommand(g_memberGroupHeader);
                                          openGroup(current,yyFileName,yyLineNr);
                                        }
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 1014 "commentscan.l"
{ // end of a group
                                          //langParser->handleGroupEndCommand();
                                          closeGroup(current,yyFileName,yyLineNr,TRUE);
                                          g_memberGroupHeader.resize(0);
					  parseMore=TRUE;
                                          needNewEntry = TRUE;
#if YY_FLEX_MINOR_VERSION>=5 && YY_FLEX_SUBMINOR_VERSION>=33
				          inputPosition=prevPosition + yy_bp - YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + strlen(commentScanYYtext);
#else
				          inputPosition=prevPosition + yy_bp - yy_current_buffer->yy_ch_buf + strlen(commentScanYYtext);
#endif
					  yyterminate();
                                        }
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 1027 "commentscan.l"
{ // escaped character
  					  addOutput(commentScanYYtext);
  					}
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 1030 "commentscan.l"
{ // normal word
					  addOutput(commentScanYYtext);
  					}
	YY_BREAK
case 23:
/* rule 23 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up commentScanYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up commentScanYYtext again */
YY_RULE_SETUP
#line 1033 "commentscan.l"
{ // explicit end autolist: e.g "  ."
  				          addOutput(commentScanYYtext); 
					}
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 1036 "commentscan.l"
{ // . at start or in the middle of a word, or ellipsis
  					  addOutput(commentScanYYtext);
  					}
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 1039 "commentscan.l"
{ // . with escaped space.
  					  addOutput(commentScanYYtext[0]);
  					  addOutput(commentScanYYtext[2]);
  					}
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 1043 "commentscan.l"
{ // . with comma such as "e.g.," 
  					  addOutput(commentScanYYtext);
  					}
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 1046 "commentscan.l"
{ // ellipsis with escaped space.
  					  addOutput("... ");
  					}
	YY_BREAK
case 28:
*yy_cp = (yy_hold_char); /* undo effects of setting up commentScanYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up commentScanYYtext again */
YY_RULE_SETUP
#line 1049 "commentscan.l"
{ // internal ellipsis 
  					  addOutput(commentScanYYtext);
  					}
	YY_BREAK
case 29:
/* rule 29 can match eol */
YY_RULE_SETUP
#line 1052 "commentscan.l"
{ // at least one blank line (or blank line command)
					  if (inContext==OutputXRef)
					  {
					    // see bug 613024, we need to put the newlines after ending the XRef section.
					    setOutput(OutputDoc);
  					    addOutput("\n\n");
					  }
					  else if (inContext!=OutputBrief)
					  {
  					    addOutput("\n\n");
					    setOutput(OutputDoc);
					  }
					  else // inContext==OutputBrief
					  { // only go to the detailed description if we have
					    // found some brief description and not just whitespace
					    endBrief(FALSE);
					  }
  					  lineCount();
  					}
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 1071 "commentscan.l"
{ // potential end of a JavaDoc style comment
  					  addOutput(*commentScanYYtext);
  					  if (briefEndsAtDot)
					  {
					    setOutput(OutputDoc);
					    briefEndsAtDot=FALSE;
					  }
  					}
	YY_BREAK
case 31:
/* rule 31 can match eol */
YY_RULE_SETUP
#line 1079 "commentscan.l"
{ // newline
  					  addOutput(*commentScanYYtext);
  					  yyLineNr++;
  					}
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 1083 "commentscan.l"
{ // catch-all for anything else
  					  addOutput(*commentScanYYtext);
  					}
	YY_BREAK
/* --------------   Rules for handling HTML comments ----------- */
case 33:
YY_RULE_SETUP
#line 1090 "commentscan.l"
{ BEGIN( Comment ); }
	YY_BREAK
case 34:
/* rule 34 can match eol */
YY_RULE_SETUP
#line 1091 "commentscan.l"
{ 
  					  if (*commentScanYYtext=='\n') yyLineNr++;
  					}
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 1094 "commentscan.l"
{ // ignore unimportant characters
  					}
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 1096 "commentscan.l"
{ // ignore every else
  					}
	YY_BREAK
/* --------------   Rules for handling formulas ---------------- */
case 37:
YY_RULE_SETUP
#line 1101 "commentscan.l"
{ // end of inline formula
  					  formulaText+="$";
					  addOutput(" "+addFormula());
					  BEGIN(Comment);
  					}
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 1106 "commentscan.l"
{ // end of block formula
					  formulaText+="\\]";
					  addOutput(" "+addFormula());
					  BEGIN(Comment);
  					}
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 1111 "commentscan.l"
{ // end of custom env formula
					  formulaText+="\\end";
					  formulaText+=formulaEnv;
					  addOutput(" "+addFormula());
					  BEGIN(Comment);
  					}
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 1117 "commentscan.l"
{ // any non-special character
                                          formulaText+=commentScanYYtext; 
 					} 
	YY_BREAK
case 41:
/* rule 41 can match eol */
YY_RULE_SETUP
#line 1120 "commentscan.l"
{ // new line
                                          formulaNewLines++;
                                          formulaText+=*commentScanYYtext; 
					  yyLineNr++; 
					}
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 1125 "commentscan.l"
{ // any othe character
                                          formulaText+=*commentScanYYtext; 
					}
	YY_BREAK
/* ------------ handle argument of enum command --------------- */
case 43:
/* rule 43 can match eol */
YY_RULE_SETUP
#line 1131 "commentscan.l"
{ // handle argument
  					  current->name = commentScanYYtext;
					  BEGIN( Comment );
  					}
	YY_BREAK
case 44:
/* rule 44 can match eol */
YY_RULE_SETUP
#line 1135 "commentscan.l"
{ // line continuation
  					  yyLineNr++;
					  addOutput('\n');
                                        }
	YY_BREAK
case 45:
/* rule 45 can match eol */
YY_RULE_SETUP
#line 1139 "commentscan.l"
{ // missing argument
  					  warn(yyFileName,yyLineNr,
                                               "warning: missing argument after \\enum."
                                              );
					  addOutput('\n');
  					  if (*commentScanYYtext=='\n') yyLineNr++;
					  BEGIN( Comment );
  					}
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 1147 "commentscan.l"
{ // ignore other stuff
  					}
	YY_BREAK
/* ------------ handle argument of namespace command --------------- */
case 47:
/* rule 47 can match eol */
YY_RULE_SETUP
#line 1152 "commentscan.l"
{ // handle argument
  					  current->name = substitute(commentScanYYtext,".","::");
					  BEGIN( Comment );
  					}
	YY_BREAK
case 48:
/* rule 48 can match eol */
YY_RULE_SETUP
#line 1156 "commentscan.l"
{ // line continuation
                                          yyLineNr++; 
					  addOutput('\n');
                                        }
	YY_BREAK
case 49:
/* rule 49 can match eol */
YY_RULE_SETUP
#line 1160 "commentscan.l"
{ // missing argument
  					  warn(yyFileName,yyLineNr,
                                               "warning: missing argument after "
					       "\\namespace."
                                              );
					  addOutput('\n');
  					  if (*commentScanYYtext=='\n') yyLineNr++;
					  BEGIN( Comment );
  					}
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 1169 "commentscan.l"
{ // ignore other stuff
  					}
	YY_BREAK
/* ------------ handle argument of package command --------------- */
case 51:
YY_RULE_SETUP
#line 1174 "commentscan.l"
{ // handle argument
  					  current->name = commentScanYYtext;
					  BEGIN( Comment );
  					}
	YY_BREAK
case 52:
/* rule 52 can match eol */
YY_RULE_SETUP
#line 1178 "commentscan.l"
{ // line continuation 
                                          yyLineNr++; 
					  addOutput('\n');
                                        }
	YY_BREAK
case 53:
/* rule 53 can match eol */
YY_RULE_SETUP
#line 1182 "commentscan.l"
{ // missing argument
  					  warn(yyFileName,yyLineNr,
                                               "warning: missing argument after "
					       "\\package."
                                              );
					  addOutput('\n');
  					  if (*commentScanYYtext=='\n') yyLineNr++;
					  BEGIN( Comment );
  					}
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 1191 "commentscan.l"
{ // ignore other stuff
  					}
	YY_BREAK
/* ------ handle argument of class/struct/union command --------------- */
case 55:
/* rule 55 can match eol */
YY_RULE_SETUP
#line 1196 "commentscan.l"
{ // first argument
  					  current->name = substitute(commentScanYYtext,".","::");
					  if (current->section==Entry::PROTOCOLDOC_SEC)
					  {
					    current->name+="-p";
					  }
					  // prepend outer scope name 
					  BEGIN( ClassDocArg2 );
					}
	YY_BREAK
case 56:
/* rule 56 can match eol */
YY_RULE_SETUP
#line 1205 "commentscan.l"
{
  					  current->name = substitute(commentScanYYtext,".","::");
					  BEGIN( ClassDocArg2 );
   					}
	YY_BREAK
case 57:
/* rule 57 can match eol */
YY_RULE_SETUP
#line 1209 "commentscan.l"
{ // line continuation
                                          yyLineNr++; 
					  addOutput('\n');
                                        }
	YY_BREAK
case 58:
/* rule 58 can match eol */
YY_RULE_SETUP
#line 1213 "commentscan.l"
{
  					  warn(yyFileName,yyLineNr,
                                               "warning: missing argument after "
					       "\\%s.",YY_START==ClassDocArg1?"class":"category"
                                              );
					  addOutput('\n');
  					  if (*commentScanYYtext=='\n') yyLineNr++;
					  BEGIN( Comment );
  					}
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 1222 "commentscan.l"
{ // ignore other stuff
  					}
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 1225 "commentscan.l"
{ // second argument; include file
					  current->includeFile = commentScanYYtext;
					  BEGIN( ClassDocArg3 );
					}
	YY_BREAK
case 61:
/* rule 61 can match eol */
YY_RULE_SETUP
#line 1229 "commentscan.l"
{ // line continuation
                                          yyLineNr++; 
					  addOutput('\n');
                                        }
	YY_BREAK
case 62:
/* rule 62 can match eol */
YY_RULE_SETUP
#line 1233 "commentscan.l"
{ 
					  addOutput('\n');
  					  if (*commentScanYYtext=='\n') yyLineNr++;
					  BEGIN( Comment );
					}
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 1238 "commentscan.l"
{ // ignore other stuff
  					}
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 1241 "commentscan.l"
{ // third argument; include file name
 					  current->includeName = commentScanYYtext;
					  BEGIN( Comment );
					}
	YY_BREAK
case 65:
/* rule 65 can match eol */
YY_RULE_SETUP
#line 1245 "commentscan.l"
{ // line continuation
                                          yyLineNr++;
					  addOutput('\n');
                                        }
	YY_BREAK
case 66:
/* rule 66 can match eol */
YY_RULE_SETUP
#line 1249 "commentscan.l"
{ 
  					  if (*commentScanYYtext=='\n') yyLineNr++;
  					  BEGIN( Comment );
					}
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 1253 "commentscan.l"
{ // ignore other stuff
  					}
	YY_BREAK
/* --------- handle arguments of {def,add,weak}group commands --------- */
case 68:
YY_RULE_SETUP
#line 1258 "commentscan.l"
{ // group name
  					  current->name = commentScanYYtext;
					  //lastDefGroup.groupname = commentScanYYtext;
					  //lastDefGroup.pri = current->groupingPri();
  					  // the .html stuff is for Qt compatibility
					  if (current->name.right(5)==".html") 
					  {
					    current->name=current->name.left(current->name.length()-5);
					  }
					  current->type.resize(0);
					  BEGIN(GroupDocArg2);
  					}
	YY_BREAK
case 69:
/* rule 69 can match eol */
YY_RULE_SETUP
#line 1270 "commentscan.l"
{ // line continuation
  					  yyLineNr++; 
					  addOutput('\n');
                                        }
	YY_BREAK
case 70:
/* rule 70 can match eol */
YY_RULE_SETUP
#line 1274 "commentscan.l"
{ // missing argument!
  					  warn(yyFileName,yyLineNr,
                                               "warning: missing group name after %s",
					       current->groupDocCmd()
                                              );
					  addOutput('\n');
  					  if (*commentScanYYtext=='\n') yyLineNr++;
					  BEGIN( Comment );
  					}
	YY_BREAK
case 71:
/* rule 71 can match eol */
YY_RULE_SETUP
#line 1283 "commentscan.l"
{ // line continuation
  					  yyLineNr++; 
					  addOutput('\n');
                                        }
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 1287 "commentscan.l"
{ // title (stored in type)
					  current->type += commentScanYYtext;
					  current->type = current->type.stripWhiteSpace();
  					}
	YY_BREAK
case 73:
/* rule 73 can match eol */
YY_RULE_SETUP
#line 1291 "commentscan.l"
{
                                          if ( current->groupDocType==Entry::GROUPDOC_NORMAL &&
                                               current->type.isEmpty() 
					     ) // defgroup requires second argument
					  {
  					    warn(yyFileName,yyLineNr,
                                                 "warning: missing title after "
					         "\\defgroup %s", current->name.data()
                                                );
					  }
  					  if (*commentScanYYtext=='\n') yyLineNr++; 
					  addOutput('\n');
					  BEGIN( Comment );
  					}
	YY_BREAK
/* --------- handle arguments of page/mainpage command ------------------- */
case 74:
YY_RULE_SETUP
#line 1308 "commentscan.l"
{ // first argument; page name
					  current->name = stripQuotes(commentScanYYtext);
					  BEGIN( PageDocArg2 ); 
					}
	YY_BREAK
case 75:
/* rule 75 can match eol */
YY_RULE_SETUP
#line 1312 "commentscan.l"
{ yyLineNr++; 
					  addOutput('\n');
                                        }
	YY_BREAK
case 76:
/* rule 76 can match eol */
YY_RULE_SETUP
#line 1315 "commentscan.l"
{
  					  warn(yyFileName,yyLineNr,
                                               "warning: missing argument after "
					       "\\page."
                                              );
  					  if (*commentScanYYtext=='\n') yyLineNr++;
					  addOutput('\n');
					  BEGIN( Comment );
  					}
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 1324 "commentscan.l"
{ // ignore other stuff
  					}
	YY_BREAK
case 78:
/* rule 78 can match eol */
YY_RULE_SETUP
#line 1326 "commentscan.l"
{ // second argument; page title
  				          yyLineNr++;
					  current->args = commentScanYYtext;
					  addOutput('\n');
					  BEGIN( Comment );
					}
	YY_BREAK
/* --------- handle arguments of the file/dir/example command ------------ */
case 79:
/* rule 79 can match eol */
YY_RULE_SETUP
#line 1335 "commentscan.l"
{ // no file name specfied
  					  if (*commentScanYYtext=='\n') yyLineNr++;
					  addOutput('\n');
					  BEGIN( Comment );
					}
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 1340 "commentscan.l"
{ // first argument; name
  					  current->name = stripQuotes(commentScanYYtext);
					  BEGIN( Comment );
  				        }
	YY_BREAK
case 81:
/* rule 81 can match eol */
YY_RULE_SETUP
#line 1344 "commentscan.l"
{ yyLineNr++; 
					  addOutput('\n');
                                        }
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 1347 "commentscan.l"
{ // ignore other stuff
  					}
	YY_BREAK
/* --------- handle arguments of the xrefitem command ------------ */
case 83:
YY_RULE_SETUP
#line 1352 "commentscan.l"
{ // first argument
  					  newXRefItemKey=commentScanYYtext;
                                          setOutput(OutputXRef);
					  BEGIN(XRefItemParam2);
					}
	YY_BREAK
case 84:
/* rule 84 can match eol */
YY_RULE_SETUP
#line 1357 "commentscan.l"
{ // line continuation
                                          yyLineNr++; 
					  addOutput('\n');
                                        }
	YY_BREAK
case 85:
/* rule 85 can match eol */
YY_RULE_SETUP
#line 1361 "commentscan.l"
{ // missing arguments
  					  warn(yyFileName,yyLineNr,
					       "warning: Missing first argument of \\xrefitem"
					      );
  					  if (*commentScanYYtext=='\n') yyLineNr++;
					  addOutput('\n');
					  inContext = OutputDoc;
					  BEGIN( Comment );
  					}
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 1370 "commentscan.l"
{ // ignore other stuff 
  					}
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 1373 "commentscan.l"
{ // second argument
  					  xrefItemTitle = stripQuotes(commentScanYYtext);
					  BEGIN(XRefItemParam3);
  					}
	YY_BREAK
case 88:
/* rule 88 can match eol */
YY_RULE_SETUP
#line 1377 "commentscan.l"
{ // line continuation
                                          yyLineNr++; 
					  addOutput('\n');
  					}
	YY_BREAK
case 89:
/* rule 89 can match eol */
YY_RULE_SETUP
#line 1381 "commentscan.l"
{ // missing argument
  					  warn(yyFileName,yyLineNr,
					      "warning: Missing second argument of \\xrefitem"
					      );
  					  if (*commentScanYYtext=='\n') yyLineNr++;
					  addOutput('\n');
					  inContext = OutputDoc;
					  BEGIN( Comment );
  					}
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 1390 "commentscan.l"
{ // ignore other stuff
  					}
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 1393 "commentscan.l"
{ // third argument
  					  xrefListTitle = stripQuotes(commentScanYYtext);
                                          xrefKind = XRef_Item;
					  BEGIN( Comment );
  					}
	YY_BREAK
case 92:
/* rule 92 can match eol */
YY_RULE_SETUP
#line 1398 "commentscan.l"
{ // line continuation
                                          yyLineNr++; 
					  addOutput('\n');
  					}
	YY_BREAK
case 93:
/* rule 93 can match eol */
YY_RULE_SETUP
#line 1402 "commentscan.l"
{ // missing argument
  					  warn(yyFileName,yyLineNr,
					      "warning: Missing third argument of \\xrefitem"
					      );
  					  if (*commentScanYYtext=='\n') yyLineNr++;
					  addOutput('\n');
					  inContext = OutputDoc;
					  BEGIN( Comment );
  					}
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 1411 "commentscan.l"
{ // ignore other stuff
  					}
	YY_BREAK
/* ----- handle arguments of the relates(also)/memberof command ------- */
case 95:
YY_RULE_SETUP
#line 1417 "commentscan.l"
{ // argument
  					  current->relates = commentScanYYtext;
                                          //if (current->mGrpId!=DOX_NOGROUP) 
                                          //{
                                          //  memberGroupRelates = commentScanYYtext;
                                          //}
					  BEGIN( Comment );
					}
	YY_BREAK
case 96:
/* rule 96 can match eol */
YY_RULE_SETUP
#line 1425 "commentscan.l"
{ // line continuation
                                          yyLineNr++; 
					  addOutput('\n');
  					}
	YY_BREAK
case 97:
/* rule 97 can match eol */
YY_RULE_SETUP
#line 1429 "commentscan.l"
{ // missing argument
  					  warn(yyFileName,yyLineNr,
					      "warning: Missing argument of \\relates or \\memberof command"
					      );
  					  if (*commentScanYYtext=='\n') yyLineNr++;
					  addOutput('\n');
					  BEGIN( Comment );
  					}
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 1437 "commentscan.l"
{ // ignore other stuff
  					}
	YY_BREAK
/* ----- handle arguments of the relates(also)/addindex commands ----- */
case 99:
/* rule 99 can match eol */
YY_RULE_SETUP
#line 1443 "commentscan.l"
{ // end of argument
  					  if (*commentScanYYtext=='\n') yyLineNr++;
					  addOutput('\n');
					  BEGIN( Comment );
  					}
	YY_BREAK
case 100:
/* rule 100 can match eol */
YY_RULE_SETUP
#line 1448 "commentscan.l"
{ // line continuation
                                          yyLineNr++; 
					  addOutput('\n');
  					}
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 1452 "commentscan.l"
{ // ignore other stuff
  					  addOutput(*commentScanYYtext);
  					}
	YY_BREAK
/* ----- handle arguments of the section/subsection/.. commands ------- */
case 102:
YY_RULE_SETUP
#line 1458 "commentscan.l"
{ // first argyment
  					  sectionLabel=commentScanYYtext;
                                          addOutput(commentScanYYtext);
					  sectionTitle.resize(0);
					  BEGIN(SectionTitle);
  					}
	YY_BREAK
case 103:
/* rule 103 can match eol */
YY_RULE_SETUP
#line 1464 "commentscan.l"
{ // missing argument
  					  warn(yyFileName,yyLineNr,
					      "warning: \\section command has no label"
					      );
  					  if (*commentScanYYtext=='\n') yyLineNr++;
					  addOutput('\n');
					  BEGIN( Comment );
  					}
	YY_BREAK
case 104:
YY_RULE_SETUP
#line 1472 "commentscan.l"
{ // invalid character for section label
  					  warn(yyFileName,yyLineNr,
					      "warning: Invalid or missing section label"
					      );
					  BEGIN(Comment);
  					}
	YY_BREAK
case 105:
/* rule 105 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up commentScanYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up commentScanYYtext again */
YY_RULE_SETUP
#line 1479 "commentscan.l"
{ // end of section title
  					  addSection();
                                          addOutput(commentScanYYtext);
					  BEGIN( Comment );
  					}
	YY_BREAK
case 106:
*yy_cp = (yy_hold_char); /* undo effects of setting up commentScanYYtext */
(yy_c_buf_p) = yy_cp -= 8;
YY_DO_BEFORE_ACTION; /* set up commentScanYYtext again */
YY_RULE_SETUP
#line 1484 "commentscan.l"
{ // end of section title
  					  addSection();
                                          addOutput(commentScanYYtext);
					  BEGIN( Comment );
  					}
	YY_BREAK
case 107:
/* rule 107 can match eol */
YY_RULE_SETUP
#line 1489 "commentscan.l"
{ // line continuation
                                          yyLineNr++; 
					  addOutput('\n');
  					}
	YY_BREAK
case 108:
YY_RULE_SETUP
#line 1493 "commentscan.l"
{ // any character without special meaning
  					  sectionTitle+=commentScanYYtext;
					  addOutput(commentScanYYtext);
  					}
	YY_BREAK
case 109:
YY_RULE_SETUP
#line 1497 "commentscan.l"
{ // unescape escaped command
  					  sectionTitle+=&commentScanYYtext[1];
					  addOutput(commentScanYYtext);
  					}
	YY_BREAK
case 110:
YY_RULE_SETUP
#line 1501 "commentscan.l"
{ // unescape escaped character
  					  sectionTitle+=commentScanYYtext[1];
  					  addOutput(commentScanYYtext);
  					}
	YY_BREAK
case 111:
YY_RULE_SETUP
#line 1505 "commentscan.l"
{ // anything else
  					  sectionTitle+=commentScanYYtext;
					  addOutput(*commentScanYYtext);
  					}
	YY_BREAK
/* ----- handle arguments of the subpage command ------- */
case 112:
YY_RULE_SETUP
#line 1512 "commentscan.l"
{ // first argument
                                          addOutput(commentScanYYtext);
					  // we add subpage labels as a kind of "inheritance" relation to prevent
					  // needing to add another list to the Entry class.
					  current->extends->append(new BaseInfo(commentScanYYtext,Public,Normal));
					  BEGIN(SubpageTitle);
  					}
	YY_BREAK
case 113:
/* rule 113 can match eol */
YY_RULE_SETUP
#line 1519 "commentscan.l"
{ // missing argument
  					  warn(yyFileName,yyLineNr,
					      "warning: \\subpage command has no label"
					      );
  					  if (*commentScanYYtext=='\n') yyLineNr++;
					  addOutput('\n');
					  BEGIN( Comment );
  					}
	YY_BREAK
case 114:
/* rule 114 can match eol */
YY_RULE_SETUP
#line 1527 "commentscan.l"
{ // no title, end command
  					  addOutput(commentScanYYtext);
					  BEGIN( Comment );
  					}
	YY_BREAK
case 115:
YY_RULE_SETUP
#line 1531 "commentscan.l"
{ // add title, end of command
  					  addOutput(commentScanYYtext);
					  BEGIN( Comment );
  					}
	YY_BREAK
case 116:
YY_RULE_SETUP
#line 1535 "commentscan.l"
{ // no title, end of command
  					  unput(*commentScanYYtext);
					  BEGIN( Comment );
  					}
	YY_BREAK
/* ----- handle arguments of the anchor command ------- */
case 117:
YY_RULE_SETUP
#line 1542 "commentscan.l"
{ // found argument
                                          SectionInfo  *si = new SectionInfo(yyFileName,commentScanYYtext,0,SectionInfo::Anchor);
                                          Doxygen::sectionDict.insert(commentScanYYtext,si);
  					  current->anchors->append(si);
					  addOutput(commentScanYYtext);
					  BEGIN( Comment );
  					}
	YY_BREAK
case 118:
/* rule 118 can match eol */
YY_RULE_SETUP
#line 1549 "commentscan.l"
{ // missing argument
  					  warn(yyFileName,yyLineNr,
					      "warning: \\anchor command has no label"
					      );
  					  if (*commentScanYYtext=='\n') yyLineNr++;
					  addOutput('\n');
					  BEGIN( Comment );
  					}
	YY_BREAK
case 119:
YY_RULE_SETUP
#line 1557 "commentscan.l"
{ // invalid character for anchor label
  					  warn(yyFileName,yyLineNr,
					      "warning: Invalid or missing anchor label"
					      );
					  BEGIN(Comment);
  					}
	YY_BREAK
/* ----- handle arguments of the preformatted block commands ------- */
case 120:
/* rule 120 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up commentScanYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up commentScanYYtext again */
YY_RULE_SETUP
#line 1567 "commentscan.l"
{ // possible ends
  					  addOutput(commentScanYYtext);
					  if (&commentScanYYtext[4]==blockName) // found end of the block
					  {
  					    BEGIN(Comment);
					  }
  					}
	YY_BREAK
case 121:
YY_RULE_SETUP
#line 1574 "commentscan.l"
{ // some word
  					  addOutput(commentScanYYtext);
  					}
	YY_BREAK
case 122:
/* rule 122 can match eol */
YY_RULE_SETUP
#line 1577 "commentscan.l"
{ // new line
  					  if (*commentScanYYtext=='\n') yyLineNr++;
					  addOutput('\n');
  					}
	YY_BREAK
case 123:
YY_RULE_SETUP
#line 1581 "commentscan.l"
{ // start of a C-comment
  					  g_commentCount++;
  					  addOutput(commentScanYYtext);
  					}
	YY_BREAK
case 124:
YY_RULE_SETUP
#line 1585 "commentscan.l"
{ // end of a C-comment
  					  addOutput(commentScanYYtext);
  					  g_commentCount--;
					  if (g_commentCount<0 && blockName!="verbatim")
					  {
					    warn(yyFileName,yyLineNr,
					         "warning: found */ without matching /* while inside a \\%s block! Perhaps a missing \\end%s?\n",blockName.data(),blockName.data());
					  }
  					}
	YY_BREAK
case 125:
YY_RULE_SETUP
#line 1594 "commentscan.l"
{
  					  addOutput(*commentScanYYtext);
  					}
	YY_BREAK
case YY_STATE_EOF(FormatBlock):
#line 1597 "commentscan.l"
{
                                          warn(yyFileName,yyLineNr,
	                                    "warning: reached end of comment while inside a @%s block; check for missing @end%s tag!",
	                                    blockName.data(),blockName.data()
	                                  );				
					  yyterminate();
    					}
	YY_BREAK
/* ----- handle arguments of if/ifnot commands ------- */
case 126:
YY_RULE_SETUP
#line 1607 "commentscan.l"
{ // parameter of if/ifnot guard
                                          bool sectionEnabled = Config_getList("ENABLED_SECTIONS").find(commentScanYYtext)!=-1;
					  bool parentEnabled = TRUE;
					  if (!guards.isEmpty()) parentEnabled = guards.top()->isEnabled();
					  if (parentEnabled)
					  {
					    if (
						(sectionEnabled && guardType==Guard_If) ||  
						(!sectionEnabled && guardType==Guard_IfNot)
					       ) // section is visible
					    {
					      guards.push(new GuardedSection(TRUE,TRUE));
					      enabledSectionFound=TRUE;
					      BEGIN( GuardParamEnd );
					    }
					    else // section is invisible
					    {
					      if (guardType!=Guard_Skip)
					      {
					      	guards.push(new GuardedSection(FALSE,TRUE));
					      }
					      BEGIN( SkipGuardedSection );
					    }
					  }
					  else // invisible because of parent
					  {
					    guards.push(new GuardedSection(FALSE,FALSE));
					    BEGIN( SkipGuardedSection );
					  }
  					}
	YY_BREAK
case 127:
/* rule 127 can match eol */
YY_RULE_SETUP
#line 1637 "commentscan.l"
{ // end of argument
  					  if (*commentScanYYtext=='\n') yyLineNr++;
					  //next line is commented out due to bug620924
					  //addOutput('\n');
					  BEGIN( Comment );
  					}
	YY_BREAK
case 128:
/* rule 128 can match eol */
YY_RULE_SETUP
#line 1643 "commentscan.l"
{ // line continuation
                                          yyLineNr++; 
					  addOutput('\n');
  					}
	YY_BREAK
case 129:
YY_RULE_SETUP
#line 1647 "commentscan.l"
{ // ignore other stuff
  					  addOutput(*commentScanYYtext);
  					}
	YY_BREAK
case 130:
/* rule 130 can match eol */
YY_RULE_SETUP
#line 1650 "commentscan.l"
{
  					  BEGIN(Comment);
  					}
	YY_BREAK
case 131:
YY_RULE_SETUP
#line 1653 "commentscan.l"
{
  					  BEGIN(Comment);
  					}
	YY_BREAK
case 132:
YY_RULE_SETUP
#line 1656 "commentscan.l"
{
  					  unput(*commentScanYYtext);
  					  BEGIN(Comment);
  					}
	YY_BREAK
/* ----- handle skipping of conditional sections ------- */
case 133:
/* rule 133 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up commentScanYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up commentScanYYtext again */
YY_RULE_SETUP
#line 1663 "commentscan.l"
{
                                          guardType = Guard_IfNot;
  					  BEGIN( GuardParam );
  					}
	YY_BREAK
case 134:
/* rule 134 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up commentScanYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up commentScanYYtext again */
YY_RULE_SETUP
#line 1667 "commentscan.l"
{
                                          guardType = Guard_If;
  					  BEGIN( GuardParam );
  					}
	YY_BREAK
case 135:
/* rule 135 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up commentScanYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up commentScanYYtext again */
YY_RULE_SETUP
#line 1671 "commentscan.l"
{
  					  if (guards.isEmpty())
					  {
					    warn(yyFileName,yyLineNr,
						"warning: found @endif without matching start command");
					  }
					  else
					  {
					    delete guards.pop();
					    BEGIN( GuardParamEnd );
					  }
  					}
	YY_BREAK
case 136:
/* rule 136 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up commentScanYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up commentScanYYtext again */
YY_RULE_SETUP
#line 1683 "commentscan.l"
{
  					  if (guards.isEmpty())
					  {
					    warn(yyFileName,yyLineNr,
						"warning: found @else without matching start command");
					  }
					  else
					  {
					    if (!enabledSectionFound && guards.top()->parentVisible())
					    {
					      delete guards.pop();
					      guards.push(new GuardedSection(TRUE,TRUE));
					      enabledSectionFound=TRUE;
					      BEGIN( GuardParamEnd );
					    }
					  }
  					}
	YY_BREAK
case 137:
/* rule 137 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up commentScanYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up commentScanYYtext again */
YY_RULE_SETUP
#line 1700 "commentscan.l"
{
  					  if (guards.isEmpty())
					  {
					    warn(yyFileName,yyLineNr,
						"warning: found @elseif without matching start command");
					  }
					  else
					  {
					    if (!enabledSectionFound && guards.top()->parentVisible())
					    {
					      delete guards.pop();
					      BEGIN( GuardParam );
					    }
					  }
  					}
	YY_BREAK
case 138:
/* rule 138 can match eol */
YY_RULE_SETUP
#line 1715 "commentscan.l"
{ // skip line
  					  if (*commentScanYYtext=='\n') yyLineNr++;
					  //addOutput('\n');
  					}
	YY_BREAK
case 139:
YY_RULE_SETUP
#line 1719 "commentscan.l"
{ // skip non-special characters
  					}
	YY_BREAK
case 140:
YY_RULE_SETUP
#line 1721 "commentscan.l"
{ // any other character
  					}
	YY_BREAK
/* ----- handle skipping of internal section ------- */
case 141:
/* rule 141 can match eol */
YY_RULE_SETUP
#line 1727 "commentscan.l"
{ // skip line
  					  if (*commentScanYYtext=='\n') yyLineNr++;
					  addOutput('\n');
  					}
	YY_BREAK
case 142:
*yy_cp = (yy_hold_char); /* undo effects of setting up commentScanYYtext */
(yy_c_buf_p) = yy_cp = yy_bp + 3;
YY_DO_BEFORE_ACTION; /* set up commentScanYYtext again */
YY_RULE_SETUP
#line 1731 "commentscan.l"
{
                                          g_condCount++;
  					}
	YY_BREAK
case 143:
*yy_cp = (yy_hold_char); /* undo effects of setting up commentScanYYtext */
(yy_c_buf_p) = yy_cp = yy_bp + 6;
YY_DO_BEFORE_ACTION; /* set up commentScanYYtext again */
YY_RULE_SETUP
#line 1734 "commentscan.l"
{
                                          g_condCount++;
  					}
	YY_BREAK
case 144:
*yy_cp = (yy_hold_char); /* undo effects of setting up commentScanYYtext */
(yy_c_buf_p) = yy_cp = yy_bp + 1;
YY_DO_BEFORE_ACTION; /* set up commentScanYYtext again */
YY_RULE_SETUP
#line 1737 "commentscan.l"
{
                                          g_condCount--;
					  if (g_condCount<0) // handle conditional section around of \internal, see bug607743  
					  {
					    unput('\\');
					    BEGIN(Comment);
					  }
  					}
	YY_BREAK
case 145:
*yy_cp = (yy_hold_char); /* undo effects of setting up commentScanYYtext */
(yy_c_buf_p) = yy_cp = yy_bp + 1;
YY_DO_BEFORE_ACTION; /* set up commentScanYYtext again */
YY_RULE_SETUP
#line 1745 "commentscan.l"
{
  					  if (g_sectionLevel>0)
					  {
					    unput('\\');
					    BEGIN(Comment);
					  }
  					}
	YY_BREAK
case 146:
*yy_cp = (yy_hold_char); /* undo effects of setting up commentScanYYtext */
(yy_c_buf_p) = yy_cp = yy_bp + 1;
YY_DO_BEFORE_ACTION; /* set up commentScanYYtext again */
YY_RULE_SETUP
#line 1752 "commentscan.l"
{
  					  if (g_sectionLevel>1)
					  {
					    unput('\\');
					    BEGIN(Comment);
					  }
  					}
	YY_BREAK
case 147:
*yy_cp = (yy_hold_char); /* undo effects of setting up commentScanYYtext */
(yy_c_buf_p) = yy_cp = yy_bp + 1;
YY_DO_BEFORE_ACTION; /* set up commentScanYYtext again */
YY_RULE_SETUP
#line 1759 "commentscan.l"
{
  					  if (g_sectionLevel>2)
					  {
					    unput('\\');
					    BEGIN(Comment);
					  }
  					}
	YY_BREAK
case 148:
*yy_cp = (yy_hold_char); /* undo effects of setting up commentScanYYtext */
(yy_c_buf_p) = yy_cp = yy_bp + 1;
YY_DO_BEFORE_ACTION; /* set up commentScanYYtext again */
YY_RULE_SETUP
#line 1766 "commentscan.l"
{
  					  if (g_sectionLevel>3)
					  {
					    unput('\\');
					    BEGIN(Comment);
					  }
  					}
	YY_BREAK
case 149:
YY_RULE_SETUP
#line 1773 "commentscan.l"
{ // skip non-special characters
  					}
	YY_BREAK
case 150:
YY_RULE_SETUP
#line 1775 "commentscan.l"
{ // any other character
  					}
	YY_BREAK
/* ----- handle argument of name command ------- */
case 151:
/* rule 151 can match eol */
YY_RULE_SETUP
#line 1781 "commentscan.l"
{ // end of argument
  					  if (*commentScanYYtext=='\n') yyLineNr++;
					  addOutput('\n');
					  BEGIN( Comment );
  					}
	YY_BREAK
case 152:
/* rule 152 can match eol */
YY_RULE_SETUP
#line 1786 "commentscan.l"
{ // line continuation
                                          yyLineNr++; 
					  addOutput('\n');
					  g_memberGroupHeader+=' ';
  					}
	YY_BREAK
case 153:
YY_RULE_SETUP
#line 1791 "commentscan.l"
{ // ignore other stuff
					  g_memberGroupHeader+=*commentScanYYtext;
					  current->name+=*commentScanYYtext;
  					}
	YY_BREAK
/* ----- handle argument of ingroup command ------- */
case 154:
YY_RULE_SETUP
#line 1798 "commentscan.l"
{ // group id
  					  current->groups->append(
					    new Grouping(commentScanYYtext, Grouping::GROUPING_INGROUP)
					  );
					  inGroupParamFound=TRUE;
  					}
	YY_BREAK
case 155:
/* rule 155 can match eol */
YY_RULE_SETUP
#line 1804 "commentscan.l"
{ // missing argument
  					  if (!inGroupParamFound)
					  {
  					    warn(yyFileName,yyLineNr,
					        "warning: Missing group name for \\ingroup command"
					        );
					  }
  					  if (*commentScanYYtext=='\n') yyLineNr++;
					  addOutput('\n');
					  BEGIN( Comment );
  					}
	YY_BREAK
case 156:
/* rule 156 can match eol */
YY_RULE_SETUP
#line 1815 "commentscan.l"
{ // line continuation
                                          yyLineNr++; 
					  addOutput('\n');
  					}
	YY_BREAK
case 157:
YY_RULE_SETUP
#line 1819 "commentscan.l"
{ // ignore other stuff
  					  addOutput(*commentScanYYtext);
  					}
	YY_BREAK
/* ----- handle argument of fn command ------- */
case 158:
/* rule 158 can match eol */
YY_RULE_SETUP
#line 1825 "commentscan.l"
{ // end of argument
  					  if (braceCount==0)
					  {
					    if (*commentScanYYtext=='\n') yyLineNr++;
					    addOutput('\n');
					    langParser->parsePrototype(functionProto);
					    BEGIN( Comment );
					  }
  					}
	YY_BREAK
case 159:
/* rule 159 can match eol */
YY_RULE_SETUP
#line 1834 "commentscan.l"
{ // line continuation
                                          yyLineNr++; 
					  functionProto+=' ';
  					}
	YY_BREAK
case 160:
YY_RULE_SETUP
#line 1838 "commentscan.l"
{ // non-special characters
                                          functionProto+=commentScanYYtext;
  					}
	YY_BREAK
case 161:
YY_RULE_SETUP
#line 1841 "commentscan.l"
{
                                          functionProto+=commentScanYYtext;
					  braceCount++;
					}
	YY_BREAK
case 162:
YY_RULE_SETUP
#line 1845 "commentscan.l"
{
                                          functionProto+=commentScanYYtext;
					  braceCount--;
					}
	YY_BREAK
case 163:
YY_RULE_SETUP
#line 1849 "commentscan.l"
{ // add other stuff
                                          functionProto+=*commentScanYYtext;
  					}
	YY_BREAK
/* ----- handle argument of overload command ------- */
case 164:
/* rule 164 can match eol */
YY_RULE_SETUP
#line 1857 "commentscan.l"
{ // end of argument
  					  if (*commentScanYYtext=='\n') yyLineNr++;
					  addOutput('\n');
					  if (functionProto.stripWhiteSpace().isEmpty())
					  { // plain overload command
					    addOutput(getOverloadDocs());
					  }
					  else // overload declaration
					  {
                                            makeStructuralIndicator(Entry::OVERLOADDOC_SEC);
					    langParser->parsePrototype(functionProto);
					  }
					  BEGIN( Comment );
  					}
	YY_BREAK
case 165:
/* rule 165 can match eol */
YY_RULE_SETUP
#line 1871 "commentscan.l"
{ // line continuation
                                          yyLineNr++; 
					  functionProto+=' ';
  					}
	YY_BREAK
case 166:
YY_RULE_SETUP
#line 1875 "commentscan.l"
{ // add other stuff
                                          functionProto+=*commentScanYYtext;
  					}
	YY_BREAK
/* ----- handle argument of inherit command ------- */
case 167:
YY_RULE_SETUP
#line 1881 "commentscan.l"
{ // found argument
					  current->extends->append(
					    new BaseInfo(removeRedundantWhiteSpace(commentScanYYtext),Public,Normal)
					  );
					  BEGIN( Comment );
  					}
	YY_BREAK
case 168:
/* rule 168 can match eol */
YY_RULE_SETUP
#line 1887 "commentscan.l"
{ // missing argument
  					  warn(yyFileName,yyLineNr,
					      "warning: \\inherit command has no argument"
					      );
  					  if (*commentScanYYtext=='\n') yyLineNr++;
					  addOutput('\n');
					  BEGIN( Comment );
  					}
	YY_BREAK
case 169:
YY_RULE_SETUP
#line 1895 "commentscan.l"
{ // invalid character for anchor label
  					  warn(yyFileName,yyLineNr,
					      "warning: Invalid or missing name for \\inherit command"
					      );
					  BEGIN(Comment);
  					}
	YY_BREAK
/* ----- handle argument of extends and implements commands ------- */
case 170:
YY_RULE_SETUP
#line 1904 "commentscan.l"
{ // found argument
					  current->extends->append(
					    new BaseInfo(removeRedundantWhiteSpace(commentScanYYtext),Public,Normal)
					  );
					  BEGIN( Comment );
  					}
	YY_BREAK
case 171:
/* rule 171 can match eol */
YY_RULE_SETUP
#line 1910 "commentscan.l"
{ // missing argument
  					  warn(yyFileName,yyLineNr,
					      "warning: \\extends or \\implements command has no argument"
					      );
  					  if (*commentScanYYtext=='\n') yyLineNr++;
					  addOutput('\n');
					  BEGIN( Comment );
  					}
	YY_BREAK
case 172:
YY_RULE_SETUP
#line 1918 "commentscan.l"
{ // ignore other stuff
  					}
	YY_BREAK
/* ----- handle language specific sections ------- */
case 173:
YY_RULE_SETUP
#line 1923 "commentscan.l"
{ /* language switch */
                                     QCString langId = &commentScanYYtext[2];
				     if (langId.isEmpty() ||
					 stricmp(Config_getEnum("OUTPUT_LANGUAGE"),langId)==0)
				     { // enable language specific section
				       BEGIN(Comment);
				     }
                                   }
	YY_BREAK
case 174:
YY_RULE_SETUP
#line 1931 "commentscan.l"
{ /* any character not a *, @, backslash or new line */
                                   }
	YY_BREAK
case 175:
/* rule 175 can match eol */
YY_RULE_SETUP
#line 1933 "commentscan.l"
{ /* new line in verbatim block */
  		                     if (*commentScanYYtext=='\n') yyLineNr++;
                                   }
	YY_BREAK
case 176:
YY_RULE_SETUP
#line 1936 "commentscan.l"
{ /* any other character */
                                   }
	YY_BREAK
case 177:
YY_RULE_SETUP
#line 1940 "commentscan.l"
ECHO;
	YY_BREAK
#line 5595 "<stdout>"
			case YY_STATE_EOF(INITIAL):
			case YY_STATE_EOF(Comment):
			case YY_STATE_EOF(PageDocArg1):
			case YY_STATE_EOF(PageDocArg2):
			case YY_STATE_EOF(RelatesParam1):
			case YY_STATE_EOF(ClassDocArg1):
			case YY_STATE_EOF(ClassDocArg2):
			case YY_STATE_EOF(ClassDocArg3):
			case YY_STATE_EOF(CategoryDocArg1):
			case YY_STATE_EOF(XRefItemParam1):
			case YY_STATE_EOF(XRefItemParam2):
			case YY_STATE_EOF(XRefItemParam3):
			case YY_STATE_EOF(FileDocArg1):
			case YY_STATE_EOF(EnumDocArg1):
			case YY_STATE_EOF(NameSpaceDocArg1):
			case YY_STATE_EOF(PackageDocArg1):
			case YY_STATE_EOF(GroupDocArg1):
			case YY_STATE_EOF(GroupDocArg2):
			case YY_STATE_EOF(SectionLabel):
			case YY_STATE_EOF(SectionTitle):
			case YY_STATE_EOF(SubpageLabel):
			case YY_STATE_EOF(SubpageTitle):
			case YY_STATE_EOF(LineParam):
			case YY_STATE_EOF(GuardParam):
			case YY_STATE_EOF(GuardParamEnd):
			case YY_STATE_EOF(SkipGuardedSection):
			case YY_STATE_EOF(SkipInternal):
			case YY_STATE_EOF(NameParam):
			case YY_STATE_EOF(InGroupParam):
			case YY_STATE_EOF(FnParam):
			case YY_STATE_EOF(OverloadParam):
			case YY_STATE_EOF(InheritParam):
			case YY_STATE_EOF(ExtendsParam):
			case YY_STATE_EOF(ReadFormulaShort):
			case YY_STATE_EOF(ReadFormulaLong):
			case YY_STATE_EOF(AnchorLabel):
			case YY_STATE_EOF(HtmlComment):
			case YY_STATE_EOF(SkipLang):
				yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed commentScanYYin at a new source and called
			 * commentScanYYlex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = commentScanYYin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( commentScanYYwrap( ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * commentScanYYtext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of commentScanYYlex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (void)
{
    	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = (yytext_ptr);
	register int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			yy_size_t num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			YY_FATAL_ERROR(
"input buffer overflow, can't enlarge buffer because scanner uses REJECT" );

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			commentScanYYrestart(commentScanYYin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yy_size_t) ((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) commentScanYYrealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (void)
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    
	yy_current_state = (yy_start);
	yy_current_state += YY_AT_BOL();

	(yy_state_ptr) = (yy_state_buf);
	*(yy_state_ptr)++ = yy_current_state;

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 1025 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		*(yy_state_ptr)++ = yy_current_state;
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state )
{
	register int yy_is_jam;
    
	register YY_CHAR yy_c = 1;
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 1025 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 1024);
	if ( ! yy_is_jam )
		*(yy_state_ptr)++ = yy_current_state;

	return yy_is_jam ? 0 : yy_current_state;
}

    static void yyunput (int c, register char * yy_bp )
{
	register char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up commentScanYYtext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register yy_size_t number_to_move = (yy_n_chars) + 2;
		register char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		register char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (void)
#else
    static int input  (void)
#endif

{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			yy_size_t offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					commentScanYYrestart(commentScanYYin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( commentScanYYwrap( ) )
						return 0;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve commentScanYYtext */
	(yy_hold_char) = *++(yy_c_buf_p);

	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = (c == '\n');

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void commentScanYYrestart  (FILE * input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        commentScanYYensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            commentScanYY_create_buffer(commentScanYYin,YY_BUF_SIZE );
	}

	commentScanYY_init_buffer(YY_CURRENT_BUFFER,input_file );
	commentScanYY_load_buffer_state( );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void commentScanYY_switch_to_buffer  (YY_BUFFER_STATE  new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		commentScanYYpop_buffer_state();
	 *		commentScanYYpush_buffer_state(new_buffer);
     */
	commentScanYYensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	commentScanYY_load_buffer_state( );

	/* We don't actually know whether we did this switch during
	 * EOF (commentScanYYwrap()) processing, but the only time this flag
	 * is looked at is after commentScanYYwrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

static void commentScanYY_load_buffer_state  (void)
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	commentScanYYin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE commentScanYY_create_buffer  (FILE * file, int  size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) commentScanYYalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in commentScanYY_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) commentScanYYalloc(b->yy_buf_size + 2  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in commentScanYY_create_buffer()" );

	b->yy_is_our_buffer = 1;

	commentScanYY_init_buffer(b,file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with commentScanYY_create_buffer()
 * 
 */
    void commentScanYY_delete_buffer (YY_BUFFER_STATE  b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		commentScanYYfree((void *) b->yy_ch_buf  );

	commentScanYYfree((void *) b  );
}

#ifndef __cplusplus
extern int isatty (int );
#endif /* __cplusplus */
    
/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a commentScanYYrestart() or at EOF.
 */
    static void commentScanYY_init_buffer  (YY_BUFFER_STATE  b, FILE * file )

{
	int oerrno = errno;
    
	commentScanYY_flush_buffer(b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then commentScanYY_init_buffer was _probably_
     * called from commentScanYYrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void commentScanYY_flush_buffer (YY_BUFFER_STATE  b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		commentScanYY_load_buffer_state( );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void commentScanYYpush_buffer_state (YY_BUFFER_STATE new_buffer )
{
    	if (new_buffer == NULL)
		return;

	commentScanYYensure_buffer_stack();

	/* This block is copied from commentScanYY_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from commentScanYY_switch_to_buffer. */
	commentScanYY_load_buffer_state( );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void commentScanYYpop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	commentScanYY_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		commentScanYY_load_buffer_state( );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void commentScanYYensure_buffer_stack (void)
{
	yy_size_t num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		(yy_buffer_stack) = (struct yy_buffer_state**)commentScanYYalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in commentScanYYensure_buffer_stack()" );
								  
		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)commentScanYYrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in commentScanYYensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * 
 * @return the newly allocated buffer state object. 
 */
YY_BUFFER_STATE commentScanYY_scan_buffer  (char * base, yy_size_t  size )
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) commentScanYYalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in commentScanYY_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	commentScanYY_switch_to_buffer(b  );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to commentScanYYlex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * 
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       commentScanYY_scan_bytes() instead.
 */
YY_BUFFER_STATE commentScanYY_scan_string (yyconst char * yystr )
{
    
	return commentScanYY_scan_bytes(yystr,strlen(yystr) );
}

/** Setup the input buffer state to scan the given bytes. The next call to commentScanYYlex() will
 * scan from a @e copy of @a bytes.
 * @param bytes the byte buffer to scan
 * @param len the number of bytes in the buffer pointed to by @a bytes.
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE commentScanYY_scan_bytes  (yyconst char * yybytes, yy_size_t  _yybytes_len )
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n, i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = _yybytes_len + 2;
	buf = (char *) commentScanYYalloc(n  );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in commentScanYY_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = commentScanYY_scan_buffer(buf,n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in commentScanYY_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yy_fatal_error (yyconst char* msg )
{
    	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up commentScanYYtext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		commentScanYYtext[commentScanYYleng] = (yy_hold_char); \
		(yy_c_buf_p) = commentScanYYtext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		commentScanYYleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the current line number.
 * 
 */
int commentScanYYget_lineno  (void)
{
        
    return commentScanYYlineno;
}

/** Get the input stream.
 * 
 */
FILE *commentScanYYget_in  (void)
{
        return commentScanYYin;
}

/** Get the output stream.
 * 
 */
FILE *commentScanYYget_out  (void)
{
        return commentScanYYout;
}

/** Get the length of the current token.
 * 
 */
yy_size_t commentScanYYget_leng  (void)
{
        return commentScanYYleng;
}

/** Get the current token.
 * 
 */

char *commentScanYYget_text  (void)
{
        return commentScanYYtext;
}

/** Set the current line number.
 * @param line_number
 * 
 */
void commentScanYYset_lineno (int  line_number )
{
    
    commentScanYYlineno = line_number;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param in_str A readable stream.
 * 
 * @see commentScanYY_switch_to_buffer
 */
void commentScanYYset_in (FILE *  in_str )
{
        commentScanYYin = in_str ;
}

void commentScanYYset_out (FILE *  out_str )
{
        commentScanYYout = out_str ;
}

int commentScanYYget_debug  (void)
{
        return commentScanYY_flex_debug;
}

void commentScanYYset_debug (int  bdebug )
{
        commentScanYY_flex_debug = bdebug ;
}

static int yy_init_globals (void)
{
        /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from commentScanYYlex_destroy(), so don't allocate here.
     */

    (yy_buffer_stack) = 0;
    (yy_buffer_stack_top) = 0;
    (yy_buffer_stack_max) = 0;
    (yy_c_buf_p) = (char *) 0;
    (yy_init) = 0;
    (yy_start) = 0;

    (yy_state_buf) = 0;
    (yy_state_ptr) = 0;
    (yy_full_match) = 0;
    (yy_lp) = 0;

/* Defined in main.c */
#ifdef YY_STDINIT
    commentScanYYin = stdin;
    commentScanYYout = stdout;
#else
    commentScanYYin = (FILE *) 0;
    commentScanYYout = (FILE *) 0;
#endif

    /* For future reference: Set errno on error, since we are called by
     * commentScanYYlex_init()
     */
    return 0;
}

/* commentScanYYlex_destroy is for both reentrant and non-reentrant scanners. */
int commentScanYYlex_destroy  (void)
{
    
    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		commentScanYY_delete_buffer(YY_CURRENT_BUFFER  );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		commentScanYYpop_buffer_state();
	}

	/* Destroy the stack itself. */
	commentScanYYfree((yy_buffer_stack) );
	(yy_buffer_stack) = NULL;

    commentScanYYfree ( (yy_state_buf) );
    (yy_state_buf)  = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * commentScanYYlex() is called, initialization will occur. */
    yy_init_globals( );

    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *commentScanYYalloc (yy_size_t  size )
{
	return (void *) malloc( size );
}

void *commentScanYYrealloc  (void * ptr, yy_size_t  size )
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void commentScanYYfree (void * ptr )
{
	free( (char *) ptr );	/* see commentScanYYrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 1940 "commentscan.l"



//----------------------------------------------------------------------------

static bool handleBrief(const QCString &)
{
  //printf("handleBrief\n");
  setOutput(OutputBrief);
  return FALSE;
}

static bool handleFn(const QCString &)
{
  bool stop=makeStructuralIndicator(Entry::MEMBERDOC_SEC);
  functionProto.resize(0);
  braceCount=0;
  BEGIN(FnParam);
  return stop;
}

static bool handleDef(const QCString &)
{
  bool stop=makeStructuralIndicator(Entry::DEFINEDOC_SEC);
  functionProto.resize(0);
  BEGIN(FnParam);
  return stop;
}

static bool handleOverload(const QCString &)
{
  functionProto.resize(0);
  BEGIN(OverloadParam);
  return FALSE;
}

static bool handleEnum(const QCString &)
{
  bool stop=makeStructuralIndicator(Entry::ENUMDOC_SEC);
  BEGIN(EnumDocArg1);
  return stop;
}

static bool handleDefGroup(const QCString &)
{
  bool stop=makeStructuralIndicator(Entry::GROUPDOC_SEC);
  current->groupDocType = Entry::GROUPDOC_NORMAL;
  BEGIN( GroupDocArg1 );
  return stop;
}

static bool handleAddToGroup(const QCString &)
{
  bool stop=makeStructuralIndicator(Entry::GROUPDOC_SEC);
  current->groupDocType = Entry::GROUPDOC_ADD;
  BEGIN( GroupDocArg1 );
  return stop;
}

static bool handleWeakGroup(const QCString &)
{
  bool stop=makeStructuralIndicator(Entry::GROUPDOC_SEC);
  current->groupDocType = Entry::GROUPDOC_WEAK;
  BEGIN( GroupDocArg1 );
  return stop;
}

static bool handleNamespace(const QCString &)
{
  bool stop=makeStructuralIndicator(Entry::NAMESPACEDOC_SEC);
  BEGIN( NameSpaceDocArg1 );
  return stop;
}

static bool handlePackage(const QCString &)
{
  bool stop=makeStructuralIndicator(Entry::PACKAGEDOC_SEC);
  BEGIN( PackageDocArg1 );
  return stop;
}

static bool handleClass(const QCString &)
{
  bool stop=makeStructuralIndicator(Entry::CLASSDOC_SEC);
  BEGIN( ClassDocArg1 ); 
  return stop;
}

static bool handleHeaderFile(const QCString &)
{
  BEGIN( ClassDocArg2 );
  return FALSE;
}

static bool handleProtocol(const QCString &)
{ // Obj-C protocol
  bool stop=makeStructuralIndicator(Entry::PROTOCOLDOC_SEC);
  BEGIN( ClassDocArg1 ); 
  return stop;
}

static bool handleCategory(const QCString &)
{ // Obj-C category
  bool stop=makeStructuralIndicator(Entry::CATEGORYDOC_SEC);
  BEGIN( CategoryDocArg1 ); 
  return stop;
}

static bool handleUnion(const QCString &)
{
  bool stop=makeStructuralIndicator(Entry::UNIONDOC_SEC);
  BEGIN( ClassDocArg1 ); 
  return stop;
}

static bool handleStruct(const QCString &)
{
  bool stop=makeStructuralIndicator(Entry::STRUCTDOC_SEC);
  BEGIN( ClassDocArg1 ); 
  return stop;
}

static bool handleInterface(const QCString &)
{
  bool stop=makeStructuralIndicator(Entry::INTERFACEDOC_SEC);
  BEGIN( ClassDocArg1 ); 
  return stop;
}

static bool handleIdlException(const QCString &)
{
  bool stop=makeStructuralIndicator(Entry::EXCEPTIONDOC_SEC);
  BEGIN( ClassDocArg1 ); 
  return stop;
}

static bool handlePage(const QCString &)
{
  bool stop=makeStructuralIndicator(Entry::PAGEDOC_SEC);
  BEGIN( PageDocArg1 );
  return stop;
}

static bool handleMainpage(const QCString &)
{
  bool stop=makeStructuralIndicator(Entry::MAINPAGEDOC_SEC);
  if (!stop) 
  {
    current->name = "mainpage";
  }
  BEGIN( PageDocArg2 );
  return stop;
}

static bool handleFile(const QCString &)
{
  bool stop=makeStructuralIndicator(Entry::FILEDOC_SEC);
  if (!stop) 
  {
    current->name = yyFileName;
  }
  BEGIN( FileDocArg1 );
  return stop;
}

static bool handleDir(const QCString &)
{
  bool stop=makeStructuralIndicator(Entry::DIRDOC_SEC);
  if (!stop) current->name = yyFileName;
  BEGIN( FileDocArg1 );
  return stop;
}

static bool handleExample(const QCString &)
{
  bool stop=makeStructuralIndicator(Entry::EXAMPLE_SEC);
  if (!stop) current->name = yyFileName;
  BEGIN( FileDocArg1 );
  return stop;
}

static bool handleDetails(const QCString &)
{
  if (inContext!=OutputBrief)
  {
    addOutput("\n\n"); // treat @details outside brief description
                       // as a new paragraph
  }
  setOutput(OutputDoc);
  return FALSE;
}

static bool handleName(const QCString &)
{
  bool stop=makeStructuralIndicator(Entry::MEMBERGRP_SEC);
  if (!stop)
  {
    g_memberGroupHeader.resize(0);
    BEGIN( NameParam );
    if (g_memberGroupId!=DOX_NOGROUP) // end of previous member group
    {
      closeGroup(current,yyFileName,yyLineNr,TRUE);
    }
  }
  return stop;
}

static bool handleTodo(const QCString &)
{
  newXRefKind = XRef_Todo;
  setOutput(OutputXRef);
  xrefKind = XRef_Todo;
  return FALSE;
}

static bool handleTest(const QCString &)
{
  newXRefKind = XRef_Test;
  setOutput(OutputXRef);
  xrefKind = XRef_Test;
  return FALSE;
}

static bool handleBug(const QCString &)
{
  newXRefKind = XRef_Bug;
  setOutput(OutputXRef);
  xrefKind = XRef_Bug;
  return FALSE;
}

static bool handleDeprecated(const QCString &)
{
  newXRefKind = XRef_Deprecated;
  setOutput(OutputXRef);
  xrefKind = XRef_Deprecated;
  return FALSE;
}

static bool handleXRefItem(const QCString &)
{
  BEGIN(XRefItemParam1);
  return FALSE;
}

static bool handleRelated(const QCString &)
{
  BEGIN(RelatesParam1);
  return FALSE;
}

static bool handleRelatedAlso(const QCString &)
{
  current->relatesType = Duplicate;
  BEGIN(RelatesParam1);
  return FALSE;
}

static bool handleMemberOf(const QCString &)
{
  current->relatesType = MemberOf;
  BEGIN(RelatesParam1);
  return FALSE;
}

static bool handleRefItem(const QCString &)
{
  addOutput(" @refitem ");
  BEGIN(LineParam);
  return FALSE;
}

static bool handleSection(const QCString &s)
{
  setOutput(OutputDoc);
  addOutput(" @"+s+" ");
  BEGIN(SectionLabel);
  if      (s=="section")       g_sectionLevel=1;
  else if (s=="subsection")    g_sectionLevel=2;
  else if (s=="subsubsection") g_sectionLevel=3;
  else if (s=="paragraph")     g_sectionLevel=4;
  return FALSE;
}

static bool handleSubpage(const QCString &s)
{
  if (current->section!=Entry::EMPTY_SEC && 
      current->section!=Entry::PAGEDOC_SEC &&
      current->section!=Entry::MAINPAGEDOC_SEC
     )
  {
    warn(yyFileName,yyLineNr,
	"warning: found \\subpage command in a comment block that is not marked as a page!");
  }
  addOutput(" @"+s+" ");
  BEGIN(SubpageLabel);
  return FALSE;
}

static bool handleAnchor(const QCString &s)
{
  addOutput(" @"+s+" ");
  BEGIN(AnchorLabel);
  return FALSE;
}

static bool handleFormatBlock(const QCString &s)
{
  addOutput(" @"+s+" ");
  //printf("handleFormatBlock(%s)\n",s.data());
  blockName=s;
  g_commentCount=0;
  BEGIN(FormatBlock);
  return FALSE;
}

static bool handleAddIndex(const QCString &)
{
  addOutput(" @addindex ");
  BEGIN(LineParam);
  return FALSE;
}

static bool handleIf(const QCString &)
{
  enabledSectionFound=FALSE;
  guardType = Guard_If;
  BEGIN(GuardParam);
  return FALSE;
}

static bool handleIfNot(const QCString &)
{
  enabledSectionFound=FALSE;
  guardType = Guard_IfNot;
  BEGIN(GuardParam);
  return FALSE;
}

static bool handleElseIf(const QCString &)
{
  if (guards.isEmpty())
  {
    warn(yyFileName,yyLineNr,
	"warning: found \\else without matching start command");
  }
  else
  {
    guardType = enabledSectionFound ? Guard_Skip : Guard_If;
    BEGIN(GuardParam);
  }
  return FALSE;
}

static bool handleElse(const QCString &)
{
  if (guards.isEmpty())
  {
    warn(yyFileName,yyLineNr,
	"warning: found \\else without matching start command");
  }
  else
  {
    BEGIN( SkipGuardedSection );
  }
  return FALSE;
}

static bool handleEndIf(const QCString &)
{
  if (guards.isEmpty())
  {
    warn(yyFileName,yyLineNr,
	"warning: found \\endif without matching start command");
  }
  else
  {
    delete guards.pop();
  }
  enabledSectionFound=FALSE;
  BEGIN( GuardParamEnd );
  return FALSE;
}

static bool handleIngroup(const QCString &)
{
  inGroupParamFound=FALSE;
  BEGIN( InGroupParam );
  return FALSE;
}

static bool handleNoSubGrouping(const QCString &)
{
  current->subGrouping = FALSE; 
  return FALSE;
}

static bool handleShowInitializer(const QCString &)
{
  current->initLines = 100000; // ON
  return FALSE;
}

static bool handleHideInitializer(const QCString &)
{
  current->initLines = 0; // OFF
  return FALSE;
}

static bool handleCallgraph(const QCString &)
{
  current->callGraph = TRUE; // ON
  return FALSE;
}

static bool handleCallergraph(const QCString &)
{
  current->callerGraph = TRUE; // ON
  return FALSE;
}

static bool handleInternal(const QCString &)
{
  if (!Config_getBool("INTERNAL_DOCS"))
  {
    // make sure some whitespace before a \internal command
    // is not treated as "documentation"
    if (current->doc.stripWhiteSpace().isEmpty())
    { 
      current->doc.resize(0);
    }
    g_condCount=0;
    BEGIN( SkipInternal );
  }
  else
  {
    addOutput("\\internal "); 
  }
  return FALSE;
}

static bool handleLineBr(const QCString &)
{
  addOutput('\n');
  return FALSE;
}

static bool handleStatic(const QCString &)
{
  endBrief();
  current->stat = TRUE; 
  return FALSE;
}

static bool handlePure(const QCString &)
{
  endBrief();
  current->virt = Pure; 
  return FALSE;
}

static bool handlePrivate(const QCString &)
{
  current->protection = Private;
  return FALSE;
}

static bool handlePrivateSection(const QCString &)
{
  current->protection = protection = Private;
  return FALSE;
}

static bool handleProtected(const QCString &)
{
  current->protection = Protected;
  return FALSE;
}

static bool handleProtectedSection(const QCString &)
{
  current->protection = protection = Protected ;
  return FALSE;
}

static bool handlePublic(const QCString &)
{
  current->protection = Public;
  return FALSE;
}

static bool handlePublicSection(const QCString &)
{
  current->protection = protection = Public;
  return FALSE;
}

static bool handleInherit(const QCString &)
{
  BEGIN(InheritParam);
  return FALSE;
}

static bool handleExtends(const QCString &)
{
  BEGIN(ExtendsParam);
  return FALSE;
}

//----------------------------------------------------------------------------

static void checkFormula()
{
  if (YY_START==ReadFormulaShort || YY_START==ReadFormulaLong)
  {
    warn(yyFileName,yyLineNr,"warning: End of comment block while inside formula.");
  }
}

//----------------------------------------------------------------------------

bool parseCommentBlock(/* in */     ParserInterface *parser,
                       /* in */     Entry *curEntry,
                       /* in */     const QCString &comment,
		       /* in */     const QCString &fileName,
		       /* in,out */ int  &lineNr,
		       /* in */     bool isBrief,
		       /* in */     bool isAutoBriefOn,
		       /* in */     bool isInbody,
		       /* in,out */ Protection &prot,
		       /* in,out */ int &position,
		       /* out */    bool &newEntryNeeded
		      )
{
  //printf("parseCommentBlock() isBrief=%d isAutoBriefOn=%d lineNr=%d\n",
  //    isBrief,isAutoBriefOn,lineNr);

  initParser();
  guards.setAutoDelete(TRUE);
  guards.clear();
  langParser     = parser;
  current        = curEntry;
  if (comment.isEmpty()) return FALSE; // avoid empty strings
  inputString    = comment;
  inputString.append(" ");
  inputPosition  = position;
  yyLineNr       = lineNr;
  yyFileName     = fileName;
  protection     = prot;
  needNewEntry   = FALSE;
  xrefKind       = XRef_None;
  xrefAppendFlag = FALSE;
  insidePre      = FALSE;
  parseMore      = FALSE;
  inBody         = isInbody;
  outputXRef.resize(0);
  setOutput( isBrief || isAutoBriefOn ? OutputBrief : OutputDoc );
  briefEndsAtDot = isAutoBriefOn;
  g_condCount    = 0;
  g_sectionLevel = 0;

  if (!current->inbodyDocs.isEmpty() && isInbody) // separate in body fragments
  {
    current->inbodyDocs+="\n\n";
  }

  Debug::print(Debug::CommentScan,0,"-----------\nCommentScanner: %s:%d\n"
               "input=[%s]\n",fileName.data(),lineNr,comment.data()
              );
  
  commentScanYYrestart( commentScanYYin );
  BEGIN( Comment );
  commentScanYYlex();
  setOutput( OutputDoc );

  if (YY_START==OverloadParam) // comment ended with \overload
  {
    addOutput(getOverloadDocs());
  }

  if (!guards.isEmpty())
  {
    warn(yyFileName,yyLineNr,"Documentation block ended in the middle of a conditional section!");
  }

  current->doc=stripLeadingAndTrailingEmptyLines(current->doc);

  if (current->section==Entry::FILEDOC_SEC && current->doc.isEmpty())
  {
    // to allow a comment block with just a @file command.
    current->doc="\n\n";
  }

  if (current->section==Entry::MEMBERGRP_SEC &&
      g_memberGroupId==DOX_NOGROUP) // @name section but no group started yet
  {
    openGroup(current,yyFileName,yyLineNr);
  }

  Debug::print(Debug::CommentScan,0,
               "brief=[%s]\ndocs=[%s]\ninbody=[%s]\n===========\n",
	       current->brief.data(),current->doc.data(),current->inbodyDocs.data()
              );
  
  checkFormula();
  prot = protection;
  
  groupAddDocs(curEntry,fileName);

  newEntryNeeded = needNewEntry;

  // if we did not proceed during this call, it does not make
  // sence to continue, since we get stuck. See bug 567346 for situations
  // were this happens
  if (parseMore && position==inputPosition) parseMore=FALSE;

  if (parseMore) position=inputPosition; else position=0;

  lineNr = yyLineNr;
  //printf("position=%d parseMore=%d\n",position,parseMore);

  return parseMore;
}

//---------------------------------------------------------------------------

void groupEnterFile(const char *fileName,int)
{
  g_autoGroupStack.setAutoDelete(TRUE);
  g_autoGroupStack.clear();
  g_memberGroupId = DOX_NOGROUP;
  g_memberGroupDocs.resize(0);
  g_memberGroupRelates.resize(0);
  g_compoundName=fileName;
}

void groupLeaveFile(const char *fileName,int line)
{
  //if (g_memberGroupId!=DOX_NOGROUP)
  //{
  //  warn(fileName,line,"warning: end of file while inside a member group\n");
  //}
  g_memberGroupId=DOX_NOGROUP;
  g_memberGroupRelates.resize(0);
  g_memberGroupDocs.resize(0);
  if (!g_autoGroupStack.isEmpty())
  {
    warn(fileName,line,"warning: end of file while inside a group\n");
  }
}

void groupEnterCompound(const char *fileName,int line,const char *name)
{
  if (g_memberGroupId!=DOX_NOGROUP)
  {
    warn(fileName,line,"warning: try to put compound %s inside a member group\n",name);
  }
  g_memberGroupId=DOX_NOGROUP;
  g_memberGroupRelates.resize(0);
  g_memberGroupDocs.resize(0);
  g_compoundName = name;
  int i = g_compoundName.find('(');
  if (i!=-1) 
  {
    g_compoundName=g_compoundName.left(i); // strip category (Obj-C)
  }
  if (g_compoundName.isEmpty())
  {
    g_compoundName=fileName;
  }
  //printf("groupEnterCompound(%s)\n",name);
}

void groupLeaveCompound(const char *,int,const char * /*name*/)
{
  //printf("groupLeaveCompound(%s)\n",name);
  //if (g_memberGroupId!=DOX_NOGROUP)
  //{
  //  warn(fileName,line,"warning: end of compound %s while inside a member group\n",name);
  //}
  g_memberGroupId=DOX_NOGROUP;
  g_memberGroupRelates.resize(0);
  g_memberGroupDocs.resize(0);
  g_compoundName.resize(0);
}

static int findExistingGroup(int &groupId,const MemberGroupInfo *info)
{
  //printf("findExistingGroup %s:%s\n",info->header.data(),info->compoundName.data());
  QIntDictIterator<MemberGroupInfo> di(Doxygen::memGrpInfoDict);
  MemberGroupInfo *mi;
  for (di.toFirst();(mi=di.current());++di)
  {
    if (g_compoundName==mi->compoundName &&  // same file or scope
	!mi->header.isEmpty() &&             // not a nameless group
	stricmp(mi->header,info->header)==0  // same header name
       )
    {
      //printf("Found it!\n");
      return di.currentKey(); // put the item in this group
    }
  }
  groupId++; // start new group
  return groupId;
}

void openGroup(Entry *e,const char *,int)
{
  //printf("==> openGroup(name=%s,sec=%x) g_autoGroupStack=%d\n",
  //  	e->name.data(),e->section,g_autoGroupStack.count());
  if (e->section==Entry::GROUPDOC_SEC) // auto group
  {
    g_autoGroupStack.push(new Grouping(e->name,e->groupingPri()));
  }
  else // start of a member group
  {
    //printf("    membergroup id=%d\n",g_memberGroupId);
    if (g_memberGroupId==DOX_NOGROUP) // no group started yet
    {
      static int curGroupId=0;

      MemberGroupInfo *info = new MemberGroupInfo;
      info->header = g_memberGroupHeader.stripWhiteSpace();
      info->compoundName = g_compoundName;
      g_memberGroupId = findExistingGroup(curGroupId,info);
      //printf("    use membergroup %d\n",g_memberGroupId);
      Doxygen::memGrpInfoDict.insert(g_memberGroupId,info);

      g_memberGroupRelates = e->relates;
      e->mGrpId = g_memberGroupId;
    }
  }
}

void closeGroup(Entry *e,const char *fileName,int,bool foundInline)
{
  //printf("==> closeGroup(name=%s,sec=%x) g_autoGroupStack=%d\n",
  //    e->name.data(),e->section,g_autoGroupStack.count());
  if (g_memberGroupId!=DOX_NOGROUP) // end of member group
  {
    MemberGroupInfo *info=Doxygen::memGrpInfoDict.find(g_memberGroupId);
    if (info) // known group
    {
      info->doc = g_memberGroupDocs;
      info->docFile = fileName;
    }
    g_memberGroupId=DOX_NOGROUP;
    g_memberGroupRelates.resize(0);
    g_memberGroupDocs.resize(0);
    e->mGrpId=DOX_NOGROUP;
    //printf("new group id=%d\n",g_memberGroupId);
  }
  else if (!g_autoGroupStack.isEmpty()) // end of auto group
  {
    Grouping *grp = g_autoGroupStack.pop();
    // see bug577005: we should not remove the last group for e
    if (!foundInline) e->groups->removeLast();
    //printf("Removing %s e=%p\n",grp->groupname.data(),e);
    delete grp;
    if (!foundInline) initGroupInfo(e);
  }
}

void initGroupInfo(Entry *e)
{
  //printf("==> initGroup(id=%d,related=%s,e=%p)\n",g_memberGroupId,
  //       g_memberGroupRelates.data(),e);
  e->mGrpId     = g_memberGroupId;
  e->relates    = g_memberGroupRelates;
  if (!g_autoGroupStack.isEmpty())
  {
    //printf("Appending group %s to %s: count=%d entry=%p\n",
    //	g_autoGroupStack.top()->groupname.data(),
    //	e->name.data(),e->groups->count(),e);
    e->groups->append(new Grouping(*g_autoGroupStack.top()));
  }
}

static void groupAddDocs(Entry *e,const char *fileName)
{
  if (e->section==Entry::MEMBERGRP_SEC)
  {
    g_memberGroupDocs=e->brief.stripWhiteSpace();
    e->doc = stripLeadingAndTrailingEmptyLines(e->doc);
    if (!g_memberGroupDocs.isEmpty() && !e->doc.isEmpty())
    {
      g_memberGroupDocs+="\n\n";
    }
    g_memberGroupDocs+=e->doc;
    MemberGroupInfo *info=Doxygen::memGrpInfoDict.find(g_memberGroupId);
    if (info) 
    {
      info->doc = g_memberGroupDocs;
      info->docFile = fileName;
      info->setRefItems(e->sli);
    }
    e->doc.resize(0);
    e->brief.resize(0);
  }
}


#if !defined(YY_FLEX_SUBMINOR_VERSION) 
//----------------------------------------------------------------------------
extern "C" { // some bogus code to keep the compiler happy
  void commentScanYYdummy() { yy_flex_realloc(0,0); } 
}
#endif


