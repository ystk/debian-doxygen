
#line 3 "<stdout>"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define yy_create_buffer fcodeYY_create_buffer
#define yy_delete_buffer fcodeYY_delete_buffer
#define yy_flex_debug fcodeYY_flex_debug
#define yy_init_buffer fcodeYY_init_buffer
#define yy_flush_buffer fcodeYY_flush_buffer
#define yy_load_buffer_state fcodeYY_load_buffer_state
#define yy_switch_to_buffer fcodeYY_switch_to_buffer
#define yyin fcodeYYin
#define yyleng fcodeYYleng
#define yylex fcodeYYlex
#define yylineno fcodeYYlineno
#define yyout fcodeYYout
#define yyrestart fcodeYYrestart
#define yytext fcodeYYtext
#define yywrap fcodeYYwrap
#define yyalloc fcodeYYalloc
#define yyrealloc fcodeYYrealloc
#define yyfree fcodeYYfree

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 35
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;
#endif /* ! C99 */

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! FLEXINT_H */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE fcodeYYrestart(fcodeYYin  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#define YY_BUF_SIZE 262144
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

extern yy_size_t fcodeYYleng;

extern FILE *fcodeYYin, *fcodeYYout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    #define YY_LESS_LINENO(n)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up fcodeYYtext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up fcodeYYtext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	yy_size_t yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via fcodeYYrestart()), so that the user can continue scanning by
	 * just pointing fcodeYYin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* Stack of input buffers. */
static size_t yy_buffer_stack_top = 0; /**< index of top of stack. */
static size_t yy_buffer_stack_max = 0; /**< capacity of stack. */
static YY_BUFFER_STATE * yy_buffer_stack = 0; /**< Stack as an array. */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* yy_hold_char holds the character lost when fcodeYYtext is formed. */
static char yy_hold_char;
static yy_size_t yy_n_chars;		/* number of characters read into yy_ch_buf */
yy_size_t fcodeYYleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 0;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow fcodeYYwrap()'s to do buffer switches
 * instead of setting up a fresh fcodeYYin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void fcodeYYrestart (FILE *input_file  );
void fcodeYY_switch_to_buffer (YY_BUFFER_STATE new_buffer  );
YY_BUFFER_STATE fcodeYY_create_buffer (FILE *file,int size  );
void fcodeYY_delete_buffer (YY_BUFFER_STATE b  );
void fcodeYY_flush_buffer (YY_BUFFER_STATE b  );
void fcodeYYpush_buffer_state (YY_BUFFER_STATE new_buffer  );
void fcodeYYpop_buffer_state (void );

static void fcodeYYensure_buffer_stack (void );
static void fcodeYY_load_buffer_state (void );
static void fcodeYY_init_buffer (YY_BUFFER_STATE b,FILE *file  );

#define YY_FLUSH_BUFFER fcodeYY_flush_buffer(YY_CURRENT_BUFFER )

YY_BUFFER_STATE fcodeYY_scan_buffer (char *base,yy_size_t size  );
YY_BUFFER_STATE fcodeYY_scan_string (yyconst char *yy_str  );
YY_BUFFER_STATE fcodeYY_scan_bytes (yyconst char *bytes,yy_size_t len  );

void *fcodeYYalloc (yy_size_t  );
void *fcodeYYrealloc (void *,yy_size_t  );
void fcodeYYfree (void *  );

#define yy_new_buffer fcodeYY_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        fcodeYYensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            fcodeYY_create_buffer(fcodeYYin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        fcodeYYensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            fcodeYY_create_buffer(fcodeYYin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define fcodeYYwrap(n) 1
#define YY_SKIP_YYWRAP

typedef unsigned char YY_CHAR;

FILE *fcodeYYin = (FILE *) 0, *fcodeYYout = (FILE *) 0;

typedef int yy_state_type;

extern int fcodeYYlineno;

int fcodeYYlineno = 1;

extern char *fcodeYYtext;
#define yytext_ptr fcodeYYtext

static yy_state_type yy_get_previous_state (void );
static yy_state_type yy_try_NUL_trans (yy_state_type current_state  );
static int yy_get_next_buffer (void );
static void yy_fatal_error (yyconst char msg[]  );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up fcodeYYtext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	fcodeYYleng = (size_t) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;

#define YY_NUM_RULES 52
#define YY_END_OF_BUFFER 53
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_acclist[1249] =
    {   0,
       37,   37,   53,   51,   52,   50,   52,   51,   52,   49,
       51,   52,   51,   52,   41,   51,   52,   51,   52,   50,
       52,   51,   52,   51,   52,   51,   52,   44,   51,   52,
       44,   51,   52,   44,   51,   52,   44,   51,   52,   44,
       51,   52,   44,   51,   52,   44,   51,   52,   44,   51,
       52,   44,   51,   52,   44,   51,   52,   44,   51,   52,
       44,   51,   52,   44,   51,   52,   44,   51,   52,   44,
       51,   52,   44,   51,   52,   44,   51,   52,   51,   52,
       41,   44,   51,   52,   44,   51,   52,   34,   51,   52,
       34,   41,   51,   52,   12,   50,   52,   11,   51,   52,

       11,   41,   51,   52,   19,   50,   52,   18,   51,   52,
       17,   51,   52,   17,   41,   51,   52,   37,   51,   52,
       39,   50,   52,   37,   51,   52,   37,   49,   51,   52,
       37,   51,   52,   37,   41,   51,   52,    9,   50,   52,
       51,   52,    5,   51,   52,    5,   41,   51,   52,   51,
       52,    7,   51,   52,    8,   51,   52,    8,   41,   51,
       52,   23,   51,   52,   22,   51,   52,   22,   41,   51,
       52,   32,   50,   52,   30,   51,   52,   28,   51,   52,
       29,   51,   52,   27,   51,   52,   27,   51,   52,   27,
       51,   52,   27,   51,   52,   27,   51,   52,   27,   51,

       52,   27,   51,   52,   27,   51,   52,   27,   51,   52,
       27,   51,   52,   27,   51,   52,   27,   51,   52,   27,
       41,   51,   52,   31,   50,   52,   48,   51,   52,   48,
       51,   52,   47,   48,   49,   51,   52,   48,   51,   52,
       41,   48,   51,   52,   40,   46,   45,   41,   36,   42,
       43,   35,   44,   44,   44,   44,   44,   44,   44,   44,
       44,   44,   44,   44,   44,16386,   44,   44,   44,   44,
       44,16386,   44,   44,   44,   44,   44,   44,   44,   44,
       44,   44,   44,   44,   44,   44,   44,   44,   44,   44,
       44,   44,   41,   35,   41,   41,   44,   41,   44,   41,

       44,   41,   44,   41,   44,   41,   44,   44,   34,   34,
       34,   41,   34,   41,   11,   11,   11,   41,   11,   41,
       18,   17,   17,   17,   41,   17,   41,   37,   38,   37,
       37,   46,   37,   45,   37,   41,    5,    5,    5,   41,
        5,   41,    7,    7,    8,    8,    8,   41,    8,   41,
       22,   22,   22,   41,   22,   41,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   41,   27,   41,   27,
       41,   27,   41,   43,   43,   44,   44,   44,   44,   44,
       44,   44,   44,   44,   44,   44,   44, 8194, 8194, 8194,

       35,   44,   44,   44,   44,   44,   44,   44,   44,   44,
       44,   44,   44,   44,   44,   44,   44,   44,   44,   44,
       44,   44,   44,   44,   44,   44,   44,   44,   44,   44,
       44,   44,   44,   41,   44,   41,   44,   41,   44,   41,
       44,   41,   44,   41,   44,   44,16398,16404,   38,   38,
       37,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   41,   27,   41,   44,   44,   44,    1,   44,   44,
    16386,   44,   44,   44,   44,   44,16386,   44,   44, 8194,
     8194, 8194,   35,   44,   44,   44,16386,    3,    3,   44,

       44,   44,   44,   44,   44,   44,   44,   44,   44,   44,
    16386,   44,   44,   44,   44,   44,   44,   25,   44,   44,
    16386,   44,16399,   44,   25,   44,   44,   44,16386,   44,
       44,   44,16386,   44,16394,    4,   44,   44,   44,16398,
    16404,    1,   41,   44,   41,   44,16386,   41,   44,   41,
       44,   41,   44,   41,   44,    3,16398,16404,    3, 8206,
     8212, 8206, 8212,   44,   44,   44,   44,   44,   44,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       41,   27,   41,   44,   44,   44,    1,   33,    1,   35,

       44,   44,16386,   44,   44,   44,   44,   44,   44,   44,
    16386,   44,16386,   44,   44,   44,   44,   44,   44,   44,
       44,   44,   44,   44,   44,   44,   44,   44,   44,16399,
       24,16399,   24,   35,   24,   44,   44,   44,   44,   44,
       44, 8202, 8202,   21,   35,   44,16386,   44,16386,   44,
    16386,16398,16404,    1,   33,   41,    1,   35,   41, 8194,
       41, 8194,   35,   41, 8194,   41,   41,   44,   41,   44,
    16386,   41,   44,   41,   44,16398,16404,   44,   44,   44,
       44,   44,   44,    6,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,

       26,   26,   26,   27,   27,   27,   41,   27,   41,   44,
       44,   44,   44,   44,   44,   44,   44,   44,   44,16386,
    16386,   44,   44,   44,   44,   44,   44,   44,   44,   44,
       44,16394,   44,   44,   44,   44,   44,   25,   44,   35,
    16399,16399,   44,   44,   44,   44,16386,   44,   25,   44,
     8194,   41, 8194,   41, 8194,   35,   41,   41,   44,   41,
       44,   41,   44,   44,   44,   44,   44,   44,   44,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   41,   27,
       41,   44,   44,   44,   44,   44,16399,   44,   44,   44,

       44, 8194,    3,   44,   44,   44,   44,16386,   44,16399,
       35,   44,   44,   44,16399, 8202,   44,   44,   25,   44,
       25,   44,   44,16394,16399,   24,16399,16399,   24,16399,
       44,   44,   44,   44,   41,   44,   41,   44,16399,   41,
       44,   44,   44,   44,   44,   44,   44,16398,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   26,   27,   27,   41,   27,   41,   44,   44,16386,
       44,   44,   44,   44,16386,   44,   44,   44,   25,   44,
       44,   44,   44,   44,   25,   44,   44, 8202,   44,   44,
       44,   44,16398,   41,   44,   41,16399,   24,   41,16399,

       24,   35,   41,   41,   24,   41,   41,   44,   41,   44,
       41,   44,16386,   44,   44,   44,   44,   44,16398, 8206,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       41,   41,   26,   41,   26,   41,   41,   26,   41,   44,
       44,16386,   44,   44,16386,   44,16399,   44,   44,   25,
       44,   16,   44,   44,16394,   25,   44,   25,   44,   44,
       44,   25,   44,   44,16398,   41,   44,16399,   35,   41,
       41,   41,   41,   41,16399,   41,   41,16399,   41,   44,
       41,   44,   44,   44,   44,16398,   44,   44,16398,   27,
       27,   27,   27,   27,   27,   27,   27,   41,   41,   41,

       41,   41,   41,   44,   44,16386,16386,16399,   24,16399,
       24,   35,   44,16386,   35,   13,   44,   25,   44,   44,
       44,16398,   41,16399,   24,   41,16399,   24,   35,   41,
       41,   41,   41,   41,16399,   24,   41,16399,   41,16399,
       24,   41,16399,   41,   44,   41,   44,   13,16398,   44,
       44,   44,16398,   44,16398,16398,16398,   27,   26,   26,
       41,   26,   41,   26,   41,   41,   41,   26,   41,   25,
       44,   35,16399,16399,   25,   13,   13,   44,   44,   44,
     8202,16398,   35,   41,   41,   41,16399,   41,   41,   41,
    16399,   41,   41,   41,   44,   41,   44,   13,16398,   13,

     8206,   44,16404,   44,   44,   27,   41,   41,   41,   41,
       41,   41,16399,   24,16399,16399,   25,   13,   44,16386,
       44,   44,16404,   41,16399,   24,   41,16399,   41,   41,
    16399,   41,   41,   41,   44,   41,   44,   13,16398,   13,
    16398,16404, 8212,   44,16398,   44,   26,   26,   41,   26,
       41,   41,   41,16399,   24,16399,   13,16386, 8207,   44,
    16404,16398,   41,16399,   24,   41,16399,   41,   41,   41,
       44,   41,   44,   13,16398,   13,16398,   13,16398,   13,
    16398,16404,   44,16404,   26,   41,   26,   41,   13, 8207,
       44,16404,   41,   41,   41,   44,   41,   44,   13,16398,

    16404,16404,16404,   13,   41,   41,   41,   44,   41,   44,
       13,16398,16399,   13,16386,   41,   41, 8207,   41,   41,
       44,   13,16398,   13, 8207,   41,   41,   41,   44,   13,
    16398,   13,   41,   13,16398,   13,   13,16398,   13,   13,
    16398,    3,   13,    3,   13,16398,    3, 8206
    } ;

static yyconst flex_int16_t yy_accept[1196] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    2,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    4,    6,    8,   10,   13,   15,   18,   20,   22,
       24,   26,   28,   31,   34,   37,   40,   43,   46,   49,
       52,   55,   58,   61,   64,   67,   70,   73,   76,   79,
       81,   85,   88,   91,   95,   98,  101,  105,  108,  111,
      114,  118,  121,  124,  127,  131,  134,  138,  141,  143,
      146,  150,  152,  155,  158,  162,  165,  168,  172,  175,
      178,  181,  184,  187,  190,  193,  196,  199,  202,  205,

      208,  211,  214,  217,  220,  224,  227,  230,  233,  238,
      241,  245,  245,  246,  247,  248,  249,  249,  249,  250,
      250,  251,  251,  252,  252,  253,  254,  255,  256,  257,
      258,  259,  260,  261,  262,  263,  264,  265,  267,  268,
      269,  270,  271,  273,  274,  275,  276,  277,  278,  279,
      280,  281,  282,  283,  284,  285,  286,  287,  288,  289,
      290,  291,  292,  293,  293,  293,  294,  296,  298,  300,
      302,  304,  306,  308,  309,  310,  311,  313,  315,  316,
      317,  319,  321,  322,  323,  324,  326,  328,  329,  329,
      330,  331,  333,  335,  337,  337,  337,  338,  339,  341,

      343,  343,  344,  345,  346,  347,  349,  351,  352,  353,
      355,  357,  358,  359,  360,  361,  362,  363,  364,  365,
      366,  367,  368,  369,  370,  371,  372,  373,  374,  375,
      376,  378,  380,  382,  384,  384,  385,  386,  387,  388,
      389,  390,  391,  392,  393,  394,  395,  396,  397,  398,
      399,  400,  402,  403,  404,  405,  406,  407,  408,  409,
      410,  411,  412,  413,  414,  415,  416,  417,  418,  419,
      420,  421,  422,  423,  424,  425,  426,  427,  428,  429,
      430,  431,  432,  433,  434,  434,  436,  438,  440,  442,
      444,  446,  449,  450,  451,  452,  452,  453,  454,  455,

      456,  457,  458,  459,  460,  461,  462,  463,  464,  465,
      466,  467,  468,  469,  470,  471,  473,  475,  476,  477,
      478,  480,  482,  483,  484,  485,  486,  488,  489,  490,
      491,  492,  494,  495,  496,  498,  499,  500,  501,  502,
      503,  504,  505,  506,  507,  508,  509,  510,  512,  513,
      514,  515,  516,  517,  518,  520,  522,  524,  525,  527,
      528,  530,  531,  532,  534,  536,  537,  538,  539,  540,
      542,  545,  548,  550,  552,  554,  556,  559,  562,  564,
      565,  566,  567,  568,  569,  570,  570,  571,  572,  573,
      574,  575,  576,  577,  578,  579,  580,  581,  582,  583,

      584,  585,  586,  587,  588,  589,  590,  592,  594,  595,
      596,  597,  599,  601,  602,  604,  605,  606,  607,  608,
      609,  610,  610,  610,  610,  610,  610,  610,  610,  610,
      610,  610,  610,  610,  610,  612,  614,  615,  616,  617,
      618,  619,  620,  621,  622,  623,  624,  625,  626,  627,
      628,  629,  630,  631,  633,  635,  635,  636,  637,  638,
      639,  640,  641,  642,  643,  644,  646,  646,  648,  650,
      652,  654,  654,  654,  654,  654,  654,  654,  657,  660,
      662,  665,  667,  669,  672,  674,  676,  678,  678,  678,
      678,  678,  679,  680,  681,  682,  683,  684,  685,  686,

      687,  688,  689,  690,  691,  692,  693,  694,  695,  696,
      697,  698,  699,  700,  701,  702,  702,  703,  704,  704,
      705,  706,  708,  710,  711,  712,  712,  713,  714,  715,
      716,  717,  718,  719,  720,  720,  720,  720,  720,  720,
      720,  720,  720,  721,  721,  721,  722,  722,  722,  722,
      722,  722,  722,  722,  722,  722,  722,  723,  724,  725,
      726,  727,  728,  729,  730,  731,  733,  734,  735,  736,
      737,  738,  740,  741,  741,  741,  741,  742,  742,  743,
      744,  745,  746,  748,  749,  751,  751,  751,  751,  751,
      751,  751,  751,  751,  753,  755,  758,  760,  762,  764,

      764,  764,  765,  766,  767,  768,  769,  770,  771,  772,
      773,  774,  775,  776,  777,  778,  779,  780,  781,  782,
      783,  784,  785,  786,  786,  786,  786,  786,  786,  787,
      788,  790,  792,  793,  794,  794,  795,  796,  798,  799,
      800,  801,  801,  802,  802,  802,  802,  802,  802,  802,
      802,  802,  804,  804,  804,  804,  804,  804,  804,  804,
      804,  804,  804,  804,  804,  804,  805,  806,  807,  809,
      811,  811,  812,  813,  814,  816,  817,  818,  819,  821,
      823,  825,  825,  825,  826,  828,  829,  831,  832,  833,
      834,  835,  835,  835,  835,  835,  835,  835,  835,  835,

      837,  840,  842,  842,  843,  844,  845,  846,  847,  849,
      850,  851,  852,  853,  853,  854,  855,  856,  856,  856,
      857,  858,  859,  860,  861,  862,  862,  863,  864,  866,
      868,  869,  871,  872,  872,  873,  874,  876,  877,  878,
      878,  879,  879,  879,  879,  879,  879,  879,  879,  879,
      879,  879,  879,  879,  879,  879,  879,  879,  879,  879,
      879,  879,  879,  879,  879,  881,  882,  883,  883,  883,
      883,  884,  885,  885,  887,  888,  889,  889,  889,  890,
      891,  892,  893,  893,  893,  893,  893,  893,  893,  893,
      894,  896,  898,  901,  904,  905,  907,  909,  911,  914,

      914,  915,  916,  917,  918,  919,  920,  921,  922,  923,
      924,  924,  925,  926,  926,  926,  926,  927,  928,  929,
      930,  932,  933,  935,  937,  938,  940,  941,  943,  944,
      944,  946,  948,  949,  950,  950,  952,  952,  952,  952,
      952,  952,  952,  952,  952,  952,  952,  952,  952,  952,
      952,  952,  953,  953,  954,  954,  954,  956,  958,  958,
      960,  960,  960,  961,  962,  964,  965,  965,  965,  965,
      965,  965,  965,  965,  966,  969,  971,  972,  973,  974,
      976,  977,  979,  981,  983,  983,  984,  985,  987,  988,
      989,  990,  991,  992,  993,  993,  994,  994,  994,  995,

      996,  997,  999, 1000, 1001, 1002, 1003, 1004, 1005, 1007,
     1008, 1009, 1011, 1013, 1013, 1015, 1015, 1016, 1016, 1016,
     1016, 1016, 1016, 1016, 1016, 1016, 1016, 1017, 1017, 1017,
     1018, 1018, 1019, 1019, 1019, 1019, 1019, 1019, 1020, 1021,
     1022, 1022, 1022, 1022, 1022, 1023, 1023, 1023, 1025, 1028,
     1031, 1032, 1033, 1034, 1036, 1039, 1041, 1044, 1046, 1048,
     1050, 1051, 1052, 1054, 1055, 1056, 1057, 1058, 1059, 1059,
     1060, 1061, 1061, 1061, 1061, 1061, 1061, 1061, 1061, 1061,
     1062, 1064, 1066, 1067, 1068, 1070, 1072, 1073, 1073, 1074,
     1074, 1074, 1075, 1075, 1076, 1076, 1076, 1076, 1076, 1076,

     1076, 1076, 1076, 1077, 1078, 1078, 1079, 1079, 1079, 1079,
     1079, 1079, 1080, 1081, 1081, 1082, 1082, 1082, 1083, 1083,
     1085, 1086, 1088, 1089, 1090, 1092, 1093, 1094, 1096, 1098,
     1100, 1102, 1104, 1105, 1106, 1107, 1107, 1107, 1107, 1107,
     1107, 1107, 1107, 1107, 1107, 1107, 1107, 1108, 1109, 1110,
     1111, 1112, 1113, 1114, 1116, 1116, 1117, 1118, 1118, 1118,
     1118, 1118, 1118, 1118, 1118, 1119, 1119, 1121, 1121, 1121,
     1121, 1121, 1122, 1123, 1124, 1124, 1124, 1126, 1129, 1130,
     1132, 1133, 1134, 1136, 1138, 1140, 1142, 1143, 1144, 1146,
     1147, 1147, 1148, 1148, 1148, 1148, 1149, 1149, 1149, 1150,

     1152, 1153, 1154, 1155, 1157, 1157, 1157, 1157, 1157, 1157,
     1157, 1157, 1158, 1159, 1159, 1159, 1159, 1160, 1161, 1162,
     1163, 1163, 1165, 1168, 1169, 1170, 1172, 1174, 1176, 1178,
     1180, 1182, 1183, 1185, 1185, 1186, 1186, 1187, 1189, 1189,
     1189, 1189, 1189, 1190, 1190, 1191, 1191, 1192, 1193, 1194,
     1195, 1197, 1199, 1201, 1202, 1203, 1204, 1204, 1204, 1204,
     1205, 1205, 1205, 1206, 1207, 1209, 1211, 1213, 1213, 1214,
     1214, 1215, 1216, 1217, 1218, 1220, 1222, 1224, 1224, 1225,
     1227, 1228, 1230, 1232, 1233, 1234, 1236, 1237, 1239, 1240,
     1242, 1244, 1247, 1249, 1249

    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    4,    5,    6,    7,    1,    8,    9,   10,   11,
       12,   13,    1,   14,    1,    1,    1,   15,   15,   15,
       15,   15,   15,   15,   15,   15,   15,   16,    1,    1,
        1,   17,    1,    1,   18,   19,   20,   21,   22,   23,
       24,   25,   26,   27,   28,   29,   30,   31,   32,   33,
       34,   35,   36,   37,   38,   39,   40,   41,   42,   43,
        1,   44,    1,    1,   27,    1,   45,   46,   47,   48,

       49,   50,   51,   52,   53,   27,   54,   55,   56,   57,
       58,   59,   60,   61,   62,   63,   64,   65,   66,   67,
       68,   69,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst flex_int32_t yy_meta[70] =
    {   0,
        1,    2,    3,    2,    4,    1,    1,    1,    1,    1,
        5,    1,    1,    1,    6,    1,    7,    8,    8,    8,
        8,    8,    8,    8,    8,    8,    8,    8,    8,    8,
        8,    8,    8,    8,    8,    8,    8,    8,    8,    8,
        8,    8,    8,    1,    8,    8,    8,    8,    8,    8,
        8,    8,    8,    8,    8,    8,    8,    8,    8,    8,
        8,    8,    8,    8,    8,    8,    8,    8,    8
    } ;

static yyconst flex_int16_t yy_base[1296] =
    {   0,
        0,    6,   53,    0,  122,  166,  140,  182,  229,  273,
      146,  247,  320,  364,  152,  294,  411,  455,  502,  546,
      593,  637,  684,    1,  211,  339,  217,  385,  259,  430,
      582, 6735, 6735,  571, 6735,  153,    0,   13,   23,   20,
      540,   27,  752,  196,  813,  870,  753,  527,   28,  833,
      758,  768,  794,  927,  294,  869,  895,  620,  832,  474,
      991, 1010,  525, 1077, 6735,  524, 1121, 6735,    0,  520,
     1165,    0,   31,   21,    0,  155,    0, 6735,  772,  510,
     1209,   38,  138,  509, 1253, 6735,  506, 1297, 6735, 6735,
     6735, 6735,  332,  477,  468,  469,  746,  197,  234,  280,

      926,  297,  340,  385, 1341, 6735, 6735,  478, 6735,  262,
        0,  450, 6735, 6735, 6735,    0,  189,  435, 6735,  446,
     6735,  199,  433,  204, 6735,  346,  395,  871, 1011,  791,
     1359,  526,  928, 1360, 1105,  566, 1046, 1060, 1390,  565,
     1149, 1225,  483, 1285, 1385,  610,  615, 1409, 1325, 1027,
     1421, 1440, 1099, 1365, 1439, 1462,  964, 1465, 1139, 1480,
     1181, 1481, 1269,  817,  325,  349,    0, 1539, 1583,  418,
     1442,  919, 1480, 1187,    0,  430, 1645, 1689,    0,  426,
     1733, 1777,    0,    0,  423, 1821, 1865,    0,  254,   29,
      431,    0,    0,    0,  876,  332,    0,  416, 1909, 1953,

      390,  306,  405,    0,  386, 1997, 2041,    0,  381, 2085,
     2129,    0,  347,  560,  614,  756,  762,  765,  810,  840,
      861,  521,  974,  750,  826,  920, 1009, 1186, 1030,  921,
     2173, 2217, 2261, 1463,  351,    0,  325, 1571, 1602, 1230,
     1663, 1270, 1605, 1518, 1715, 1673, 1556, 1751, 1510,  435,
        0,    0, 1313, 1794, 1620, 1837, 1621, 1561, 1927, 1974,
     2278, 1705, 2024, 1893, 1750, 1626, 2069, 1797, 1840, 2103,
     1710, 2191, 2150, 1885, 1890, 1926, 2249, 1969, 2281, 2014,
      656, 2284, 2300, 2113,  607, 2355, 2410, 1005, 1466, 2011,
     2272, 2458,  313, 6735,  312,  563, 1002, 1367, 1125, 1090,

      906, 1003, 1096, 2415, 1137, 1222,  935, 1263, 1364, 1261,
     1316, 1434, 1369, 1412, 1228, 2263, 2283, 1800, 1975, 2321,
      662, 2063, 2019, 2057, 2374, 2149, 2108, 2379, 2436,    0,
      440,    0, 2437, 2194, 2233, 2520, 6735, 2442, 2329, 2339,
     2508, 2532, 2573, 2585, 2591, 2533, 2590, 2610, 2626, 2636,
     2646, 2391, 2652, 2667,  668, 2686, 2719, 2670, 1319, 2692,
     2713, 2734, 2739, 2749, 2768,  858, 2763, 2782, 2785, 2833,
     1970, 2799, 1839,  927, 2054, 2193, 2895, 6735, 6735, 2559,
     2818, 2813, 2812, 2840, 2870,  988, 1363, 1420, 1509, 2140,
     1653, 1599, 1736, 2456, 1742, 1666, 1547, 1830, 1648, 1755,

     2430, 1803, 2514, 2372, 1929, 1707,  949, 2413, 2899, 2909,
     2925, 1095, 6735, 2945, 2850, 2828, 2948, 2964, 2967, 2904,
     2979,    0, 2441, 1003, 2959, 2967, 2291, 2977, 1340, 1873,
     1359, 2265, 1465, 2618, 3017, 3035, 3040, 3041, 3055, 3058,
     2991, 3061, 3076, 3075, 3099, 3105, 3081, 3119, 3131, 3141,
     3146, 3147, 3161, 3177,  289, 2155, 6735, 3171, 3181, 3197,
     3191, 3203, 3227, 1145, 6735, 6735, 2500, 3246, 3266, 3271,
        0, 1953, 2051, 2089, 2131, 2309, 2309, 1240,    0, 1566,
        0,    0, 2613, 3285, 1794, 2281,    0, 3248, 2417, 2642,
     2430, 3261, 3291, 3299, 3251, 3311, 3325, 6735, 1838, 1968,

     2600, 2536, 2637, 2683, 2687, 2707, 2592, 2742, 2154, 2831,
     2776, 2845, 2662, 2193, 6735, 2880, 3213,  259, 2744, 2603,
     2743, 3299, 3066, 3337, 3349, 3321, 3357, 3374, 3375, 3393,
     3394, 3408, 3232, 3411, 2460, 2528, 2576, 2675, 2736, 2845,
     2842, 1982, 3425, 2854, 2269, 3429, 2874, 2907, 2305, 2364,
     2383, 2932, 2929, 2456, 3423, 2473, 3442, 3452, 3460, 3466,
     3481, 3478, 3493, 3503, 3515, 3518, 3532, 3544, 3547, 3552,
     3564, 3569,  258, 2959, 2971,  251, 3574, 3341, 3589, 3607,
     3612, 3615, 3631, 3645, 3646, 2982, 3327, 3017, 3045, 2583,
     3073, 2918, 3080,    0, 2199,    0, 3188, 3358, 3416, 3464,

     2922, 3651, 3661, 3673, 3676, 3688, 3691, 3103, 3140, 3217,
     3145, 3692, 3318, 3276, 3464, 3710, 3301, 3201, 3293, 3355,
     3522, 3032, 2241,  236,  235, 3715, 3718, 3728, 3367, 3737,
     3622, 3554, 3743, 3753, 3008, 3758, 3774, 3822, 3768, 3782,
     3797, 3807, 3842, 3188, 3292, 3048, 3381, 3416, 3465, 3542,
     3480,    0, 3547, 3830, 3560, 3564, 3568, 3612, 3565, 3630,
     3632, 3613, 3654, 3675, 3672, 3839, 3859, 3860, 3877, 3922,
     2394, 3896, 3897, 3903, 3983, 3946, 3891, 3951, 3928, 3959,
     3978, 3693, 3655, 3999, 4000, 3984, 4024, 4028, 4052, 4027,
     4053, 3710, 3748, 3751, 3753, 3718, 3756, 3742, 3765, 3793,

     4112, 3803, 3753, 4067, 4086, 4116, 4094, 4135, 4138, 3804,
     3798, 4162, 3889, 3772, 3858, 3896, 4168, 2807, 4154, 3833,
     4183, 3912, 3968, 4069, 4096, 4199, 4200, 3956, 4054, 4215,
     4219, 4233, 4241, 3852, 4251, 4257, 4271, 4276, 4291, 3907,
     4296, 3849, 3862, 3924,  486, 3891, 3946,  530, 3989,  672,
     4306, 3993, 4058, 4069, 4091, 3998, 1191, 2773, 4104, 3973,
     4186, 4110, 4111, 4114, 4301, 4313, 4319, 4329, 4034, 4051,
     4334, 4342, 4058, 4356, 4362, 4361, 4118, 4134, 4377, 4389,
     4394, 4397, 4153, 4177, 4183, 4189, 4196, 4206, 4225, 4338,
     4368, 4409, 4433,  141, 4423,    0, 4346, 4393, 4459, 4229,

     4449, 4463, 4478, 4483, 4488, 4507, 6735, 4387, 4274, 4419,
     4236, 4462, 4518, 4512, 4257, 4256, 4421, 4526, 4489, 4227,
     4470, 4543, 4544,  206, 4521,    0, 4547, 4557, 4562, 4182,
     4576, 4609, 4582, 4590, 4255, 4604, 4281, 4321, 4596, 4517,
     4354, 4320, 4624, 4631, 4419, 4391, 4457, 4421, 4634, 4637,
     4644, 4605, 4647, 4650, 4651, 4506, 4665, 4662, 4531, 4670,
     4551, 4563, 4684, 4685, 4690, 4709, 4567, 4577, 4603, 4620,
     4635, 4657, 4652, 4723, 4757,  299, 4653, 4655,  390, 4728,
     4731, 4739, 4725, 4699, 4714, 4781, 4784, 4806, 4801, 4821,
     4838, 4683, 4833, 4848, 4718, 4850, 4858, 4666, 4863, 4871,

     4877, 4892,  479,  561, 4893, 4818, 4907, 4913, 4927, 4869,
     4923, 4941,  212, 4945, 4964, 4946,  207, 4737, 4728, 4742,
     4949, 4759, 4741, 4777, 4774, 4796,  581, 4896, 4798, 4961,
     4978, 6735, 4838,  787, 4808, 4886, 4876, 4984, 4985, 5000,
     4895, 4924, 4923, 4956, 5003, 4953, 4956, 5010, 5026,  575,
     5023, 4963, 4994, 5041, 5057, 5061, 5077, 5004, 5009, 5112,
     5081, 5120, 5139, 5144, 5158, 5169, 5173, 5052, 5145, 5178,
      193, 5179, 5126,  192, 5009, 5183, 5094, 5031, 1195, 5194,
     5197,  576, 5198, 5210, 5214, 5218,  177,  152, 5232, 5236,
      148, 5248,  142,  676, 5049, 5060, 5041, 5057, 5063, 5088,

     5089, 5162,    0, 5202, 5122, 5254, 5156, 5268, 5096, 5179,
     5186, 5275, 5281, 5135, 6735, 5196, 5197, 5297, 5213,  858,
      966, 5307, 5293, 1101, 5313, 5234, 5196, 5256, 5290, 5375,
        0, 5349, 5391, 5392, 5331,  136,  135, 5354, 5329,  129,
     5400,   39, 5416, 5234, 5251, 5397, 1145, 1235, 5422, 5433,
     1323, 5439, 5454, 5455,   33, 5470,  907, 5305, 5459, 5267,
     5353, 5271, 5337, 5471, 5370, 5390, 5485, 5499, 5404, 5390,
     5441, 5508, 5511, 5531, 5460, 5461, 5527, 5535, 1365, 5543,
     5458, 5466, 5534, 5526, 5605, 5649, 5621, 6735, 5625, 5665,
     5551, 5570,   29, 5631, 5675, 5681, 5478, 5576, 5692, 5705,

     1394, 5709, 5713, 5724, 5499, 5592, 5552, 5599, 5582, 5642,
     5512, 5616, 5728, 5634, 1284, 5644, 5739, 5742, 5765, 5775,
     5619, 5779, 5783, 5617, 5640, 5740, 5696, 5805, 5845, 5687,
     5769, 5809, 5861, 5821, 5866, 5708, 5867, 5882, 5724, 5635,
     5814, 5727, 5745, 5761, 1289, 5751, 5886, 5900, 5773, 5797,
     5863, 5865, 5872, 5906, 5919, 5923, 5841, 5843, 5818, 5857,
     5891, 1335, 5884, 5890, 5927, 5908, 5910, 5903, 5950, 5840,
     5896, 5944, 1765, 5905, 5966, 5920, 5932, 5968, 5899, 1945,
     5929, 5979, 5950, 5952, 1992, 5954, 5953, 5968, 5992, 5995,
        0, 6002, 6735, 6735, 6056, 6064, 6072, 6080, 6088, 6096,

     6104, 6112, 6120, 6128, 6136, 6144, 6151, 6158, 6166, 6169,
     6177, 6180, 6188, 6196, 6199, 6207, 6215, 6223, 6231, 6234,
     6242, 6245, 6253, 6256, 6264, 6267, 6275, 6283, 6286, 6293,
     6301, 6304, 6307, 6315, 6323, 6326, 6329, 6337, 6345, 6353,
     6356, 6359, 6367, 6375, 6383, 6391, 6399, 6402, 6405, 6413,
     6421, 6424, 6427, 6435, 6443, 6446, 6449, 6457, 6465, 6468,
     6471, 6479, 6487, 6495, 6498, 6501, 6508, 6516, 6524, 6532,
     6540, 6548, 6556, 6564, 6571, 6579, 6586, 6594, 6602, 6610,
     6618, 6625, 6633, 6641, 6649, 6657, 6665, 6673, 6681, 6689,
     6697, 6704, 6712, 6719, 6726

    } ;

static yyconst flex_int16_t yy_def[1296] =
    {   0,
     1195, 1195, 1194,    3, 1196, 1196, 1195, 1195, 1197, 1197,
     1195, 1195, 1198, 1198, 1199, 1199, 1200, 1200, 1201, 1201,
     1202, 1202, 1194,   23, 1195, 1195, 1195, 1195, 1203, 1203,
     1194, 1194, 1194, 1204, 1194, 1194, 1205, 1194, 1194, 1204,
     1206, 1207, 1208, 1208, 1208, 1208, 1208, 1208, 1208, 1208,
     1208, 1208, 1208, 1208, 1208,   46, 1208, 1208, 1208, 1194,
     1209, 1208, 1210, 1211, 1194, 1212, 1213, 1194, 1214, 1215,
     1216, 1217, 1194, 1218, 1217, 1217, 1219, 1194, 1194, 1220,
     1221, 1194, 1194, 1222, 1223, 1194, 1224, 1225, 1194, 1194,
     1194, 1194, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226,

     1226, 1226, 1226, 1226, 1227, 1194, 1194, 1204, 1194, 1194,
     1205, 1228, 1194, 1194, 1194, 1205, 1194, 1194, 1194, 1206,
     1194, 1207, 1229, 1194, 1194, 1230, 1208, 1208, 1208, 1208,
     1208, 1208, 1208, 1208, 1208, 1208, 1208, 1208, 1208, 1208,
     1208, 1208, 1208, 1208, 1208, 1208, 1208, 1208, 1208, 1208,
     1208, 1208, 1208, 1208, 1208, 1208, 1208, 1208, 1208, 1208,
     1208, 1208, 1208, 1194, 1194, 1205, 1205, 1231, 1209,  169,
      169,  169,  169, 1208, 1232, 1233, 1234, 1235, 1236, 1237,
     1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1194, 1194,
     1246, 1245, 1245, 1247, 1194, 1194, 1248, 1249, 1250, 1251,

     1194, 1194, 1194, 1252, 1253, 1254, 1255, 1256, 1257, 1258,
     1259, 1260, 1261, 1261, 1261, 1261, 1261, 1261, 1261, 1261,
     1261, 1261, 1261, 1261, 1261, 1261, 1261, 1261, 1261, 1261,
     1262, 1263, 1263,  233, 1264, 1265, 1266, 1267, 1267, 1267,
     1267, 1267, 1267, 1267, 1267, 1267, 1267, 1267, 1267, 1268,
     1268, 1268, 1267, 1267, 1267, 1267, 1267, 1267, 1267, 1267,
     1267, 1267, 1267, 1267, 1267, 1267, 1267, 1267, 1267, 1267,
     1267, 1267, 1267, 1267, 1267, 1267, 1267, 1267, 1267, 1267,
     1267, 1267, 1267, 1267, 1194, 1269, 1269,  287,  287,  287,
      287, 1267, 1194, 1194, 1246, 1194, 1261, 1261, 1261, 1261,

     1261, 1261, 1261, 1261, 1261, 1261, 1261, 1261, 1261, 1261,
     1261, 1261, 1261, 1261, 1261,  233,  233, 1267, 1267, 1267,
     1267, 1267, 1267, 1267, 1267, 1267, 1267, 1267, 1267, 1268,
     1268, 1268, 1267, 1267, 1267, 1194, 1194, 1267, 1267, 1267,
     1267, 1267, 1267, 1267, 1267, 1267, 1267, 1267, 1267, 1267,
     1267, 1267, 1267, 1267, 1267, 1267, 1267, 1267, 1267, 1267,
     1267, 1267, 1267, 1267, 1267, 1194, 1267, 1267, 1267, 1194,
      287,  287,  287,  287,  287,  287,  336, 1194, 1194, 1267,
     1267, 1267, 1267, 1267, 1267, 1194, 1261, 1261, 1261, 1261,
     1261, 1261, 1261, 1261, 1261, 1261, 1261, 1261, 1261, 1261,

     1261, 1261, 1261, 1261, 1261, 1261,  233,  233, 1267, 1267,
     1267, 1194, 1194, 1267, 1267, 1267, 1267, 1267, 1267, 1267,
     1267,  336, 1194, 1194, 1194, 1194, 1194, 1194, 1194, 1194,
     1194, 1194, 1194, 1194, 1267, 1267, 1267, 1267, 1267, 1267,
     1267, 1267, 1267, 1267, 1267, 1267, 1267, 1267, 1267, 1267,
     1267, 1267, 1194, 1194, 1270, 1194, 1194, 1267, 1267, 1267,
     1267, 1267, 1267, 1194, 1194, 1194, 1194, 1267, 1267, 1267,
      370, 1194, 1194, 1194, 1194, 1194, 1194, 1271, 1271, 1272,
     1272, 1272,  287,  287,  287,  287,  377, 1194, 1194, 1194,
     1194, 1267, 1267, 1267, 1267, 1267, 1267, 1194, 1261, 1261,

     1261, 1261, 1261, 1261, 1261, 1261, 1261, 1261, 1261, 1261,
     1261, 1261, 1261, 1261, 1194, 1194, 1194, 1273, 1194, 1261,
     1261,  233,  233, 1267, 1267, 1194, 1267, 1267, 1267, 1267,
     1267, 1267, 1267, 1267, 1194, 1194, 1194, 1194, 1194, 1194,
     1194, 1194, 1194, 1194, 1194, 1194, 1194, 1194, 1194, 1194,
     1194, 1194, 1194, 1194, 1194, 1194, 1267, 1267, 1267, 1267,
     1267, 1267, 1267, 1267, 1267, 1267, 1267, 1267, 1267, 1267,
     1267, 1267, 1270, 1194, 1194, 1270, 1194, 1194, 1194, 1267,
     1267, 1267, 1267, 1267, 1267, 1194, 1194, 1194, 1194, 1194,
     1194, 1194, 1194, 1272, 1272, 1272,  287,  287,  287, 1194,

     1194, 1267, 1267, 1267, 1267, 1267, 1267, 1261, 1261, 1261,
     1261, 1261, 1261, 1261, 1261, 1261, 1261, 1261, 1261, 1261,
     1261, 1261, 1261, 1273, 1273, 1194, 1194, 1194, 1261, 1261,
      233,  233, 1267, 1267, 1194, 1267, 1267, 1267, 1267, 1267,
     1267, 1194, 1267, 1194, 1194, 1194, 1194, 1194, 1194, 1194,
     1194, 1268, 1194, 1194, 1194, 1194, 1194, 1194, 1194, 1194,
     1194, 1194, 1194, 1194, 1194, 1267, 1267, 1267, 1267, 1267,
     1194, 1194, 1267, 1267, 1267, 1194, 1267, 1267, 1267, 1267,
     1267, 1194, 1194, 1194, 1194, 1194, 1194, 1267, 1267, 1267,
     1267, 1194, 1194, 1194, 1194, 1194, 1194, 1194, 1194,  287,

      287,  287, 1194, 1267, 1267, 1267, 1267, 1267, 1267, 1261,
     1261, 1261, 1261, 1194, 1261, 1261, 1261, 1194, 1194, 1261,
     1261, 1261, 1261, 1261, 1261, 1194, 1194, 1261,  233,  233,
     1267, 1267, 1267, 1194, 1267, 1267, 1267, 1267, 1267, 1194,
     1267, 1194, 1194, 1194, 1194, 1194, 1194, 1194, 1194, 1194,
     1194, 1194, 1194, 1194, 1194, 1194, 1194, 1194, 1194, 1194,
     1194, 1194, 1194, 1194, 1267, 1267, 1267, 1194, 1194, 1194,
     1267, 1267, 1194, 1267, 1267, 1194, 1194, 1194, 1267, 1267,
     1267, 1267, 1194, 1194, 1194, 1194, 1194, 1194, 1194, 1194,
      287, 1271, 1271, 1274, 1271, 1271,  287,  287,  287, 1194,

     1267, 1267, 1267, 1267, 1267, 1275, 1194, 1261, 1261, 1261,
     1194, 1261, 1261, 1194, 1194, 1194, 1261, 1261, 1261, 1261,
      233, 1271, 1271, 1276, 1271, 1271, 1267, 1267, 1267, 1194,
     1267, 1267, 1267, 1267, 1194, 1267, 1194, 1194, 1194, 1194,
     1194, 1194, 1194, 1194, 1194, 1194, 1194, 1194, 1194, 1194,
     1194, 1194, 1194, 1267, 1194, 1194, 1267, 1267, 1194, 1267,
     1194, 1194, 1267, 1267, 1267, 1267, 1194, 1194, 1194, 1194,
     1194, 1194, 1194, 1275,  287, 1274, 1271, 1271, 1274, 1271,
     1271, 1271,  287,  287, 1194, 1267, 1267, 1267, 1267, 1267,
     1277, 1261, 1261, 1261, 1194, 1261, 1194, 1194, 1261, 1261,

     1261,  233, 1276, 1276, 1271, 1271, 1271, 1267, 1267, 1194,
     1194, 1194, 1278, 1194, 1267, 1194, 1279, 1194, 1194, 1194,
     1194, 1194, 1194, 1194, 1194, 1194, 1280, 1194, 1194, 1267,
     1194, 1194, 1194, 1194, 1194, 1194, 1194, 1267, 1267, 1267,
     1194, 1194, 1194, 1194, 1194, 1194, 1194, 1271, 1271, 1281,
     1271, 1271, 1271, 1271, 1271, 1271, 1271,  287,  287, 1280,
     1267, 1267, 1267, 1267, 1194, 1282, 1277, 1261, 1194, 1194,
     1283, 1194, 1194, 1284, 1194, 1194, 1194, 1194, 1194, 1271,
     1271, 1285, 1271, 1271, 1271, 1267, 1278, 1278, 1194, 1194,
     1286, 1194, 1279, 1194, 1194, 1194, 1194, 1194, 1194, 1194,

     1194, 1194, 1280, 1280, 1194, 1267, 1194, 1194, 1194, 1194,
     1194, 1267, 1267, 1194, 1194, 1194, 1194, 1194, 1194, 1281,
     1281, 1271, 1271, 1287, 1271, 1271, 1271,  287,  287, 1288,
     1280, 1267, 1267, 1267, 1261, 1283, 1283, 1194, 1194, 1289,
     1194, 1284, 1194, 1194, 1194, 1194, 1285, 1285, 1271, 1271,
     1290, 1271, 1194, 1194, 1286, 1194, 1194, 1194, 1194, 1194,
     1194, 1194, 1194, 1194, 1280, 1194, 1267, 1194, 1194, 1194,
     1194, 1267, 1267, 1194, 1194, 1194, 1271, 1271, 1287, 1271,
     1271, 1271,  287,  287, 1291, 1291, 1292, 1194, 1267, 1267,
     1194, 1194, 1289, 1194, 1194, 1194, 1194, 1194, 1271, 1271,

     1290, 1271, 1194, 1194, 1194, 1194, 1194, 1194, 1194, 1194,
     1194, 1280, 1194, 1194, 1194, 1194, 1194, 1267, 1292, 1194,
     1194, 1271, 1271, 1271, 1271,  287,  287, 1280, 1293, 1086,
     1086, 1294, 1267, 1194, 1194, 1194, 1271, 1271, 1194, 1194,
     1194, 1194, 1280, 1194, 1194, 1194, 1267, 1194, 1271, 1271,
      287,  287, 1086, 1194, 1295, 1294, 1194, 1194, 1194, 1280,
     1194, 1194, 1271, 1271,  287,  287, 1086, 1194, 1194, 1194,
     1280, 1194, 1271, 1271, 1271,  287, 1086, 1194, 1280, 1271,
     1271,  287, 1086, 1280, 1271, 1086, 1280, 1086, 1280, 1086,
     1280, 1280, 1194,    0, 1194, 1194, 1194, 1194, 1194, 1194,

     1194, 1194, 1194, 1194, 1194, 1194, 1194, 1194, 1194, 1194,
     1194, 1194, 1194, 1194, 1194, 1194, 1194, 1194, 1194, 1194,
     1194, 1194, 1194, 1194, 1194, 1194, 1194, 1194, 1194, 1194,
     1194, 1194, 1194, 1194, 1194, 1194, 1194, 1194, 1194, 1194,
     1194, 1194, 1194, 1194, 1194, 1194, 1194, 1194, 1194, 1194,
     1194, 1194, 1194, 1194, 1194, 1194, 1194, 1194, 1194, 1194,
     1194, 1194, 1194, 1194, 1194, 1194, 1194, 1194, 1194, 1194,
     1194, 1194, 1194, 1194, 1194, 1194, 1194, 1194, 1194, 1194,
     1194, 1194, 1194, 1194, 1194, 1194, 1194, 1194, 1194, 1194,
     1194, 1194, 1194, 1194, 1194

    } ;

static yyconst flex_int16_t yy_nxt[6805] =
    {   0,
     1194,   60,   33,   60,   34,   35, 1194, 1194,   33,   35,
       34,   35,   37,   37,  117,   35,  117,  118,   37,   61,
      105,   62,  113,  113,  117,   37,  117,  118,  122,  124,
      122,  124,  189,  293,  189,  190,  119,  188,  125,  201,
     1094,  201,  126,   36, 1056,  294,   61,  105,   62,   36,
     1043,  202,   37,   32,   38,   39,   38,   40,   35,   41,
       42,   32,   35,   32,   32,   32,   32,   32,   32,   32,
       43,   44,   45,   46,   47,   48,   49,   49,   50,   49,
       49,   51,   52,   49,   53,   54,   49,   55,   56,   57,
       58,   49,   59,   49,   49,   49,   36,   43,   44,   45,

       46,   47,   48,   49,   49,   50,   49,   51,   52,   49,
       53,   54,   49,   55,   56,   57,   58,   49,   59,   49,
       49,   49,   32,   32,   33,   32,   34,   35,   32,   32,
       32,   35,   32,   32,   32,   32,   32,   32,   32,  203,
     1094,  203,   33,  576,   34,   35, 1038, 1038,   33,   35,
       34,   35,  880,  994,   73,   35,   74,   75,  114, 1056,
      192,   75,  114,  989,  192,   36,   32,   32,   33,   32,
       34,   35,   32,   32,   32,   35,   32,   32,   37,   32,
       32,   32,   32,   36,   33,   64,   34,   35,  989,   36,
      117,   35,  117,  118,   37,   76,  115,  124,  193,  124,

      122,   37,  122, 1043, 1038,  124,  125,  124,  625,   36,
      126,  212,   64,  106,  125,   34,   35,  905,  994,   33,
       35,   34,   35,  989,  130,   36,   35,  221,   37,   32,
       32,   65,   32,   34,   35,   32,   32,   32,   35,   32,
       32,   32,   32,   32,   32,   32,  626,  626,  212,   33,
      130,   34,   35,  221,   36,  189,   35,  189,  190,   37,
       36,   33,  577,  108,  109,  222,   37,  114,  109,  577,
      626,  114,   36,   32,   32,   65,   32,   34,   35,   32,
       32,   32,   35,   32,   32,   37,   32,   32,   32,   32,
       36,  222,   67,   37,  212,  124,   73,  124,   74,   75,

      577,  576,  110,   75,  125,  115,   77,  203,  126,  203,
      880,  212,  223,   77,  113,  153,   36,  293,  228,   67,
       32,   32,   68,   32,   34,   35,   32,   32,   32,   35,
       69,   32,   32,   32,   32,   32,   32,   76,  223,  236,
       77,  106,  153,   34,   35,  228,  212,  124,   35,  124,
      166,   37,  166,  113,  212,  285,  125,  229,   37,  167,
      214,  212,  296,   36,   32,   32,   68,   32,   34,   35,
       32,   32,   32,   35,   69,   32,   37,   32,   32,   32,
       32,  285,   36,   71,  229,   37,  214,   33,  296,   34,
       35,  201,  576,  201,   35,  208,  124,   37,  124,  212,

      204,  880,  230,  202,   37,  125,  203,   36,  203,  126,
       71,   32,   32,   78,   32,   34,   35,   32,   32,   32,
       35,   32,   32,   32,   79,   32,   32,   32,   36,  230,
      197,   37,   33,  113,  108,  109,  331,  184,  331,  109,
      179,  331,  111,  331,  175,  332,  170,  236,  121,  111,
      332,  119,  113,  170,   36,   32,   32,   78,   32,   34,
       35,   32,   32,   32,   35,   32,   32,   37,   79,   32,
       32,   32,  170,  110,   81,  164,  111,  164,  118,  170,
      113,  625,  212,  212,  250,  251,  250,  337,  337,  337,
      905,  212,  215,  252,  217,  165,  251,  126,   36,  216,

      218,   81,   32,   82,   78,   82,   34,   35,   32,   32,
       32,   35,   32,   32,   32,   83,   32,   32,   32,  215,
      208,  217,  165,  204,  197,  216,  218,  124,  124,  124,
      124,  337,  337,  337,  184,  212,  125,  125,  179,  175,
      126,  126,  121,  243,  305,   36,   32,   82,   78,   82,
       34,   35,   32,   32,   32,   35,   32,   32,   37,   83,
       32,   32,   32,  625,  142,   85,  124,  124,  124,  124,
      243,  305,  905,  113,  212,  125,  125,  988, 1037,  126,
      126, 1194, 1004,  248, 1004,  256, 1022, 1049,  297,   36,
      142,  386,   85,   32,   32,   33,   32,   34,   35,   32,

       32,   32,   35,   32,   86,   32,   32,   32,   32,   32,
      248,  124,  256,  124,  297, 1194,  124,  386,  124, 1194,
      125,  124, 1194,  124,  126,  125, 1194,  370,  212,  126,
      125,  298, 1194,  262,  126,  263,   36,   32,   32,   33,
       32,   34,   35,   32,   32,   32,   35,   32,   86,   37,
       32,   32,   32,   32,  370,  161,   88,  366,  298,  366,
      262, 1194,  263,  412, 1194,  412,  125, 1194, 1194,  124,
      126,  124,  413,  337,  337,  337,  126, 1057,  125, 1057,
       36,  161,  126,   88,   32,   32,   89,   32,   34,   35,
       32,   32,   90,   35,   91,   92,   32,   32,   32,   32,

       32,   93,   94,   95,   96,   97,   94,   94,   94,   98,
       94,   94,   99,   94,   94,  100,  101,   94,  102,  103,
      104,   94,   94,   94,   94,   94,   94,   36,   93,   94,
       95,   96,   97,   94,   94,   94,   98,   94,   99,   94,
       94,  100,  101,   94,  102,  103,  104,   94,   94,   94,
       94,   94,   94,  124,  124,  124,  124, 1194, 1194,  124,
      212,  124,  125,  125,  212, 1194,  126,  126,  125,  124,
      212,  124,  126,  195,  219,  195,  212, 1194,  125,  212,
      128,  139,  126,  140,  307,  299,  220,  129, 1008,  146,
     1008,  300,  124,  141,  124,  124, 1194,  124,  932,  147,

      219,  125,  301,  196,  125,  126,  128,  139,  126,  140,
      307,  299,  220,  129,  124,  146,  124,  300,  164,  141,
      164,  118,  240,  125,  212,  147,  148,  126,  301,  196,
      131,  302, 1194,  124,  124,  124,  124,  132,  165, 1194,
      212,  133,  125,  125,  134, 1194,  126,  126,  240, 1194,
     1194,  308,  148, 1194,  212,  143,  162,  131,  302,  366,
      988,  366,  144,  145,  132,  165,  163,  133,  125, 1022,
      134,  124,  124,  124,  124,  212,  303,  195,  308,  195,
      125,  125,  143,  162,  126,  126,  154,  135,  144,  145,
      155,  136,  163, 1194,  156,  137,  124,  304,  124,  238,

      127,  138,  303, 1194, 1194,  125,  157,  196, 1057,  126,
     1057, 1194,  158,  154,  135, 1194, 1194,  155,  136,  159,
      212,  156,  137,  304,  391,  238,  127,  138,  124,  124,
      124,  124,  157,  196,  212,  212,  160,  125,  125,  158,
      212,  126,  126,  224,  149,  309,  159,  170,  484,  212,
      289,  391,  398, 1194,  170,  315, 1194,  225,  150,  244,
      226,  151,  160,  227,  152,  124,  522,  124,  988, 1194,
      224,  149,  309,  170,  125,  484,  289, 1022,  126,  398,
      170,  315,  277,  225,  150,  244,  226,  151,  212,  227,
      152,  116,  166,  522,  166,  116,  116,  116,  116,  116,

      116,  167,  116,  116,  116,  168,  116,  116,  169,  277,
      306,  124,  124,  124,  124,  171,  212,  212, 1194,  172,
      125,  125,  173,  212,  126,  126,  170,  310,  124,  498,
      124,  537,  392,  387,  116,  169,  306,  125,  139,  373,
      174,  126,  171,  311,  212,  172,  239,  124,  173,  124,
      141, 1194,  267,  170,  310,  498,  125,  537,  392,  387,
      126,  250,  251,  250,  139,  373,  174, 1194,  314,  311,
      252, 1194,  239,  251,  126,  249,  141,  116,  116,  267,
      116,  116,  116,  116,  116,  116,  116,  116,  116,  116,
      116,  177,  116,  116,  314, 1194,  412,  253,  412, 1194,

      124,  249,  124, 1055,  212,  413,  124, 1194,  124,  125,
      212,  390, 1080,  126, 1194,  125,  272,  393,  273,  126,
      116,  116,  116,  253,  116,  116,  116,  116,  116,  116,
      116,  116,  116,  116,  116,  181,  116,  116,  390,  212,
      124,  247,  124,  272,  393,  273,  464, 1037,  464,  125,
      124,  212,  124,  126, 1194,  466, 1049,  389,  467,  125,
      279, 1194,  396,  126,  116,  116,  116,  247,  116,  116,
      116,  116,  116,  116,  116,  116,  116,  116,  116,  186,
      116,  116,  124,  389,  124,  257, 1194,  279,  124,  396,
      124,  125,  337,  337,  337,  126, 1046,  125, 1046, 1194,

      212,  126,  281,  312, 1194,  313,  977,  292,  116,  116,
      116,  257,  116,  116,  116,  116,  116,  116,  116,  116,
      116,  116,  116,  199,  116,  116,  124, 1194,  124,  281,
      312,  124,  313,  124,  292,  125,  212, 1037, 1194,  126,
      125,  478,  212,  478,  126, 1194, 1049,  397, 1194,  320,
      479,  406,  116,  116,  116,  258,  116,  116,  116,  116,
      116,  116,  116,  116,  116,  116,  116,  206,  116,  116,
      124,  124,  124,  124,  397,  212,  320,  212,  406,  125,
      125,  258, 1194,  126,  126, 1145,  124, 1145,  124,  401,
     1145,  322, 1145,  399,  284,  125,  116,  116,  116,  126,

      116,  116,  116,  116,  116,  116,  116,  116,  116,  116,
      116,  210,  116,  116,  124,  401,  124,  259,  322,  399,
      124,  284,  124,  125, 1194, 1093,  124,  126,  124,  125,
      212,  333, 1194,  126, 1102,  125, 1145,  402, 1145,  126,
      116,  116,  116,  259,  116,  116,  116,  116,  116,  116,
      116,  116,  116,  116,  116,  231,  116,  116,  333,  266,
      124,  124,  124,  124,  402,  233,  124, 1055,  124,  125,
      125,  549,  234,  126,  126,  125, 1080,  212,  212,  126,
      551,  212,  499,  212,  116,  266,  124,  241,  124,  245,
      246,  124,  233,  124,  242,  125, 1093,  549,  234,  126,

      125,  388,  400,  274,  126, 1102,  404,  551, 1194,  499,
      124,  254,  124,  241, 1194,  245,  246, 1194,  260,  125,
      242,  261,  124,  126,  124,  255,  212,  388,  400,  274,
      264,  125,  404,  405,  212,  126, 1194,  500,  254, 1194,
      124,  124,  124,  124,  260,  265,  268,  261,  212,  125,
      125,  255,  269,  126,  126, 1194, 1194,  264,  270,  288,
      405, 1194,  403,  124,  500,  124,  124,  275,  124, 1194,
      170,  265,  125,  268,  271,  125,  126,  170,  269,  126,
      232,  124,  124,  124,  124,  270,  288,  170,  403,  554,
      125,  125,  317,  275,  126,  126,  170, 1194, 1194,  278,

      271,  374,  282,  170,  276, 1194,  283,  232,  170,  290,
      291,  124,  280,  124,  170,  170,  554, 1194,  317,  124,
      125,  124, 1194,  212,  126,  278, 1194,  374,  125,  282,
      276,  329,  126,  283,  170,  290,  291,  501,  280,  116,
      166,  170,  166,  116,  116,  116,  116,  116,  116,  167,
      116,  116,  116,  324,  116,  116, 1194,  124,  329,  124,
     1194,  212,  124,  501,  124, 1194,  125,  595, 1194,  595,
      126,  125,  124,  327,  124,  126,  596, 1194,  510,  324,
      341,  125,  116,  116,  166,  126,  166,  116,  116,  116,
      116,  116,  116,  167,  116,  116,  116,  168,  116,  116,

      327, 1194,  318,  124,  510,  124,  124,  341,  124, 1194,
     1194,  286,  125,  212, 1194,  125,  126, 1194,  287,  126,
      504,  124,  124,  124,  124, 1194,  116,  124,  318,  124,
      125,  125, 1194,  319,  126,  126,  125,  286, 1194,  323,
      126,  335,  340,  350,  287,  116,  116,  504,  116,  116,
      116,  116,  116,  116,  116,  116,  116,  116,  116,  319,
      116,  116,  212, 1194,  124,  323,  124,  212,  335,  340,
      350, 1194, 1194,  125,  124, 1194,  124,  126, 1194, 1194,
      212,  503, 1194,  125,  512,  509, 1194,  126,  116,  116,
      116,  321,  116,  116,  116,  116,  116,  116,  116,  116,

      116,  116,  116,  177,  116,  116,  124,  503,  124,  326,
      512,  124,  509,  124, 1194,  125,  124,  321,  124,  126,
      125,  212, 1194, 1194,  126,  125, 1194, 1194,  521,  126,
      346,  355,  116,  116,  116,  326,  116,  116,  116,  116,
      116,  116,  116,  116,  116,  116,  116,  325,  116,  116,
      212,  124,  124,  124,  124,  521,  212,  346,  355, 1194,
      125,  125, 1194, 1194,  126,  126, 1180,  508, 1180,  212,
      505, 1194,  513,  325, 1194,  349,  116,  116,  116,  328,
      116,  116,  116,  116,  116,  116,  116,  116,  116,  116,
      116,  181,  116,  116,  508,  124,  505,  124,  124,  513,

      124,  124,  349,  124,  125,  328,  515,  125,  126, 1194,
      125,  126, 1194,  515,  126,  598,  515,  212,  515,  409,
      116,  116,  116,  334,  116,  116,  116,  116,  116,  116,
      116,  116,  116,  116,  116,  352,  116,  116,  336,  337,
      336,  124,  598,  124,  212, 1194,  409,  125, 1194,  334,
      125,  126,  212, 1194,  126,  608,  483,  338, 1194,  511,
      170,  352,  339,  353,  116,  116,  116, 1194,  116,  116,
      116,  116,  116,  116,  116,  116,  116,  116,  116,  186,
      116,  116,  608,  483,  338,  511,  124,  170,  124,  339,
      353,  124, 1194,  124,  124,  125,  124, 1194, 1194,  126,

      125, 1194, 1194,  125,  126,  550,  359,  126,  116,  116,
      116,  360,  116,  116,  116,  116,  116,  116,  116,  116,
      116,  116,  116,  348,  116,  116, 1194,  124,  124,  124,
      124,  550,  515,  359, 1194, 1194,  125,  125,  360,  515,
      126,  126,  515,  212,  515, 1194, 1180,  361, 1180,  348,
     1194, 1194,  116,  116,  116,  342,  116,  116,  116,  116,
      116,  116,  116,  116,  116,  116,  116,  199,  116,  116,
      124,  478,  124,  478,  361,  124,  124,  124,  124,  125,
      479,  342,  212,  126,  125,  125, 1194,  609,  126,  126,
      588,  170,  363, 1180,  410, 1180,  116,  116,  116,  651,

      116,  116,  116,  116,  116,  116,  116,  116,  116,  116,
      116,  343,  116,  116,  609,  124,  588,  124,  170,  363,
      124,  410,  124, 1194,  125,  124,  651,  124,  126,  125,
     1194, 1194,  170,  126,  125,  365,  414,  343,  126, 1194,
      116,  116,  116,  375,  116,  116,  116,  116,  116,  116,
      116,  116,  116,  116,  116,  206,  116,  116,  124,  170,
      124,  347,  365,  414,  250,  251,  250,  125, 1194,  375,
      124,  126,  124,  252, 1194,  170,  251,  126,  415,  125,
     1194,  589,  485,  126,  116,  116,  116,  347,  116,  116,
      116,  116,  116,  116,  116,  116,  116,  116,  116,  351,

      116,  116,  170, 1194,  124,  415,  124,  589,  485,  250,
      251,  250, 1194,  125,  124, 1194,  124,  126,  252, 1194,
      590,  251,  126,  125, 1194,  351, 1194,  126,  116,  116,
      116,  354,  116,  116,  116,  116,  116,  116,  116,  116,
      116,  116,  116,  210,  116,  116,  590, 1194, 1194,  369,
      124,  124,  124,  124,  212, 1194,  578,  354,  578,  125,
      125, 1194, 1194,  126,  126,  591,  417, 1194,  212,  579,
      502,  618,  116,  116,  116,  369,  116,  116,  116,  116,
      116,  116,  116,  116,  116,  116,  116,  358,  116,  116,
     1194,  591,  124,  417,  124,  124,  502,  124,  618, 1194,

      595,  125,  595, 1194,  125,  126, 1194,  212,  126,  596,
      486,  356,  623,  358,  170,  421,  116,  116,  116,  357,
      116,  116,  116,  116,  116,  116,  116,  116,  116,  116,
      116,  231,  116,  116,  250,  251,  250,  486,  356,  623,
     1194,  170,  421,  252,  515,  357,  251,  126, 1194, 1194,
      124,  515,  124, 1194,  515,  212,  515, 1194, 1194,  125,
      116,  116,  116,  126,  116,  116,  116,  116,  116,  116,
      116,  116,  116,  116,  116,  231,  116,  116,  316,  124,
      232,  124,  124,  362,  124,  124,  552,  124,  125,  654,
      553,  125,  126,  170,  125,  126, 1194,  407,  126,  344,

      232,  124,  170,  124,  116,  316,  599,  232,  376,  362,
      125,  364,  345,  552,  126,  408,  654,  553,  367,  544,
      170,  545,  124,  407,  124,  657,  344,  232,  368,  170,
      124,  125,  124,  599,  376,  126, 1194,  364,  345,  125,
      124,  408,  124,  126,  367,  544,  592,  545,  411,  125,
      593,  436,  657,  126,  368,  116,  166, 1194,  166,  116,
      116,  116,  116,  116,  116,  167,  116,  116,  116,  168,
      116,  116,  592,  437,  411,  124,  593,  124,  436, 1194,
      124, 1194,  124,  371,  125,  658,  212, 1194,  126,  125,
     1194, 1194,  124,  126,  124,  671, 1194,  671,  116,  437,

      659,  125,  416, 1194,  672,  126,  520,  418,  450,  371,
      116,  166,  658,  166,  116,  116,  116,  116,  116,  116,
      167,  116,  116,  116,  168,  116,  116,  659,  416,  212,
      232,  372,  520,  418, 1194,  450,  394,  124,  124,  124,
      124,  523, 1194,  124,  212,  124,  125,  125,  601,  395,
      126,  126,  125,  116,  554,  514,  126,  232,  372,  377,
      378,  377,  379,  394, 1194,  420,  419,  523,  125,  535,
      212,  593,  126,  435,  601,  395,  536,  662,  338,  506,
      380,  554,  514,  381, 1194, 1194,  507,  382,  644, 1194,
      383,  420,  419,  384,  385,  535, 1194,  593,  665,  435,

     1194,  586,  536,  586,  662,  338,  506,  380, 1194,  124,
      381,  124,  507,  382,  644,  516,  383,  517,  125,  384,
      385,  422,  126,  422,  518,  665,  519,  515,  212,  515,
      125, 1194,  587,  124,  124,  124,  124,  423,  424,  425,
      426,  427,  125,  125,  438,  428,  126,  126, 1194,  429,
      212,  430,  445, 1194,  431,  432,  433,  439,  587,  434,
      124, 1194,  124,  645,  423,  424,  425,  426,  427,  125,
      438,  611,  428,  126,  124,  429,  124,  430, 1194,  445,
      431,  432,  433,  125,  439,  434,  124,  126,  124,  645,
     1194,  124,  124,  124,  124,  125,  492,  611,  440,  126,

      125,  125, 1194,  696,  126,  126,  212,  646,  441, 1194,
     1194,  250,  251,  250,  212,  442,  444,  212,  446,  443,
      252,  610,  492,  251,  126,  440, 1194,  124,  616,  124,
      696, 1194,  597,  646,  170,  441,  125,  124,  629,  124,
      126,  442,  555,  444,  446,  443,  125,  124,  610,  124,
      126,  212,  556,  124,  616,  124,  125,  447,  612,  597,
      126,  170,  125,  552,  629,  448,  126,  553,  124,  555,
      124,  124, 1194,  124, 1194, 1194,  212,  125,  556,  592,
      125,  126,  449,  447,  126,  612,  451,  250,  251,  250,
      552,  448,  452,  124,  553,  124,  252,  212,  622,  251,

      126,  212,  125, 1194,  460,  592,  126, 1194,  449, 1194,
      647,  461,  451,  613,  250,  251,  250,  614, 1194,  452,
      453,  212,  454,  252,  622, 1194,  251,  126,  615,  455,
      460,  456,  457,  126,  457,  124,  647,  124,  461,  613,
      124,  458,  124,  614,  125,  627, 1194,  627,  126,  125,
      250,  251,  250,  126,  459,  615,  212,  212,  628,  252,
      463, 1194,  251,  126,  124,  462,  124,  648,  458,  464,
      465,  464,  617,  125,  337,  337,  337,  126,  466,  630,
      459,  467,  126,  124,  468,  124,  124,  463,  124, 1194,
      212,  462,  125,  648, 1194,  125,  126,  620,  617,  126,

      480,  251,  480,  469, 1194,  630,  470, 1194,  718,  481,
      718,  468,  482,  124,  124,  124,  124,  719, 1194,  124,
      170,  124,  125,  125,  620, 1194,  126,  126,  125,  124,
      469,  124,  126,  470,  471,  379,  471,  379,  125, 1194,
      436,  124,  126,  124,  494,  212,  495,  170,  493,  529,
      125,  250,  251,  250,  126,  472, 1194, 1194,  473,  212,
      252,  619,  474,  251,  126,  475,  621,  436,  476,  477,
      494,  124,  495,  124,  493,  649,  529,  496,  650, 1194,
      125,  516,  472,  516,  126,  473, 1194,  619,  474,  653,
      624,  475,  519,  621,  476,  477,  487,  379,  487,  379,

      124,  649,  124,  496,  650,  124,  655,  124, 1194,  125,
      124,  497,  124,  126,  125,  653,  524,  472,  126,  125,
      488, 1194, 1194,  126,  489,  533,  526,  475,  526, 1194,
      490,  491,  655, 1194,  525,  125,  698,  497, 1194,  126,
      656, 1194,  703,  524,  472,  527,  124,  488,  124,  124,
      489,  124,  533,  475, 1194,  125,  490,  491,  125,  126,
      660,  525,  126,  698,  528,  124,  656,  124,  124,  703,
      124,  661,  527,  530,  125, 1194,  538,  125,  126, 1194,
      124,  126,  124,  586,  541,  586,  660,  539,  542,  125,
      540,  528,  124,  126,  124,  531,  682,  661,  543,  546,

      530,  125,  532,  538, 1194,  126,  547,  548,  683,  534,
     1194,  541,  561,  539,  587,  542,  540, 1194,  250,  251,
      250,  531,  682, 1194,  543,  734,  546,  252,  532, 1194,
      251,  126,  547,  548,  683,  534,  250,  251,  250,  561,
      587,  124,  124,  124,  124,  252,  212,  694,  251,  126,
      125,  125,  734,  725,  126,  126,  124, 1194,  124,  124,
     1194,  124,  124, 1194,  124,  125,  558,  744,  125,  126,
      557,  125,  126,  694,  559,  126,  124,  124,  124,  124,
      725,  695,  124,  232,  124,  125,  125,  632, 1194,  126,
      126,  125,  560,  558,  744,  126,  557,  562,  563, 1194,

      124,  559,  124, 1194,  697,  564,  124,  695,  124,  125,
      232,  567,  699,  126,  632,  125,  565,  212,  560,  126,
      124, 1194,  124,  562, 1194,  563,  566, 1194, 1194,  125,
      697,  564,  124,  126,  124, 1194, 1194,  567,  699,  710,
      568,  125,  124,  565,  124,  126, 1194,  124,  124,  124,
      124,  125,  569,  566,  212,  126,  125,  125, 1194,  212,
      126,  126,  453,  571,  453,  710,  572,  568, 1194, 1194,
      713,  573,  124,  456,  124, 1194,  711,  570,  453,  569,
      453,  125,  124,  574,  124,  126, 1194,  573, 1194,  456,
      571,  125,  124,  572,  124,  126,  575,  713,  124,  574,

      124,  125,  711,  570,  124,  126,  124,  125,  580,  170,
      574,  126,  575,  125,  516,  212,  516,  126,  581,  742,
     1194, 1194,  575,  624,  700,  519,  574,  583,  124,  721,
      124,  212,  582,  642,  580,  642,  170,  125,  575, 1194,
      584,  126,  125, 1194,  581,  742,  126,  250,  251,  250,
      700, 1194,  124,  583,  124,  721,  252,  712,  582,  251,
      126,  125,  124,  585,  124,  126,  584,  250,  251,  250,
      546,  125,  250,  251,  250,  126,  252,  547,  600,  251,
      126,  252,  605,  712,  251,  126,  480,  251,  480,  585,
      212,  602,  124,  716,  124,  481, 1194,  546,  482, 1194,

      124,  125,  124,  547,  600,  126,  170,  212,  605,  125,
      722, 1194,  124,  126,  124,  212,  232,  602,  631,  604,
      716,  125,  526,  743,  526,  126,  124,  603,  124,  606,
     1194,  125,  212,  170, 1194,  125,  720,  722,  124,  126,
      124,  635,  578,  232,  578,  631,  604,  125, 1194,  743,
      124,  126,  124,  603,  715,  579,  606,  607,  124,  125,
      124,  692,  720,  126,  693, 1194,  634,  125,  635,  212,
     1194,  126, 1194,  633,  636,  124,  124,  124,  124,  170,
      715,  212, 1194,  607,  125,  125, 1194,  692,  126,  126,
      693,  723,  728,  634,  124,  124,  124,  124,  701,  633,

     1194,  636,  745,  125,  125, 1194,  170,  126,  126,  124,
      637,  124,  124,  640,  124,  638, 1194,  723,  125,  728,
     1194,  125,  126,  639,  701,  126,  652,  652,  652,  745,
      652,  652,  652,  641, 1194,  251,  637,  170,  251,  251,
      640,  638,  251,  124,  663,  124,  702,  643,  664,  639,
     1194,  746,  125,  124, 1194,  124,  126, 1194, 1194,  666,
      641,  124,  125,  124,  170, 1194,  126,  124, 1194,  124,
      125,  663,  702,  643,  126,  664,  125,  746,  212,  671,
      126,  671,  124,  667,  124,  668,  666,  669,  672, 1194,
     1194,  125,  126, 1194,  124,  126,  124,  656,  717, 1194,

      695,  747, 1194,  125,  124, 1194,  124,  126,  749,  667,
      673, 1194,  668,  125,  669,  670,  124,  126,  124,  676,
      465,  676, 1194,  656,  717,  125,  695,  747,  125,  126,
     1194,  467,  126,  124,  749,  124,  212,  673,  674, 1194,
     1194,  670,  125,  675, 1194,  124,  126,  124,  124,  677,
      124, 1194, 1194,  124,  125,  124,  724,  125,  126,  748,
     1194,  126,  125, 1194,  674,  124,  126,  124,  750,  675,
      124,  232,  124,  680,  125,  684,  677,  685,  126,  125,
      678,  679,  724,  126,  457,  758,  748,  457,  754,  457,
      686, 1194,  687,  681,  730,  750,  574, 1194,  232,  457,

      680,  755,  457,  579,  457,  756,  678,  679,  124,  575,
      124,  574,  758,  124,  754,  124,  124,  125,  124,  681,
      730,  126,  125,  574,  575,  125,  126,  755, 1194,  126,
      689,  756,  250,  251,  250,  575, 1194,  688,  574,  232,
      690,  252,  757,  761,  251,  126,  124,  124,  124,  124,
      575,  759,  124,  760,  124,  125,  125,  689,  729,  126,
      126,  125,  124,  688,  124,  126,  232,  690,  757,  761,
      704,  125, 1194,  778,  124,  126,  124,  124,  759,  124,
      760,  691,  705,  125,  729, 1194,  125,  126,  762,  124,
      126,  124,  124,  714,  124,  714, 1194,  704,  125,  707,

      778,  125,  126,  763, 1194,  126,  212,  691,  764,  705,
      706,  718,  709,  718,  762, 1194,  726, 1194,  727,  627,
      719,  627,  708,  777,  212,  515,  707, 1194,  515,  763,
      515,  515,  628, 1194,  764,  783,  706, 1194,  515,  709,
      515,  515,  628,  515,  124, 1194,  124,  515,  708,  777,
      515,  212,  515,  125,  124,  787,  124,  126, 1194,  124,
      731,  124,  783,  125,  732, 1194,  784,  126,  125,  124,
      785,  124,  126, 1194,  786,  124,  789,  124,  125,  788,
     1194,  787,  126,  124,  125,  124,  790,  731,  126,  733,
      800,  732,  125,  784,  735,  736,  126,  785,  124,  738,

      124,  786,  789,  737,  811, 1194,  788,  125,  124, 1194,
      124,  126,  212,  790,  791,  733,  800,  125,  212,  809,
      735,  808,  736,  453,  170,  454,  738, 1194,  739,  737,
      811,  751,  455,  751,  456,  457,  126,  457,  799,  740,
      124,  791,  124,  124,  458,  124,  809,  212,  808,  125,
      752,  170,  125,  126,  739,  753,  126,  459,  817,  741,
      124,  124,  124,  124,  799,  740, 1194,  765,  837,  125,
      125,  458,  212,  126,  126,  812, 1194,  752,  250,  251,
      250,  838,  753,  459, 1194,  817,  741,  252,  830,  766,
      251,  126,  124,  765,  124,  837,  767,  768,  124,  768,

      124,  125,  812,  212,  124,  126,  124,  125,  838, 1194,
      212,  126,  840,  125,  830,  766,  771,  126, 1194,  774,
      810,  769,  767,  453,  813,  454,  212,  770,  772,  124,
     1194,  124,  455, 1194,  456,  457,  126,  457,  125,  840,
      818,  835,  126,  771,  458,  774,  810,  676,  769,  676,
      813,  839,  124,  770,  124,  772,  125,  459, 1194,  467,
      124,  125,  124,  841, 1194,  126,  818,  835, 1194,  125,
      212,  458,  775,  126,  337,  337,  337,  839,  773,  776,
      465,  776,  212,  459,  453,  686,  454,  686,  125,  819,
      841,  467,  126,  455,  820,  456,  457,  126,  457,  775,

      684,  684,  685,  685,  773,  458,  574, 1194, 1194,  457,
      457, 1194,  457,  457,  457,  457,  819,  842,  459,  575,
      820,  574,  574, 1194,  843,  686,  847,  686,  124,  124,
      124,  124,  458,  574,  575,  575, 1194,  125,  125, 1194,
     1194,  126,  126,  842,  459,  575,  574,  779,  574,  574,
      843, 1194,  847,  124,  124,  124,  124, 1194, 1194,  575,
      575,  575,  125,  125,  855,  781,  126,  126,  124, 1194,
      124,  232,  515,  574,  779,  821, 1194,  125,  782,  515,
      844,  126,  515,  212,  515,  575,  780,  124,  856,  124,
      855,  781,  859, 1194,  845,  124,  125,  124,  232,  515,

      126, 1194,  821,  801,  125,  782,  515,  844,  126,  515,
      212,  515,  780,  792,  856,  793,  846,  124,  859,  124,
      802,  845,  794,  848,  795,  796,  125,  796,  804,  801,
      126,  849,  850,  170,  797,  851,  124,  861,  124,  806,
      807,  806,  807,  846,  803,  125,  802,  798,  125,  126,
      848, 1194,  126, 1194,  804,  814, 1194,  814,  849,  850,
      170,  797,  851,  516,  861,  517,  805, 1194,  862,  516,
      803,  517,  518,  798,  519,  515,  212,  515,  518,  815,
      519,  515,  212,  515,  516,  816,  517,  337,  337,  337,
     1194,  867,  805,  518,  862,  519,  515,  212,  515,  910,

      726,  726,  727,  727, 1194,  868,  815, 1194, 1194,  515,
      515,  816,  515,  515,  515,  515,  822,  867,  823,  869,
      124, 1194,  124,  870,  871,  824,  910,  825,  826,  125,
      826,  868,  232,  126,  250,  251,  250,  827, 1194, 1194,
      872,  212,  124,  252,  124,  869,  251,  126,  901,  870,
      871,  125,  124,  828,  124,  126,  873,  885,  124,  232,
      124,  125,  829, 1194,  827,  126,  872,  125,  831, 1194,
      895,  126,  250,  251,  250,  901,  918,  124, 1194,  124,
      828,  252,  873,  885,  251,  126,  125,  897,  212,  829,
      126,  832,  124,  898,  124,  831,  895,  124,  919,  124,

     1194,  125,  124,  918,  124,  126,  125,  751,  893,  751,
      126,  125,  833,  897,  852,  126,  852,  832, 1194,  898,
      853,  834,  853,  125,  836,  919,  752,  126, 1194,  125,
      768,  753,  768,  126,  893,  124, 1194,  124,  833,  874,
      807,  874,  807,  124,  125,  124,  920,  834,  126,  854,
      836,  924,  125,  752,  769,  857,  126,  124,  753,  124,
      770,  858,  776,  124,  776,  124,  125,  170, 1194, 1194,
      126,  125,  125,  920,  467,  854,  126,  924,  124,  923,
      124,  769,  857,  883, 1194, 1194,  770,  125,  858,  170,
      124,  126,  124, 1194,  170,  124,  860,  124,  124,  125,

      124,  212,  875,  126,  125,  892,  923,  125,  126,  883,
      792,  126,  792,  863,  170,  865,  170, 1194, 1194,  876,
      864,  795,  860, 1194,  881,  926,  881,  866,  875, 1194,
      884,  877,  892,  212,  792,  212,  792,  882,  925,  863,
      899,  170,  865,  876,  878,  795,  864, 1194, 1194,  894,
      124,  926,  124,  866, 1194,  877,  884,  928,  877,  125,
      480,  251,  480,  126,  124,  925,  124,  899,  878,  481,
      878, 1194,  482,  125,  886,  894,  212,  126,  927,  124,
      170,  124,  877,  928,  124,  887,  124,  232,  125,  124,
      896,  124,  126,  125,  878, 1194, 1194,  126,  125,  888,

      889,  886,  126,  212,  902,  927, 1194,  170,  806,  807,
      806,  807,  887,  814,  232,  814,  896,  125,  337,  337,
      337,  515,  906,  900,  906,  890,  888,  889,  515,  515,
      902,  515,  212,  515, 1194,  907,  515,  815, 1194,  515,
      212,  515,  934,  816,  822,  822,  822,  822,  124,  900,
      124,  890, 1194,  903,  903,  825,  825,  125,  250,  251,
      250,  126,  935,  124,  815,  124, 1194,  252,  934,  816,
      251,  126,  125, 1194, 1194,  908,  126,  250,  251,  250,
     1194, 1194,  909,  124,  941,  124,  252,  936,  935,  251,
      126,  916,  125,  916,  937, 1194,  126,  921, 1194,  921,

      917,  908,  942,  915,  126,  124,  852,  124,  852,  909,
      911,  941,  912,  936,  125,  125,  922, 1194,  126,  913,
      937,  914,  457,  126,  457,  337,  337,  337,  943,  942,
      915,  458,  337,  337,  337,  337,  337,  337,  337,  337,
      337, 1194,  944,  922,  459,  337,  337,  337,  853, 1194,
      853,  124,  931,  124,  931,  943,  945,  125,  458, 1194,
      125, 1194,  932,  124,  126,  124,  776,  465,  776,  944,
      459,  124,  125,  124,  946,  125,  126,  929,  467,  126,
      125,  930,  933,  945,  126,  124,  124,  124,  124,  947,
      952,  124,  953,  124,  125,  125, 1194,  212,  126,  126,

      125,  946,  979,  929,  126, 1194, 1194,  930,  933,  938,
      124,  968,  124, 1194, 1194,  947,  952,  959,  953,  125,
      170, 1194,  939,  126,  874,  807,  874,  807,  979,  954,
      940,  955,  881, 1194,  881,  960,  938,  968,  796,  975,
      956,  796,  957,  796,  959,  882,  170,  170,  939,  796,
      877, 1194,  796,  882,  796,  958,  995,  940,  948,  997,
      949,  877,  960,  878,  996, 1194,  975,  950, 1194,  951,
      796,  999,  796,  170,  878, 1194,  998,  877,  170,  797,
     1194,  958,  124,  995,  124,  124,  997,  124,  877,  878,
      996,  125,  798, 1194,  125,  126, 1000,  999,  126, 1001,

      878,  962,  124,  998,  124,  170,  797,  806,  807,  806,
      807,  125,  961, 1194, 1194,  126,  125, 1002,  798,  906,
      126,  906,  124, 1000,  124, 1194, 1001, 1009,  962, 1005,
      963,  125,  907, 1194,  969,  126,  970, 1194,  961,  965,
      807,  965,  807,  971, 1002,  972,  515,  212,  515,  973,
     1194,  973,  966,  515, 1009, 1005,  963,  964,  974,  976,
      515,  976,  212,  515,  212,  515,  515, 1194, 1194,  977,
      251,  251,  251,  515,  515, 1007,  515,  212,  515,  251,
      515,  515,  251,  964,  515,  212,  515,  515, 1194,  978,
      515,  212,  515,  980,  984,  981,  985,  337,  337,  337,

     1194, 1007,  982,  826,  983,  826,  826,  826,  826,  232,
      826, 1010, 1194, 1011,  124,  978,  124,  826, 1194, 1194,
      826,  907,  826,  125,  911, 1194,  911,  126,  250,  251,
      250, 1014, 1194,  987,  986,  914,  232,  252, 1010, 1011,
      251,  126,  911, 1015,  911,  574,  990,  916,  990,  916,
      921,  987,  921,  914, 1016,  991,  917, 1014,  575,  992,
     1194,  986,  124,  574,  124,  250,  251,  250, 1194,  922,
     1015,  125,  574, 1017,  252,  126,  575,  251,  126,  931,
     1016,  931, 1018, 1194,  575,  124,  124,  124,  124,  932,
      574, 1006, 1019, 1026,  125,  125,  922, 1194,  126,  126,

     1017,  852,  575,  852,  874,  807,  874,  807, 1018,  933,
      125,  948, 1027,  948,  126, 1012, 1194, 1006, 1019, 1026,
     1020, 1013,  951, 1028, 1023,  170, 1023,  948, 1044,  948,
      170, 1194,  877, 1024, 1194,  933, 1020, 1025,  951, 1027,
     1194, 1012,  954, 1029,  955,  878, 1194, 1013,  877, 1194,
     1028,  796,  170, 1194,  796, 1044,  796,  170,  954,  877,
      955,  878,  956,  877,  956, 1194,  212,  796, 1045, 1029,
      796,  878,  796, 1035, 1058,  877,  878, 1060,  956,  877,
      956, 1059,  124,  877,  124, 1194, 1194,  878, 1194, 1194,
      877,  125,  878, 1061, 1045,  126,  878,  515, 1062,  877,

     1035, 1058,  878, 1060,  515, 1063,  877,  515, 1059,  515,
      877, 1032,  878, 1030,  807, 1030, 1031, 1069,  878, 1061,
     1194,  124,  878,  124, 1062, 1064,  877,  973, 1194,  973,
      125, 1194, 1063, 1194,  126, 1194,  974, 1032,  878, 1033,
      806,  807,  806,  807, 1069,  124,  969,  124,  969,  125,
     1194, 1064, 1066,  126,  125, 1036,  465,  972,  126,  965,
      807,  965,  807,  337,  337,  337, 1033, 1194, 1194, 1034,
      965,  807,  965,  807,  965,  807,  965,  807, 1066,  969,
     1039,  969, 1039,  465,  976, 1194,  976,  966, 1036, 1040,
      972, 1194, 1068, 1041,  977,  980, 1034,  980,  980, 1050,

      980, 1050, 1194, 1004, 1047, 1004,  983, 1047, 1051,  983,
     1070,  984, 1052,  985,  978,  984, 1075,  985, 1068,  124,
      826,  124, 1071,  826,  826,  826, 1074,  826,  125,  826,
     1082, 1194,  126, 1053, 1065, 1054, 1070,  990, 1076,  990,
      978, 1194,  457, 1075, 1194,  457,  991,  457, 1071,  686,
      992,  687, 1074, 1081,  574,  124, 1082,  124,  457, 1097,
     1065,  457,  992,  457,  125, 1076, 1194,  575,  126, 1008,
      574, 1008,  337,  337,  337, 1067,  124,  170,  124,  932,
     1081,  574,  124,  575,  124,  125, 1097, 1098, 1107,  126,
     1194,  125, 1083,  575, 1023,  126, 1023,  574,  874,  807,

      874,  807, 1067, 1024,  170, 1072, 1073, 1025, 1077,  575,
     1078,  170, 1194, 1098,  956, 1107,  957,  796, 1083, 1194,
      796, 1084,  796,  796, 1194, 1194,  796, 1025,  796,  877,
     1039, 1072, 1039, 1073,  515,  877, 1194, 1194,  170, 1040,
     1105,  515,  878, 1041,  515,  212,  515, 1084,  878, 1194,
     1087, 1088, 1087, 1088, 1194, 1091,  877, 1092, 1194,  125,
     1194, 1194,  877,  126,  515, 1194, 1105,  515,  878,  515,
     1108, 1194, 1194, 1109,  878, 1003, 1030,  807, 1030, 1031,
     1003, 1003, 1003, 1003, 1003, 1003, 1003, 1003, 1003, 1003,
     1003, 1003,  124,  124,  124,  124, 1194, 1108, 1046, 1109,

     1046,  125,  125,  515, 1112,  126,  126, 1086,  977, 1194,
      515, 1113, 1089,  515, 1041,  515, 1194, 1095, 1003, 1096,
     1115, 1194, 1090, 1099, 1114, 1100,  515, 1194, 1194,  515,
     1112,  515,  826, 1086, 1050,  826, 1050,  826, 1113, 1089,
     1194, 1194,  826, 1051, 1194, 1194, 1115, 1052, 1090,  826,
     1194, 1114,  826, 1052,  826, 1053, 1053, 1054, 1054, 1194,
      337,  337,  337, 1194,  457,  457, 1116,  457,  457,  457,
      457, 1103, 1110, 1104, 1110, 1194,  574,  574, 1194, 1106,
      457, 1120, 1194,  457, 1194,  457,  250,  251,  250,  575,
      575, 1121,  574, 1116, 1124,  252, 1194, 1125,  251,  126,

     1008, 1111, 1008,  574,  574,  575, 1106, 1194, 1120, 1117,
      932, 1117,  124, 1136,  124,  575,  575, 1121,  125,  574,
     1124,  125,  126, 1125, 1139,  126, 1194, 1111, 1077, 1194,
     1078,  575, 1119, 1088, 1119, 1088, 1077,  796, 1078, 1136,
      796, 1118,  796, 1142, 1122,  796, 1123,  170,  796,  877,
      796, 1139, 1091,  796, 1092,  170,  796,  877,  796, 1126,
     1194,  515,  878, 1127,  515,  877,  515, 1118, 1194, 1142,
      878, 1091, 1140, 1092,  170, 1194,  877, 1046,  878, 1046,
      515, 1194,  170,  515,  877,  515, 1126,  977,  878, 1127,
     1194, 1194,  877,  337,  337,  337,  878, 1194, 1194, 1140,

      337,  337,  337, 1141,  878, 1003, 1128,  807, 1128, 1031,
     1003, 1003, 1003, 1003, 1003, 1003, 1003, 1003, 1003, 1129,
     1003, 1003, 1087, 1088, 1087, 1088,  806,  807,  806,  807,
     1141,  125, 1134, 1194, 1135,  125,  337,  337,  337,  126,
     1148,  515, 1149, 1110,  515, 1110,  515, 1143, 1003, 1003,
     1128,  807, 1128, 1031, 1003, 1003, 1003, 1003, 1003, 1003,
     1003, 1003, 1003, 1129, 1003, 1003,  124, 1148,  124, 1149,
     1194, 1144, 1111, 1143, 1146,  125, 1095, 1150, 1096,  126,
     1194, 1194, 1095, 1131, 1096,  515, 1133, 1194,  515, 1194,
      515,  515, 1003, 1099,  515, 1100,  515, 1144, 1111, 1194,

     1146, 1194,  826, 1150, 1194,  826, 1099,  826, 1100, 1131,
     1137, 1194, 1138, 1133, 1103,  826, 1104,  170,  826,  826,
      826, 1130,  826,  457,  826, 1103,  457, 1104,  457,  251,
      251,  251, 1152, 1157,  457,  574, 1194,  457,  251,  457,
     1117,  251, 1117,  124,  170,  124,  574, 1130,  575,  125,
     1194, 1194,  125, 1194, 1194, 1158,  126, 1159, 1152,  575,
     1157,  170,  574, 1147, 1160, 1194, 1119, 1088, 1119, 1088,
     1194, 1151, 1162,  574,  575, 1194,  874,  807,  874,  807,
     1122, 1158, 1123, 1159, 1122,  575, 1123, 1194,  170,  796,
     1147, 1160,  796,  796,  796, 1161,  796, 1151,  796, 1162,

     1153,  877, 1194, 1130, 1163,  877, 1128,  807, 1128, 1031,
     1154, 1088, 1154, 1088,  878,  337,  337,  337,  878, 1194,
     1194, 1161, 1134, 1155, 1135, 1194, 1153, 1194,  877, 1130,
     1163,  515,  877, 1164,  515, 1194,  515, 1194, 1194, 1170,
      878,  337,  337,  337,  878, 1003, 1128,  807, 1128, 1031,
     1003, 1003, 1003, 1003, 1003, 1003, 1003, 1003, 1003, 1164,
     1003, 1003, 1087, 1088, 1087, 1088, 1170, 1134, 1137, 1135,
     1138,  125, 1168, 1169, 1194,  126,  515,  826, 1171,  515,
      826,  515,  826, 1137,  170, 1138,  170, 1117, 1003, 1117,
     1166, 1167,  826, 1165, 1194,  826,  125,  826, 1168, 1169,

      126, 1119, 1088, 1119, 1088, 1171, 1130, 1154, 1088, 1154,
     1088,  170, 1172,  170, 1173, 1174, 1179, 1166, 1167, 1165,
     1154, 1088, 1154, 1088, 1154, 1088, 1154, 1088, 1175,  170,
     1175, 1177, 1130, 1178, 1194, 1181, 1184, 1155, 1176, 1172,
     1173, 1182, 1174, 1179, 1130,  251,  251,  251,  170, 1194,
     1185,  686, 1183,  687,  251, 1194,  170,  251, 1177, 1178,
      457, 1181, 1184,  457, 1176,  457, 1130, 1175, 1182, 1175,
     1130,  515,  574, 1194, 1189,  170,  167, 1185,  515, 1183,
     1175,  515, 1175,  515, 1130,  575, 1187, 1186, 1188, 1190,
     1194, 1194, 1130, 1191,  337, 1191, 1192, 1193, 1192,  574,

      170, 1189, 1130, 1128,  807, 1128, 1031, 1194, 1194, 1194,
     1130,  575, 1187, 1186, 1188, 1194, 1190, 1194, 1194, 1194,
     1194, 1194, 1194, 1194, 1194, 1194, 1194,  170, 1130, 1130,
     1194, 1194, 1194, 1194, 1194, 1194, 1194, 1194, 1194, 1194,
     1194, 1194, 1194, 1194, 1194, 1194, 1194, 1194, 1194, 1194,
     1194, 1194, 1194, 1194, 1194, 1130,   32,   32,   32,   32,
       32,   32,   32,   32,   63,   63,   63,   63,   63,   63,
       63,   63,   66,   66,   66,   66,   66,   66,   66,   66,
       70,   70,   70,   70,   70,   70,   70,   70,   72,   72,
       72,   72,   72,   72,   72,   72,   80,   80,   80,   80,

       80,   80,   80,   80,   84,   84,   84,   84,   84,   84,
       84,   84,   87,   87,   87,   87,   87,   87,   87,   87,
      107,  107,  107,  107,  107,  107,  107,  107,  112,  112,
      112,  112,  112,  112, 1194,  112,  116,  116, 1194,  116,
      116,  116,  116,  116,  120,  120,  120,  120,  120,  120,
      120,  120,  123, 1194, 1194, 1194, 1194, 1194,  123,  127,
     1194, 1194,  127,  127, 1194,  127,  170,  170, 1194,  170,
      170,  170,  170,  170,  176, 1194,  176,  178,  178, 1194,
      178,  178,  178,  178,  178,  180, 1194,  180,  182,  182,
     1194,  182,  182,  182,  182,  182,  183,  183, 1194,  183,

      183,  183,  183,  183,  185, 1194,  185,  187,  187, 1194,
      187,  187,  187,  187,  187,  188,  188, 1194,  188,  188,
      188,  188,  188,  191,  191,  191,  191,  191,  191,  191,
      191,  194,  194, 1194,  194,  194,  194,  194,  194,  198,
     1194,  198,  200,  200, 1194,  200,  200,  200,  200,  200,
      205, 1194,  205,  207,  207, 1194,  207,  207,  207,  207,
      207,  209, 1194,  209,  211,  211, 1194,  211,  211,  211,
      211,  211,  213, 1194,  213,  232,  232, 1194,  232,  232,
      232,  232,  232,  235,  235,  235,  235,  235,  235,  235,
      235,  237, 1194,  237,  126, 1194, 1194,  126,  126, 1194,

      126,  168,  168, 1194,  168,  168,  168,  168,  168,  175,
     1194,  175,  176, 1194,  176,  177,  177, 1194,  177,  177,
      177,  177,  177,  178,  178, 1194,  178,  178,  178,  178,
      178,  179, 1194,  179,  180, 1194,  180,  181,  181, 1194,
      181,  181,  181,  181,  181,  182,  182, 1194,  182,  182,
      182,  182,  182,  183,  183, 1194,  183,  183,  183,  183,
      183,  184, 1194,  184,  185, 1194,  185,  186,  186, 1194,
      186,  186,  186,  186,  186,  187,  187, 1194,  187,  187,
      187,  187,  187,  188,  188, 1194,  188,  188,  188,  188,
      188,  295,  295,  295,  295,  295,  295,  295,  295,  194,

      194, 1194,  194,  194,  194,  194,  194,  197, 1194,  197,
      198, 1194,  198,  199,  199, 1194,  199,  199,  199,  199,
      199,  200,  200, 1194,  200,  200,  200,  200,  200,  204,
     1194,  204,  205, 1194,  205,  206,  206, 1194,  206,  206,
      206,  206,  206,  207,  207, 1194,  207,  207,  207,  207,
      207,  208, 1194,  208,  209, 1194,  209,  210,  210, 1194,
      210,  210,  210,  210,  210,  211,  211, 1194,  211,  211,
      211,  211,  211,  212, 1194,  212,  213, 1194,  213,  231,
      231, 1194,  231,  231,  231,  231,  231,  232,  232, 1194,
      232,  232,  232,  232,  232,  235,  235,  235,  235,  235,

      235,  235,  235,  236, 1194,  236,  237, 1194,  237,  127,
     1194, 1194,  127,  127, 1194,  127,  330,  330, 1194,  330,
      330,  330,  330,  330,  170,  170, 1194,  170,  170,  170,
      170,  170,  576,  576,  576,  576,  576,  576,  576,  576,
      116,  116, 1194,  116,  116,  116,  116,  116,  594,  594,
     1194,  594,  594,  594,  594,  594,  625,  625,  625,  625,
      625,  625,  625,  625,  879,  879,  879,  879,  879,  879,
      879,  879,  891,  891,  891,  891, 1194, 1194,  891,  904,
      904,  904,  904,  904,  904,  904,  904,  967,  967,  967,
     1194,  967, 1194,  967,  988,  988,  988,  988,  988,  988,

      988,  988,  993,  993,  993,  993,  993,  993,  993,  993,
     1003, 1003, 1194, 1003, 1003, 1003, 1003, 1003, 1021, 1021,
     1021, 1021, 1021, 1021, 1021, 1021,  966,  966,  966, 1194,
      966, 1194,  966, 1037, 1037, 1037, 1037, 1037, 1037, 1037,
     1037, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 1048,
     1048, 1048, 1048, 1048, 1048, 1048, 1048, 1055, 1055, 1055,
     1055, 1055, 1055, 1055, 1055, 1079, 1079, 1079, 1079, 1079,
     1079, 1079, 1079, 1085, 1085, 1085, 1085, 1085, 1085, 1085,
     1085, 1093, 1093, 1093, 1093, 1093, 1093, 1093, 1093, 1101,
     1101, 1101, 1101, 1101, 1101, 1101, 1101, 1130, 1130, 1130,

     1130, 1130, 1130, 1130, 1130, 1132, 1132, 1132, 1132, 1194,
     1194, 1132, 1129, 1129, 1129, 1129, 1129, 1129, 1129, 1129,
     1156, 1156, 1156, 1194, 1156, 1194, 1156, 1155, 1155, 1155,
     1194, 1155, 1194, 1155,   31, 1194, 1194, 1194, 1194, 1194,
     1194, 1194, 1194, 1194, 1194, 1194, 1194, 1194, 1194, 1194,
     1194, 1194, 1194, 1194, 1194, 1194, 1194, 1194, 1194, 1194,
     1194, 1194, 1194, 1194, 1194, 1194, 1194, 1194, 1194, 1194,
     1194, 1194, 1194, 1194, 1194, 1194, 1194, 1194, 1194, 1194,
     1194, 1194, 1194, 1194, 1194, 1194, 1194, 1194, 1194, 1194,
     1194, 1194, 1194, 1194, 1194, 1194, 1194, 1194, 1194, 1194,

     1194, 1194, 1194, 1194
    } ;

static yyconst flex_int16_t yy_chk[6805] =
    {   0,
        0,    4,    1,    4,    1,    1,    0,    0,    2,    1,
        2,    2,    4,   24,   38,    2,   38,   38,    2,    4,
       24,    4,   40,   74,   39,    2,   39,   39,   42,   49,
       42,   49,   73,  190,   73,   73,   40,   74,   49,   82,
     1093,   82,   49,    1, 1055,  190,    4,   24,    4,    2,
     1042,   82,    2,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,

        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,   83,
     1040,   83,    7,  794,    7,    7, 1037, 1036,   11,    7,
       11,   11,  794,  993,   15,   11,   15,   15,   36,  991,
       76,   15,   36,  988,   76,    5,    6,    6,    6,    6,
        6,    6,    6,    6,    6,    6,    6,    6,    6,    6,
        6,    6,    6,    7,    8,    6,    8,    8,  987,   11,
      117,    8,  117,  117,    8,   15,   36,   44,   76,   44,

      122,    8,  122,  974,  971,  124,   44,  124,  824,    6,
       44,   98,    6,   25,  124,   25,   25,  824,  917,   27,
       25,   27,   27,  913,   44,    8,   27,   98,    8,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,  625,  624,   99,   12,
       44,   12,   12,   98,   25,  189,   12,  189,  189,   12,
       27,   29,  576,   29,   29,   99,   12,  110,   29,  573,
      518,  110,    9,   10,   10,   10,   10,   10,   10,   10,
       10,   10,   10,   10,   10,   10,   10,   10,   10,   10,
       12,   99,   10,   12,  100,   55,   16,   55,   16,   16,

      455,  876,   29,   16,   55,  110,   16,  202,   55,  202,
      876,  102,  100,   16,  295,   55,   10,  293,  102,   10,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   16,  100,  237,
       16,   26,   55,   26,   26,  102,   93,  126,   26,  126,
      166,   26,  166,  235,  103,  165,  126,  103,   26,  166,
       93,  213,  196,   13,   14,   14,   14,   14,   14,   14,
       14,   14,   14,   14,   14,   14,   14,   14,   14,   14,
       14,  165,   26,   14,  103,   26,   93,   28,  196,   28,
       28,  201,  879,  201,   28,  209,  127,   28,  127,  104,

      205,  879,  104,  201,   28,  127,  203,   14,  203,  127,
       14,   17,   17,   17,   17,   17,   17,   17,   17,   17,
       17,   17,   17,   17,   17,   17,   17,   17,   28,  104,
      198,   28,   30,  191,   30,   30,  250,  185,  250,   30,
      180,  331,   30,  331,  176,  250,  170,  123,  120,   30,
      331,  118,  112,  170,   17,   18,   18,   18,   18,   18,
       18,   18,   18,   18,   18,   18,   18,   18,   18,   18,
       18,   18,  170,   30,   18,   60,   30,   60,   60,  170,
      108,  903,   95,   96,  143,  143,  143,  745,  745,  745,
      903,   94,   95,  143,   96,   60,  143,  143,   18,   95,

       96,   18,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   95,
       87,   96,   60,   84,   80,   95,   96,  132,   48,  132,
       48,  748,  748,  748,   70,  222,  132,   48,   66,   63,
      132,   48,   41,  132,  222,   19,   20,   20,   20,   20,
       20,   20,   20,   20,   20,   20,   20,   20,   20,   20,
       20,   20,   20,  904,   48,   20,  140,  136,  140,  136,
      132,  222,  904,   34,  214,  140,  136,  950,  982,  140,
      136,   31,  927,  136,  927,  140,  950,  982,  214,   20,
       48,  296,   20,   21,   21,   21,   21,   21,   21,   21,

       21,   21,   21,   21,   21,   21,   21,   21,   21,   21,
      136,  146,  140,  146,  214,    0,  147,  296,  147,    0,
      146,   58,    0,   58,  146,  147,    0,  285,  215,  147,
       58,  215,    0,  146,   58,  147,   21,   22,   22,   22,
       22,   22,   22,   22,   22,   22,   22,   22,   22,   22,
       22,   22,   22,   22,  285,   58,   22,  281,  215,  281,
      146,    0,  147,  321,    0,  321,  281,    0,    0,  355,
      281,  355,  321,  750,  750,  750,  321,  994,  355,  994,
       22,   58,  355,   22,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,

       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   43,   47,   43,   47,    0,    0,   51,
       97,   51,   43,   47,  224,    0,   43,   47,   51,   52,
      216,   52,   51,   79,   97,   79,  217,    0,   52,  218,
       43,   47,   52,   47,  224,  216,   97,   43,  934,   51,
      934,  217,  130,   47,  130,   53,    0,   53,  934,   52,

       97,  130,  218,   79,   53,  130,   43,   47,   53,   47,
      224,  216,   97,   43,   45,   51,   45,  217,  164,   47,
      164,  164,  130,   45,  219,   52,   53,   45,  218,   79,
       45,  219,    0,   59,   50,   59,   50,   45,  164,    0,
      225,   45,   59,   50,   45,    0,   59,   50,  130,    0,
        0,  225,   53,    0,  220,   50,   59,   45,  219,  366,
     1020,  366,   50,   50,   45,  164,   59,   45,  366, 1020,
       45,   46,  128,   46,  128,  221,  220,  195,  225,  195,
       46,  128,   50,   59,   46,  128,   56,   46,   50,   50,
       56,   46,   59,    0,   56,   46,   57,  221,   57,  128,

       56,   46,  220,    0,    0,   57,   56,  195, 1057,   57,
     1057,    0,   57,   56,   46,    0,    0,   56,   46,   57,
      301,   56,   46,  221,  301,  128,   56,   46,   54,  133,
       54,  133,   56,  195,  226,  230,   57,   54,  133,   57,
      101,   54,  133,  101,   54,  226,   57,  172,  374,  307,
      172,  301,  307,    0,  172,  230,    0,  101,   54,  133,
      101,   54,   57,  101,   54,  157,  407,  157, 1021,    0,
      101,   54,  226,  172,  157,  374,  172, 1021,  157,  307,
      172,  230,  157,  101,   54,  133,  101,   54,  223,  101,
       54,   61,   61,  407,   61,   61,   61,   61,   61,   61,

       61,   61,   61,   61,   61,   61,   61,   61,   61,  157,
      223,   62,  129,   62,  129,   61,  297,  302,    0,   61,
       62,  129,   61,  227,   62,  129,  288,  227,  150,  386,
      150,  424,  302,  297,   61,   61,  223,  150,   62,  288,
       62,  150,   61,  227,  229,   61,  129,  137,   61,  137,
       62,    0,  150,  288,  227,  386,  137,  424,  302,  297,
      137,  138,  138,  138,   62,  288,   62,    0,  229,  227,
      138,    0,  129,  138,  138,  137,   62,   64,   64,  150,
       64,   64,   64,   64,   64,   64,   64,   64,   64,   64,
       64,   64,   64,   64,  229,    0,  412,  138,  412,    0,

      153,  137,  153, 1024,  300,  412,  135,    0,  135,  153,
      303,  300, 1024,  153,    0,  135,  153,  303,  153,  135,
       64,   67,   67,  138,   67,   67,   67,   67,   67,   67,
       67,   67,   67,   67,   67,   67,   67,   67,  300,  299,
      159,  135,  159,  153,  303,  153,  464, 1047,  464,  159,
      141,  305,  141,  159,    0,  464, 1047,  299,  464,  141,
      159,    0,  305,  141,   67,   71,   71,  135,   71,   71,
       71,   71,   71,   71,   71,   71,   71,   71,   71,   71,
       71,   71,  161,  299,  161,  141,    0,  159,  174,  305,
      174,  161,  757,  757,  757,  161,  979,  174,  979,    0,

      228,  174,  161,  228,    0,  228,  979,  174,   71,   81,
       81,  141,   81,   81,   81,   81,   81,   81,   81,   81,
       81,   81,   81,   81,   81,   81,  142,    0,  142,  161,
      228,  240,  228,  240,  174,  142,  306, 1048,    0,  142,
      240,  478,  315,  478,  240,    0, 1048,  306,    0,  240,
      478,  315,   81,   85,   85,  142,   85,   85,   85,   85,
       85,   85,   85,   85,   85,   85,   85,   85,   85,   85,
      163,  242,  163,  242,  306,  310,  240,  308,  315,  163,
      242,  142,    0,  163,  242, 1115,  144, 1115,  144,  310,
     1145,  242, 1145,  308,  163,  144,   85,   88,   88,  144,

       88,   88,   88,   88,   88,   88,   88,   88,   88,   88,
       88,   88,   88,   88,  253,  310,  253,  144,  242,  308,
      359,  163,  359,  253,    0, 1051,  149,  253,  149,  359,
      311,  253,    0,  359, 1051,  149, 1162,  311, 1162,  149,
       88,  105,  105,  144,  105,  105,  105,  105,  105,  105,
      105,  105,  105,  105,  105,  105,  105,  105,  253,  149,
      131,  134,  131,  134,  311,  105,  154, 1079,  154,  131,
      134,  429,  105,  131,  134,  154, 1079,  387,  309,  154,
      431,  298,  387,  313,  105,  149,  145,  131,  145,  134,
      134,  139,  105,  139,  131,  145, 1101,  429,  105,  145,

      139,  298,  309,  154,  139, 1101,  313,  431,    0,  387,
      148,  139,  148,  131,    0,  134,  134,    0,  145,  148,
      131,  145,  151,  148,  151,  139,  314,  298,  309,  154,
      148,  151,  313,  314,  388,  151,    0,  388,  139,    0,
      155,  152,  155,  152,  145,  148,  151,  145,  312,  155,
      152,  139,  151,  155,  152,    0,    0,  148,  152,  171,
      314,    0,  312,  156,  388,  156,  158,  155,  158,    0,
      171,  148,  156,  151,  152,  158,  156,  171,  151,  158,
      234,  160,  162,  160,  162,  152,  171,  289,  312,  433,
      160,  162,  234,  155,  160,  162,  171,    0,    0,  158,

      152,  289,  162,  171,  156,    0,  162,  234,  173,  173,
      173,  249,  160,  249,  289,  173,  433,    0,  234,  244,
      249,  244,    0,  389,  249,  158,    0,  289,  244,  162,
      156,  249,  244,  162,  173,  173,  173,  389,  160,  168,
      168,  173,  168,  168,  168,  168,  168,  168,  168,  168,
      168,  168,  168,  244,  168,  168,    0,  247,  249,  247,
        0,  397,  258,  389,  258,    0,  247,  480,    0,  480,
      247,  258,  238,  247,  238,  258,  480,    0,  397,  244,
      258,  238,  168,  169,  169,  238,  169,  169,  169,  169,
      169,  169,  169,  169,  169,  169,  169,  169,  169,  169,

      247,    0,  238,  239,  397,  239,  243,  258,  243,    0,
        0,  169,  239,  392,    0,  243,  239,    0,  169,  243,
      392,  255,  257,  255,  257,    0,  169,  266,  238,  266,
      255,  257,    0,  239,  255,  257,  266,  169,    0,  243,
      266,  255,  257,  266,  169,  177,  177,  392,  177,  177,
      177,  177,  177,  177,  177,  177,  177,  177,  177,  239,
      177,  177,  399,    0,  241,  243,  241,  391,  255,  257,
      266,    0,    0,  241,  246,    0,  246,  241,    0,    0,
      396,  391,    0,  246,  399,  396,    0,  246,  177,  178,
      178,  241,  178,  178,  178,  178,  178,  178,  178,  178,

      178,  178,  178,  178,  178,  178,  262,  391,  262,  246,
      399,  271,  396,  271,    0,  262,  245,  241,  245,  262,
      271,  406,    0,    0,  271,  245,    0,    0,  406,  245,
      262,  271,  178,  181,  181,  246,  181,  181,  181,  181,
      181,  181,  181,  181,  181,  181,  181,  245,  181,  181,
      393,  265,  248,  265,  248,  406,  395,  262,  271,    0,
      265,  248,    0,    0,  265,  248, 1173,  395, 1173,  400,
      393,    0,  400,  245,    0,  265,  181,  182,  182,  248,
      182,  182,  182,  182,  182,  182,  182,  182,  182,  182,
      182,  182,  182,  182,  395,  254,  393,  254,  268,  400,

      268,  318,  265,  318,  254,  248,  402,  268,  254,    0,
      318,  268,    0,  402,  318,  485,  402,  402,  402,  318,
      182,  186,  186,  254,  186,  186,  186,  186,  186,  186,
      186,  186,  186,  186,  186,  268,  186,  186,  256,  256,
      256,  269,  485,  269,  398,    0,  318,  256,    0,  254,
      269,  256,  499,    0,  269,  499,  373,  256,    0,  398,
      373,  268,  256,  269,  186,  187,  187,    0,  187,  187,
      187,  187,  187,  187,  187,  187,  187,  187,  187,  187,
      187,  187,  499,  373,  256,  398,  274,  373,  274,  256,
      269,  275,    0,  275,  264,  274,  264,    0,    0,  274,

      275,    0,    0,  264,  275,  430,  274,  264,  187,  199,
      199,  275,  199,  199,  199,  199,  199,  199,  199,  199,
      199,  199,  199,  264,  199,  199,    0,  276,  259,  276,
      259,  430,  405,  274,    0,    0,  276,  259,  275,  405,
      276,  259,  405,  405,  405,    0, 1180,  276, 1180,  264,
        0,    0,  199,  200,  200,  259,  200,  200,  200,  200,
      200,  200,  200,  200,  200,  200,  200,  200,  200,  200,
      278,  371,  278,  371,  276,  260,  319,  260,  319,  278,
      371,  259,  500,  278,  260,  319,    0,  500,  260,  319,
      472,  371,  278, 1185,  319, 1185,  200,  206,  206,  542,

      206,  206,  206,  206,  206,  206,  206,  206,  206,  206,
      206,  260,  206,  206,  500,  280,  472,  280,  371,  278,
      323,  319,  323,    0,  280,  263,  542,  263,  280,  323,
        0,    0,  290,  323,  263,  280,  323,  260,  263,    0,
      206,  207,  207,  290,  207,  207,  207,  207,  207,  207,
      207,  207,  207,  207,  207,  207,  207,  207,  324,  290,
      324,  263,  280,  323,  322,  322,  322,  324,    0,  290,
      267,  324,  267,  322,    0,  375,  322,  322,  324,  267,
        0,  473,  375,  267,  207,  210,  210,  263,  210,  210,
      210,  210,  210,  210,  210,  210,  210,  210,  210,  267,

      210,  210,  375,    0,  270,  324,  270,  473,  375,  327,
      327,  327,    0,  270,  284,    0,  284,  270,  327,    0,
      474,  327,  327,  284,    0,  267,    0,  284,  210,  211,
      211,  270,  211,  211,  211,  211,  211,  211,  211,  211,
      211,  211,  211,  211,  211,  211,  474,    0,    0,  284,
      326,  273,  326,  273,  390,    0,  456,  270,  456,  326,
      273,    0,    0,  326,  273,  475,  326,    0,  509,  456,
      390,  509,  211,  231,  231,  284,  231,  231,  231,  231,
      231,  231,  231,  231,  231,  231,  231,  273,  231,  231,
        0,  475,  272,  326,  272,  334,  390,  334,  509,    0,

      595,  272,  595,    0,  334,  272,    0,  514,  334,  595,
      376,  272,  514,  273,  376,  334,  231,  232,  232,  272,
      232,  232,  232,  232,  232,  232,  232,  232,  232,  232,
      232,  232,  232,  232,  335,  335,  335,  376,  272,  514,
        0,  376,  334,  335,  623,  272,  335,  335,    0,    0,
      277,  623,  277,    0,  623,  623,  623,    0,    0,  277,
      232,  233,  233,  277,  233,  233,  233,  233,  233,  233,
      233,  233,  233,  233,  233,  233,  233,  233,  233,  261,
      316,  261,  279,  277,  279,  282,  432,  282,  261,  545,
      432,  279,  261,  291,  282,  279,    0,  316,  282,  261,

      317,  283,  486,  283,  233,  233,  486,  316,  291,  277,
      283,  279,  261,  432,  283,  317,  545,  432,  282,  427,
      291,  427,  320,  316,  320,  549,  261,  317,  283,  486,
      339,  320,  339,  486,  291,  320,    0,  279,  261,  339,
      340,  317,  340,  339,  282,  427,  476,  427,  320,  340,
      477,  339,  549,  340,  283,  286,  286,    0,  286,  286,
      286,  286,  286,  286,  286,  286,  286,  286,  286,  286,
      286,  286,  476,  340,  320,  325,  477,  325,  339,    0,
      328,    0,  328,  286,  325,  550,  404,    0,  325,  328,
        0,    0,  352,  328,  352,  671,    0,  671,  286,  340,

      551,  352,  325,    0,  671,  352,  404,  328,  352,  286,
      287,  287,  550,  287,  287,  287,  287,  287,  287,  287,
      287,  287,  287,  287,  287,  287,  287,  551,  325,  304,
      408,  287,  404,  328,    0,  352,  304,  329,  333,  329,
      333,  408,    0,  338,  401,  338,  329,  333,  489,  304,
      329,  333,  338,  287,  491,  401,  338,  408,  287,  292,
      292,  292,  292,  304,    0,  333,  329,  408,  292,  423,
      394,  491,  292,  338,  489,  304,  423,  554,  292,  394,
      292,  491,  401,  292,    0,    0,  394,  292,  535,    0,
      292,  333,  329,  292,  292,  423,    0,  491,  556,  338,

        0,  467,  423,  467,  554,  292,  394,  292,    0,  341,
      292,  341,  394,  292,  535,  403,  292,  403,  341,  292,
      292,  336,  341,  336,  403,  556,  403,  403,  403,  403,
      336,    0,  467,  342,  346,  342,  346,  336,  336,  336,
      336,  336,  342,  346,  341,  336,  342,  346,    0,  336,
      502,  336,  346,    0,  336,  336,  336,  342,  467,  336,
      380,    0,  380,  536,  336,  336,  336,  336,  336,  380,
      341,  502,  336,  380,  343,  336,  343,  336,    0,  346,
      336,  336,  336,  343,  342,  336,  344,  343,  344,  536,
        0,  347,  345,  347,  345,  344,  380,  502,  343,  344,

      347,  345,    0,  590,  347,  345,  507,  537,  344,    0,
        0,  348,  348,  348,  501,  344,  345,  520,  347,  344,
      348,  501,  380,  348,  348,  343,    0,  349,  507,  349,
      590,    0,  483,  537,  483,  344,  349,  350,  520,  350,
      349,  344,  434,  345,  347,  344,  350,  351,  501,  351,
      350,  503,  434,  353,  507,  353,  351,  349,  503,  483,
      351,  483,  353,  490,  520,  350,  353,  490,  354,  434,
      354,  358,    0,  358,    0,    0,  513,  354,  434,  490,
      358,  354,  351,  349,  358,  503,  353,  356,  356,  356,
      490,  350,  354,  360,  490,  360,  356,  504,  513,  356,

      356,  505,  360,    0,  358,  490,  360,    0,  351,    0,
      538,  360,  353,  504,  361,  361,  361,  505,    0,  354,
      357,  506,  357,  361,  513,    0,  361,  361,  506,  357,
      358,  357,  357,  357,  357,  362,  538,  362,  360,  504,
      363,  357,  363,  505,  362,  519,    0,  519,  362,  363,
      364,  364,  364,  363,  357,  506,  508,  521,  519,  364,
      363,    0,  364,  364,  367,  362,  367,  539,  357,  365,
      365,  365,  508,  367,  758,  758,  758,  367,  365,  521,
      357,  365,  365,  368,  367,  368,  369,  363,  369,    0,
      511,  362,  368,  539,    0,  369,  368,  511,  508,  369,

      372,  372,  372,  368,    0,  521,  369,    0,  718,  372,
      718,  367,  372,  383,  382,  383,  382,  718,    0,  381,
      372,  381,  383,  382,  511,    0,  383,  382,  381,  416,
      368,  416,  381,  369,  370,  370,  370,  370,  416,    0,
      381,  384,  416,  384,  382,  510,  383,  372,  381,  416,
      384,  415,  415,  415,  384,  370,    0,    0,  370,  512,
      415,  510,  370,  415,  415,  370,  512,  381,  370,  370,
      382,  385,  383,  385,  381,  540,  416,  384,  541,    0,
      385,  516,  370,  516,  385,  370,    0,  510,  370,  544,
      516,  370,  516,  512,  370,  370,  377,  377,  377,  377,

      409,  540,  409,  384,  541,  420,  547,  420,    0,  409,
      410,  385,  410,  409,  420,  544,  409,  377,  420,  410,
      377,    0,    0,  410,  377,  420,  411,  377,  411,    0,
      377,  377,  547,    0,  410,  411,  592,  385,    0,  411,
      548,    0,  601,  409,  377,  411,  414,  377,  414,  417,
      377,  417,  420,  377,    0,  414,  377,  377,  417,  414,
      552,  410,  417,  592,  414,  418,  548,  418,  419,  601,
      419,  553,  411,  417,  418,    0,  425,  419,  418,    0,
      421,  419,  421,  586,  426,  586,  552,  425,  426,  421,
      425,  414,  441,  421,  441,  418,  574,  553,  426,  428,

      417,  441,  419,  425,    0,  441,  428,  428,  575,  421,
        0,  426,  441,  425,  586,  426,  425,    0,  435,  435,
      435,  418,  574,    0,  426,  635,  428,  435,  419,    0,
      435,  435,  428,  428,  575,  421,  436,  436,  436,  441,
      586,  437,  438,  437,  438,  436,  622,  588,  436,  436,
      437,  438,  635,  622,  437,  438,  439,    0,  439,  440,
        0,  440,  442,    0,  442,  439,  438,  646,  440,  439,
      437,  442,  440,  588,  439,  442,  444,  443,  444,  443,
      622,  589,  447,  523,  447,  444,  443,  523,    0,  444,
      443,  447,  440,  438,  646,  447,  437,  442,  443,    0,

      445,  439,  445,    0,  591,  444,  446,  589,  446,  445,
      523,  447,  593,  445,  523,  446,  445,  608,  440,  446,
      448,    0,  448,  442,    0,  443,  446,    0,    0,  448,
      591,  444,  449,  448,  449,    0,    0,  447,  593,  608,
      448,  449,  450,  445,  450,  449,    0,  451,  452,  451,
      452,  450,  449,  446,  609,  450,  451,  452,    0,  611,
      451,  452,  453,  451,  453,  608,  452,  448,    0,    0,
      611,  453,  458,  453,  458,    0,  609,  450,  454,  449,
      454,  458,  459,  453,  459,  458,    0,  454,    0,  454,
      451,  459,  461,  452,  461,  459,  453,  611,  460,  454,

      460,  461,  609,  450,  462,  461,  462,  460,  458,  597,
      453,  460,  454,  462,  517,  618,  517,  462,  459,  644,
        0,    0,  453,  517,  597,  517,  454,  461,  463,  618,
      463,  610,  460,  533,  458,  533,  597,  463,  454,    0,
      462,  463,  533,    0,  459,  644,  533,  468,  468,  468,
      597,    0,  495,  461,  495,  618,  468,  610,  460,  468,
      468,  495,  492,  463,  492,  495,  462,  469,  469,  469,
      488,  492,  470,  470,  470,  492,  469,  488,  488,  469,
      469,  470,  495,  610,  470,  470,  484,  484,  484,  463,
      614,  492,  493,  614,  493,  484,    0,  488,  484,    0,

      494,  493,  494,  488,  488,  493,  484,  619,  495,  494,
      619,    0,  496,  494,  496,  617,  522,  492,  522,  494,
      614,  496,  526,  645,  526,  496,  497,  493,  497,  496,
        0,  526,  613,  484,    0,  497,  617,  619,  524,  497,
      524,  526,  578,  522,  578,  522,  494,  524,    0,  645,
      525,  524,  525,  493,  613,  578,  496,  497,  527,  525,
      527,  587,  617,  525,  587,    0,  525,  527,  526,  620,
        0,  527,    0,  524,  527,  528,  529,  528,  529,  598,
      613,  629,    0,  497,  528,  529,    0,  587,  528,  529,
      587,  620,  629,  525,  530,  531,  530,  531,  598,  524,

        0,  527,  647,  530,  531,    0,  598,  530,  531,  532,
      528,  532,  534,  531,  534,  529,    0,  620,  532,  629,
        0,  534,  532,  530,  598,  534,  543,  543,  543,  647,
      546,  546,  546,  532,    0,  543,  528,  599,  543,  546,
      531,  529,  546,  557,  555,  557,  599,  534,  555,  530,
        0,  648,  557,  558,    0,  558,  557,    0,    0,  557,
      532,  559,  558,  559,  599,    0,  558,  560,    0,  560,
      559,  555,  599,  534,  559,  555,  560,  648,  615,  562,
      560,  562,  561,  558,  561,  559,  557,  560,  562,    0,
        0,  561,  562,    0,  563,  561,  563,  600,  615,    0,

      600,  649,    0,  563,  564,    0,  564,  563,  651,  558,
      563,    0,  559,  564,  560,  561,  565,  564,  565,  566,
      566,  566,    0,  600,  615,  565,  600,  649,  566,  565,
        0,  566,  566,  567,  651,  567,  621,  563,  564,    0,
        0,  561,  567,  565,    0,  568,  567,  568,  569,  567,
      569,    0,    0,  570,  568,  570,  621,  569,  568,  650,
        0,  569,  570,    0,  564,  571,  570,  571,  653,  565,
      572,  632,  572,  570,  571,  577,  567,  577,  571,  572,
      568,  569,  621,  572,  577,  659,  650,  577,  655,  577,
      579,    0,  579,  571,  632,  653,  577,    0,  632,  579,

      570,  656,  579,  579,  579,  657,  568,  569,  580,  577,
      580,  579,  659,  581,  655,  581,  582,  580,  582,  571,
      632,  580,  581,  577,  579,  582,  581,  656,    0,  582,
      581,  657,  583,  583,  583,  577,    0,  580,  579,  631,
      582,  583,  658,  662,  583,  583,  584,  585,  584,  585,
      579,  660,  602,  661,  602,  584,  585,  581,  631,  584,
      585,  602,  603,  580,  603,  602,  631,  582,  658,  662,
      602,  603,    0,  683,  604,  603,  604,  605,  660,  605,
      661,  584,  603,  604,  631,    0,  605,  604,  663,  606,
      605,  606,  607,  612,  607,  612,    0,  602,  606,  605,

      683,  607,  606,  664,    0,  607,  612,  584,  665,  603,
      604,  616,  607,  616,  663,    0,  626,    0,  626,  627,
      616,  627,  606,  682,  616,  626,  605,    0,  626,  664,
      626,  628,  627,    0,  665,  692,  604,    0,  628,  607,
      630,  628,  628,  628,  633,    0,  633,  630,  606,  682,
      630,  630,  630,  633,  634,  696,  634,  633,    0,  636,
      633,  636,  692,  634,  633,    0,  693,  634,  636,  639,
      694,  639,  636,    0,  695,  637,  698,  637,  639,  697,
        0,  696,  639,  640,  637,  640,  699,  633,  637,  634,
      703,  633,  640,  693,  636,  637,  640,  694,  641,  640,

      641,  695,  698,  639,  714,    0,  697,  641,  642,    0,
      642,  641,  711,  699,  700,  634,  703,  642,  710,  711,
      636,  710,  637,  638,  702,  638,  640,    0,  641,  639,
      714,  654,  638,  654,  638,  638,  638,  638,  702,  642,
      666,  700,  666,  643,  638,  643,  711,  720,  710,  666,
      654,  702,  643,  666,  641,  654,  643,  638,  720,  643,
      667,  668,  667,  668,  702,  642,    0,  666,  742,  667,
      668,  638,  715,  667,  668,  715,    0,  654,  669,  669,
      669,  743,  654,  638,    0,  720,  643,  669,  734,  667,
      669,  669,  677,  666,  677,  742,  668,  672,  673,  672,

      673,  677,  715,  713,  674,  677,  674,  673,  743,    0,
      716,  673,  746,  674,  734,  667,  673,  674,    0,  677,
      713,  672,  668,  670,  716,  670,  722,  672,  674,  679,
        0,  679,  670,    0,  670,  670,  670,  670,  679,  746,
      722,  740,  679,  673,  670,  677,  713,  676,  672,  676,
      716,  744,  678,  672,  678,  674,  676,  670,    0,  676,
      680,  678,  680,  747,    0,  678,  722,  740,    0,  680,
      728,  670,  678,  680,  760,  760,  760,  744,  676,  681,
      681,  681,  723,  670,  675,  686,  675,  686,  681,  723,
      747,  681,  681,  675,  728,  675,  675,  675,  675,  678,

      684,  685,  684,  685,  676,  675,  686,    0,    0,  684,
      685,    0,  684,  685,  684,  685,  723,  749,  675,  686,
      728,  684,  685,    0,  752,  687,  756,  687,  690,  688,
      690,  688,  675,  686,  684,  685,    0,  690,  688,    0,
        0,  690,  688,  749,  675,  686,  687,  688,  684,  685,
      752,    0,  756,  689,  691,  689,  691,    0,    0,  687,
      684,  685,  689,  691,  769,  690,  689,  691,  704,    0,
      704,  729,  724,  687,  688,  729,    0,  704,  691,  724,
      753,  704,  724,  724,  724,  687,  689,  705,  770,  705,
      769,  690,  773,    0,  754,  707,  705,  707,  729,  725,

      705,    0,  729,  704,  707,  691,  725,  753,  707,  725,
      725,  725,  689,  701,  770,  701,  755,  706,  773,  706,
      705,  754,  701,  759,  701,  701,  706,  701,  707,  704,
      706,  762,  763,  701,  701,  764,  708,  777,  708,  709,
      709,  709,  709,  755,  706,  708,  705,  701,  709,  708,
      759,    0,  709,    0,  707,  719,    0,  719,  762,  763,
      701,  701,  764,  712,  777,  712,  708,    0,  778,  717,
      706,  717,  712,  701,  712,  712,  712,  712,  717,  719,
      717,  717,  717,  717,  721,  719,  721,  761,  761,  761,
        0,  783,  708,  721,  778,  721,  721,  721,  721,  830,

      726,  727,  726,  727,    0,  784,  719,    0,    0,  726,
      727,  719,  726,  727,  726,  727,  730,  783,  730,  785,
      731,    0,  731,  786,  787,  730,  830,  730,  730,  731,
      730,  784,  730,  731,  732,  732,  732,  731,    0,    0,
      788,  820,  733,  732,  733,  785,  732,  732,  820,  786,
      787,  733,  735,  732,  735,  733,  789,  800,  736,  730,
      736,  735,  733,    0,  731,  735,  788,  736,  735,    0,
      811,  736,  737,  737,  737,  820,  835,  738,    0,  738,
      732,  737,  789,  800,  737,  737,  738,  815,  809,  733,
      738,  736,  739,  816,  739,  735,  811,  741,  837,  741,

        0,  739,  765,  835,  765,  739,  741,  751,  809,  751,
      741,  765,  738,  815,  766,  765,  766,  736,    0,  816,
      767,  739,  767,  766,  741,  837,  751,  766,    0,  767,
      768,  751,  768,  767,  809,  771,    0,  771,  738,  790,
      790,  790,  790,  772,  771,  772,  838,  739,  771,  767,
      741,  842,  772,  751,  768,  771,  772,  774,  751,  774,
      768,  772,  776,  775,  776,  775,  774,  797,    0,    0,
      774,  776,  775,  838,  776,  767,  775,  842,  779,  841,
      779,  768,  771,  797,    0,    0,  768,  779,  772,  791,
      780,  779,  780,    0,  797,  781,  775,  781,  782,  780,

      782,  808,  791,  780,  781,  808,  841,  782,  781,  797,
      792,  782,  792,  779,  798,  781,  791,    0,    0,  792,
      780,  792,  775,    0,  795,  846,  795,  782,  791,    0,
      798,  792,  808,  810,  793,  817,  793,  795,  845,  779,
      817,  798,  781,  793,  792,  793,  780,    0,    0,  810,
      801,  846,  801,  782,    0,  793,  798,  848,  792,  801,
      799,  799,  799,  801,  802,  845,  802,  817,  793,  799,
      792,    0,  799,  802,  801,  810,  812,  802,  847,  803,
      799,  803,  793,  848,  804,  802,  804,  821,  803,  805,
      812,  805,  803,  804,  793,    0,    0,  804,  805,  803,

      804,  801,  805,  819,  821,  847,    0,  799,  806,  806,
      806,  806,  802,  814,  821,  814,  812,  806,  840,  840,
      840,  813,  825,  819,  825,  805,  803,  804,  813,  818,
      821,  813,  813,  813,    0,  825,  818,  814,    0,  818,
      818,  818,  856,  814,  822,  823,  822,  823,  827,  819,
      827,  805,    0,  822,  823,  822,  823,  827,  828,  828,
      828,  827,  859,  829,  814,  829,    0,  828,  856,  814,
      828,  828,  829,    0,    0,  827,  829,  831,  831,  831,
        0,    0,  829,  833,  867,  833,  831,  861,  859,  831,
      831,  834,  833,  834,  862,    0,  833,  839,    0,  839,

      834,  827,  868,  833,  834,  836,  852,  836,  852,  829,
      832,  867,  832,  861,  836,  852,  839,    0,  836,  832,
      862,  832,  832,  832,  832,  843,  843,  843,  869,  868,
      833,  832,  844,  844,  844,  849,  849,  849,  850,  850,
      850,    0,  870,  839,  832,  851,  851,  851,  853,    0,
      853,  854,  855,  854,  855,  869,  871,  853,  832,    0,
      854,    0,  855,  858,  854,  858,  857,  857,  857,  870,
      832,  860,  858,  860,  872,  857,  858,  853,  857,  857,
      860,  854,  855,  871,  860,  863,  864,  863,  864,  873,
      877,  865,  878,  865,  863,  864,    0,  892,  863,  864,

      865,  872,  898,  853,  865,    0,    0,  854,  855,  863,
      866,  892,  866,    0,    0,  873,  877,  884,  878,  866,
      884,    0,  864,  866,  874,  874,  874,  874,  898,  880,
      866,  880,  881,  874,  881,  885,  863,  892,  880,  895,
      882,  880,  882,  880,  884,  881,  883,  884,  864,  882,
      880,    0,  882,  882,  882,  883,  918,  866,  875,  920,
      875,  882,  885,  880,  919,    0,  895,  875,    0,  875,
      875,  923,  875,  883,  882,    0,  922,  880,  875,  875,
        0,  883,  886,  918,  886,  887,  920,  887,  882,  880,
      919,  886,  875,    0,  887,  886,  924,  923,  887,  925,

      882,  887,  889,  922,  889,  875,  875,  888,  888,  888,
      888,  889,  886,    0,    0,  889,  888,  926,  875,  906,
      888,  906,  890,  924,  890,    0,  925,  935,  887,  929,
      889,  890,  906,    0,  893,  890,  893,    0,  886,  891,
      891,  891,  891,  893,  926,  893,  893,  893,  893,  894,
        0,  894,  891,  896,  935,  929,  889,  890,  894,  897,
      896,  897,  894,  896,  896,  896,  899,    0,    0,  897,
      910,  910,  910,  899,  900,  933,  899,  899,  899,  910,
      901,  900,  910,  890,  900,  900,  900,  901,    0,  897,
      901,  901,  901,  902,  905,  902,  905,  928,  928,  928,

        0,  933,  902,  905,  902,  902,  905,  902,  905,  902,
      907,  936,    0,  937,  908,  897,  908,  907,    0,    0,
      907,  907,  907,  908,  911,    0,  911,  908,  909,  909,
      909,  941,    0,  911,  908,  911,  902,  909,  936,  937,
      909,  909,  912,  942,  912,  911,  914,  916,  914,  916,
      921,  912,  921,  912,  943,  914,  916,  941,  911,  914,
        0,  908,  930,  912,  930,  915,  915,  915,    0,  921,
      942,  930,  911,  944,  915,  930,  912,  915,  915,  931,
      943,  931,  946,    0,  911,  938,  939,  938,  939,  931,
      912,  930,  947,  952,  938,  939,  921,    0,  938,  939,

      944,  940,  912,  940,  945,  945,  945,  945,  946,  931,
      940,  948,  953,  948,  940,  938,    0,  930,  947,  952,
      948,  939,  948,  958,  951,  958,  951,  949,  975,  949,
      959,    0,  948,  951,    0,  931,  949,  951,  949,  953,
        0,  938,  954,  959,  954,  948,    0,  939,  949,    0,
      958,  954,  958,    0,  954,  975,  954,  959,  955,  948,
      955,  949,  956,  954,  956,    0,  968,  955,  978,  959,
      955,  948,  955,  968,  995,  949,  954,  997,  957,  955,
      957,  996,  961,  956,  961,    0,    0,  949,    0,    0,
      954,  961,  955,  998,  978,  961,  956,  977,  999,  957,

      968,  995,  954,  997,  977, 1000,  955,  977,  996,  977,
      956,  961,  957,  960,  960,  960,  960, 1009,  955,  998,
        0,  962,  956,  962,  999, 1001,  957,  973,    0,  973,
      962,    0, 1000,    0,  962,    0,  973,  961,  957,  962,
      963,  963,  963,  963, 1009,  964,  969,  964,  969,  963,
        0, 1001, 1005,  963,  964,  969, 1014,  969,  964,  965,
      965,  965,  965, 1002, 1002, 1002,  962,    0,    0,  964,
      966,  966,  966,  966,  967,  967,  967,  967, 1005,  970,
      972,  970,  972, 1014,  976,    0,  976,  967,  970,  972,
      970,    0, 1007,  972,  976,  980,  964,  980,  981,  983,

      981,  983,    0, 1004,  980, 1004,  980,  981,  983,  981,
     1010,  984,  983,  984,  976,  985, 1017,  985, 1007,  986,
      984,  986, 1011,  984,  985,  984, 1016,  985,  986,  985,
     1027,    0,  986,  989, 1004,  989, 1010,  990, 1019,  990,
      976,    0,  989, 1017,    0,  989,  990,  989, 1011,  992,
      990,  992, 1016, 1026,  989, 1006, 1027, 1006,  992, 1044,
     1004,  992,  992,  992, 1006, 1019,    0,  989, 1006, 1008,
      992, 1008, 1062, 1062, 1062, 1006, 1012, 1028, 1012, 1008,
     1026,  989, 1013,  992, 1013, 1012, 1044, 1045, 1060, 1012,
        0, 1013, 1028,  989, 1023, 1013, 1023,  992, 1018, 1018,

     1018, 1018, 1006, 1023, 1028, 1012, 1013, 1023, 1022,  992,
     1022, 1029,    0, 1045, 1025, 1060, 1025, 1022, 1028,    0,
     1022, 1029, 1022, 1025,    0,    0, 1025, 1025, 1025, 1022,
     1039, 1012, 1039, 1013, 1035, 1025,    0,    0, 1029, 1039,
     1058, 1035, 1022, 1039, 1035, 1035, 1035, 1029, 1025,    0,
     1032, 1032, 1032, 1032,    0, 1038, 1022, 1038,    0, 1032,
        0,    0, 1025, 1032, 1038,    0, 1058, 1038, 1022, 1038,
     1061,    0,    0, 1063, 1025, 1030, 1030, 1030, 1030, 1030,
     1030, 1030, 1030, 1030, 1030, 1030, 1030, 1030, 1030, 1030,
     1030, 1030, 1033, 1034, 1033, 1034,    0, 1061, 1046, 1063,

     1046, 1033, 1034, 1041, 1065, 1033, 1034, 1030, 1046,    0,
     1041, 1066, 1033, 1041, 1041, 1041,    0, 1043, 1030, 1043,
     1070,    0, 1034, 1049, 1069, 1049, 1043,    0,    0, 1043,
     1065, 1043, 1049, 1030, 1050, 1049, 1050, 1049, 1066, 1033,
        0,    0, 1052, 1050,    0,    0, 1070, 1050, 1034, 1052,
        0, 1069, 1052, 1052, 1052, 1053, 1054, 1053, 1054,    0,
     1059, 1059, 1059,    0, 1053, 1054, 1071, 1053, 1054, 1053,
     1054, 1056, 1064, 1056, 1064,    0, 1053, 1054,    0, 1059,
     1056, 1075,    0, 1056,    0, 1056, 1067, 1067, 1067, 1053,
     1054, 1076, 1056, 1071, 1081, 1067,    0, 1082, 1067, 1067,

     1068, 1064, 1068, 1053, 1054, 1056, 1059,    0, 1075, 1072,
     1068, 1072, 1073, 1097, 1073, 1053, 1054, 1076, 1072, 1056,
     1081, 1073, 1072, 1082, 1105, 1073,    0, 1064, 1077,    0,
     1077, 1056, 1074, 1074, 1074, 1074, 1078, 1077, 1078, 1097,
     1077, 1073, 1077, 1111, 1080, 1078, 1080, 1084, 1078, 1077,
     1078, 1105, 1091, 1080, 1091, 1083, 1080, 1078, 1080, 1083,
        0, 1091, 1077, 1084, 1091, 1080, 1091, 1073,    0, 1111,
     1078, 1092, 1107, 1092, 1084,    0, 1077, 1098, 1080, 1098,
     1092,    0, 1083, 1092, 1078, 1092, 1083, 1098, 1077, 1084,
        0,    0, 1080, 1106, 1106, 1106, 1078,    0,    0, 1107,

     1108, 1108, 1108, 1109, 1080, 1085, 1085, 1085, 1085, 1085,
     1085, 1085, 1085, 1085, 1085, 1085, 1085, 1085, 1085, 1085,
     1085, 1085, 1087, 1087, 1087, 1087, 1089, 1089, 1089, 1089,
     1109, 1087, 1094,    0, 1094, 1089, 1140, 1140, 1140, 1089,
     1121, 1094, 1124, 1110, 1094, 1110, 1094, 1112, 1085, 1086,
     1086, 1086, 1086, 1086, 1086, 1086, 1086, 1086, 1086, 1086,
     1086, 1086, 1086, 1086, 1086, 1086, 1090, 1121, 1090, 1124,
        0, 1114, 1110, 1112, 1116, 1090, 1095, 1125, 1095, 1090,
        0,    0, 1096, 1086, 1096, 1095, 1090,    0, 1095,    0,
     1095, 1096, 1086, 1099, 1096, 1099, 1096, 1114, 1110,    0,

     1116,    0, 1099, 1125,    0, 1099, 1100, 1099, 1100, 1086,
     1102,    0, 1102, 1090, 1103, 1100, 1103, 1127, 1100, 1102,
     1100, 1130, 1102, 1103, 1102, 1104, 1103, 1104, 1103, 1113,
     1113, 1113, 1127, 1136, 1104, 1103,    0, 1104, 1113, 1104,
     1117, 1113, 1117, 1118, 1127, 1118, 1104, 1130, 1103, 1117,
        0,    0, 1118,    0,    0, 1139, 1118, 1142, 1127, 1104,
     1136, 1126, 1103, 1118, 1143,    0, 1119, 1119, 1119, 1119,
        0, 1126, 1146, 1104, 1103, 1119, 1120, 1120, 1120, 1120,
     1122, 1139, 1122, 1142, 1123, 1104, 1123,    0, 1126, 1122,
     1118, 1143, 1122, 1123, 1122, 1144, 1123, 1126, 1123, 1146,

     1131, 1122,    0, 1131, 1149, 1123, 1128, 1128, 1128, 1128,
     1132, 1132, 1132, 1132, 1122, 1141, 1141, 1141, 1123,    0,
        0, 1144, 1134, 1132, 1134,    0, 1131,    0, 1122, 1131,
     1149, 1134, 1123, 1150, 1134,    0, 1134,    0,    0, 1159,
     1122, 1170, 1170, 1170, 1123, 1129, 1129, 1129, 1129, 1129,
     1129, 1129, 1129, 1129, 1129, 1129, 1129, 1129, 1129, 1150,
     1129, 1129, 1133, 1133, 1133, 1133, 1159, 1135, 1137, 1135,
     1137, 1133, 1157, 1158,    0, 1133, 1135, 1137, 1160, 1135,
     1137, 1135, 1137, 1138, 1151, 1138, 1152, 1147, 1129, 1147,
     1152, 1153, 1138, 1151,    0, 1138, 1147, 1138, 1157, 1158,

     1147, 1148, 1148, 1148, 1148, 1160, 1153, 1154, 1154, 1154,
     1154, 1151, 1161, 1152, 1163, 1164, 1171, 1152, 1153, 1151,
     1155, 1155, 1155, 1155, 1156, 1156, 1156, 1156, 1165, 1166,
     1165, 1167, 1153, 1168,    0, 1174, 1179, 1156, 1166, 1161,
     1163, 1176, 1164, 1171, 1167, 1172, 1172, 1172, 1165,    0,
     1181, 1169, 1177, 1169, 1172,    0, 1166, 1172, 1167, 1168,
     1169, 1174, 1179, 1169, 1166, 1169, 1177, 1175, 1176, 1175,
     1167, 1178, 1169,    0, 1187, 1165, 1175, 1181, 1178, 1177,
     1182, 1178, 1182, 1178, 1183, 1169, 1184, 1183, 1186, 1188,
        0,    0, 1177, 1189, 1189, 1189, 1190, 1190, 1190, 1169,

     1182, 1187, 1188, 1192, 1192, 1192, 1192,    0,    0,    0,
     1183, 1169, 1184, 1183, 1186,    0, 1188,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0, 1182, 1188, 1190,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0, 1190, 1195, 1195, 1195, 1195,
     1195, 1195, 1195, 1195, 1196, 1196, 1196, 1196, 1196, 1196,
     1196, 1196, 1197, 1197, 1197, 1197, 1197, 1197, 1197, 1197,
     1198, 1198, 1198, 1198, 1198, 1198, 1198, 1198, 1199, 1199,
     1199, 1199, 1199, 1199, 1199, 1199, 1200, 1200, 1200, 1200,

     1200, 1200, 1200, 1200, 1201, 1201, 1201, 1201, 1201, 1201,
     1201, 1201, 1202, 1202, 1202, 1202, 1202, 1202, 1202, 1202,
     1203, 1203, 1203, 1203, 1203, 1203, 1203, 1203, 1204, 1204,
     1204, 1204, 1204, 1204,    0, 1204, 1205, 1205,    0, 1205,
     1205, 1205, 1205, 1205, 1206, 1206, 1206, 1206, 1206, 1206,
     1206, 1206, 1207,    0,    0,    0,    0,    0, 1207, 1208,
        0,    0, 1208, 1208,    0, 1208, 1209, 1209,    0, 1209,
     1209, 1209, 1209, 1209, 1210,    0, 1210, 1211, 1211,    0,
     1211, 1211, 1211, 1211, 1211, 1212,    0, 1212, 1213, 1213,
        0, 1213, 1213, 1213, 1213, 1213, 1214, 1214,    0, 1214,

     1214, 1214, 1214, 1214, 1215,    0, 1215, 1216, 1216,    0,
     1216, 1216, 1216, 1216, 1216, 1217, 1217,    0, 1217, 1217,
     1217, 1217, 1217, 1218, 1218, 1218, 1218, 1218, 1218, 1218,
     1218, 1219, 1219,    0, 1219, 1219, 1219, 1219, 1219, 1220,
        0, 1220, 1221, 1221,    0, 1221, 1221, 1221, 1221, 1221,
     1222,    0, 1222, 1223, 1223,    0, 1223, 1223, 1223, 1223,
     1223, 1224,    0, 1224, 1225, 1225,    0, 1225, 1225, 1225,
     1225, 1225, 1226,    0, 1226, 1227, 1227,    0, 1227, 1227,
     1227, 1227, 1227, 1228, 1228, 1228, 1228, 1228, 1228, 1228,
     1228, 1229,    0, 1229, 1230,    0,    0, 1230, 1230,    0,

     1230, 1231, 1231,    0, 1231, 1231, 1231, 1231, 1231, 1232,
        0, 1232, 1233,    0, 1233, 1234, 1234,    0, 1234, 1234,
     1234, 1234, 1234, 1235, 1235,    0, 1235, 1235, 1235, 1235,
     1235, 1236,    0, 1236, 1237,    0, 1237, 1238, 1238,    0,
     1238, 1238, 1238, 1238, 1238, 1239, 1239,    0, 1239, 1239,
     1239, 1239, 1239, 1240, 1240,    0, 1240, 1240, 1240, 1240,
     1240, 1241,    0, 1241, 1242,    0, 1242, 1243, 1243,    0,
     1243, 1243, 1243, 1243, 1243, 1244, 1244,    0, 1244, 1244,
     1244, 1244, 1244, 1245, 1245,    0, 1245, 1245, 1245, 1245,
     1245, 1246, 1246, 1246, 1246, 1246, 1246, 1246, 1246, 1247,

     1247,    0, 1247, 1247, 1247, 1247, 1247, 1248,    0, 1248,
     1249,    0, 1249, 1250, 1250,    0, 1250, 1250, 1250, 1250,
     1250, 1251, 1251,    0, 1251, 1251, 1251, 1251, 1251, 1252,
        0, 1252, 1253,    0, 1253, 1254, 1254,    0, 1254, 1254,
     1254, 1254, 1254, 1255, 1255,    0, 1255, 1255, 1255, 1255,
     1255, 1256,    0, 1256, 1257,    0, 1257, 1258, 1258,    0,
     1258, 1258, 1258, 1258, 1258, 1259, 1259,    0, 1259, 1259,
     1259, 1259, 1259, 1260,    0, 1260, 1261,    0, 1261, 1262,
     1262,    0, 1262, 1262, 1262, 1262, 1262, 1263, 1263,    0,
     1263, 1263, 1263, 1263, 1263, 1264, 1264, 1264, 1264, 1264,

     1264, 1264, 1264, 1265,    0, 1265, 1266,    0, 1266, 1267,
        0,    0, 1267, 1267,    0, 1267, 1268, 1268,    0, 1268,
     1268, 1268, 1268, 1268, 1269, 1269,    0, 1269, 1269, 1269,
     1269, 1269, 1270, 1270, 1270, 1270, 1270, 1270, 1270, 1270,
     1271, 1271,    0, 1271, 1271, 1271, 1271, 1271, 1272, 1272,
        0, 1272, 1272, 1272, 1272, 1272, 1273, 1273, 1273, 1273,
     1273, 1273, 1273, 1273, 1274, 1274, 1274, 1274, 1274, 1274,
     1274, 1274, 1275, 1275, 1275, 1275,    0,    0, 1275, 1276,
     1276, 1276, 1276, 1276, 1276, 1276, 1276, 1277, 1277, 1277,
        0, 1277,    0, 1277, 1278, 1278, 1278, 1278, 1278, 1278,

     1278, 1278, 1279, 1279, 1279, 1279, 1279, 1279, 1279, 1279,
     1280, 1280,    0, 1280, 1280, 1280, 1280, 1280, 1281, 1281,
     1281, 1281, 1281, 1281, 1281, 1281, 1282, 1282, 1282,    0,
     1282,    0, 1282, 1283, 1283, 1283, 1283, 1283, 1283, 1283,
     1283, 1284, 1284, 1284, 1284, 1284, 1284, 1284, 1284, 1285,
     1285, 1285, 1285, 1285, 1285, 1285, 1285, 1286, 1286, 1286,
     1286, 1286, 1286, 1286, 1286, 1287, 1287, 1287, 1287, 1287,
     1287, 1287, 1287, 1288, 1288, 1288, 1288, 1288, 1288, 1288,
     1288, 1289, 1289, 1289, 1289, 1289, 1289, 1289, 1289, 1290,
     1290, 1290, 1290, 1290, 1290, 1290, 1290, 1291, 1291, 1291,

     1291, 1291, 1291, 1291, 1291, 1292, 1292, 1292, 1292,    0,
        0, 1292, 1293, 1293, 1293, 1293, 1293, 1293, 1293, 1293,
     1294, 1294, 1294,    0, 1294,    0, 1294, 1295, 1295, 1295,
        0, 1295,    0, 1295, 1194, 1194, 1194, 1194, 1194, 1194,
     1194, 1194, 1194, 1194, 1194, 1194, 1194, 1194, 1194, 1194,
     1194, 1194, 1194, 1194, 1194, 1194, 1194, 1194, 1194, 1194,
     1194, 1194, 1194, 1194, 1194, 1194, 1194, 1194, 1194, 1194,
     1194, 1194, 1194, 1194, 1194, 1194, 1194, 1194, 1194, 1194,
     1194, 1194, 1194, 1194, 1194, 1194, 1194, 1194, 1194, 1194,
     1194, 1194, 1194, 1194, 1194, 1194, 1194, 1194, 1194, 1194,

     1194, 1194, 1194, 1194
    } ;

extern int fcodeYY_flex_debug;
int fcodeYY_flex_debug = 0;

static yy_state_type *yy_state_buf=0, *yy_state_ptr=0;
static char *yy_full_match;
static int yy_lp;
static int yy_looking_for_trail_begin = 0;
static int yy_full_lp;
static int *yy_full_state;
#define YY_TRAILING_MASK 0x2000
#define YY_TRAILING_HEAD_MASK 0x4000
#define REJECT \
{ \
*yy_cp = (yy_hold_char); /* undo effects of setting up fcodeYYtext */ \
yy_cp = (yy_full_match); /* restore poss. backed-over text */ \
(yy_lp) = (yy_full_lp); /* restore orig. accepting pos. */ \
(yy_state_ptr) = (yy_full_state); /* restore orig. state */ \
yy_current_state = *(yy_state_ptr); /* restore curr. state */ \
++(yy_lp); \
goto find_rule; \
}

#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *fcodeYYtext;
#line 1 "fortrancode.l"
/******************************************************************************
 *
 * Parser for syntax hightlighting and references for Fortran90 F subset
 *
 * Copyright (C) by Anke Visser
 * based on the work of Dimitri van Heesch.
 *
 * Permission to use, copy, modify, and distribute this software and its
 * documentation under the terms of the GNU General Public License is hereby 
 * granted. No representations are made about the suitability of this software 
 * for any purpose. It is provided "as is" without express or implied warranty.
 * See the GNU General Public License for more details.
 *
 * Documents produced by Doxygen are derivative works derived from the
 * input used in their production; they are not affected by this license.
 *
 */
/**
 @todo - continutation lines not always recognized
       - merging of use-statements with same module name and different only-names
       - rename part of use-statement
       - links to interface functions 
       - references to variables
**/
#line 28 "fortrancode.l"

/*
 *	includes
 */
#include "qtbc.h"
#include <stdio.h>
#include <assert.h>
#include <ctype.h>
#include <qregexp.h>
#include <qdir.h>
#include <qstringlist.h>
#include "entry.h"
#include "doxygen.h"
#include "message.h"
#include "outputlist.h"
#include "util.h"
#include "membername.h"
#include "searchindex.h"
#include "defargs.h"

#define YY_NEVER_INTERACTIVE 1
#define YY_NO_TOP_STATE 1
   
//--------------------------------------------------------------------------------

/**
  data of an use-statement
*/
class UseEntry 
{
 public: 
   QCString module; // just for debug
   QStringList onlyNames;   /* entries of the ONLY-part */
};

/**
  module name -> list of ONLY/remote entries
  (module name = name of the module, which can be accessed via use-directive)
*/
class UseSDict : public SDict<UseEntry> 
{
  public:
    UseSDict() : SDict<UseEntry>(17) {}
};

/**
  Contains names of used modules and names of local variables.
*/
class Scope 
{
  public:
    QStringList useNames; //!< contains names of used modules
    QDict<void> localVars; //!< contains names of local variables

    Scope() : localVars(7, FALSE /*caseSensitive*/) {}
};

/*===================================================================*/
/* 
 *	statics
 */
  
static QCString  docBlock;                   //!< contents of all lines of a documentation block
static QCString  currentModule=0;            //!< name of the current enclosing module
static UseSDict  *useMembers= new UseSDict;  //!< info about used modules
static UseEntry  *useEntry = 0;              //!< current use statement info
static QList<Scope> scopeStack;
// static QStringList *currentUseNames= new QStringList; //! contains names of used modules of current program unit
static QCString str="";         //!> contents of fortran string

static CodeOutputInterface * g_code;

// TODO: is this still needed? if so, make it work
static QCString      g_parmType;
static QCString      g_parmName;

static const char *  g_inputString;     //!< the code fragment as text
static int	     g_inputPosition;   //!< read offset during parsing 
static int           g_inputLines;      //!< number of line in the code fragment
static int	     g_yyLineNr;        //!< current line number
static bool          g_needsTermination;
static bool          g_isFixedForm;

static bool          g_insideBody;      //!< inside subprog/program body? => create links
static const char *  g_currentFontClass;

static bool          g_exampleBlock;
static QCString      g_exampleName;
static QCString      g_exampleFile;

static FileDef *     g_sourceFileDef;
static Definition *  g_currentDefinition;
static MemberDef *   g_currentMemberDef;
static bool          g_includeCodeFragment;

static char          stringStartSymbol; // single or double quote
// count in variable declaration to filter out
//  declared from referenced names
static int 	     bracketCount = 0; 

// simplified way to know if this is fixed form
// duplicate in fortranscanner.l
static bool recognizeFixedForm(const char* contents)
{
  int column=0;
  bool skipLine=FALSE;

  for (int i=0;;i++) 
  {
    column++;

    switch(contents[i]) 
    {
      case '\n':
        column=0;
        skipLine=FALSE;
        break;
      case ' ':
        break;
      case '\000':
        return FALSE;
      case 'C':
      case 'c':
      case '*':
        if(column==1) return TRUE;
        if(skipLine) break;
        return FALSE;
      case '!':
        if(column>1 && column<7) return FALSE;
        skipLine=TRUE;
        break;
      default:
        if(skipLine) break;
        if(column==7) return TRUE;
        return FALSE;
    }
  }
  return FALSE;
}

static void endFontClass()
{
  if (g_currentFontClass)
  {
    g_code->endFontClass();
    g_currentFontClass=0;
  }
}

static void startFontClass(const char *s)
{
  endFontClass();
  g_code->startFontClass(s);
  g_currentFontClass=s;
}

static void setCurrentDoc(const QCString &name,const QCString &base,const QCString &anchor="")
{
  if (Doxygen::searchIndex)
  {
    Doxygen::searchIndex->setCurrentDoc(name,base,anchor);
  }
}

static void addToSearchIndex(const char *text)
{
  if (Doxygen::searchIndex)
  {
    Doxygen::searchIndex->addWord(text,FALSE);
  }
}

/*! start a new line of code, inserting a line number if g_sourceFileDef
 * is TRUE. If a definition starts at the current line, then the line
 * number is linked to the documentation of that definition.
 */
static void startCodeLine()
{
  if (g_sourceFileDef)
  {
    //QCString lineNumber,lineAnchor;
    //lineNumber.sprintf("%05d",g_yyLineNr);
    //lineAnchor.sprintf("l%05d",g_yyLineNr);
   
    Definition *d   = g_sourceFileDef->getSourceDefinition(g_yyLineNr);
    //printf("startCodeLine %d d=%s\n", g_yyLineNr,d ? d->name().data() : "<null>");
    if (!g_includeCodeFragment && d)
    {
      g_currentDefinition = d;
      g_currentMemberDef = g_sourceFileDef->getSourceMember(g_yyLineNr);
      g_insideBody = FALSE;
      g_parmType.resize(0);
      g_parmName.resize(0);
      QCString lineAnchor;
      lineAnchor.sprintf("l%05d",g_yyLineNr);
      if (g_currentMemberDef)
      {
        g_code->writeLineNumber(g_currentMemberDef->getReference(),
	                        g_currentMemberDef->getOutputFileBase(),
	                        g_currentMemberDef->anchor(),g_yyLineNr);
        setCurrentDoc(
                                g_currentMemberDef->qualifiedName(),
	                        g_sourceFileDef->getSourceFileBase(),
	                        lineAnchor);
      }
      else if (d->isLinkableInProject())
      {
        g_code->writeLineNumber(d->getReference(),
	                        d->getOutputFileBase(),
	                        0,g_yyLineNr);
        setCurrentDoc(
                                d->qualifiedName(),
	                        g_sourceFileDef->getSourceFileBase(),
	                        lineAnchor);
      }
    }
    else
    {
      g_code->writeLineNumber(0,0,0,g_yyLineNr);
    }
  }
  g_code->startCodeLine(); 
  if (g_currentFontClass)
  {
    g_code->startFontClass(g_currentFontClass);
  }
}


static void endFontClass();
static void endCodeLine()
{
  endFontClass();
  g_code->endCodeLine();
}

/*! write a code fragment `text' that may span multiple lines, inserting
 * line numbers for each line.
 */
static void codifyLines(char *text)
{
  //printf("codifyLines(%d,\"%s\")\n",g_yyLineNr,text);
  char *p=text,*sp=p;
  char c;
  bool done=FALSE;
  while (!done)
  {
    sp=p;
    while ((c=*p++) && c!='\n') { }
    if (c=='\n')
    {
      g_yyLineNr++;
      *(p-1)='\0';
      g_code->codify(sp);
      endCodeLine();
      if (g_yyLineNr<g_inputLines) 
      {
	startCodeLine();
      }
    }
    else
    {
      g_code->codify(sp);
      done=TRUE;
    }
  }
}

static void codifyLines(QCString str)
{
  char *tmp= (char *) malloc(str.length()+1);
  strcpy(tmp, str);
  codifyLines(tmp);
  free(tmp);
}

/*! writes a link to a fragment \a text that may span multiple lines, inserting
 * line numbers for each line. If \a text contains newlines, the link will be 
 * split into multiple links with the same destination, one for each line.
 */
static void writeMultiLineCodeLink(CodeOutputInterface &ol,
                  const char *ref,const char *file,
                  const char *anchor,const char *text)
{
  bool done=FALSE;
  char *p=(char *)text;
  while (!done)
  {
    char *sp=p;
    char c;
    while ((c=*p++) && c!='\n') { }
    if (c=='\n')
    {
      g_yyLineNr++;
      *(p-1)='\0';
      //printf("writeCodeLink(%s,%s,%s,%s)\n",ref,file,anchor,sp);
      ol.writeCodeLink(ref,file,anchor,sp,0);
      endCodeLine();
      if (g_yyLineNr<g_inputLines) 
      {
	startCodeLine();
      }
    }
    else
    {
      //printf("writeCodeLink(%s,%s,%s,%s)\n",ref,file,anchor,sp);
      ol.writeCodeLink(ref,file,anchor,sp,0);
      done=TRUE;
    }
  }
}

/**
  generates dictionay entries that are used if REFERENCED_BY_RELATION ... options are set
  (e.g. the "referenced by ..." list after the function documentation) 
*/

static void addDocCrossReference(MemberDef *src, MemberDef *dst)
{
  if (dst->isTypedef() || dst->isEnumerate()) return; // don't add types
 //printf("======= addDocCrossReference src=%s,dst=%s\n",src->name().data(),dst->name().data());
  if ((Config_getBool("REFERENCED_BY_RELATION") || Config_getBool("CALLER_GRAPH")) && 
      (src->isFunction()))
  {
    dst->addSourceReferencedBy(src);
  }
  if ((Config_getBool("REFERENCES_RELATION") || Config_getBool("CALL_GRAPH")) && (src->isFunction()))
  {
    src->addSourceReferences(dst);
  }
}

//-------------------------------------------------------------------------------
/**
  searches for definition of a type
  @param tname the name of the type
  @param moduleName name of enclosing module or null, if global entry
  @param cd the entry, if found or null
  @param useDict dictionary of data of USE-statement
  @returns true, if type is found 
*/
static bool getFortranTypeDefs(const QCString &tname, const QCString &moduleName, 
                               ClassDef *&cd, UseSDict *usedict=0)
{
  if (tname.isEmpty()) return FALSE; /* empty name => nothing to link */

  //cout << "=== search for type: " << tname << endl;

  // search for type  
  if ((cd=Doxygen::classSDict->find(tname))) 
  {
    //cout << "=== type found in global module" << endl;
    return TRUE;
  }
  else if (moduleName && (cd= Doxygen::classSDict->find(moduleName+"::"+tname))) 
  {
    //cout << "=== type found in local module" << endl;
    return TRUE;
  }
  else 
  {
    UseEntry *use;
    for (UseSDict::Iterator di(*usedict); (use=di.current()); ++di)
      if ((cd= Doxygen::classSDict->find(use->module+"::"+tname))) 
      {
 	//cout << "===  type found in used module" << endl;
        return TRUE;
      }
  }

  return FALSE;
}

/**
  searches for definition of function memberName
  @param memberName the name of the function/variable
  @param moduleName name of enclosing module or null, if global entry
  @param md the entry, if found or null
  @param usedict array of data of USE-statement
  @returns true, if found 
*/
static bool getFortranDefs(const QCString &memberName, const QCString &moduleName, 
                           MemberDef *&md, UseSDict *usedict=0)
{
  if (memberName.isEmpty()) return FALSE; /* empty name => nothing to link */

  // look in local variables
  for (Scope *scope=scopeStack.last(); scope!=NULL; scope=scopeStack.prev())
  {
    if(scope->localVars.find(memberName))
      return FALSE;
  }

  // search for function
  MemberName *mn = Doxygen::functionNameSDict->find(memberName);

  if (mn) // name is known
  {
      MemberListIterator mli(*mn);
      for (mli.toFirst();(md=mli.current());++mli) // all found functions with given name
      {
        FileDef  *fd=md->getFileDef();
        GroupDef *gd=md->getGroupDef();

 //cout << "found link with same name: " << fd->fileName() << "  " <<  memberName;
 //if (md->getNamespaceDef() != 0) cout << " in namespace " << md->getNamespaceDef()->name();cout << endl;

        if ((gd && gd->isLinkable()) || (fd && fd->isLinkable()))
        {
           NamespaceDef *nspace= md->getNamespaceDef();

           if (nspace == 0) 
	   { // found function in global scope
             return TRUE;
           }
           else if (moduleName == nspace->name()) 
	   { // found in local scope
             return TRUE;
           }
           else 
	   { // else search in used modules
	     QCString moduleName= nspace->name();
	     UseEntry *ue= usedict->find(moduleName);
	     if (ue) 
	     {
               // check if only-list exists and if current entry exists is this list
	       QStringList &only= ue->onlyNames;
	       if (only.isEmpty()) 
	       {
               //cout << " found in module " << moduleName << " entry " << memberName <<  endl;
                 return TRUE; // whole module used
               }
               else
	       {
	         for ( QStringList::Iterator it = only.begin(); it != only.end(); ++it)
                 {
                   //cout << " search in only: " << moduleName << ":: " << memberName << "==" << (*it)<<  endl;
		   if (memberName == (QCString)(*it))
                     return TRUE; // found in ONLY-part of use list
	         }
	       }
             }
           }
        } // if linkable
      } // for
  }
  return FALSE;
}

/**
 gets the link to a generic procedure which depends not on the name, but on the parameter list
 @todo implementation
*/
static bool getGenericProcedureLink(const ClassDef *cd, 
                                    const char *memberText, 
				    CodeOutputInterface &ol) 
{
  (void)cd;
  (void)memberText;
  (void)ol;
  return FALSE;
}

static bool getLink(UseSDict *usedict, // dictonary with used modules
                    const char *memberText,  // exact member text
		    CodeOutputInterface &ol,
		    const char *text)
{
  MemberDef *md;
  QCString memberName= removeRedundantWhiteSpace(memberText);

  if (getFortranDefs(memberName, currentModule, md, usedict) && md->isLinkable())
  { 
    //if (md->isVariable()) return FALSE; // variables aren't handled yet	

    Definition *d = md->getOuterScope()==Doxygen::globalScope ?
	            md->getBodyDef() : md->getOuterScope();
    if (md->getGroupDef()) d = md->getGroupDef();
    if (d && d->isLinkable())
    {
      if (g_currentDefinition && g_currentMemberDef && md!=g_currentMemberDef && g_insideBody)
      { 
	addDocCrossReference(g_currentMemberDef,md); 
      }     
      ol.linkableSymbol(g_yyLineNr,md->name(),md,
	                g_currentMemberDef ? g_currentMemberDef : g_currentDefinition);
      writeMultiLineCodeLink(ol,md->getReference(),
	                        md->getOutputFileBase(),
	                        md->anchor(),
				text ? text : memberText);
      addToSearchIndex(text ? text : memberText);
      return TRUE;
    } 
  }
  return FALSE;
}


static void generateLink(CodeOutputInterface &ol, char *lname)
{
  ClassDef *cd=0;
 
  // check if lname is a linkable type or interface
  if ( (getFortranTypeDefs(lname, currentModule, cd, useMembers)) && cd->isLinkable() )
  {
    if ( (cd->compoundType() == ClassDef::Class) && // was  Entry::INTERFACE_SEC) &&
         (getGenericProcedureLink(cd, lname, ol)) ) 
    {
      //cout << "=== generic procedure resolved" << endl; 
    } 
    else 
    { // write type or interface link
      ol.linkableSymbol(g_yyLineNr, lname, cd, g_currentMemberDef?g_currentMemberDef:g_currentDefinition);
      writeMultiLineCodeLink(ol,cd->getReference(),cd->getOutputFileBase(),0,lname);
      addToSearchIndex(lname);
    }
  }
  // check for function/variable
  else if (getLink(useMembers, lname, ol, lname)) 
  {
    //cout << "=== found link for " << lname << endl;
  }
  else 
  {
    // nothing found, just write out the word
    ol.linkableSymbol(g_yyLineNr, lname, 0, g_currentMemberDef?g_currentMemberDef:g_currentDefinition);
    //startFontClass("charliteral"); //test
    codifyLines(lname);
    //endFontClass(); //test
    addToSearchIndex(lname);
  }
}

/*! counts the number of lines in the input */
static int countLines()
{
  const char *p=g_inputString;
  char c;
  int count=1;
  while ((c=*p)) 
  { 
    p++ ; 
    if (c=='\n') count++;  
  }
  if (p>g_inputString && *(p-1)!='\n') 
  { // last line does not end with a \n, so we add an extra
    // line and explicitly terminate the line after parsing.
    count++, 
    g_needsTermination=TRUE; 
  } 
  return count;
}

//----------------------------------------------------------------------------
/** start scope */
void startScope() 
{
  // fprintf(stderr, "===> startScope %s",fcodeYYtext);
  Scope *scope = new Scope;
  scopeStack.append(scope);
}

/** end scope */
void endScope() 
{
  // fprintf(stderr,"===> endScope %s",fcodeYYtext);
  if (scopeStack.isEmpty()) 
  {
    fprintf(stderr,"WARNING: fortrancode.l: stack empty!"); 
    return;
    //exit(-1);
  }

  Scope *scope = scopeStack.getLast();
  scopeStack.removeLast();
  for ( QStringList::Iterator it = scope->useNames.begin(); it != scope->useNames.end(); ++it) 
  {
    useMembers->remove(*it);
  }
  delete scope;
}

void addUse(QString moduleName) 
{
  if (!scopeStack.isEmpty())
    scopeStack.last()->useNames.append(moduleName);
}

void addLocalVar(QString varName) 
{
  if (!scopeStack.isEmpty())
    scopeStack.last()->localVars.insert(varName, (void*)1);
}

//----------------------------------------------------------------------------

/* -----------------------------------------------------------------*/
#undef	YY_INPUT
#define	YY_INPUT(buf,result,max_size) result=yyread(buf,max_size);

static int yyread(char *buf,int max_size)
{
    int c=0;
    while( c < max_size && g_inputString[g_inputPosition] )
    {
	*buf = g_inputString[g_inputPosition++] ;
	c++; buf++;
    }
    return c;
}

/* Assume that attribute statements are almost the same as attributes. */
/* |  */
/*%option debug*/














#line 3194 "<stdout>"

#define INITIAL 0
#define Start 1
#define SubCall 2
#define FuncDef 3
#define ClassName 4
#define ClassVar 5
#define Subprog 6
#define DocBlock 7
#define Use 8
#define UseOnly 9
#define TypeDecl 10
#define Declaration 11
#define DeclContLine 12
#define Parameterlist 13
#define String 14

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

static int yy_init_globals (void );

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int fcodeYYlex_destroy (void );

int fcodeYYget_debug (void );

void fcodeYYset_debug (int debug_flag  );

YY_EXTRA_TYPE fcodeYYget_extra (void );

void fcodeYYset_extra (YY_EXTRA_TYPE user_defined  );

FILE *fcodeYYget_in (void );

void fcodeYYset_in  (FILE * in_str  );

FILE *fcodeYYget_out (void );

void fcodeYYset_out  (FILE * out_str  );

yy_size_t fcodeYYget_leng (void );

char *fcodeYYget_text (void );

int fcodeYYget_lineno (void );

void fcodeYYset_lineno (int line_number  );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int fcodeYYwrap (void );
#else
extern int fcodeYYwrap (void );
#endif
#endif

    static void yyunput (int c,char *buf_ptr  );
    
#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT

#ifdef __cplusplus
static int yyinput (void );
#else
static int input (void );
#endif

#endif

        static int yy_start_stack_ptr = 0;
        static int yy_start_stack_depth = 0;
        static int *yy_start_stack = NULL;
    
    static void yy_push_state (int new_state );
    
    static void yy_pop_state (void );
    
    static int yy_top_state (void );
    
/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 262144
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO fwrite( fcodeYYtext, fcodeYYleng, 1, fcodeYYout )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		yy_size_t n; \
		for ( n = 0; n < max_size && \
			     (c = getc( fcodeYYin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( fcodeYYin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = fread(buf, 1, max_size, fcodeYYin))==0 && ferror(fcodeYYin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(fcodeYYin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int fcodeYYlex (void);

#define YY_DECL int fcodeYYlex (void)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after fcodeYYtext and fcodeYYleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	if ( fcodeYYleng > 0 ) \
		YY_CURRENT_BUFFER_LVALUE->yy_at_bol = \
				(fcodeYYtext[fcodeYYleng - 1] == '\n'); \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    
#line 685 "fortrancode.l"

 /*==================================================================*/

 /*-------- ignore ------------------------------------------------------------*/

#line 3409 "<stdout>"

	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

        /* Create the reject buffer large enough to save one state per allowed character. */
        if ( ! (yy_state_buf) )
            (yy_state_buf) = (yy_state_type *)fcodeYYalloc(YY_STATE_BUF_SIZE  );
            if ( ! (yy_state_buf) )
                YY_FATAL_ERROR( "out of dynamic memory in fcodeYYlex()" );

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! fcodeYYin )
			fcodeYYin = stdin;

		if ( ! fcodeYYout )
			fcodeYYout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			fcodeYYensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				fcodeYY_create_buffer(fcodeYYin,YY_BUF_SIZE );
		}

		fcodeYY_load_buffer_state( );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of fcodeYYtext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
		yy_current_state += YY_AT_BOL();

		(yy_state_ptr) = (yy_state_buf);
		*(yy_state_ptr)++ = yy_current_state;

yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 1195 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			*(yy_state_ptr)++ = yy_current_state;
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 6735 );

yy_find_action:
		yy_current_state = *--(yy_state_ptr);
		(yy_lp) = yy_accept[yy_current_state];
goto find_rule; /* Shut up GCC warning -Wall */
find_rule: /* we branch to this label when backing up */
		for ( ; ; ) /* until we find what rule we matched */
			{
			if ( (yy_lp) && (yy_lp) < yy_accept[yy_current_state + 1] )
				{
				yy_act = yy_acclist[(yy_lp)];
				if ( yy_act & YY_TRAILING_HEAD_MASK ||
				     (yy_looking_for_trail_begin) )
					{
					if ( yy_act == (yy_looking_for_trail_begin) )
						{
						(yy_looking_for_trail_begin) = 0;
						yy_act &= ~YY_TRAILING_HEAD_MASK;
						break;
						}
					}
				else if ( yy_act & YY_TRAILING_MASK )
					{
					(yy_looking_for_trail_begin) = yy_act & ~YY_TRAILING_MASK;
					(yy_looking_for_trail_begin) |= YY_TRAILING_HEAD_MASK;
					(yy_full_match) = yy_cp;
					(yy_full_state) = (yy_state_ptr);
					(yy_full_lp) = (yy_lp);
					}
				else
					{
					(yy_full_match) = yy_cp;
					(yy_full_state) = (yy_state_ptr);
					(yy_full_lp) = (yy_lp);
					break;
					}
				++(yy_lp);
				goto find_rule;
				}
			--yy_cp;
			yy_current_state = *--(yy_state_ptr);
			(yy_lp) = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
case 1:
*yy_cp = (yy_hold_char); /* undo effects of setting up fcodeYYtext */
(yy_c_buf_p) = yy_cp = yy_bp + 4;
YY_DO_BEFORE_ACTION; /* set up fcodeYYtext again */
YY_RULE_SETUP
#line 690 "fortrancode.l"
{ // do not search keywords, intrinsics... TODO: complete list
  					  codifyLines(fcodeYYtext);
                                        }
	YY_BREAK
/*-------- inner construct ---------------------------------------------------*/
case 2:
/* rule 2 can match eol */
YY_RULE_SETUP
#line 695 "fortrancode.l"
{ // hightlight rest of fortran statements
   					  /* font class is defined e.g. in doxygen.css */
  					  startFontClass("keyword");
  					  codifyLines(fcodeYYtext);
					  endFontClass();
					}
	YY_BREAK
case 3:
/* rule 3 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up fcodeYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up fcodeYYtext again */
YY_RULE_SETUP
#line 701 "fortrancode.l"
{ 
  					  startFontClass("keyword");
  					  codifyLines(fcodeYYtext);
					  endFontClass();
					}
	YY_BREAK
/*-------- use statement -------------------------------------------*/
case 4:
YY_RULE_SETUP
#line 708 "fortrancode.l"
{ 
  					  codifyLines(fcodeYYtext);
                                          yy_push_state(YY_START);
					  BEGIN(Use);     
                                        }
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 713 "fortrancode.l"
{
  					  startFontClass("keywordflow");
  					  codifyLines(fcodeYYtext);
					  endFontClass();

					  /* append module name to use dict */
                                          useEntry = new UseEntry();
					  useEntry->module = fcodeYYtext;
                                          useMembers->append(fcodeYYtext, useEntry);
					  addUse(fcodeYYtext);
                                        }           
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 724 "fortrancode.l"
{ // TODO: rename
 					  codifyLines(fcodeYYtext);
                                          yy_push_state(YY_START);
					  BEGIN(UseOnly);     
                                        }           
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 729 "fortrancode.l"
{ codifyLines(fcodeYYtext); }
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 730 "fortrancode.l"
{
 					  codifyLines(fcodeYYtext);
                                          useEntry->onlyNames.append(fcodeYYtext);
                                        }   
	YY_BREAK
case 9:
/* rule 9 can match eol */
YY_RULE_SETUP
#line 734 "fortrancode.l"
{
                                          unput(*fcodeYYtext);
                                          yy_pop_state();
                                        }
	YY_BREAK
/*-------- fortran module  -----------------------------------------*/
case 10:
/* rule 10 can match eol */
YY_RULE_SETUP
#line 740 "fortrancode.l"
{  //
					  startScope();
  					  startFontClass("keyword"); 
  					  codifyLines(fcodeYYtext);
					  endFontClass();
                                          yy_push_state(YY_START);
					  BEGIN(ClassName); 
	                                  if (!stricmp(fcodeYYtext,"module")) currentModule="module";
					}
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 749 "fortrancode.l"
{
	                                  if (currentModule == "module") currentModule=fcodeYYtext;
					  generateLink(*g_code,fcodeYYtext);
                                          yy_pop_state();
 					}
	YY_BREAK
case 12:
/* rule 12 can match eol */
YY_RULE_SETUP
#line 754 "fortrancode.l"
{ // interface may be without name
                                          yy_pop_state();
					  REJECT;
					}
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 758 "fortrancode.l"
{ // just reset currentModule, rest is done in following rule
                                          currentModule=0;
					  REJECT;
                                        }
	YY_BREAK
case 14:
/* rule 14 can match eol */
YY_RULE_SETUP
#line 762 "fortrancode.l"
{  //
                                          endScope();
 					  startFontClass("keyword"); 
  					  codifyLines(fcodeYYtext);
					  endFontClass();
                                        }
	YY_BREAK
/*-------- subprog definition -------------------------------------*/
case 15:
/* rule 15 can match eol */
YY_RULE_SETUP
#line 770 "fortrancode.l"
{   // TYPE_SPEC is for old function style function result
   					  startFontClass("keyword");
  					  codifyLines(fcodeYYtext);
					  endFontClass();
                                       }              
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 775 "fortrancode.l"
{  // Fortran subroutine or function found
   					  startFontClass("keyword");
  					  codifyLines(fcodeYYtext);
					  endFontClass();
                                          yy_push_state(YY_START);
                                          BEGIN(Subprog);
                                        }
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 782 "fortrancode.l"
{ // subroutine/function name
                                          // fprintf(stderr, "===> start subprogram %s\n", fcodeYYtext);
					  startScope();
					  generateLink(*g_code,fcodeYYtext);
                                        }
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 787 "fortrancode.l"
{ // ignore rest of line 
 					  codifyLines(fcodeYYtext);
                                        }
	YY_BREAK
case 19:
/* rule 19 can match eol */
YY_RULE_SETUP
#line 790 "fortrancode.l"
{ codifyLines(fcodeYYtext);
                                          yy_pop_state();
                                        }
	YY_BREAK
case 20:
/* rule 20 can match eol */
YY_RULE_SETUP
#line 793 "fortrancode.l"
{  // Fortran subroutine or function ends
                                          //cout << "===> end function " << fcodeYYtext << endl;
                                          endScope();
   					  startFontClass("keyword");
  					  codifyLines(fcodeYYtext);
					  endFontClass();
                                        }
	YY_BREAK
/*-------- variable declaration ----------------------------------*/
case 21:
YY_RULE_SETUP
#line 801 "fortrancode.l"
{
                                          yy_push_state(YY_START);
					  BEGIN(TypeDecl);
   					  startFontClass("keywordtype");
					  g_code->codify(fcodeYYtext);
					  endFontClass();
                                        }
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 808 "fortrancode.l"
{ // link type
					  g_insideBody=TRUE;
					  generateLink(*g_code,fcodeYYtext);
					  g_insideBody=FALSE;
                                        }
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 813 "fortrancode.l"
{ 
					  BEGIN(Declaration);
   					  startFontClass("keywordtype");
					  g_code->codify(fcodeYYtext);
					  endFontClass();
                                        }
	YY_BREAK
case 24:
/* rule 24 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up fcodeYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up fcodeYYtext again */
YY_RULE_SETUP
#line 819 "fortrancode.l"
{ 
                                          yy_push_state(YY_START);
					  BEGIN(Declaration);
   					  startFontClass("keywordtype");
					  g_code->codify(fcodeYYtext);
					  endFontClass();
                                       }
	YY_BREAK
case 25:
/* rule 25 can match eol */
YY_RULE_SETUP
#line 826 "fortrancode.l"
{ 
   					  startFontClass("keywordtype");
					  g_code->codify(fcodeYYtext);
					  endFontClass();
                                       }
	YY_BREAK
case 26:
/* rule 26 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up fcodeYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up fcodeYYtext again */
YY_RULE_SETUP
#line 831 "fortrancode.l"
{ //| variable deklaration
  					  startFontClass("keywordtype");
					  g_code->codify(fcodeYYtext);
					  endFontClass();
  					}
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 836 "fortrancode.l"
{ // local var
					  g_code->codify(fcodeYYtext);
					  if (g_currentMemberDef && g_currentMemberDef->isFunction())
					    addLocalVar(fcodeYYtext);
					}
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 841 "fortrancode.l"
{ // start of array specification
					  bracketCount++;
					  g_code->codify(fcodeYYtext);
					}
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 846 "fortrancode.l"
{ // end array specification
					  bracketCount--;
					  g_code->codify(fcodeYYtext);
					}
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 851 "fortrancode.l"
{ // continuation line
                                          yy_push_state(YY_START);
					  BEGIN(DeclContLine);					  
 					}
	YY_BREAK
case 31:
/* rule 31 can match eol */
YY_RULE_SETUP
#line 855 "fortrancode.l"
{ // declaration not yet finished
                                          codifyLines(fcodeYYtext);
					  bracketCount = 0;
                                          yy_pop_state();
 				 	}
	YY_BREAK
case 32:
/* rule 32 can match eol */
YY_RULE_SETUP
#line 860 "fortrancode.l"
{ // end declaration line
					  codifyLines(fcodeYYtext);
					  bracketCount = 0;
                                          yy_pop_state();
 					}
	YY_BREAK
/*-------- subprog calls  -----------------------------------------*/
case 33:
YY_RULE_SETUP
#line 868 "fortrancode.l"
{
  					  codifyLines(fcodeYYtext);
                                          yy_push_state(YY_START);
					  BEGIN(SubCall);
                                        }
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 873 "fortrancode.l"
{ // subroutine call
					  g_insideBody=TRUE;
                                          generateLink(*g_code, fcodeYYtext);
					  g_insideBody=FALSE;
	                                  yy_pop_state();
                                        }
	YY_BREAK
case 35:
*yy_cp = (yy_hold_char); /* undo effects of setting up fcodeYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up fcodeYYtext again */
YY_RULE_SETUP
#line 879 "fortrancode.l"
{ // function call
					  g_insideBody=TRUE;
                                          generateLink(*g_code, fcodeYYtext);
					  g_insideBody=FALSE;
                                        }
	YY_BREAK
/*-------- comments ---------------------------------------------------*/
case 36:
/* rule 36 can match eol */
YY_RULE_SETUP
#line 886 "fortrancode.l"
{ // start comment line or comment block
                                          yy_push_state(YY_START);
					  BEGIN(DocBlock);
                                          docBlock=fcodeYYtext;
					}
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 892 "fortrancode.l"
{ // contents of current comment line
                                          docBlock+=fcodeYYtext;
  					}
	YY_BREAK
case 38:
/* rule 38 can match eol */
YY_RULE_SETUP
#line 895 "fortrancode.l"
{ //| comment block (next line is also comment line)
					  docBlock+=fcodeYYtext; 
   					}
	YY_BREAK
case 39:
/* rule 39 can match eol */
YY_RULE_SETUP
#line 898 "fortrancode.l"
{ // comment block ends at the end of this line
 					  docBlock+=fcodeYYtext; 
                                          // remove special comment (default config)
  					  if (Config_getBool("STRIP_CODE_COMMENTS"))
					  {
					    g_yyLineNr+=((QCString)docBlock).contains('\n');
					    endCodeLine();
					    if (g_yyLineNr<g_inputLines) 
					    {
					      startCodeLine();
					    }
					  }
					  else // do not remove comment
					  {
					    startFontClass("comment");
					    codifyLines(docBlock);
					    endFontClass();
					  }
                                         yy_pop_state();
					}
	YY_BREAK
case 40:
*yy_cp = (yy_hold_char); /* undo effects of setting up fcodeYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up fcodeYYtext again */
YY_RULE_SETUP
#line 919 "fortrancode.l"
{ // normal comment
					  if(YY_START == String) REJECT; // ignore in strings
  					  startFontClass("comment");
  					  codifyLines(fcodeYYtext);
					  endFontClass();
					}
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 926 "fortrancode.l"
{ // normal comment
                                          if(! g_isFixedForm) REJECT;

  					  startFontClass("comment");
  					  codifyLines(fcodeYYtext);
					  endFontClass();
					}
	YY_BREAK
/*------ preprocessor  --------------------------------------------*/ 
case 42:
/* rule 42 can match eol */
YY_RULE_SETUP
#line 935 "fortrancode.l"
{ startFontClass("preprocessor");
  					  codifyLines(fcodeYYtext);
					  endFontClass();
                                        }
	YY_BREAK
/*------ variable references?  -------------------------------------*/ 
case 43:
YY_RULE_SETUP
#line 941 "fortrancode.l"
{ // ignore references to elements 
					  g_code->codify(fcodeYYtext);
					}
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 944 "fortrancode.l"
{   
  					    g_insideBody=TRUE;
                                            generateLink(*g_code, fcodeYYtext);
					    g_insideBody=FALSE;
                                        }
	YY_BREAK
/*------ strings --------------------------------------------------*/ 
case 45:
YY_RULE_SETUP
#line 950 "fortrancode.l"
{ str+=fcodeYYtext; /* ignore \\  */}
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 951 "fortrancode.l"
{ str+=fcodeYYtext; /* ignore \"  */}
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 953 "fortrancode.l"
{ // string ends with next quote without previous backspace 
                                          if(fcodeYYtext[0]!=stringStartSymbol) REJECT; // single vs double quote
                                          str+=fcodeYYtext;
  					  startFontClass("stringliteral");
  					  codifyLines(str);
					  endFontClass();
                                          yy_pop_state();
                                        }           
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 961 "fortrancode.l"
{str+=fcodeYYtext;}
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 963 "fortrancode.l"
{ /* string starts */
					  /* if(YY_START == StrIgnore) REJECT; // ignore in simple comments */
                                          yy_push_state(YY_START);
                                          stringStartSymbol=fcodeYYtext[0]; // single or double quote
                                          BEGIN(String);
					  str=fcodeYYtext;
                                        }
	YY_BREAK
/*-----------------------------------------------------------------------------*/
case 50:
/* rule 50 can match eol */
YY_RULE_SETUP
#line 972 "fortrancode.l"
{
  					  codifyLines(fcodeYYtext); 
  					}
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 975 "fortrancode.l"
{ 
  					  g_code->codify(fcodeYYtext);
					}
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 978 "fortrancode.l"
ECHO;
	YY_BREAK
#line 4043 "<stdout>"
			case YY_STATE_EOF(INITIAL):
			case YY_STATE_EOF(Start):
			case YY_STATE_EOF(SubCall):
			case YY_STATE_EOF(FuncDef):
			case YY_STATE_EOF(ClassName):
			case YY_STATE_EOF(ClassVar):
			case YY_STATE_EOF(Subprog):
			case YY_STATE_EOF(DocBlock):
			case YY_STATE_EOF(Use):
			case YY_STATE_EOF(UseOnly):
			case YY_STATE_EOF(TypeDecl):
			case YY_STATE_EOF(Declaration):
			case YY_STATE_EOF(DeclContLine):
			case YY_STATE_EOF(Parameterlist):
			case YY_STATE_EOF(String):
				yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed fcodeYYin at a new source and called
			 * fcodeYYlex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = fcodeYYin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( fcodeYYwrap( ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * fcodeYYtext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of fcodeYYlex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (void)
{
    	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = (yytext_ptr);
	register int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			yy_size_t num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			YY_FATAL_ERROR(
"input buffer overflow, can't enlarge buffer because scanner uses REJECT" );

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			fcodeYYrestart(fcodeYYin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yy_size_t) ((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) fcodeYYrealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (void)
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    
	yy_current_state = (yy_start);
	yy_current_state += YY_AT_BOL();

	(yy_state_ptr) = (yy_state_buf);
	*(yy_state_ptr)++ = yy_current_state;

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 1195 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		*(yy_state_ptr)++ = yy_current_state;
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state )
{
	register int yy_is_jam;
    
	register YY_CHAR yy_c = 1;
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 1195 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 1194);
	if ( ! yy_is_jam )
		*(yy_state_ptr)++ = yy_current_state;

	return yy_is_jam ? 0 : yy_current_state;
}

    static void yyunput (int c, register char * yy_bp )
{
	register char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up fcodeYYtext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register yy_size_t number_to_move = (yy_n_chars) + 2;
		register char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		register char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (void)
#else
    static int input  (void)
#endif

{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			yy_size_t offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					fcodeYYrestart(fcodeYYin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( fcodeYYwrap( ) )
						return 0;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve fcodeYYtext */
	(yy_hold_char) = *++(yy_c_buf_p);

	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = (c == '\n');

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void fcodeYYrestart  (FILE * input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        fcodeYYensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            fcodeYY_create_buffer(fcodeYYin,YY_BUF_SIZE );
	}

	fcodeYY_init_buffer(YY_CURRENT_BUFFER,input_file );
	fcodeYY_load_buffer_state( );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void fcodeYY_switch_to_buffer  (YY_BUFFER_STATE  new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		fcodeYYpop_buffer_state();
	 *		fcodeYYpush_buffer_state(new_buffer);
     */
	fcodeYYensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	fcodeYY_load_buffer_state( );

	/* We don't actually know whether we did this switch during
	 * EOF (fcodeYYwrap()) processing, but the only time this flag
	 * is looked at is after fcodeYYwrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

static void fcodeYY_load_buffer_state  (void)
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	fcodeYYin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE fcodeYY_create_buffer  (FILE * file, int  size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) fcodeYYalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in fcodeYY_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) fcodeYYalloc(b->yy_buf_size + 2  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in fcodeYY_create_buffer()" );

	b->yy_is_our_buffer = 1;

	fcodeYY_init_buffer(b,file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with fcodeYY_create_buffer()
 * 
 */
    void fcodeYY_delete_buffer (YY_BUFFER_STATE  b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		fcodeYYfree((void *) b->yy_ch_buf  );

	fcodeYYfree((void *) b  );
}

#ifndef __cplusplus
extern int isatty (int );
#endif /* __cplusplus */
    
/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a fcodeYYrestart() or at EOF.
 */
    static void fcodeYY_init_buffer  (YY_BUFFER_STATE  b, FILE * file )

{
	int oerrno = errno;
    
	fcodeYY_flush_buffer(b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then fcodeYY_init_buffer was _probably_
     * called from fcodeYYrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void fcodeYY_flush_buffer (YY_BUFFER_STATE  b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		fcodeYY_load_buffer_state( );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void fcodeYYpush_buffer_state (YY_BUFFER_STATE new_buffer )
{
    	if (new_buffer == NULL)
		return;

	fcodeYYensure_buffer_stack();

	/* This block is copied from fcodeYY_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from fcodeYY_switch_to_buffer. */
	fcodeYY_load_buffer_state( );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void fcodeYYpop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	fcodeYY_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		fcodeYY_load_buffer_state( );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void fcodeYYensure_buffer_stack (void)
{
	yy_size_t num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		(yy_buffer_stack) = (struct yy_buffer_state**)fcodeYYalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in fcodeYYensure_buffer_stack()" );
								  
		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)fcodeYYrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in fcodeYYensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * 
 * @return the newly allocated buffer state object. 
 */
YY_BUFFER_STATE fcodeYY_scan_buffer  (char * base, yy_size_t  size )
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) fcodeYYalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in fcodeYY_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	fcodeYY_switch_to_buffer(b  );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to fcodeYYlex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * 
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       fcodeYY_scan_bytes() instead.
 */
YY_BUFFER_STATE fcodeYY_scan_string (yyconst char * yystr )
{
    
	return fcodeYY_scan_bytes(yystr,strlen(yystr) );
}

/** Setup the input buffer state to scan the given bytes. The next call to fcodeYYlex() will
 * scan from a @e copy of @a bytes.
 * @param bytes the byte buffer to scan
 * @param len the number of bytes in the buffer pointed to by @a bytes.
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE fcodeYY_scan_bytes  (yyconst char * yybytes, yy_size_t  _yybytes_len )
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n, i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = _yybytes_len + 2;
	buf = (char *) fcodeYYalloc(n  );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in fcodeYY_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = fcodeYY_scan_buffer(buf,n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in fcodeYY_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

    static void yy_push_state (int  new_state )
{
    	if ( (yy_start_stack_ptr) >= (yy_start_stack_depth) )
		{
		yy_size_t new_size;

		(yy_start_stack_depth) += YY_START_STACK_INCR;
		new_size = (yy_start_stack_depth) * sizeof( int );

		if ( ! (yy_start_stack) )
			(yy_start_stack) = (int *) fcodeYYalloc(new_size  );

		else
			(yy_start_stack) = (int *) fcodeYYrealloc((void *) (yy_start_stack),new_size  );

		if ( ! (yy_start_stack) )
			YY_FATAL_ERROR( "out of memory expanding start-condition stack" );
		}

	(yy_start_stack)[(yy_start_stack_ptr)++] = YY_START;

	BEGIN(new_state);
}

    static void yy_pop_state  (void)
{
    	if ( --(yy_start_stack_ptr) < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN((yy_start_stack)[(yy_start_stack_ptr)]);
}

    static int yy_top_state  (void)
{
    	return (yy_start_stack)[(yy_start_stack_ptr) - 1];
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yy_fatal_error (yyconst char* msg )
{
    	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up fcodeYYtext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		fcodeYYtext[fcodeYYleng] = (yy_hold_char); \
		(yy_c_buf_p) = fcodeYYtext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		fcodeYYleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the current line number.
 * 
 */
int fcodeYYget_lineno  (void)
{
        
    return fcodeYYlineno;
}

/** Get the input stream.
 * 
 */
FILE *fcodeYYget_in  (void)
{
        return fcodeYYin;
}

/** Get the output stream.
 * 
 */
FILE *fcodeYYget_out  (void)
{
        return fcodeYYout;
}

/** Get the length of the current token.
 * 
 */
yy_size_t fcodeYYget_leng  (void)
{
        return fcodeYYleng;
}

/** Get the current token.
 * 
 */

char *fcodeYYget_text  (void)
{
        return fcodeYYtext;
}

/** Set the current line number.
 * @param line_number
 * 
 */
void fcodeYYset_lineno (int  line_number )
{
    
    fcodeYYlineno = line_number;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param in_str A readable stream.
 * 
 * @see fcodeYY_switch_to_buffer
 */
void fcodeYYset_in (FILE *  in_str )
{
        fcodeYYin = in_str ;
}

void fcodeYYset_out (FILE *  out_str )
{
        fcodeYYout = out_str ;
}

int fcodeYYget_debug  (void)
{
        return fcodeYY_flex_debug;
}

void fcodeYYset_debug (int  bdebug )
{
        fcodeYY_flex_debug = bdebug ;
}

static int yy_init_globals (void)
{
        /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from fcodeYYlex_destroy(), so don't allocate here.
     */

    (yy_buffer_stack) = 0;
    (yy_buffer_stack_top) = 0;
    (yy_buffer_stack_max) = 0;
    (yy_c_buf_p) = (char *) 0;
    (yy_init) = 0;
    (yy_start) = 0;

    (yy_start_stack_ptr) = 0;
    (yy_start_stack_depth) = 0;
    (yy_start_stack) =  NULL;

    (yy_state_buf) = 0;
    (yy_state_ptr) = 0;
    (yy_full_match) = 0;
    (yy_lp) = 0;

/* Defined in main.c */
#ifdef YY_STDINIT
    fcodeYYin = stdin;
    fcodeYYout = stdout;
#else
    fcodeYYin = (FILE *) 0;
    fcodeYYout = (FILE *) 0;
#endif

    /* For future reference: Set errno on error, since we are called by
     * fcodeYYlex_init()
     */
    return 0;
}

/* fcodeYYlex_destroy is for both reentrant and non-reentrant scanners. */
int fcodeYYlex_destroy  (void)
{
    
    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		fcodeYY_delete_buffer(YY_CURRENT_BUFFER  );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		fcodeYYpop_buffer_state();
	}

	/* Destroy the stack itself. */
	fcodeYYfree((yy_buffer_stack) );
	(yy_buffer_stack) = NULL;

    /* Destroy the start condition stack. */
        fcodeYYfree((yy_start_stack)  );
        (yy_start_stack) = NULL;

    fcodeYYfree ( (yy_state_buf) );
    (yy_state_buf)  = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * fcodeYYlex() is called, initialization will occur. */
    yy_init_globals( );

    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *fcodeYYalloc (yy_size_t  size )
{
	return (void *) malloc( size );
}

void *fcodeYYrealloc  (void * ptr, yy_size_t  size )
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void fcodeYYfree (void * ptr )
{
	free( (char *) ptr );	/* see fcodeYYrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 978 "fortrancode.l"



/*@ ----------------------------------------------------------------------------
 */

/*===================================================================*/


void resetFortranCodeParserState() {}

void parseFortranCode(CodeOutputInterface &od,const char *className,const QCString &s, 
                  bool exBlock, const char *exName,FileDef *fd,
		  int startLine,int endLine,bool inlineFragment,
		  MemberDef *memberDef,bool)
{
  //printf("***parseCode() exBlock=%d exName=%s fd=%p\n",exBlock,exName,fd);

  // used parameters
  (void)memberDef;
  (void)className;

  if (s.isEmpty()) return;
  g_code = &od;
  g_inputString   = s;
  g_inputPosition = 0;
  g_isFixedForm = recognizeFixedForm((const char*)s);
  g_currentFontClass = 0;
  g_needsTermination = FALSE;
  if (endLine!=-1)
    g_inputLines  = endLine+1;
  else
    g_inputLines  = countLines();

  if (startLine!=-1)
    g_yyLineNr    = startLine;
  else
    g_yyLineNr    = 1;

  g_exampleBlock  = exBlock; 
  g_exampleName   = exName;
  g_sourceFileDef = fd;
  if (exBlock && fd==0)
  {
    // create a dummy filedef for the example
    g_sourceFileDef = new FileDef("",exName);
  }
  if (g_sourceFileDef) 
  {
    setCurrentDoc(g_sourceFileDef->name(),g_sourceFileDef->getSourceFileBase());
  }
  g_currentDefinition = 0;
  g_currentMemberDef = 0;
  if (!g_exampleName.isEmpty())
  {
    g_exampleFile = convertNameToFile(g_exampleName+"-example");
  }
  g_includeCodeFragment = inlineFragment;
  startCodeLine();
  g_parmName.resize(0);
  g_parmType.resize(0);
  fcodeYYrestart( fcodeYYin );
  BEGIN( Start );
  fcodeYYlex();
  if (g_needsTermination)
  {
    endFontClass();
    g_code->endCodeLine();
  }
  if (exBlock && g_sourceFileDef)
  {
    // delete the temporary file definition used for this example
    delete g_sourceFileDef;
    g_sourceFileDef=0;
  }
  return;
}

#if !defined(YY_FLEX_SUBMINOR_VERSION) 
extern "C" { // some bogus code to keep the compiler happy
  void fcodeYYdummy() { yy_flex_realloc(0,0); } 
}
#elif YY_FLEX_SUBMINOR_VERSION<33
#error "You seem to be using a version of flex newer than 2.5.4 but older than 2.5.33. These versions do NOT work with doxygen! Please use version <=2.5.4 or >=2.5.33 or expect things to be parsed wrongly!"
#else
extern "C" { // some bogus code to keep the compiler happy
  void fcodeYYdummy() { yy_top_state(); } 
}
#endif


