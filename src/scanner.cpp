
#line 3 "<stdout>"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define yy_create_buffer scanYY_create_buffer
#define yy_delete_buffer scanYY_delete_buffer
#define yy_flex_debug scanYY_flex_debug
#define yy_init_buffer scanYY_init_buffer
#define yy_flush_buffer scanYY_flush_buffer
#define yy_load_buffer_state scanYY_load_buffer_state
#define yy_switch_to_buffer scanYY_switch_to_buffer
#define yyin scanYYin
#define yyleng scanYYleng
#define yylex scanYYlex
#define yylineno scanYYlineno
#define yyout scanYYout
#define yyrestart scanYYrestart
#define yytext scanYYtext
#define yywrap scanYYwrap
#define yyalloc scanYYalloc
#define yyrealloc scanYYrealloc
#define yyfree scanYYfree

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 35
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;
#endif /* ! C99 */

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! FLEXINT_H */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE scanYYrestart(scanYYin  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#define YY_BUF_SIZE 262144
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

extern yy_size_t scanYYleng;

extern FILE *scanYYin, *scanYYout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    #define YY_LESS_LINENO(n)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up scanYYtext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up scanYYtext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	yy_size_t yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via scanYYrestart()), so that the user can continue scanning by
	 * just pointing scanYYin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* Stack of input buffers. */
static size_t yy_buffer_stack_top = 0; /**< index of top of stack. */
static size_t yy_buffer_stack_max = 0; /**< capacity of stack. */
static YY_BUFFER_STATE * yy_buffer_stack = 0; /**< Stack as an array. */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* yy_hold_char holds the character lost when scanYYtext is formed. */
static char yy_hold_char;
static yy_size_t yy_n_chars;		/* number of characters read into yy_ch_buf */
yy_size_t scanYYleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 0;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow scanYYwrap()'s to do buffer switches
 * instead of setting up a fresh scanYYin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void scanYYrestart (FILE *input_file  );
void scanYY_switch_to_buffer (YY_BUFFER_STATE new_buffer  );
YY_BUFFER_STATE scanYY_create_buffer (FILE *file,int size  );
void scanYY_delete_buffer (YY_BUFFER_STATE b  );
void scanYY_flush_buffer (YY_BUFFER_STATE b  );
void scanYYpush_buffer_state (YY_BUFFER_STATE new_buffer  );
void scanYYpop_buffer_state (void );

static void scanYYensure_buffer_stack (void );
static void scanYY_load_buffer_state (void );
static void scanYY_init_buffer (YY_BUFFER_STATE b,FILE *file  );

#define YY_FLUSH_BUFFER scanYY_flush_buffer(YY_CURRENT_BUFFER )

YY_BUFFER_STATE scanYY_scan_buffer (char *base,yy_size_t size  );
YY_BUFFER_STATE scanYY_scan_string (yyconst char *yy_str  );
YY_BUFFER_STATE scanYY_scan_bytes (yyconst char *bytes,yy_size_t len  );

void *scanYYalloc (yy_size_t  );
void *scanYYrealloc (void *,yy_size_t  );
void scanYYfree (void *  );

#define yy_new_buffer scanYY_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        scanYYensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            scanYY_create_buffer(scanYYin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        scanYYensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            scanYY_create_buffer(scanYYin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define scanYYwrap(n) 1
#define YY_SKIP_YYWRAP

typedef unsigned char YY_CHAR;

FILE *scanYYin = (FILE *) 0, *scanYYout = (FILE *) 0;

typedef int yy_state_type;

extern int scanYYlineno;

int scanYYlineno = 1;

extern char *scanYYtext;
#define yytext_ptr scanYYtext

static yy_state_type yy_get_previous_state (void );
static yy_state_type yy_try_NUL_trans (yy_state_type current_state  );
static int yy_get_next_buffer (void );
static void yy_fatal_error (yyconst char msg[]  );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up scanYYtext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	scanYYleng = (size_t) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;

#define YY_NUM_RULES 647
#define YY_END_OF_BUFFER 648
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_acclist[4688] =
    {   0,
       39,   39,  331,  331,  331,  331,  331,  331,  328,  328,
       50,   50,   56,   56,  388,  388,  388,  388,  648,  642,
      647,  637,  647,  638,  641,  642,  647,  639,  642,  647,
      640,  642,  647,  642,  647,  642,  647,  210,  642,  647,
      216,  642,  647,  216,  642,  647,  211,  637,  647,  215,
      216,  638,  641,  642,  647,  216,  639,  642,  647,  216,
      640,  642,  647,  216,  642,  647,  216,  642,  647,  642,
      647,  637,  647,  642,  647,  642,  647,  642,  647,  642,
      647,  496,  642,  647,  497,  642,  647,  507,  508,  642,
      647,16889,16890,  534,  642,  647,  642,  647,  642,  647,

      637,  647,  642,  647,  642,  647,  642,  647,  528,  642,
      647,  513,  642,  647,  533,  642,  647,  510,  642,  647,
      642,  647,  527,  642,  647,  547,  642,  647,  642,  647,
      512,  642,  647,  512,  642,  647,  512,  642,  647,  524,
      642,  647,  523,  637,  647,  524,  638,  641,  642,  647,
      516,  524,  639,  642,  647,  524,  642,  647,  524,  640,
      642,  647,  524,  642,  647,  519,  524,  642,  647,  518,
      524,  642,  647,  520,  524,  642,  647,  524,  642,  647,
      522,  524,  642,  647,  522,  524,  642,  647,  517,  524,
      642,  647,  642,  647,  642,  647,  526,  642,  647,  525,

      642,  647,  503,  642,  647,  503,  638,  641,  642,  647,
      503,  639,  642,  647,  503,  640,  642,  647,  154,  503,
      642,  647,  155,  503,  642,  647,  503,  642,  647,  502,
      503,  642,  647,  501,  503,  642,  647,   40,  642,  647,
       39,   40,  642,  647,   38,  637,  647,   40,  638,  641,
      642,  647,   40,  639,  642,  647,   40,  642,  647,   40,
      640,  642,  647,   40,  642,  647,   37,   40,  642,  647,
       34,   40,  642,  647,   35,   40,  642,  647,   36,   40,
      642,  647,   42,  642,  647,   42,  638,  641,  642,  647,
       42,  639,  642,  647,   42,  640,  642,  647,   42,  642,

      647,   41,   42,  642,  647,  439,  642,  647,  438,  637,
      647,  439,  638,  641,  642,  647,  439,  639,  642,  647,
      439,  642,  647,  439,  640,  642,  647,  439,  642,  647,
      436,  439,  642,  647,  437,  439,  642,  647,  642,  647,
      637,  647,  642,  647,  642,  647,  564,  642,  647,  642,
      647,  548,  642,  647,  564,  642,  647,  542,  543,  544,
      642,  647,  642,  647,  565,  642,  647,  541,  642,  647,
      540,  541,  642,  647,  540,  637,  647,  541,  638,  641,
      642,  647,  541,  639,  642,  647,  541,  640,  642,  647,
      541,  642,  647,  541,  642,  647,  541,  642,  647,  541,

      642,  647,    9,  638,  641,  642,  647,    7,  640,  642,
      647,    2,  642,  647,   10,  642,  647,   10,  642,  647,
        1,  642,  647,  295,  642,  647,  295,  638,  641,  642,
      647,  295,  639,  642,  647,  295,  640,  642,  647,   11,
      295,  642,  647,  295,  642,  647,   11,  295,  642,  647,
       60,  642,  647,   60,  637,  647,   60,  642,  647,  642,
      647,  200,  639,  642,  647,  642,  647,  218,  642,  647,
      219,  642,  647,  384,  642,  647,   46,  642,  647,  296,
      642,  647,  186,  642,  647,  642,  647,  642,  647,  294,
      642,  647,  296,  642,  647,  318,  642,  647,  225,  642,

      647,  642,  647,  642,  647,  183,  642,  647,  183,  642,
      647,  297,  642,  647,  218,  642,  647,  183,  642,  647,
      183,  642,  647,  183,  642,  647,  183,  642,  647,  183,
      642,  647,  183,  642,  647,  183,  642,  647,  183,  642,
      647,  183,  642,  647,  183,  642,  647,  183,  642,  647,
      183,  642,  647,  183,  642,  647,  183,  642,  647,  183,
      642,  647,  183,  642,  647,  183,  642,  647,  183,  642,
      647,  583,  642,  647,   15,   17,  642,  647,   16,  637,
      647,   15,   17,  638,  641,  642,  647,   15,   17,  639,
      642,  647,   15,   17,  640,  642,  647,   15,   17,  642,

      647,   17,  642,  647,  642,  647,  637,  647,  642,  647,
      642,  647,  642,  647,  183,  642,  647,  642,  647,  637,
      647,  642,  647,  200,  639,  642,  647,  642,  647,  324,
      642,  647,  329,  642,  647,  642,  647,  326,  642,  647,
      325,  642,  647,  323,  642,  647,  330,  642,  647,  642,
      647,  434,  639,  642,  647,  465,  642,  647,  467,  642,
      647,  466,  642,  647,  467,  642,  647,  452,  642,  647,
      433,  452,  642,  647,  433,  637,  647,  452,  638,  641,
      642,  647,  434,  452,  639,  642,  647,  452,  640,  642,
      647,  422,  452,  642,  647,  423,  452,  642,  647,  432,

      452,  642,  647,  452,  642,  647,  460,  642,  647,  460,
      638,  641,  642,  647,  460,  639,  642,  647,  460,  640,
      642,  647,  458,  460,  642,  647,  459,  460,  642,  647,
      460,  642,  647,  464,  642,  647,  463,  637,  647,  464,
      638,  641,  642,  647,  464,  639,  642,  647,  464,  640,
      642,  647,  464,  642,  647,  462,  464,  642,  647,  461,
      464,  642,  647,  433,  452,  642,  647,  433,  637,  647,
      452,  642,  647,  424,  452,  642,  647,  452,  642,  647,
      435,  452,  642,  647,  447,  452,  642,  647,  447,  452,
      642,  647,  447,  452,  642,  647,  447,  452,  642,  647,

      447,  452,  642,  647,  447,  452,  642,  647,  447,  452,
      642,  647,  447,  452,  642,  647,  447,  452,  642,  647,
      123,  642,  647,  123,  637,  647,  123,  638,  641,  642,
      647,  123,  639,  642,  647,  123,  640,  642,  647,  125,
      642,  647,  123,  642,  647,  122,  123,  642,  647,  123,
      642,  647,  313,  642,  647,  313,  638,  641,  642,  647,
      313,  639,  642,  647,  313,  640,  642,  647,  313,  642,
      647,  312,  313,  642,  647,  310,  313,  642,  647,  331,
      356,  642,  647,  331,  354,  356,  642,  647,  354,  637,
      647,  354,  356,  642,  647,  336,  356,  638,  641,  642,

      647,  333,  356,  639,  642,  647,  339,  356,  640,  642,
      647,  356,  642,  647,  356,  642,  647,  356,  642,  647,
      341,  356,  642,  647,  343,  356,  642,  647,  343,  356,
      642,  647,  356,  642,  647,  342,  356,  642,  647,  642,
      647,  142,  642,  647,  140,  642,  647,  140,  642,  647,
      642,  647,  637,  647,  642,  647,  642,  647,  642,  647,
      141,  642,  647,  478,  489,  642,  647,  478,  489,  642,
      647,  476,  637,  647,  474,  489,  638,  641,  642,  647,
      485,  489,  639,  642,  647,  488,  489,  640,  642,  647,
      489,  642,  647,  489,  642,  647,  489,  642,  647,  489,

      642,  647,  469,  489,  642,  647,  470,  489,  642,  647,
      478,  489,  642,  647,  475,  485,  489,  639,  642,  647,
      479,  637,  647,  489,  638,  641,  642,  647,  489,  642,
      647,  489,  642,  647,  473,  642,  647,  495,  642,  647,
      494,  637,  647,  491,  495,  638,  641,  642,  647,  495,
      639,  642,  647,  495,  640,  642,  647,  495,  642,  647,
      495,  642,  647,  495,  642,  647,  495,  638,  641,  642,
      647,  492,  495,  640,  642,  647,  483,  489,  638,  641,
      642,  647,  485,  489,  639,  642,  647,  489,  642,  647,
      484,  489,  642,  647,  468,  489,  642,  647,  206,  642,

      647,  208,  637,  647,  206,  642,  647,  206,  638,  641,
      642,  647,  206,  639,  642,  647,  206,  640,  642,  647,
      206,  642,  647,  206,  642,  647,  636,  642,  647,  636,
      642,  647,  636,  638,  641,  642,  647,  636,  639,  642,
      647,  636,  640,  642,  647,  642,  647,  636,  642,  647,
      642,  647,  635,  637,  647,  638,  641,  642,  647,  639,
      642,  647,  640,  642,  647,  642,  647,  642,  647,    5,
      642,  647,    6,  642,  647,    3,  642,  647,    4,  642,
      647,  322,  642,  647,  321,  322,  642,  647,  321,  637,
      647,  322,  638,  641,  642,  647,  322,  639,  642,  647,

      322,  640,  642,  647,  322,  642,  647,  320,  322,  642,
      647,  319,  322,  642,  647,  559,  642,  647,  560,  642,
      647,  563,  638,  641,  642,  647,  561,  642,  647,  562,
      642,  647,  317,  642,  647,  316,  638,  641,  642,  647,
      317,  639,  642,  647,  317,  640,  642,  647,  317,  642,
      647,  314,  642,  647,  315,  642,  647,  328,  642,  647,
      327,  637,  647,  328,  638,  641,  642,  647,  328,  639,
      642,  647,  328,  640,  642,  647,  328,  642,  647,  642,
      647,  347,  642,  647,  346,  642,  647,  346,  642,  647,
      346,  642,  647,  195,  642,  647,  193,  637,  647,  195,

      638,  641,  642,  647,  195,  639,  642,  647,  195,  640,
      642,  647,  195,  642,  647,  194,  195,  642,  647,  198,
      642,  647,  198,  642,  647,  197,  637,  647,  198,  638,
      641,  642,  647,  198,  639,  642,  647,  198,  640,  642,
      647,  198,  642,  647,  198,  642,  647,  575,  577,  642,
      647,  570,  577,  642,  647,  570,  637,  647,  575,  577,
      638,  641,  642,  647,  575,  577,  639,  642,  647,  575,
      577,  640,  642,  647,  577,  642,  647,  577,  642,  647,
      577,  642,  647,  575,  577,  642,  647,  642,  647,   77,
      642,  647,   76,  642,  647,   78,  642,  647,  642,  647,

      642,  647,  642,  647,  135,  642,  647,  132,  642,  647,
    16515,  642,  647,  637,  647,  642,  647,  134,  642,  647,
      591,  642,  647,  592,  637,  647,  591,  638,  641,  642,
      647,  591,  639,  642,  647,  591,  640,  642,  647,  591,
      642,  647,  591,  642,  647,  591,  642,  647,  591,  642,
      647,  591,  642,  647,  584,  591,  642,  647,  585,  591,
      642,  647,  499,  642,  647,  204,  642,  647,  205,  637,
      647,  204,  638,  641,  642,  647,  204,  639,  642,  647,
      204,  640,  642,  647,  204,  642,  647,  642,  647,  642,
      647,  213,  642,  647,  213,  638,  641,  642,  647,  213,

      639,  642,  647,  213,  640,  642,  647,  213,  642,  647,
      212,  213,  642,  647,  451,  642,  647,  451,  642,  647,
      451,  638,  641,  642,  647,  451,  639,  642,  647,  451,
      642,  647,  451,  640,  642,  647,  448,  451,  642,  647,
      451,  642,  647,  448,  451,  642,  647,  449,  451,  642,
      647,  450,  451,  642,  647,  239,  243,  642,  647,  242,
      637,  647,  241,  243,  638,  641,  642,  647,  239,  243,
      639,  642,  647,  239,  243,  640,  642,  647,  239,  243,
      642,  647,  642,  647,   47,  642,  647,   49,  642,  647,
       58,  642,  647,   48,  642,  647,   59,  642,  647,   50,

      642,  647,   50,  637,  647,   50,  638,  641,  642,  647,
       50,  639,  642,  647,   50,  640,  642,  647,   51,  642,
      647,   50,  642,  647,  642,  647,   55,  642,  647,  642,
      647,   52,  642,  647,   53,  642,  647,   56,  642,  647,
       56,  637,  647,   56,  638,  641,  642,  647,   56,  639,
      642,  647,   56,  640,  642,  647,   57,  642,  647,   56,
      642,  647,  500,  642,  647,   73,  642,  647,  642,  647,
      642,  647,  642,  647,  642,  647,  642,  647,  642,  647,
      642,  647,  642,  647,   75,  642,  647,  172,  642,  647,
      642,  647,  169,  642,  647,  173,  642,  647,  173,  642,

      647,  173,  642,  647,  642,  647,  174,  642,  647,  170,
      642,  647,  642,  647,  642,  647,  642,  647,  642,  647,
      642,  647,  180,  642,  647,  642,  647,  181,  642,  647,
      245,  642,  647,  245,  642,  647,  237,  637,  647,  229,
      245,  638,  641,  642,  647,  245,  639,  642,  647,  235,
      245,  640,  642,  647,  226,  233,  245,  642,  647,  234,
      245,  642,  647,  228,  245,  642,  647,  245,  642,  647,
      245,  642,  647,  228,  245,  642,  647,  233,  245,  642,
      647,  234,  245,  642,  647,  245,  642,  647,  245,  642,
      647,  233,  245,  642,  647,  227,  233,  245,  642,  647,

      642,  647,  637,  647,  642,  647,  642,  647,  642,  647,
      199,  642,  647,  642,  647,  637,  647,  642,  647,  642,
      647,  349,  642,  647,  350,  642,  647,  642,  647,  350,
      642,  647,  351,  642,  647,  348,  642,  647,  352,  642,
      647,  353,  642,  647,  156,  642,  647,  156,  638,  641,
      642,  647,  156,  639,  642,  647,  156,  640,  642,  647,
      154,  156,  642,  647,  155,  156,  642,  647,  156,  642,
      647,  148,  156,  642,  647,  150,  156,  642,  647,16536,
      360,  642,  647,  360,  642,  647,  637,  647,  360,  642,
      647,  360,  638,  641,  642,  647,  360,  639,  642,  647,

      360,  642,  647,  360,  640,  642,  647,  360,  642,  647,
      360,  642,  647,  359,  360,  642,  647,  364,  642,  647,
      362,  637,  647,  364,  638,  641,  642,  647,  364,  639,
      642,  647,  364,  640,  642,  647,  363,  364,  642,  647,
      364,  642,  647,  368,  642,  647,  370,  642,  647,  642,
      647,  385,  421,  642,  647,  388,  421,  642,  647,  388,
      420,  637,  647,  389,  421,  638,  641,  642,  647,  421,
      639,  642,  647,  419,  421,  640,  642,  647,  390,  421,
      642,  647,  391,  421,  642,  647,  421,  642,  647,  421,
      642,  647,  409,  421,  642,  647,  410,  421,  642,  647,

      192,  642,  647,  191,  637,  647,  192,  638,  641,  642,
      647,  192,  639,  642,  647,  192,  640,  642,  647,  192,
      642,  647,  190,  192,  642,  647,  642,  647,  128,  642,
      647,  642,  647,  130,  642,  647,  129,  642,  647,  251,
      642,  647,  250,  637,  647,  247,  251,  638,  641,  642,
      647,  251,  639,  642,  647,  251,  640,  642,  647,  251,
      642,  647,  251,  642,  647,  251,  642,  647,  251,  638,
      641,  642,  647,  248,  251,  640,  642,  647,  257,  642,
      647,  256,  637,  647,  253,  257,  638,  641,  642,  647,
      257,  639,  642,  647,  257,  640,  642,  647,  257,  642,

      647,  257,  642,  647,  257,  642,  647,  257,  638,  641,
      642,  647,  254,  257,  640,  642,  647,  264,  265,  642,
      647,  261,  637,  647,  258,  265,  638,  641,  642,  647,
      264,  265,  639,  642,  647,  262,  265,  640,  642,  647,
      259,  265,  642,  647,  260,  265,  642,  647,  264,  265,
      642,  647,  279,  282,  642,  647,  281,  637,  647,  274,
      282,  638,  641,  642,  647,  279,  282,  639,  642,  647,
      275,  282,  640,  642,  647,  280,  282,  642,  647,  276,
      282,  642,  647,  277,  282,  642,  647,  272,  273,  642,
      647,  269,  637,  647,  266,  273,  638,  641,  642,  647,

      272,  273,  639,  642,  647,  270,  273,  640,  642,  647,
      267,  273,  642,  647,  268,  273,  642,  647,  273,  642,
      647,  290,  293,  642,  647,  292,  637,  647,  285,  293,
      638,  641,  642,  647,  290,  293,  639,  642,  647,  286,
      293,  640,  642,  647,  291,  293,  642,  647,  287,  293,
      642,  647,  288,  293,  642,  647,  290,  293,  639,  642,
      647,  569,  642,  647,  569,  642,  647,  568,  637,  647,
      569,  638,  641,  642,  647,  569,  639,  642,  647,  569,
      640,  642,  647,  566,  569,  642,  647,  567,  569,  642,
      647,  569,  642,  647,  558,  642,  647,  551,  558,  642,

      647,  551,  637,  647,  558,  638,  641,  642,  647,  558,
      639,  642,  647,  558,  640,  642,  647,  556,  558,  642,
      647,  557,  558,  642,  647,  558,  642,  647,  549,  558,
      642,  647,  550,  558,  642,  647,  558,  642,  647,  445,
      642,  647,  446,  637,  647,  441,  445,  638,  641,  642,
      647,  445,  639,  642,  647,  445,  642,  647,  442,  445,
      640,  642,  647,  445,  642,  647,  440,  445,  642,  647,
      444,  445,  642,  647,  371,  452,  642,  647,  372,  452,
      642,  647,  376,  642,  647,  376,  638,  641,  642,  647,
      376,  639,  642,  647,  376,  640,  642,  647,  376,  642,

      647,  376,  642,  647,  381,  642,  647,  380,  381,  642,
      647,  380,  637,  647,  381,  638,  641,  642,  647,  381,
      639,  642,  647,  381,  640,  642,  647,  377,  381,  642,
      647,  378,  381,  642,  647,  379,  381,  642,  647,  381,
      642,  647,  311,  313,  642,  647,  386,  421,  642,  647,
      420,  637,  647,  416,  421,  638,  641,  642,  647,  386,
      421,  639,  642,  647,  421,  640,  642,  647,  386,  421,
      642,  647,  421,  642,  647,  421,  638,  641,  642,  647,
      417,  421,  640,  642,  647,  387,  421,  642,  647,  387,
      421,  639,  642,  647,  411,  421,  642,  647,  412,  421,

      642,  647,  421,  642,  647,  413,  421,  642,  647,  414,
      421,  642,  647,  398,  407,  642,  647,  406,  637,  647,
      398,  407,  638,  641,  642,  647,  398,  407,  639,  642,
      647,  398,  407,  640,  642,  647,  407,  642,  647,  398,
      407,  642,  647,  407,  642,  647,  398,  407,  642,  647,
      407,  642,  647,16781,  404,  405,  642,  647,  400,  637,
      647,  404,  405,  638,  641,  642,  647,  404,  405,  639,
      642,  647,  404,  405,  640,  642,  647,  404,  405,  642,
      647,  405,  642,  647,  407,  642,  647,  407,  638,  641,
      642,  647,  407,  639,  642,  647,  407,  640,  642,  647,

      407,  642,  647,  407,  642,  647,  642,  647,  640,  642,
      647,  160,  642,  647,  163,  642,  647,  163,  638,  641,
      642,  647,  163,  639,  642,  647,  163,  640,  642,  647,
      163,  642,  647,  163,  642,  647,  162,  163,  642,  647,
      642,  647,  640,  642,  647,  158,  642,  647,  166,  642,
      647,  165,  637,  647,  166,  638,  641,  642,  647,  166,
      639,  642,  647,  166,  640,  642,  647,  166,  642,  647,
      166,  642,  647,  164,  166,  642,  647,  301,  642,  647,
      301,  638,  641,  642,  647,  301,  639,  642,  647,  301,
      640,  642,  647,  301,  642,  647,  298,  301,  642,  647,

      301,  642,  647,  309,  642,  647,  309,  642,  647,  637,
      647,  309,  638,  641,  642,  647,  309,  639,  642,  647,
      309,  642,  647,  309,  640,  642,  647,  309,  642,  647,
      308,  309,  642,  647,  305,  309,  642,  647,  309,  642,
      647,  642,  647,  637,  647,  642,  647,  302,  642,  647,
      632,  642,  647,  632,  638,  641,  642,  647,  632,  639,
      642,  647,  632,  640,  642,  647,  618,  632,  642,  647,
      632,  642,  647,  632,  642,  647,  623,  642,  647,  623,
      642,  647,  637,  647,  623,  642,  647,  623,  638,  641,
      642,  647,  623,  639,  642,  647,  623,  642,  647,  623,

      640,  642,  647,  621,  623,  642,  647,  622,  623,  642,
      647,  623,  642,  647,  623,  642,  647,  620,  623,  642,
      647,  631,  642,  647,  631,  642,  647,  631,  638,  641,
      642,  647,  631,  639,  642,  647,  631,  640,  642,  647,
      631,  642,  647,  631,  642,  647,  631,  642,  647,  631,
      642,  647,  631,  642,  647,  624,  631,  642,  647,  630,
      642,  647,  630,  638,  641,  642,  647,  630,  639,  642,
      647,  630,  640,  642,  647,  629,  630,  642,  647,  630,
      642,  647,  633,  642,  647,  633,  638,  641,  642,  647,
      633,  639,  642,  647,  633,  640,  642,  647,  633,  642,

      647,  642,  647,  594,  637,  647,  638,  641,  642,  647,
      639,  642,  647,  640,  642,  647,  642,  647,  605,  607,
      642,  647,  605,  607,  642,  647,  606,  637,  647,  605,
      607,  638,  641,  642,  647,  605,  607,  639,  642,  647,
      605,  607,  640,  642,  647,  607,  642,  647,  607,  642,
      647,  605,  607,  642,  647,  607,  642,  647,  607,  642,
      647,  605,  607,  642,  647,  607,  642,  647,  607,  642,
      647,  613,  616,  642,  647,  615,  637,  647,  613,  616,
      638,  641,  642,  647,  613,  616,  639,  642,  647,  616,
      642,  647,  613,  616,  640,  642,  647,  616,  642,  647,

      616,  642,  647,  616,  642,  647,  616,  642,  647,  613,
      616,  642,  647,  616,  642,  647,16996,  644,  646,  210,
      209,  210,  644,  646,  214,  534,  507,16889,16890,  507,
      508,16889,16890,  508, 8697, 8698,  507,  508,16889,16890,
      504,  498,  534,  507,  508,16889,16890,  545,  545,  545,
      512,  533,  644,  646,  509,  512,  512,  512,  520,  644,
      646,  520,  522,  522,  522,  184,  525,  525,  147,  149,
       39,   34,   34,  436,  436,  543,  544,  543,  544,  565,
      545,  545,  543,  544,  545,  543,  544,  545,  542,  543,
      544,  564,  542,  543,  544,  542,  565,   60,   60,  200,

      183,  183,   20,   21,  219,  358,   46,  644,  646,  185,
      187,   18,   74,   74,   74,   74,   74,   74,  183,  144,
      183,  183,  183,  183,  183,  183,  183,  183,  183,  183,
      183,  183,  183,  183,  183,  183,  183,  183,  183,  183,
      183,  183,  183,  183,  183,  183,  183,  183,  183,  183,
      183,  183,   15,   15,  644,   15,  646,   13,  183,  183,
      183,  145,  200,  323,  644,  646,  323,  433,  432,  432,
      433,  447,  644,  646,  431,  447,  447,  447,  447,  447,
      447,  447,  447,  447,  447,  124,  331,  331,  354,  354,
      333,  333,  337,  644,  332,  646,  334,  140,  140,  140,

      140,  141,  141,  141,  478,  478,  481,  644,  482,  646,
      486,  478,  475,  481,  644,  482,  646,  480,  493,  493,
      644,  493,  646,  490,  482,  646,  208,  208,  207,  636,
      636,  645,  643,  644,  636,  643,  646,  635,  644,  646,
      634,  635,  321,  317,  317,  644,  317,  646,  328,  328,
      644,  328,  646,  346,  346,  346,  346,  575,  570,  576,
      571,  644,  572,  646,  575,  575,  575,   76,   76,  132,
    16515,  132,16515,  134,  134,  203,  449,  644,  646,  449,
      239,  240,  239,  644,  239,  646,   48,   49,   48,   50,
       50,  644,   50,  646,   53,   53,   53,   52,   56,   57,

       56,  644,   56,  646,  172,  173,  173,  173,  173,  174,
      174,  180,  180,  181,  181,  230,  644,  646,  231,  232,
      244,  238,  383,  188,  348,  348,  348,  147,16536,  151,
      359,  359,  359,  366,  365,  367,  369,  385,  388,  394,
      644,  395,  646,  189,  128,  128,  129,  129,  249,  249,
      644,  249,  646,  246,  255,  255,  644,  255,  646,  252,
      264,  264,  644,  264,  646,  279,  272,  290,  290,  566,
      551,  552,  554,  444,  444,  373,  374,  375,  380,  379,
      379,  386,  386,  644,  386,  646,  415,  387,  398,  399,
      398,  646,  398,16781, 8589,  404,  404,  644,  404,  646,

      160,  160,  162,  162,  158,  158,  164,  164,  305,  307,
      306,  305,  304,  302,  302,  302,  303,  302,  619,  620,
      620,  620,  627,  594,  644,  646,  605,  605,  605,  595,
      599,  644,  598,  646,  605,  605,  605,  596,  597,  598,
      646,  613,  614,  614,  644,  614,  646,  613,16996, 8804,
      507,16889,16890,  507,16889,16890,  508,  508,  507,  508,
    16889,16890,  531,  578,  532,  580,  512,  512,  515,  515,
      522,  522,  543,  544,  543,  544,  543,  544,  542,    8,
       60,   60,  183,   20,  358,  578,  580,  185,   61,   74,
       74,   74,   74,   74,   74,   74,   74,  143,  183,  183,

      183,  183,  183,  183,  183,  183,  183,  183,  183,  183,
      183,  183,  183,  183,  183,  183,  183,  183,  183,  183,
      183,  183,  183,  183,  183,  183,  183,  183,  183,  183,
      183,  183,  183,  183,  183,  183,  183,  183,  183,  183,
      183,  183,  578,  580,  578,  580,  431,  447,  447,  428,
      447,  447,  447,  447,  447,  447,  447,  121,  331,  354,
      354,  333,  340,  337,  338,  332,  335,  140,  140,  141,
      487,  477,  480,  207,  346,  346,  575,  575,  575,   76,
      136,  137,  588,  587,  586,  217,  578,  580,   59,  173,
      173,  173,  236,  348,  146, 8344,  153,  359,  361,  418,

      392,  392,  263,  278,  271,  289,  290,  443,  402,  161,
      159,  307,  304,  302,  302,  620,  627,  605,  605,  601,
      597,  597,  610,  222,  507,16889,16890,  508,  530,  579,
      529,  581,  529,  581,  546,  512,  512,  515,  514,  522,
      522,  501,  543,  544,  543,  544,    8,   60,   60,  357,
      579,  579,  579,  223,  581,  581,  581,  581,  224,   74,
       74,   74,   74,   74,   74,   74,   74,  183,  183,  183,
      183,  183,  183,  183,  183,  183,  183,  183,  183,  183,
      183,  183,  183,  183,  183,  183,  183,  183,  183,  183,
      183,  183,  183,  183,  183,  183,  183,  183,  183,  183,

      183,  183,  183,  183,  183,  183,  183,  183,  183,  183,
      222,  579,  222,  581,  428,  447,  447,  428,  447,  447,
      447,  447,  454,  453,  447,  331,  354,  354,  333,  340,
      140,  140,  487,  346,  346,  575,  575,  575,   76,  137,
     8323,  133,  217,   54,   69,   70,  173,  173,  175,  236,
     8344,  418,  392,  393,  263,  278,  271,  289,  290,  553,
      443,  403,  593,  605,  605,  600,  600,  512,  512,  521,
      522,  501,  501,  543,  544,  221,  220,   60,   60,  202,
      382,  224,   12,   74,   74,   74,   74,   74,   74,   74,
       74,  183,  183,  183,  183,  183,  183,  183,  183,  183,

      183,   19,   19,   19,   19,  144,   19,  183,  119,  118,
      183,  183,  183,  183,  183,  183,  183,  183,  183,  183,
      183,  183,  183,  183,  183,  183,  183,  183,  183,  183,
      183,  183,  183,  183,  183,  183,  183,  183,  183,  183,
      183,  183,   13,  447,  429,  447,  447,  447,  447,  447,
      447,  120,  331,  354,  354,  202,  333,  355,  140,  471,
      472,  346,  346,  196,  573,  575,  575,  575,  575,  590,
      171,  173,  173,  176,  396,  401,  625,  602,  605,  605,
      603,  512,  512,16895,  501,  543,  544,   60,   60,  119,
      224,   74,   98,   74,   74,   74,   74,   74,   74,   74,

       74,  183,  183,  183,  183,  183,  100,   99,  183,  183,
      183,   32,  183,  183,  183,  183,  183,  183,  183,  183,
      183,  183,  183,  183,  183,  183,  183,  183,  183,  183,
      183,  183,  183,  183,  183,  183,16493,  183,  183,  183,
      117,  116,  138,  183,  183,  183,  429,  447,  429,  447,
      447,  427,  447,  455,  447,  447,  331,  354,  354,  140,
      345,  346,  575,  575,  575,  589,   66,   68,   71,  173,
      625,  628,  604,  605,  608,  512, 8703, 8703,  543,  544,
      536,   60,   60,  100,   32,16493,  117,  201,   74,   74,
       74,   74,   74,   74,   74,   74,  183,  183,  183,  183,

      183,  183,  183,  183,  183,   81,  183,  183,  183,   84,
      183,  183,   23,  183,  183,   91,  183,  183,  183,  183,
      183,   28,  183,  183,  183,  183,   80, 8301,  108,  183,
      183,  183,  183,  183,  183,  427,  447,  447,  456,  427,
      457,  447,  331,  354,  354,  140,  346,  575,  575,  575,
      173,  177,  408,  300,  299,  609,  543,  544,  539,  535,
       60,   60,   81,   84,   23,   91,   28,   80, 8301,   74,
       74,   74,   74,   74,   74,   45,   74,  167,  183,  183,
      183,  183,  183,  107,  157,  183,  183,  183, 8318,  144,
    16510,  183,  183,  183,  183,   23,   92,   85,  183,   31,

      183,  183,  183,  183,  183,   28,  183,  183,  183,   24,
      183,  183,   82,  425,  447,  426,  447,  430,  447,  331,
      354,  354,  140,  574,  575,  575,  575,   62,   64,   63,
      177,  626,  611,  543,  544,  538,   60,   60,   45,  107,
       92,   85,   31,   24,   82,   74,   74,   74,   43,   74,
       74,   74,  183,  183,   83,  183,  183,   86,  582, 8318,
      143,  183,   79,  183,   29,  183,   31,  183,  183,  183,
       33,  183,  183,  183,  183,   24,   89,  183,  425,  426,
      430,  425,  426,  430,  331,  354,  354,  140,  575,   62,
       72,   65,   63,  283,  284,  555,  626,  543,  544,  537,

       60,   60,   43,   83,   86,   79,   29,   33,   89,   74,
       74,   88,   74,   96,   87,  168,  183,  183,  183,   97,
      582,  582,  183,   93,   93,   29,   90,   90,16511,   90,
       90,  144,   90,  183,  183,  183,  183,   30,  183,  183,
      183,  183,  104,  103,  183,  331,  354,  354,  344,  139,
      140,  575,  283,  283,  284,  284,  617,  543,  544,  564,
       60,   60,   88,   96,   87,   97,   93,   93,   90,   30,
       74,   95,   44,  183,  119,  183,   90,   90,  183,  183,
       22,   30,  183,  183,  183,  183,  113,  112,  183,  331,
      354,  354,  575,  564,   60,   60,   95,   44,   22,   74,

      183, 8319,  183,  183,   22,  183,  183,  183,   25,  102,
      101,  331,  354,  354,  179,  178,   60,   60,   25,   74,
      182,  183,   27,  183,  183,   25,  111,  110,  331,  354,
      354,  179,  178,   60,   60,   27,   74,   27,  183,  183,
      331,  354,  354,   60,   60,   74,  183,   26,  331,  354,
      354,   60,   60,   26,   94,  106,  105,   26,  331,  354,
      354,   60,   60,   94,  115,  114,  331,  354,  354,   67,
       60,   60,  331,  354,  354,   60,   60,  331,  354,  354,
       60,   60,  331,  354,  354,   60,   60,   14,  331,  354,
      354,   60,   60,  331,  354,  354,   60,   60,  331,  354,

      354,   60,   60,  331,  354,  354,   60,   60,  331,  354,
      354,   60,   60,  331,  354,  354,   60,   60,  331,  354,
      354,   60,   60,  331,  354,  354,   60,   60,  331,  354,
      354,   60,   60,  331,  354,  354,   60,   60,  331,  354,
      354,   60,   60,  331,  354,  354,   60,   60,  331,  354,
      354,   60,   60,  331,  354,  354,   60,   60,  331,  354,
      354,   60,   60,  331,  354,  354,   60,   60,  331,  354,
      354,   60,   60,  331,  354,  354,   60,   60,  331,  354,
      354,   60,   60,  331,  354,  354,   60,   60,  331,  354,
      354,   60,   60,  331,  354,  354,   60,   60,  331,  354,

      354,   60,   60,  331,  354,  354,   60,   60,  331,  354,
      354,   60,   60,  331,  354,  354,   60,   60,  331,  354,
      354,   60,   60,  331,  354,  354,   60,   60,  331,  354,
      354,   60,   60,  331,  354,  354,   60,   60,  331,  354,
      354,   60,   60,  331,  354,  354,   60,   60,  331,  354,
      354,   60,   60,  331,  354,  354,   60,   60,  331,  354,
      354,   60,   60,  331,  354,  354,   60,   60,  331,  354,
      354,   60,   60,  331,  354,  354,   60,   60,  331,  354,
      354,   60,   60,  331,  354,  354,   60,   60,  331,  354,
      354,   60,   60,  331,  354,  354,   60,   60,  331,  354,

      354,   60,   60,  331,  354,  354,   60,   60,  331,  354,
      354,   60,   60,  331,  354,  354,   60,   60,  331,  354,
      354,   60,   60,  331,  354,  354,   60,   60,  331,  354,
      354,   60,   60,  331,  354,  354,   60,   60,  331,  354,
      354,   60,   60,  331,  354,  354,   60,   60,  331,  354,
      354,   60,   60,  331,  354,  354,   60,   60,  331,  354,
      354,   60,   60,  331,  354,  354,   60,   60,  331,  354,
      354,   60,   60,  331,  354,  354,   60,   60,  331,  354,
      354,   60,   60,  331,  354,  354,  331
    } ;

static yyconst flex_int16_t yy_accept[3944] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    4,
        5,    6,    7,    8,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,

        9,   10,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   12,   13,   13,   13,   14,
       15,   15,   15,   15,   15,   15,   15,   15,   15,   15,
       15,   15,   15,   15,   15,   15,   15,   15,   15,   15,
       15,   15,   15,   15,   15,   15,   15,   15,   15,   15,
       15,   15,   15,   15,   15,   15,   15,   16,   17,   18,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,

       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   20,   22,   24,   28,   31,   34,   36,   38,   41,
       44,   47,   50,   56,   60,   64,   67,   70,   72,   74,
       76,   78,   80,   82,   85,   88,   94,   97,   99,  101,
      103,  105,  107,  109,  112,  115,  118,  121,  123,  126,

      129,  131,  134,  137,  140,  143,  146,  151,  156,  159,
      163,  166,  170,  174,  178,  181,  185,  189,  193,  195,
      197,  200,  203,  206,  211,  215,  219,  223,  227,  230,
      234,  238,  241,  245,  248,  253,  257,  260,  264,  267,
      271,  275,  279,  283,  286,  291,  295,  299,  302,  306,
      309,  312,  317,  321,  324,  328,  331,  335,  339,  341,
      343,  345,  347,  350,  352,  355,  358,  363,  365,  368,
      371,  375,  378,  383,  387,  391,  394,  397,  400,  403,
      408,  412,  415,  418,  421,  424,  427,  432,  436,  440,
      444,  447,  451,  454,  457,  460,  462,  466,  468,  471,

      474,  477,  480,  483,  486,  488,  490,  493,  496,  499,
      502,  504,  506,  509,  512,  515,  518,  521,  524,  527,
      530,  533,  536,  539,  542,  545,  548,  551,  554,  557,
      560,  563,  566,  569,  572,  575,  579,  582,  588,  593,
      598,  602,  605,  607,  609,  611,  613,  615,  618,  620,
      622,  624,  628,  630,  633,  636,  638,  641,  644,  647,
      650,  652,  656,  659,  662,  665,  668,  671,  675,  678,
      683,  688,  692,  696,  700,  704,  707,  710,  715,  719,
      723,  727,  731,  734,  737,  740,  745,  749,  753,  756,
      760,  764,  768,  771,  774,  778,  781,  785,  789,  793,

      797,  801,  805,  809,  813,  817,  821,  824,  827,  832,
      836,  840,  843,  846,  850,  853,  856,  861,  865,  869,
      872,  876,  880,  884,  889,  892,  896,  902,  907,  912,
      915,  918,  921,  925,  929,  933,  936,  940,  942,  945,
      948,  951,  953,  955,  957,  959,  961,  964,  968,  972,
      975,  981,  986,  991,  994,  997, 1000, 1003, 1007, 1011,
     1015, 1021, 1024, 1029, 1032, 1035, 1038, 1041, 1044, 1050,
     1054, 1058, 1061, 1064, 1067, 1072, 1077, 1083, 1088, 1091,
     1095, 1099, 1102, 1105, 1108, 1113, 1117, 1121, 1124, 1127,
     1130, 1133, 1138, 1142, 1146, 1148, 1151, 1153, 1156, 1160,

     1163, 1166, 1168, 1170, 1173, 1176, 1179, 1182, 1185, 1189,
     1192, 1197, 1201, 1205, 1208, 1212, 1216, 1219, 1222, 1227,
     1230, 1233, 1236, 1241, 1245, 1249, 1252, 1255, 1258, 1261,
     1264, 1269, 1273, 1277, 1280, 1282, 1285, 1288, 1291, 1294,
     1297, 1300, 1305, 1309, 1313, 1316, 1320, 1323, 1326, 1329,
     1334, 1338, 1342, 1345, 1348, 1352, 1356, 1359, 1365, 1370,
     1375, 1378, 1381, 1384, 1388, 1390, 1393, 1396, 1399, 1401,
     1403, 1405, 1408, 1412, 1414, 1416, 1418, 1421, 1424, 1427,
     1432, 1436, 1440, 1443, 1446, 1449, 1452, 1455, 1459, 1463,
     1466, 1469, 1472, 1477, 1481, 1485, 1488, 1490, 1492, 1495,

     1500, 1504, 1508, 1511, 1515, 1518, 1521, 1526, 1530, 1533,
     1537, 1541, 1544, 1548, 1552, 1556, 1560, 1563, 1569, 1574,
     1579, 1583, 1585, 1588, 1591, 1594, 1597, 1600, 1603, 1606,
     1611, 1615, 1619, 1622, 1625, 1627, 1630, 1632, 1635, 1638,
     1641, 1644, 1649, 1653, 1657, 1660, 1663, 1666, 1669, 1671,
     1673, 1675, 1677, 1679, 1681, 1683, 1685, 1688, 1691, 1693,
     1696, 1699, 1702, 1705, 1707, 1710, 1713, 1715, 1717, 1719,
     1721, 1723, 1726, 1728, 1731, 1734, 1737, 1740, 1746, 1750,
     1755, 1760, 1764, 1768, 1771, 1774, 1778, 1782, 1786, 1789,
     1792, 1796, 1801, 1803, 1805, 1807, 1809, 1811, 1814, 1816,

     1818, 1820, 1822, 1825, 1828, 1830, 1833, 1836, 1839, 1842,
     1845, 1848, 1853, 1857, 1861, 1865, 1869, 1872, 1876, 1881,
     1884, 1887, 1889, 1892, 1897, 1901, 1904, 1908, 1911, 1914,
     1918, 1921, 1924, 1929, 1933, 1937, 1941, 1944, 1947, 1950,
     1952, 1956, 1960, 1964, 1970, 1974, 1979, 1983, 1987, 1990,
     1993, 1997, 2001, 2004, 2007, 2012, 2016, 2020, 2023, 2027,
     2029, 2032, 2034, 2037, 2040, 2043, 2046, 2052, 2056, 2060,
     2063, 2066, 2069, 2074, 2079, 2082, 2085, 2091, 2095, 2099,
     2102, 2105, 2108, 2113, 2118, 2122, 2125, 2131, 2136, 2141,
     2145, 2149, 2153, 2157, 2160, 2166, 2171, 2176, 2180, 2184,

     2188, 2192, 2195, 2201, 2206, 2211, 2215, 2219, 2222, 2226,
     2229, 2235, 2240, 2245, 2249, 2253, 2257, 2262, 2265, 2268,
     2271, 2276, 2280, 2284, 2288, 2292, 2295, 2298, 2302, 2305,
     2310, 2314, 2318, 2322, 2326, 2329, 2333, 2337, 2340, 2343,
     2346, 2352, 2356, 2359, 2364, 2367, 2371, 2375, 2379, 2383,
     2386, 2391, 2395, 2399, 2402, 2405, 2408, 2412, 2415, 2420,
     2424, 2428, 2432, 2436, 2440, 2443, 2447, 2451, 2454, 2460,
     2465, 2469, 2473, 2476, 2481, 2486, 2490, 2495, 2499, 2503,
     2506, 2510, 2514, 2518, 2521, 2527, 2532, 2537, 2540, 2544,
     2547, 2551, 2555, 2559, 2562, 2568, 2573, 2578, 2582, 2585,

     2588, 2593, 2597, 2601, 2604, 2607, 2609, 2612, 2615, 2618,
     2623, 2627, 2631, 2634, 2637, 2641, 2643, 2646, 2649, 2652,
     2655, 2660, 2664, 2668, 2671, 2674, 2678, 2681, 2686, 2690,
     2694, 2697, 2701, 2704, 2707, 2710, 2712, 2717, 2721, 2724,
     2728, 2731, 2735, 2739, 2742, 2744, 2746, 2748, 2751, 2754,
     2759, 2763, 2767, 2771, 2774, 2777, 2780, 2783, 2785, 2788,
     2793, 2797, 2800, 2804, 2808, 2812, 2815, 2818, 2822, 2825,
     2828, 2833, 2837, 2841, 2844, 2847, 2850, 2853, 2856, 2860,
     2863, 2868, 2872, 2876, 2880, 2883, 2886, 2891, 2895, 2899,
     2902, 2904, 2907, 2911, 2914, 2917, 2919, 2923, 2927, 2930,

     2936, 2941, 2946, 2949, 2952, 2956, 2959, 2962, 2966, 2969,
     2972, 2976, 2979, 2985, 2990, 2993, 2998, 3001, 3004, 3007,
     3010, 3014, 3018, 3019, 3020, 3021, 3021, 3022, 3023, 3023,
     3023, 3024, 3025, 3026, 3026, 3026, 3026, 3026, 3026, 3027,
     3027, 3027, 3030, 3030, 3030, 3030, 3034, 3034, 3034, 3035,
     3035, 3035, 3035, 3036, 3037, 3041, 3042, 3043, 3044, 3044,
     3044, 3048, 3048, 3048, 3048, 3049, 3049, 3050, 3051, 3051,
     3051, 3051, 3051, 3051, 3052, 3053, 3054, 3055, 3055, 3055,
     3055, 3056, 3057, 3058, 3059, 3060, 3061, 3062, 3063, 3064,
     3064, 3064, 3065, 3065, 3066, 3066, 3067, 3068, 3069, 3070,

     3070, 3070, 3071, 3072, 3073, 3074, 3075, 3076, 3076, 3076,
     3076, 3078, 3080, 3081, 3081, 3082, 3083, 3086, 3089, 3092,
     3092, 3092, 3093, 3093, 3093, 3096, 3096, 3096, 3096, 3097,
     3098, 3098, 3098, 3098, 3098, 3098, 3098, 3098, 3098, 3098,
     3098, 3099, 3100, 3101, 3101, 3101, 3101, 3101, 3101, 3101,
     3101, 3101, 3101, 3101, 3101, 3101, 3101, 3101, 3101, 3101,
     3101, 3101, 3101, 3101, 3101, 3101, 3102, 3102, 3102, 3102,
     3102, 3102, 3102, 3103, 3104, 3105, 3106, 3106, 3106, 3107,
     3107, 3107, 3108, 3109, 3110, 3110, 3111, 3112, 3112, 3112,
     3113, 3113, 3114, 3115, 3116, 3117, 3118, 3119, 3119, 3120,

     3121, 3122, 3122, 3122, 3123, 3124, 3125, 3126, 3127, 3128,
     3129, 3130, 3131, 3132, 3133, 3134, 3135, 3136, 3137, 3138,
     3139, 3140, 3141, 3142, 3143, 3144, 3145, 3146, 3147, 3148,
     3149, 3150, 3151, 3152, 3153, 3154, 3156, 3158, 3159, 3159,
     3159, 3159, 3159, 3159, 3160, 3160, 3160, 3161, 3161, 3161,
     3162, 3163, 3163, 3164, 3164, 3165, 3166, 3167, 3168, 3169,
     3170, 3171, 3172, 3172, 3172, 3172, 3172, 3172, 3172, 3172,
     3172, 3172, 3173, 3174, 3175, 3175, 3176, 3177, 3178, 3179,
     3180, 3181, 3182, 3183, 3184, 3185, 3186, 3186, 3186, 3187,
     3188, 3190, 3191, 3191, 3192, 3193, 3193, 3193, 3195, 3197,

     3197, 3198, 3198, 3198, 3199, 3200, 3200, 3201, 3201, 3202,
     3202, 3202, 3202, 3202, 3203, 3203, 3203, 3204, 3204, 3205,
     3206, 3207, 3207, 3207, 3207, 3209, 3211, 3211, 3212, 3212,
     3212, 3213, 3214, 3216, 3218, 3219, 3219, 3219, 3219, 3220,
     3222, 3224, 3225, 3227, 3228, 3229, 3229, 3230, 3230, 3231,
     3232, 3232, 3233, 3235, 3238, 3238, 3239, 3239, 3240, 3241,
     3243, 3244, 3245, 3247, 3249, 3250, 3252, 3254, 3255, 3256,
     3257, 3258, 3258, 3258, 3258, 3259, 3260, 3261, 3263, 3265,
     3266, 3267, 3268, 3269, 3269, 3270, 3270, 3270, 3270, 3270,
     3272, 3272, 3274, 3274, 3274, 3274, 3275, 3276, 3276, 3276,

     3276, 3276, 3276, 3276, 3277, 3277, 3277, 3277, 3278, 3279,
     3280, 3281, 3282, 3283, 3285, 3287, 3288, 3289, 3289, 3290,
     3291, 3293, 3295, 3296, 3296, 3296, 3297, 3298, 3299, 3300,
     3301, 3303, 3305, 3305, 3305, 3305, 3305, 3305, 3305, 3305,
     3305, 3305, 3306, 3307, 3308, 3308, 3308, 3309, 3310, 3311,
     3312, 3312, 3312, 3312, 3312, 3313, 3314, 3315, 3316, 3316,
     3316, 3317, 3318, 3319, 3320, 3321, 3322, 3323, 3323, 3323,
     3323, 3323, 3324, 3324, 3324, 3325, 3325, 3325, 3325, 3326,
     3327, 3328, 3328, 3329, 3330, 3331, 3331, 3331, 3331, 3331,
     3331, 3332, 3332, 3332, 3333, 3333, 3334, 3334, 3334, 3334,

     3335, 3336, 3337, 3337, 3338, 3339, 3340, 3340, 3340, 3340,
     3340, 3342, 3344, 3345, 3346, 3347, 3348, 3349, 3349, 3350,
     3352, 3354, 3355, 3356, 3358, 3360, 3361, 3362, 3362, 3362,
     3364, 3366, 3367, 3367, 3367, 3368, 3368, 3368, 3369, 3369,
     3369, 3370, 3370, 3371, 3372, 3373, 3374, 3374, 3375, 3375,
     3375, 3376, 3376, 3377, 3378, 3379, 3380, 3381, 3382, 3383,
     3385, 3387, 3388, 3389, 3390, 3391, 3393, 3393, 3393, 3394,
     3395, 3396, 3397, 3399, 3401, 3401, 3401, 3401, 3401, 3401,
     3401, 3401, 3401, 3401, 3401, 3402, 3402, 3402, 3403, 3404,
     3405, 3406, 3406, 3406, 3407, 3408, 3409, 3409, 3409, 3409,

     3409, 3409, 3410, 3410, 3411, 3412, 3413, 3413, 3414, 3414,
     3414, 3415, 3416, 3417, 3418, 3419, 3419, 3419, 3420, 3420,
     3420, 3420, 3420, 3420, 3420, 3421, 3421, 3421, 3422, 3422,
     3423, 3423, 3423, 3423, 3423, 3423, 3424, 3424, 3424, 3424,
     3424, 3425, 3425, 3425, 3426, 3427, 3428, 3429, 3430, 3430,
     3431, 3433, 3435, 3436, 3437, 3437, 3437, 3437, 3437, 3437,
     3437, 3437, 3437, 3437, 3438, 3438, 3438, 3439, 3439, 3442,
     3443, 3444, 3446, 3448, 3448, 3448, 3448, 3449, 3450, 3451,
     3451, 3451, 3451, 3451, 3454, 3457, 3457, 3458, 3458, 3458,
     3459, 3459, 3463, 3463, 3463, 3463, 3465, 3465, 3465, 3467,

     3467, 3467, 3467, 3468, 3469, 3470, 3471, 3472, 3472, 3472,
     3472, 3473, 3473, 3475, 3477, 3477, 3477, 3478, 3478, 3479,
     3479, 3480, 3480, 3480, 3480, 3480, 3480, 3480, 3481, 3481,
     3481, 3481, 3481, 3481, 3481, 3482, 3483, 3483, 3483, 3483,
     3483, 3483, 3483, 3483, 3483, 3483, 3483, 3483, 3483, 3483,
     3483, 3483, 3483, 3483, 3483, 3483, 3483, 3483, 3483, 3483,
     3483, 3483, 3483, 3483, 3483, 3483, 3483, 3483, 3483, 3484,
     3484, 3484, 3484, 3485, 3486, 3486, 3486, 3486, 3486, 3486,
     3486, 3486, 3486, 3486, 3487, 3487, 3487, 3487, 3488, 3488,
     3488, 3489, 3489, 3489, 3489, 3489, 3490, 3490, 3491, 3492,

     3493, 3494, 3495, 3496, 3497, 3498, 3499, 3500, 3501, 3502,
     3502, 3502, 3503, 3504, 3505, 3506, 3507, 3508, 3509, 3510,
     3511, 3512, 3513, 3514, 3515, 3516, 3517, 3518, 3519, 3520,
     3521, 3522, 3523, 3524, 3525, 3526, 3527, 3528, 3529, 3530,
     3531, 3532, 3533, 3534, 3535, 3536, 3537, 3538, 3539, 3540,
     3541, 3542, 3542, 3542, 3542, 3543, 3543, 3544, 3544, 3545,
     3545, 3545, 3545, 3545, 3545, 3545, 3545, 3545, 3545, 3545,
     3546, 3546, 3546, 3547, 3547, 3548, 3549, 3550, 3552, 3553,
     3554, 3555, 3556, 3557, 3558, 3558, 3559, 3559, 3561, 3562,
     3563, 3563, 3564, 3564, 3564, 3565, 3566, 3566, 3567, 3568,

     3568, 3568, 3568, 3568, 3569, 3570, 3571, 3571, 3571, 3572,
     3572, 3572, 3573, 3573, 3573, 3574, 3574, 3574, 3574, 3575,
     3576, 3577, 3577, 3578, 3579, 3580, 3580, 3581, 3581, 3581,
     3582, 3583, 3583, 3583, 3583, 3583, 3584, 3585, 3585, 3585,
     3586, 3586, 3587, 3588, 3588, 3589, 3589, 3590, 3590, 3590,
     3590, 3590, 3590, 3590, 3590, 3590, 3590, 3590, 3590, 3590,
     3590, 3591, 3592, 3593, 3593, 3593, 3593, 3593, 3593, 3593,
     3594, 3594, 3594, 3594, 3594, 3594, 3594, 3594, 3594, 3594,
     3595, 3596, 3596, 3596, 3597, 3597, 3598, 3599, 3599, 3599,
     3600, 3600, 3601, 3601, 3601, 3601, 3601, 3602, 3603, 3603,

     3603, 3604, 3604, 3604, 3604, 3605, 3605, 3605, 3605, 3606,
     3606, 3606, 3606, 3607, 3607, 3607, 3608, 3608, 3608, 3608,
     3608, 3609, 3609, 3609, 3609, 3609, 3609, 3609, 3610, 3610,
     3610, 3610, 3610, 3610, 3610, 3610, 3611, 3611, 3612, 3612,
     3612, 3612, 3613, 3614, 3615, 3616, 3616, 3616, 3616, 3617,
     3617, 3618, 3618, 3618, 3618, 3618, 3619, 3620, 3620, 3620,
     3620, 3620, 3621, 3621, 3621, 3621, 3621, 3621, 3622, 3623,
     3623, 3623, 3623, 3624, 3625, 3625, 3628, 3629, 3629, 3631,
     3631, 3633, 3635, 3636, 3637, 3638, 3639, 3640, 3640, 3641,
     3642, 3642, 3642, 3642, 3642, 3643, 3645, 3646, 3647, 3647,

     3647, 3647, 3647, 3647, 3647, 3647, 3648, 3648, 3648, 3648,
     3649, 3650, 3650, 3650, 3650, 3650, 3650, 3650, 3650, 3650,
     3650, 3650, 3650, 3650, 3650, 3650, 3650, 3650, 3650, 3650,
     3650, 3650, 3650, 3650, 3650, 3650, 3650, 3650, 3650, 3650,
     3650, 3650, 3650, 3650, 3650, 3650, 3650, 3650, 3650, 3650,
     3650, 3650, 3650, 3650, 3650, 3650, 3650, 3650, 3650, 3650,
     3650, 3650, 3651, 3651, 3651, 3651, 3651, 3651, 3651, 3651,
     3652, 3653, 3654, 3655, 3655, 3655, 3656, 3657, 3658, 3659,
     3660, 3660, 3660, 3660, 3660, 3661, 3662, 3663, 3664, 3665,
     3666, 3667, 3668, 3669, 3670, 3671, 3672, 3673, 3674, 3675,

     3676, 3677, 3678, 3679, 3680, 3681, 3682, 3683, 3684, 3685,
     3686, 3687, 3688, 3689, 3690, 3691, 3692, 3693, 3694, 3695,
     3696, 3697, 3698, 3699, 3700, 3700, 3701, 3702, 3703, 3704,
     3705, 3706, 3707, 3708, 3709, 3710, 3711, 3711, 3711, 3713,
     3715, 3715, 3715, 3716, 3716, 3716, 3716, 3716, 3716, 3716,
     3717, 3718, 3719, 3720, 3721, 3722, 3723, 3724, 3725, 3726,
     3726, 3726, 3728, 3729, 3730, 3730, 3731, 3731, 3731, 3731,
     3731, 3732, 3733, 3733, 3734, 3734, 3734, 3734, 3734, 3735,
     3736, 3736, 3737, 3738, 3739, 3740, 3741, 3742, 3743, 3743,
     3743, 3744, 3745, 3745, 3746, 3746, 3746, 3746, 3746, 3746,

     3746, 3746, 3747, 3747, 3748, 3749, 3749, 3750, 3750, 3750,
     3750, 3750, 3751, 3751, 3752, 3752, 3752, 3752, 3752, 3753,
     3753, 3753, 3754, 3755, 3755, 3755, 3756, 3756, 3756, 3757,
     3757, 3757, 3758, 3758, 3758, 3759, 3759, 3760, 3761, 3761,
     3761, 3762, 3762, 3762, 3762, 3762, 3762, 3762, 3762, 3762,
     3762, 3762, 3762, 3763, 3763, 3763, 3763, 3763, 3763, 3763,
     3764, 3765, 3766, 3767, 3767, 3768, 3768, 3768, 3768, 3768,
     3768, 3768, 3768, 3768, 3768, 3768, 3768, 3769, 3770, 3772,
     3772, 3772, 3773, 3773, 3773, 3773, 3774, 3776, 3776, 3776,
     3776, 3776, 3776, 3776, 3776, 3777, 3778, 3779, 3780, 3780,

     3780, 3780, 3780, 3780, 3780, 3780, 3780, 3780, 3780, 3780,
     3780, 3780, 3780, 3780, 3780, 3780, 3780, 3780, 3780, 3780,
     3780, 3780, 3780, 3780, 3780, 3780, 3780, 3780, 3780, 3780,
     3780, 3780, 3780, 3780, 3780, 3780, 3780, 3780, 3780, 3780,
     3781, 3781, 3781, 3781, 3781, 3781, 3781, 3781, 3781, 3781,
     3782, 3782, 3782, 3782, 3782, 3783, 3783, 3784, 3784, 3785,
     3786, 3787, 3788, 3789, 3790, 3791, 3792, 3793, 3794, 3795,
     3796, 3797, 3798, 3799, 3800, 3801, 3802, 3803, 3804, 3805,
     3807, 3809, 3810, 3811, 3812, 3813, 3814, 3815, 3816, 3817,
     3818, 3819, 3820, 3821, 3822, 3823, 3824, 3825, 3826, 3827,

     3828, 3829, 3830, 3831, 3831, 3831, 3832, 3833, 3834, 3835,
     3836, 3837, 3838, 3839, 3840, 3841, 3842, 3843, 3844, 3844,
     3844, 3844, 3844, 3844, 3844, 3844, 3844, 3845, 3847, 3848,
     3849, 3850, 3851, 3852, 3852, 3853, 3855, 3856, 3858, 3858,
     3858, 3858, 3859, 3860, 3860, 3860, 3861, 3862, 3863, 3864,
     3865, 3867, 3868, 3869, 3870, 3871, 3871, 3871, 3871, 3871,
     3871, 3871, 3871, 3871, 3871, 3871, 3873, 3874, 3874, 3874,
     3874, 3875, 3875, 3875, 3875, 3875, 3875, 3876, 3876, 3876,
     3876, 3876, 3876, 3876, 3876, 3876, 3876, 3876, 3876, 3876,
     3876, 3876, 3877, 3877, 3877, 3877, 3877, 3877, 3877, 3877,

     3877, 3877, 3877, 3877, 3877, 3877, 3877, 3877, 3878, 3878,
     3878, 3880, 3881, 3882, 3882, 3882, 3882, 3882, 3882, 3882,
     3882, 3882, 3882, 3882, 3882, 3882, 3882, 3882, 3883, 3885,
     3886, 3886, 3888, 3888, 3888, 3888, 3888, 3888, 3889, 3890,
     3890, 3890, 3890, 3890, 3890, 3890, 3890, 3890, 3890, 3890,
     3890, 3890, 3890, 3890, 3891, 3891, 3891, 3891, 3891, 3891,
     3891, 3891, 3891, 3891, 3891, 3891, 3891, 3891, 3891, 3891,
     3891, 3891, 3891, 3891, 3891, 3891, 3891, 3891, 3891, 3891,
     3891, 3891, 3891, 3891, 3891, 3891, 3891, 3892, 3892, 3894,
     3895, 3896, 3897, 3898, 3899, 3900, 3901, 3902, 3903, 3904,

     3905, 3906, 3907, 3908, 3909, 3910, 3910, 3911, 3912, 3912,
     3912, 3913, 3914, 3915, 3916, 3917, 3918, 3919, 3920, 3921,
     3922, 3923, 3924, 3925, 3926, 3927, 3928, 3929, 3930, 3931,
     3932, 3933, 3933, 3933, 3934, 3935, 3936, 3938, 3939, 3940,
     3941, 3942, 3943, 3944, 3944, 3945, 3946, 3947, 3947, 3947,
     3948, 3948, 3948, 3948, 3948, 3948, 3949, 3950, 3951, 3952,
     3954, 3954, 3955, 3956, 3957, 3959, 3960, 3960, 3961, 3962,
     3963, 3964, 3965, 3966, 3967, 3968, 3968, 3968, 3968, 3968,
     3969, 3969, 3970, 3970, 3971, 3971, 3971, 3971, 3971, 3971,
     3971, 3971, 3971, 3971, 3971, 3971, 3971, 3971, 3971, 3971,

     3971, 3971, 3971, 3971, 3971, 3971, 3972, 3972, 3973, 3973,
     3975, 3975, 3975, 3975, 3975, 3975, 3975, 3976, 3976, 3976,
     3976, 3976, 3976, 3976, 3976, 3977, 3977, 3978, 3979, 3981,
     3981, 3981, 3981, 3982, 3982, 3983, 3984, 3984, 3984, 3984,
     3984, 3984, 3984, 3984, 3984, 3984, 3984, 3984, 3985, 3985,
     3985, 3985, 3986, 3986, 3986, 3986, 3986, 3986, 3986, 3986,
     3986, 3986, 3986, 3986, 3986, 3986, 3986, 3986, 3986, 3986,
     3986, 3986, 3987, 3987, 3987, 3988, 3988, 3988, 3988, 3988,
     3989, 3989, 3990, 3991, 3992, 3993, 3994, 3995, 3996, 3997,
     3998, 3999, 4000, 4001, 4002, 4003, 4003, 4003, 4003, 4003,

     4004, 4004, 4004, 4005, 4006, 4007, 4007, 4007, 4008, 4009,
     4010, 4011, 4012, 4013, 4013, 4014, 4015, 4016, 4017, 4018,
     4019, 4020, 4021, 4022, 4022, 4023, 4024, 4025, 4025, 4025,
     4026, 4027, 4028, 4029, 4030, 4031, 4032, 4033, 4033, 4033,
     4034, 4035, 4036, 4036, 4036, 4036, 4036, 4037, 4037, 4037,
     4038, 4039, 4039, 4040, 4041, 4042, 4043, 4045, 4046, 4046,
     4047, 4048, 4049, 4050, 4051, 4051, 4051, 4051, 4051, 4051,
     4051, 4052, 4052, 4052, 4053, 4053, 4053, 4053, 4054, 4054,
     4054, 4054, 4054, 4054, 4054, 4054, 4054, 4054, 4054, 4054,
     4055, 4056, 4056, 4056, 4056, 4056, 4056, 4056, 4056, 4057,

     4057, 4057, 4057, 4057, 4057, 4057, 4057, 4059, 4059, 4060,
     4060, 4061, 4062, 4063, 4063, 4063, 4063, 4063, 4063, 4063,
     4063, 4063, 4063, 4063, 4063, 4063, 4063, 4063, 4063, 4064,
     4064, 4065, 4065, 4065, 4065, 4066, 4066, 4066, 4067, 4067,
     4067, 4067, 4067, 4067, 4067, 4068, 4068, 4068, 4068, 4069,
     4070, 4070, 4070, 4070, 4070, 4070, 4070, 4071, 4072, 4073,
     4074, 4075, 4076, 4077, 4078, 4080, 4081, 4082, 4083, 4084,
     4085, 4085, 4085, 4086, 4087, 4087, 4087, 4088, 4089, 4089,
     4089, 4089, 4089, 4089, 4092, 4093, 4094, 4095, 4096, 4097,
     4098, 4098, 4099, 4100, 4100, 4101, 4102, 4103, 4104, 4105,

     4106, 4107, 4108, 4109, 4109, 4109, 4110, 4110, 4111, 4111,
     4112, 4112, 4112, 4113, 4114, 4114, 4114, 4114, 4114, 4116,
     4118, 4120, 4122, 4123, 4123, 4124, 4126, 4127, 4128, 4128,
     4129, 4129, 4130, 4130, 4130, 4131, 4131, 4131, 4132, 4132,
     4132, 4132, 4132, 4132, 4132, 4132, 4132, 4132, 4132, 4132,
     4132, 4133, 4133, 4133, 4133, 4134, 4134, 4134, 4134, 4134,
     4134, 4136, 4137, 4137, 4138, 4139, 4139, 4139, 4139, 4139,
     4139, 4139, 4140, 4140, 4140, 4140, 4140, 4141, 4141, 4141,
     4141, 4141, 4141, 4141, 4142, 4142, 4143, 4143, 4143, 4144,
     4144, 4144, 4144, 4144, 4144, 4144, 4144, 4144, 4145, 4145,

     4145, 4145, 4146, 4147, 4148, 4149, 4150, 4151, 4152, 4153,
     4154, 4155, 4156, 4157, 4157, 4157, 4158, 4159, 4160, 4160,
     4160, 4160, 4160, 4162, 4163, 4164, 4165, 4165, 4166, 4167,
     4168, 4169, 4170, 4171, 4172, 4173, 4174, 4175, 4175, 4175,
     4176, 4177, 4177, 4177, 4178, 4178, 4178, 4179, 4179, 4180,
     4181, 4182, 4183, 4184, 4185, 4187, 4188, 4188, 4189, 4190,
     4191, 4192, 4193, 4194, 4194, 4194, 4194, 4195, 4196, 4197,
     4197, 4197, 4197, 4197, 4197, 4197, 4197, 4197, 4198, 4198,
     4198, 4198, 4198, 4198, 4198, 4200, 4201, 4202, 4203, 4203,
     4203, 4203, 4204, 4204, 4204, 4204, 4204, 4205, 4205, 4205,

     4206, 4207, 4207, 4207, 4208, 4208, 4208, 4208, 4208, 4209,
     4209, 4209, 4209, 4210, 4210, 4211, 4212, 4213, 4214, 4215,
     4216, 4218, 4219, 4220, 4220, 4220, 4221, 4222, 4223, 4223,
     4223, 4223, 4223, 4224, 4225, 4226, 4227, 4228, 4230, 4231,
     4233, 4235, 4236, 4237, 4238, 4238, 4239, 4240, 4241, 4242,
     4243, 4244, 4245, 4245, 4246, 4246, 4246, 4246, 4246, 4248,
     4249, 4250, 4252, 4253, 4253, 4253, 4253, 4254, 4255, 4256,
     4257, 4257, 4257, 4257, 4257, 4257, 4257, 4258, 4258, 4258,
     4258, 4258, 4258, 4261, 4262, 4263, 4263, 4263, 4264, 4264,
     4265, 4266, 4266, 4266, 4267, 4268, 4269, 4270, 4270, 4270,

     4270, 4270, 4271, 4271, 4271, 4271, 4271, 4272, 4273, 4274,
     4275, 4276, 4276, 4276, 4276, 4277, 4277, 4277, 4278, 4278,
     4279, 4280, 4281, 4281, 4282, 4283, 4284, 4285, 4286, 4287,
     4288, 4289, 4290, 4290, 4290, 4290, 4292, 4293, 4294, 4294,
     4294, 4294, 4294, 4294, 4294, 4294, 4294, 4294, 4295, 4296,
     4297, 4297, 4298, 4299, 4299, 4299, 4299, 4299, 4300, 4300,
     4300, 4300, 4300, 4301, 4302, 4302, 4302, 4302, 4302, 4302,
     4302, 4303, 4304, 4305, 4306, 4307, 4308, 4309, 4309, 4310,
     4311, 4312, 4312, 4312, 4314, 4315, 4315, 4315, 4316, 4316,
     4317, 4317, 4317, 4318, 4319, 4319, 4319, 4319, 4319, 4319,

     4319, 4319, 4319, 4320, 4321, 4322, 4322, 4322, 4323, 4323,
     4324, 4325, 4326, 4327, 4328, 4329, 4329, 4331, 4332, 4332,
     4333, 4334, 4335, 4336, 4336, 4336, 4336, 4337, 4337, 4337,
     4338, 4338, 4338, 4339, 4340, 4341, 4341, 4343, 4344, 4344,
     4345, 4346, 4346, 4346, 4346, 4347, 4347, 4347, 4348, 4348,
     4349, 4349, 4351, 4352, 4352, 4353, 4354, 4354, 4354, 4354,
     4355, 4356, 4357, 4358, 4358, 4359, 4359, 4361, 4362, 4362,
     4363, 4364, 4365, 4366, 4367, 4367, 4367, 4369, 4370, 4371,
     4372, 4373, 4373, 4373, 4373, 4375, 4376, 4377, 4378, 4378,
     4380, 4381, 4382, 4383, 4383, 4385, 4386, 4387, 4388, 4388,

     4388, 4389, 4391, 4392, 4393, 4394, 4396, 4397, 4398, 4399,
     4401, 4402, 4403, 4404, 4406, 4407, 4408, 4409, 4411, 4412,
     4413, 4414, 4416, 4417, 4418, 4419, 4421, 4422, 4423, 4424,
     4426, 4427, 4428, 4429, 4431, 4432, 4433, 4434, 4436, 4437,
     4438, 4439, 4441, 4442, 4443, 4444, 4446, 4447, 4448, 4449,
     4451, 4452, 4453, 4454, 4456, 4457, 4458, 4459, 4461, 4462,
     4463, 4464, 4466, 4467, 4468, 4469, 4471, 4472, 4473, 4474,
     4476, 4477, 4478, 4479, 4481, 4482, 4483, 4484, 4486, 4487,
     4488, 4489, 4491, 4492, 4493, 4494, 4496, 4497, 4498, 4499,
     4501, 4502, 4503, 4504, 4506, 4507, 4508, 4509, 4511, 4512,

     4513, 4514, 4516, 4517, 4518, 4519, 4521, 4522, 4523, 4524,
     4526, 4527, 4528, 4529, 4531, 4532, 4533, 4534, 4536, 4537,
     4538, 4539, 4541, 4542, 4543, 4544, 4546, 4547, 4548, 4549,
     4551, 4552, 4553, 4554, 4556, 4557, 4558, 4559, 4561, 4562,
     4563, 4564, 4566, 4567, 4568, 4569, 4571, 4572, 4573, 4574,
     4576, 4577, 4578, 4579, 4581, 4582, 4583, 4584, 4586, 4587,
     4588, 4589, 4591, 4592, 4593, 4594, 4596, 4597, 4598, 4599,
     4601, 4602, 4603, 4604, 4606, 4607, 4608, 4609, 4611, 4612,
     4613, 4614, 4616, 4617, 4618, 4619, 4621, 4622, 4623, 4624,
     4626, 4627, 4628, 4629, 4631, 4632, 4633, 4634, 4636, 4637,

     4638, 4639, 4641, 4642, 4643, 4644, 4646, 4647, 4648, 4649,
     4651, 4652, 4653, 4654, 4656, 4657, 4658, 4659, 4661, 4662,
     4663, 4664, 4666, 4667, 4668, 4669, 4671, 4672, 4673, 4674,
     4676, 4677, 4678, 4679, 4681, 4682, 4683, 4684, 4686, 4687,
     4687, 4688, 4688
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    4,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    5,    6,    7,    8,    9,   10,   11,   12,   13,
       14,   15,   16,   17,   18,   19,   20,   21,   22,   23,
       24,   24,   24,   24,   24,   25,   25,   26,   27,   28,
       29,   30,   31,   32,   33,   34,   35,   36,   37,   38,
       39,   38,   40,   41,   38,   42,   38,   43,   44,   45,
       46,   47,   48,   49,   38,   38,   50,   38,   51,   38,
       52,   53,   54,   55,   56,    1,   57,   58,   59,   60,

       61,   62,   63,   64,   65,   38,   66,   67,   68,   69,
       70,   71,   72,   73,   74,   75,   76,   77,   78,   79,
       80,   38,   81,    1,   82,   83,    1,   84,   84,   84,
       84,   84,   84,   84,   84,   84,   84,   84,   84,   84,
       84,   84,   84,   84,   84,   84,   84,   84,   84,   84,
       84,   84,   84,   84,   84,   84,   84,   84,   84,   84,
       84,   84,   84,   84,   84,   84,   84,   84,   84,   84,
       84,   84,   84,   84,   84,   84,   84,   84,   84,   84,
       84,   84,   84,   84,   84,   84,   84,   84,   84,   84,
       84,   84,   84,   84,   84,   84,   84,   84,   84,   84,

       84,   84,   84,   84,   84,   84,   84,   84,   84,   84,
       84,   84,   84,   84,   84,   84,   84,   84,   84,   84,
       84,   84,   84,   84,   84,   84,   84,   84,   84,   84,
       84,   84,   84,   84,   84,   84,   84,   84,   84,   84,
       84,   84,   84,   84,   84,   84,   84,   84,   84,   84,
       84,   84,   84,   84,   84
    } ;

static yyconst flex_int32_t yy_meta[85] =
    {   0,
        1,    2,    3,    4,    2,    5,    6,    7,    8,    1,
        9,   10,   11,   12,   13,    1,   14,    1,   15,   16,
       17,   17,   17,   17,   17,   18,   19,   20,   21,   22,
        1,   23,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   25,   26,   27,   28,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       29,   30,   31,   32
    } ;

static yyconst flex_int16_t yy_base[4497] =
    {   0,
        0,    2,   22,    0,  105,  116,  169,    0,  253,    0,
      337,    0,  421,    0,  503,  505,  557,    0,  119,  519,
      641,    0,  723,  725,  779,    0,  863,    0,  946,  957,
      967,  978,  134,  739, 1059,    0,  741,  996, 1143,    0,
     1227,    0,  533, 1033, 1309, 1311, 1337, 1356, 1006, 1371,
     1374, 1390, 1471,    0, 1392, 1415, 1553, 1556, 1567, 1581,
     1612, 1623, 1663, 1694, 1776,    0, 1860,    0, 1943, 1954,
     1965, 2001, 1626, 1649, 1670, 1704, 2007, 2036, 2054, 2060,
     2087, 2093,  145,  755, 1429, 1445, 2103, 2109, 2119, 2125,
     1722, 1740, 2145, 2156, 1743, 2175, 2201, 2215, 1980, 2182,

     1418, 2230, 2250,    0, 2332, 2334, 2353, 2364, 2375, 2414,
     2467,    0, 2551,    0, 2635,    0, 2719,    0, 2801, 2803,
     2424, 2435, 2385, 2442, 2885,    0, 2817, 2819, 2969,    0,
     2833, 2835, 3053,    0, 2849, 3135, 3155,    0, 3237, 3240,
     3255, 3258, 3284, 3360, 3261, 3282, 3438,    0, 3522,    0,
     3298, 3363, 3606,    0, 3690,    0, 3773, 3854, 3936,    0,
     3308, 3319, 3330, 3378, 4020,    0, 3388, 3799, 3810, 3884,
     4104,    0, 3381, 3776, 4186, 4189, 3829, 3913, 4209, 4223,
     3857, 3887, 4253,    0, 4337,    0, 4419, 4421, 4435, 4437,
     4451, 4453, 4472, 4474, 4488, 4502, 4516, 4523, 4526, 4541,

     4544, 4555, 4566, 4580, 4636, 4710, 4785,    0, 4604, 4655,
     4670, 4673, 4729, 4748, 4867, 4870, 4569, 4873, 4888, 4891,
     4688, 4763, 4212, 4920, 4898, 4950, 4956, 4966, 4972, 4982,
     5035,    0, 4607, 5119, 5203,    0, 4926, 5287, 5369, 5371,
     5442,    0, 5526,    0, 5608, 5610, 5680,    0, 5763, 5774,
     4993, 5003, 5385, 5387, 5401, 5407, 5624, 5793, 5803, 5856,
    11621,29848,29848,29848,29848,29848,    1,    0,  154,29848,
     1027, 1404,29848,29848,29848,   96,   14, 1684, 1976, 2846,
      769, 4626, 4701,11592,29848, 5638,  133, 1047, 2167,  516,
     1735, 1459, 5876,29848,29848,  736,29848,  114,11568,29848,

    11531, 2398, 5870, 5887,29848,29848,29848,29848,    0,29848,
      125,29848,29848,    0,    0,  515,  969,29848,11536,    0,
    29848,    0,29848,29848,29848,29848,29848,29848,  135,11560,
     2194,29848,  158,29848,29848,29848,    0,29848,  494,29848,
        0,29848,29848,29848,29848,29848,29848,  509,29848,29848,
    29848,29848,29848,    0,29848,  531,    0,29848, 5902, 5983,
     6066,    0,29848,11556,29848, 2073, 5824,11572,  750,29848,
    29848,29848,29848,29848,29848,  714,11511,  681,11505,29848,
    11515,29848, 2814, 3843,29848,29848,29848,29848,29848, 4724,
      745, 5382, 6146, 3898, 5643, 1765, 1328, 5917,   33,    0,

     5927, 1411, 5656,29848,  937,11558,11540, 5913,  936,29848,
    11528, 3355, 5942, 6074,11498,29848, 6078, 6082, 6086, 6094,
     6159, 6113, 6140, 6171, 6222, 6227, 6239, 6254, 6258, 6267,
     6271, 6286, 6299, 6314,29848,    0,29848,    0,    0,    0,
      948,  476, 5947, 5952, 2455, 6346,11524, 6354, 5961, 6303,
     6358, 2083,    0,29848, 6372,  956,29848,29848,    0,29848,
      958,29848,29848,29848,29848, 6383,29848, 2345, 5785,29848,
    29848,29848,29848,29848, 2241,  981,29848,29848,29848,29848,
    29848,29848,  987,29848,29848,29848,29848,29848,  995,29848,
    29848, 6428,    0,    0,29848, 1024, 6090,    0,11490,11476,

    11481,11464,11483,11468,  663,11453,29848,29848,29848,29848,
    29848, 5427, 1300,29848,11489,29848,29848,29848,29848, 1312,
    29848,29848,    0, 3926, 2876, 3148,29848,  987,11455, 1328,
    11479,11494,29848, 3848,29848,  993,29848,    0,29848, 6391,
     6395, 6178, 6402, 4243, 6432,11471, 6420,    0, 1589,29848,
    29848, 1041,11429, 1332,11446,11466,29848,29848, 6440, 1598,
     1053,29848,29848, 1347,  140, 6445,29848,29848,29848,29848,
    29848,11448, 1351,    0,29848,29848,29848,29848, 1360,29848,
    29848,29848,11460, 1352,29848,29848,29848, 1425, 1455,    0,
     1575,    0,    0,    0,11428, 1431, 1343,29848, 1350, 1386,

     1559, 1639, 1619,29848,29848,29848,29848,29848, 4776, 4912,
    29848,29848,29848, 1603,29848,29848,29848,29848,29848,29848,
    29848,    0,29848,    0,    0, 1621,29848,29848,    0,29848,
        0,    0,    0, 1630,    0,29848,    0,11377,11376,29848,
    29848,29848,29848,29848, 1638,29848,29848, 6186, 6451,29848,
    29848,29848, 1659,11386,    0, 5024, 5028,    0,    0,    0,
    11415,29848, 1661, 1656,    0,29848,  111,29848,    0, 6133,
        0,29848, 6124, 6459, 6464,    0,    0,29848,29848,29848,
    29848,29848, 1698,11374,11363,  105,11359,29848,29848,29848,
    29848,29848,11412,29848,29848, 1712,    0, 1752,29848,29848,

    29848,29848, 1932,29848,29848, 6468,29848,29848,    0,29848,
     6472, 1934, 6476,    0,29848,    0,29848,11403,    0,    0,
     1938,    0,29848, 1464, 5431,    0,29848,    0,    0,    0,
        0,    0,29848, 1945,    0,29848, 6191,29848, 6504,    0,
        0,    0,    0,    0, 1465, 1949,29848,29848,11335,11338,
    11344,11333,11341,  455,11332,11330,29848, 1576,    0,29848,
      526, 2000, 2014,    0,    0,29848,11345,11343,11343,11329,
        0,    0,    0,    0,29848, 6509, 6515,29848,29848,11317,
    29848,29848, 6520,11322, 1969, 6529,11323,11314,11312,11333,
    29848,29848, 5670, 6534, 6542, 6550, 2048,29848, 6555, 6569,

     6583, 6597,29848, 6611, 1979, 6615,29848, 6619,29848,29848,
    29848,29848,29848,29848,29848,29848, 1996,11310, 6623,29848,
     6635, 6639, 6643,29848,29848, 6653,29848, 1997,11310, 6664,
    29848,29848,29848,29848,29848, 6670, 2044,29848, 6678,11273,
        0, 5972, 6683,29848,29848,11273,29848, 6690, 2078,29848,
    29848,29848,29848,29848,29848,29848,29848, 2088,11289,    0,
        0,    0,29848,11288,29848,29848,29848,29848,29848,11293,
     2089,    0,29848,29848,29848,29848,29848,29848,29848,11290,
     2099,    0,29848,29848,    0,29848,29848,    0,11245,29848,
    29848, 2105,    0,29848,29848,    0,11244, 2159,29848,29848,

        0,29848,29848,    0,11242,29848,29848, 2196,    0,29848,
    29848,    0,11241, 2197,29848,29848, 1996,29848, 2018,29848,
    29848,29848,29848,29848,29848, 2210,29848, 6694, 6698,29848,
    29848,29848,29848,29848, 2211,11265,11175,11122,29848,29848,
    29848,29848,    0,11148, 2323,29848,    0,29848,29848,29848,
    29848,29848,29848, 6704, 2344,29848, 6709, 6716,29848,29848,
    29848,29848,29848, 6720, 2355,29848,    0,29848,29848,    0,
    29848, 2366,    0,29848,29848,    0,    0,29848,29848, 2376,
    29848,29848,    0,29848,    0,    0,    0,11180, 2384, 1508,
     2446, 6735,    0,29848,    0,    0,    0, 2394, 6262,29848,

    29848,29848,29848, 2405, 1496,    0,11184,    0,29848,29848,
    29848,29848, 2415,    0,    0,    0,11183,    0,29848,29848,
    29848,29848,29848, 2792,    0,    0,29848,29848,29848,29848,
     2813,29848,11117,29848, 6739, 6749,29848,29848,    0,29848,
     2815,29848, 6757,11135, 6761, 6773,    0, 6784,29848,29848,
    29848,29848, 3350, 2839,11117,29848, 6790, 6800, 6804,29848,
    29848, 6815,29848,29848,29848, 2847,11154, 6825,29848, 3248,
    29848,29848,29848, 2853, 2435,11109,11114,11089,29848,29848,
    29848,29848,29848,29848, 3124,29848,29848,29848,29848, 3125,
    11151, 3254,11143,11138,11119, 3320,    0, 3374,29848,    0,

        0,    0, 3126, 3226,  705, 6778, 6794, 3407, 3256, 3264,
        0,29848,    0,    0,29848,    0,11100, 3280,11094, 1659,
     3401, 6829,29848,29848, 2036, 2175,29848, 3419, 6861, 3288,
     1006, 1752,29848,11094, 6865, 6873, 6884,11070, 3312, 6892,
     6902, 6910, 6914, 6926,    0, 6945, 6950, 6972, 6980, 6984,
     6992, 7000,29848,29848, 7018,29848,29848, 3349, 7005, 7038,
     7046, 7062, 6939,11068,29848, 7066, 7074,11067, 7078, 7092,
     7100, 7105,    0, 7113, 7117, 1319, 3792, 7125,11023, 7133,
    29848, 7145, 7150, 7162,    0, 1596, 1970,    0, 3801,11076,
    11074, 3860,11071, 4457,11025,29848,    0,    0,29848, 7175,

    11052,29848, 3402,    0,    0,    0,    0, 7180, 7188, 7200,
     7208, 7212, 3790, 7281,    0, 7364, 7218, 7372, 7245, 7237,
     7376,29848, 7252,11056, 7380,11035,11050,11047,11002, 3873,
    10970, 3254,10976,10957,11003, 7244, 7384, 3358, 7390, 3367,
     7456, 7398, 4594,10988, 4866,10957,10943,10938,10921, 3852,
    10912, 2170,10906,10917,10895, 2275,10897, 4131,10889,  918,
    10866,10871, 4153, 7270, 7409, 7418, 7414,10868,10853, 7423,
     7439,    0, 7427,    0,29848,  533, 7481, 7535, 7464,10884,
     7549, 7495, 7553, 6577,    0,    0, 7567,10834,10830,29848,
        0, 7501, 7576, 7594, 7598, 7616, 7620, 7642, 7649,10866,

     7654,10839, 7662, 7669, 7681, 7701, 7708, 7713, 7717, 7728,
     7744, 7748, 7757, 7761, 7776, 7791, 7795, 7803, 7808, 7836,
     7844, 7849, 7876, 7882, 7886, 7890, 7895, 7923, 7928, 7933,
     7960, 7967, 7974, 7978,    0,    0,    0,10787,10791, 7940,
    10822, 8005, 8013, 8024, 8028,    0, 8036, 8051, 8046, 8063,
    29848, 8076, 4714, 4907,    0, 8080, 8088,    0, 8096, 8100,
     8112, 8140, 8119,10763,10749,10756,10736,10731,10725, 1636,
    10702,    0, 2204, 4752, 8125, 8133,    0,10697,10700,10682,
    10697,10691,10698,10676,10641,10649, 8145, 8149,29848,    0,
     8153, 8161, 4203,    0, 8165,10703, 8150, 8176,    0,10685,

    29848, 8180,10641, 8199, 8203, 8189, 8228,10677, 8232, 8236,
    10666, 8240, 8261,    0, 8269,    0, 8277, 8281, 8289,    0,
     4681, 8296,10674, 8287, 2226, 5648,10646,29848, 8320, 3795,
     4881, 4430,29848,29848,10666, 2163, 8324, 3824,29848,29848,
    29848,29848, 4540,10663,10661, 2188,10659, 2462,    0, 4618,
    10638,29848,29848,    0, 2049,29848, 2386, 3277, 3296,29848,
     8328,    0,    0,    0,    0,    0,    0,    0,    0,10587,
    10573, 8332,10581,10561,    0, 8343,29848,29848,29848,10564,
    10562,10568,  953,10618, 1709, 8347, 8351, 8356, 8370, 8374,
     8378, 8383, 8390, 8398,10550,    0,    0,10562,10545,10544,

    10539,10531,10598,29848, 3898, 8402, 4183,    0, 2799, 5814,
        0,    0,29848,    0,    0,    0, 4446, 8406,    0,    0,
        0,    0, 8411, 8419,10584, 8437, 8441,29848,    0, 4462,
        0,    0,10518,10520,10515,10500, 1354,10484,10484,10464,
    10469, 4515,  742,  999,10499,10493, 1570, 4575,    0,    0,
    10463, 1009,10461,10457,    0,    0,    0,    0,10480, 8426,
    29848, 8451, 8337,29848,29848,29848,29848, 8456, 8466, 8474,
     8488,29848, 8492, 4692,29848, 8497, 8511, 8525, 8539, 8543,
     8547,10437,10462, 8551, 8556,10454, 8564,10453, 8570, 8578,
        0, 8598,    0, 8606, 8610, 8618, 8623, 8636, 8643,29848,

    29848,29848,10409,29848,    0, 8648,10449, 8636, 8659, 4229,
     3793, 1985,29848,    0,    0,10429,10428,10423,29848,29848,
    29848,29848,29848,29848,29848,29848,    0,10430, 8644,    0,
        0,    0,10429, 8650,    0,10428, 8654,    0,10424, 8659,
     8682, 5398,29848, 8686,29848, 4743,10357,    0,10410, 8675,
        0, 8706,29848,29848,29848, 8710, 8718, 8726,    0,    0,
        0,29848,    0,    0,29848,    0,10343,10350, 5019, 8732,
     8736,    0,    0,    0,10343,10341, 4460,10335,10351,10334,
    10329,10318,10316, 4625,    0,    0,10372,    0,    0,    0,
        0,    0,10366,    0,    0,    0,10298, 8740, 8748, 8757,

    10313, 8761, 8765, 8781,29848, 8791,10312, 8786, 8807, 8815,
     8799, 8823, 8827,29848, 8839, 5837,    0, 6484,10338,10300,
     8843,10328, 8851, 8859,    0, 8868,    0, 8876, 8880, 8888,
     6880, 4940,10282,10280, 5396, 4669,10280,10273,10254,10317,
     4762, 5812,10299,10314,10306,    0, 5802,10248, 4410,29848,
    29848,29848, 1574,10234,10294,10226,10225, 4469,10219,10234,
    10233,10135,10125, 7010,10177,10167,29848, 4478, 5893,    0,
    29848,29848,29848, 6356,10111, 4895, 5922, 8892, 8896, 3874,
     2059,10151, 8906, 8913, 8933, 8949, 8953, 8940, 8962,    0,
     8971, 8979, 8985, 8997, 9009,29848,    0, 5892,29848,10152,

     9014,10106, 9023, 9029,10124, 1721,29848,    0,    0,10121,
     5841, 9041, 9054, 9058, 9066, 9083, 9097,    0,10128, 9101,
    10090,10081,10060,10059,10061,10047,10109,29848,10098, 9095,
     3917, 2118, 4431, 2124, 9128, 9109, 9135, 2802,10038, 5561,
    10042,10054,10013,10009,10021, 1697,10003, 9980, 9983, 4688,
     4432, 9960, 9961, 9941, 9947, 9930, 9936, 4467, 9945, 9932,
     9930, 1607, 9918, 9906, 9903, 9889, 9889, 9123, 9143, 9154,
     9896, 9890,    0, 9204, 9218, 9160, 9232, 9236, 9248, 9261,
     9924, 9905, 6232, 6958, 7555, 3349, 8056, 7869, 9240, 4152,
        0, 9265, 9866, 9858, 9275,29848, 9912, 9279, 9292, 9297,

     9304, 9316, 9323, 9328, 9341,29848, 9335, 9348, 9354, 9310,
     9843, 9394, 9398, 9402, 9407, 9412, 9439, 9443, 9449, 9453,
     9457, 9485, 9489, 9494, 9503, 9531, 9535, 9539, 9545, 9572,
     9577, 9581, 9585, 9591, 9618, 9622, 9627, 9635, 9654, 9666,
     9674, 9683, 9694, 9710, 9714, 9721, 9725, 9729, 9761, 9768,
     9773, 9846, 9832, 9362, 9756, 9800, 9613, 9786, 9788, 9795,
     9814, 9813, 9801, 9817, 9812, 9802, 9785, 9760, 9771,29848,
        0, 6333,29848, 9820, 9208, 9754, 9750, 9498, 9749, 9734,
     9725, 9713, 9741, 9724, 9829,29848, 9750, 9842, 9549, 9847,
     9767,29848, 9762, 9839, 9851,29848, 9862,    0,29848, 9688,

     9679, 9871, 9882, 9890, 9894,    0, 9898, 9725,29848, 9723,
     9905,29848, 4447, 3815, 9704, 4551, 4564, 9692, 9701, 9617,
     9633, 9625, 9614, 9613, 9589,    0, 2018, 9928, 9936,29848,
     9944, 9577, 9955, 9963, 9971,29848,29848, 9573, 9536,29848,
     9975, 9980, 9550, 9544, 9541, 2030,29848, 9526, 9467, 9450,
     9453, 9470, 9465, 9466, 9437, 9425, 9427, 9416, 9471, 9448,
     9442, 4485, 4955, 9426, 9427, 9413, 9409, 9390, 9425,29848,
     9424, 9974, 7871, 9985, 9352, 8214, 9986, 9350, 9371, 9366,
    29848, 9997,10006,10020,10024,29848,    0,10028,10038,29848,
     9396,29848, 9377,10024, 4640, 4641, 9359, 2378, 9376, 9366,

    29848, 9360,10037, 9322,29848, 9312,10041, 9310,29848, 9292,
    10045, 9291,29848, 9278,10058,10050, 5767, 9260, 9224, 9249,
    29848, 9248,10064, 9189, 9173, 9171, 9155,29848, 9160, 9151,
     9156, 9141, 9124, 9122,    0,29848, 9160,29848, 9158, 9097,
    10087,10091,10095,10103,10110, 9129, 9127, 9079,    0,10114,
     5633, 9060, 9052, 9063, 4645, 1623, 9055,    0,10197, 9049,
     9033,29848, 9027, 9018, 9014, 9006, 9011, 5956, 6155, 2111,
     4518, 9016,29848,29848,10122,10128,    0,10155,29848, 9050,
    29848, 4882,29848,10280,10284,29848,29848, 9034, 9040, 6549,
    10296,10160,10309, 9026,10168,10321,10325, 9029,10173, 8968,

     8982, 8954, 8944, 8932, 8993,29848,10162, 8976, 8963,10391,
    10329, 8898, 8873, 8872, 4525, 8874, 8857, 8888, 8851, 8850,
     8848, 8837, 8829, 8817, 8819, 8807, 8814, 8807, 8788, 8764,
     8773, 8776, 8776, 8761, 8769, 8747, 8765, 8737, 8720, 1998,
     8710, 8771, 8686, 8657, 8626, 8640, 8622, 8609, 8594, 8598,
     6244, 8588, 8568,10354,10372, 8605,10334,10186,10339,10398,
    10402,29848,10416,10430, 8617,10460,10484, 8599,10498,29848,
     8479, 4790,29848, 8609, 9019,29848, 9089, 4941, 4890,    0,
     8544, 8523,    0,10502,10514,10527,10532,10539,10551,10558,
    10563,10570,10468,10582,10593,10597,10609,10613,10640,10645,

    10649,10657,10722,10676,10686,10691,10742,10761,10788,10792,
    10796,10807,10823,10827,10834,10838,10842,10871,10877,10881,
    10885,10913,10917,10921,10925,10954,10959,10963,10967,10999,
    11003,11007,11018,11034,11045,11049, 8521, 8523,29848,29848,
     8495, 8489,10368, 8484, 8464, 8470, 8465,10776, 8476, 8450,
     8446,10473, 8446, 8457, 8448, 8427,10545,29848, 8423, 8456,
    10696,10703,10576, 6362, 8473,29848,10761, 8392,    0,11038,
    11065,11083, 8440,29848,11077, 8423, 8404, 4993, 8355, 8354,
     8364, 8356, 2059, 8340, 2355,10929,29848,11101, 8336, 8319,
    11108,29848, 8321,29848, 8307, 8292, 4814, 8298, 8301, 8272,

     8276,29848,    0, 5347, 6046, 8277,29848, 8265, 8268,  131,
      544,29848,11095,11123,11127,11132,  929, 1301,29848,11121,
     1337,29848,29848,    0, 1360,29848,11127, 1421,29848,11140,
     1442,29848,11144, 1444,29848,11148, 6406,29848, 1498, 1580,
    29848,11161, 1543, 1564, 1969,    0, 2067, 2090, 2170, 2295,
     2293,11127,29848, 4872, 7625, 2328, 2335, 2363, 2378,29848,
     2802, 3087,29848,11206,    0, 3093,    0, 3175, 3194, 3202,
     3224, 3223, 5346, 5359,11232, 5422,11299,11303, 5834,11172,
    11194,    0,11315,    0,11328,11319,11345, 3228, 3238, 3270,
     3277, 3299, 3357, 3385,29848,29848,11410,11355, 3351, 3376,

     3717, 3732, 3753, 3803, 3800, 3854, 3851, 3838, 4117, 4193,
     4348, 4418,11363, 4428, 4531, 4548, 4572, 4600, 4619, 4619,
     4628, 4664, 4655, 4668, 4681, 4828, 4850, 4859, 4864, 4889,
     5365, 4903, 4922, 4932, 5564, 4924, 4934, 4921, 4941,29848,
     4957, 4951,11370,11381,11395, 4996, 5350,11390,11423,29848,
    11408,11436, 5397, 5396,    0, 5353,29848,11486,11490,11508,
    11512,11530,11534,11552,11570,11574,11558,11599,11603,11612,
    11645,11649,11654,11658,11662,11689,29848,11693, 5400, 5408,
    11701,11705,29848,11709,11737,11741,11745,11749,11757,11785,
    11789,11793,11799,11803,11831,11836,11844,11873,11880,11884,

    11888,11915,11919, 5545, 5539,11924,11928,11932,11960,11964,
    11968,11977,11996,12004,12010,12014,12023,29848, 5548, 5552,
     5574, 5589, 5602, 5606, 5592, 5596, 5710,11385, 5708, 5700,
     5718,11450, 5715,11607,29848,11848,11436,    0, 5772, 5773,
     5730,29848,12041, 5785, 5787,29848,29848,11594,12050,29848,
        0, 5739, 5763, 5779,29848, 5776, 5772, 5772, 5796, 5798,
     5797, 5817, 5814, 5830, 5838, 5875, 6081, 5882, 6308, 5885,
    29848, 5923, 5927,12054, 5928, 5929,29848, 5948, 5950, 5960,
     5967, 5968, 6052, 6061, 6089,    0, 6046, 6093, 6101, 6057,
     6048,29848, 6054, 6046, 6063, 6076, 6089, 6095, 6097, 6094,

     6114, 6122, 6123, 6132, 6147, 6133, 6141, 6407, 6591, 6168,
        0, 6205,29848, 6169, 6168, 6183, 6197, 6197, 6259, 6238,
     6207, 6209, 6206, 6226, 6230, 6233, 6230,12070,12076,    0,
    12088,12101, 6275, 6272, 6262,12096, 6276,12170,12105, 6283,
     6272, 6284, 6308, 6320, 6305, 6318, 6346, 6335, 6359,12114,
     6344,12119, 6350,12130,12134, 6345, 6367, 6370, 6371, 6390,
     6421, 6388, 6409, 6424, 6430, 6426, 6423, 6425, 6431, 6467,
     6468, 6461, 6482, 6467, 6487, 6493,12138, 6558, 6499, 6496,
     6507, 6508,12142,12150, 6545,12177,29848, 6505,12181,12188,
    12246,12250,12268,12272,12290,12294,12313,12319,12331,12336,

    12368,12372,12206,29848,12376,12380,12386,12414, 6514, 6514,
    12418,12423,12432,12459,12465,12470,12474,12478,12505,12510,
    12514,12518,12522,12549,12553,12557,12584,12588,12593,12601,
    12628, 6533, 6518,12632,12641,12659,12668,12675,12679,12686,
    12695,29848,12706,12714,12725,12733,12741, 6520, 6546,12210,
     6540, 6533, 6551,12753, 6564, 6573,12325, 6574,12561,12648,
    12772,29848,12760, 6583,12776,12787, 6591,12791,29848,12799,
     6594, 6587, 6588,29848,29848, 6635, 6602, 6609, 6612,29848,
     6649,29848, 6633, 6701, 6671, 6834, 6682, 6709, 6660, 6730,
     6665, 6675, 6679, 6672, 6682, 6697, 6692, 6701, 6697, 6704,

     6706, 6713, 6706, 6708, 6714, 6794, 6809,29848, 6723,    0,
     6729, 6730, 6745, 6740, 6756, 6795,29848, 6775, 6773, 6782,
     6777, 6790, 6787, 6805,12809,12816, 6848,29848,12821, 6812,
    12828, 6819,12834,12841,12847,12851, 6815, 6828, 6831, 6827,
     6849, 6851, 6861, 6848, 6889, 6859, 6866,12855, 6852,12859,
     6857,12865, 6868, 6869,12869, 6869,12876, 6888, 6894,12883,
     6876, 6887,12887, 6905, 6911, 6909, 6903, 6904,12891, 6906,
    12896,12900, 6930, 6932,12910, 6965, 6926, 6949, 6962,29848,
     6957,12919,12926,12938,12945,12950,12957,12969,12988,12982,
    12994,13000,13009,13041,13048, 6967, 6961,13052,13056,13068,

     6995, 6980,13082,13086,13095, 7019,13115,13102,13191,13132,
    13122,13211,13151,13142,13013,13160,13222,13226,13230,13257,
    13261,13274,13289,13294,13301,13306,13321, 6982, 6981, 7002,
    13339,13353,13367,29848,13371,13380,13387, 6993, 6986,13398,
    13407,13414,13178, 7003, 7012,13418,13326,13425, 7017, 7010,
     7025,13434,29848,13441,13447, 7028,13451,13458, 7029,13462,
    13468, 7030, 7035, 7033, 7090, 7041, 7031, 7037, 7114, 7048,
     7134, 7091, 7223,    0, 7098, 7139, 7072, 7140, 7073, 7087,
     7077, 7096, 7088, 7108, 7103, 7111, 7103, 7116, 7111,29848,
    29848, 7113, 7126, 7127, 7127, 7118, 7134, 7120,29848, 7145,

        0, 7140, 7157, 7156, 7171, 7160,13474,13480,13487, 7173,
    13492,13499,13504, 7174, 7179, 7186, 7190, 7177, 7188,13508,
     7198, 7218, 7188, 7188,13512, 7209, 7206, 7202,13520, 7282,
    13529, 7311, 7304,13533,13537,13542,13546,13550,13558, 7313,
    13562, 7325, 7335,13566,13571, 7341, 7340,13575,13579,13591,
    13595, 7347, 7338,13600, 7354, 7387,13611,13615,13639,13643,
    13662,13666,13684,13688,13700,13706,13710,13714,13741,13747,
     7361,13758,29848,13777, 7373, 7374,13782,13786, 7447, 7384,
     7377, 7387,13790, 7432,13794,13821,13826,13830,13834,13839,
    13857,13866,13870,13874,13886,13901,13906,13911,13919,13938,

    13947,13951,13956, 7391, 7411,13965,13983,13992,13999,14003,
     7414, 7399,14010,14017,14037, 7401, 7417, 7419,14044,14050,
    14059,14064,14075, 7419,14079,    0, 7430, 7421, 7482,    0,
     7434,29848, 7433, 7486,    0, 7432, 7467,    0, 7468, 7543,
    14083, 7431, 7451, 7458, 7458, 7455, 7466, 7484, 7473, 7581,
     7586, 7463, 7480, 7481,29848, 7486, 7483, 7498, 7517, 7513,
    14087,14091,14097,14105,14112, 7515, 7533, 7537,14116, 7544,
     7542,14120, 7550, 7564, 7550,14124,14128, 7542, 7547,14132,
    14139, 7565,14143,14147,14151,14155, 7567,14161,14168, 7575,
     7565, 7576,14176, 7578, 7593, 7572,14180,14186,14190,14194,

     7587,14198,14206,14210,14228,14235,14241,14270,14274,14254,
    14292,14304,14308, 7575, 7596,14312,14319,14323, 7644, 7604,
     7603, 7613,29848,14339,14346,14352,14356,14383,14409,14387,
    14428,14440,14444,14455,14475,14483,14494,14392, 7604,14502,
    14396, 7620, 7618,14510, 7617, 7617,14529, 7637,14448,14537,
    14541,14548,14556,14560,14570,14577,14581,14585, 7621,    0,
    29848,29848,    0, 7627, 7664, 7671, 7723, 7766,14589, 7634,
     7655, 7665, 7670, 7663, 7675, 7820, 7813, 7855, 7664, 7688,
     7703, 7715, 7709, 7719,14593,14597,14603,14611, 7713, 7729,
    14618,14622, 7741,14626,14630, 7742,14636, 7752,14640,14644,

    14648,14652,14656,14660,14666, 7776, 7760, 7761,14670,14674,
     7795, 7767,14681,14685,14689,14693,14711,14723,14727,14747,
    14751,14759,14763,14767, 7768,14771,14778,29848, 7837, 7785,
     7787, 7795,14790,14798,14802,14806,29848,14876, 7841, 7838,
    14810,14829,14959,14837,14963,14841,14967,14971,14975,14979,
    14848,29848,15008,15013, 7800, 7808, 7846, 7837,15022,14870,
    14895,15040, 7842, 7848, 7945, 7955, 7982,29848, 7987,29848,
     7844, 7844, 7835, 7855, 7849, 8105,29848, 7867, 7870, 7875,
     7902, 7893,15044,15052,15071, 7917,15075,15079,15083,15088,
    15096, 7915, 7937,15100,15104,15108,15112, 7954, 7922,15116,

    15120,15124, 7945, 7936, 7961, 7937,15128,15132,15146,15150,
    15158, 7938, 7954, 7950,15167, 7953, 7946,    0,15181,15185,
    15194,15203,15213,15221,15230,15240,15246,15250,15254,15258,
    29848,15281,15287, 7948, 7961,15292,15299, 7967, 7961, 8218,
     8219, 7962, 7976, 7976, 7966, 7992, 7995,15308,15315,15319,
     7994,15323,15327, 8011, 8027, 7999,15333,15344, 8027, 8013,
     8038,15348,15352,15358,15373, 8017, 8040, 8033,15377,15385,
    29848,15390,15394,15398,15405,15422,15432,15438,15449,15465,
    29848,15469, 8035,15474,15481, 8061, 8248,    0, 8297,    0,
     8045, 8046,15485,15489, 8066, 8071, 8090,15496, 8118, 8093,

     8127,15500,15504,15508,15514, 8102, 8119,15526,15530,15534,
    15538,15542,15581,15585,29848, 8139,15589,15596, 8135,    0,
        0,15600,15604, 8141, 8164,15608,15615, 8182, 8174,15619,
     8178, 8197,15623,15637,15641, 8196,15645,15652, 8191,15656,
    15668, 8192, 8219,15672,15676,15680, 8194,15688,15697,15701,
     8214,15705,15715, 8215,15726,15730,15735, 8229,15739,15743,
    15747,15764,29848,15768,15772,15776,15780,15787, 8228,15791,
    15795,15799,15804,29848,15808,15812,15823,15830,29848,15836,
    15840,15848, 8218, 8231,15854,15865,15869,15873, 8225,15877,
    15884,15888,15892,15898,15904,15911,15918,15922,15927,15931,

    29848,15935,15942,15947,15951,15960,15967,15971,15976,15980,
    15987,15991,15995,16001,16008,16012,16020,16024,16031,16035,
    16039,16045,16052,16056,16064,16068,16075,16079,16083,16089,
    16096,16100,16108,16112,16119,16123,16127,16133,16140,16144,
    16152,16156,16163,16167,16171,16177,16184,16188,16196,16200,
    16207,16211,16215,16221,16228,16232,16240,16244,16251,16255,
    16259,16265,16272,16276,16284,16288,16295,16299,16303,16309,
    16316,16320,16328,16332,16339,16343,16347,16353,16360,16364,
    16372,16376,16383,16387,16391,16397,16404,16408,16416,16420,
    16427,16431,16435,16441,16448,16452,16460,16464,16471,16475,

    16479,16485,16492,16496,16504,16508,16515,16519,16523,16529,
    16536,16540,16548,16552,16559,16563,16567,16573,16580,16584,
    16592,16596,16603,16607,16611,16617,16624,16628,16636,16640,
    16647,16651,16655,16661,16668,16672,16680,16684,16691,16695,
    16699,16705,16712,16716,16724,16728,16735,16739,16743,16749,
    16756,16760,16768,16772,16779,16783,16787,16793,16800,16804,
    16812,16816,16823,16827,16831,16837,16844,16848,16856,16860,
    16867,16871,16875,16881,16888,16892,16900,16904,16911,16915,
    16919,16925,16932,16936,16944,16948,16955,16959,16963,16969,
    16976,16980,16988,16992,16999,17003,17007,17013,17020,17024,

    17032,17036,17043,17047,17051,17057,17064,17068,17076,17080,
    17087,17091,17095,17101,17108,17112,17120,17124,17131,17135,
    17139,17145,17152,17156,17164,17168,17175,17179,17183,17189,
    17196,17200,17208,17212,17219,17223,17227,17233,29848,17240,
    17244,29848,17253,17285,17317,17349,17381,17413,17445,17477,
    17509,17541,17573,17605,17637,17669,17701,17733,17765,17797,
    17829,17861,17893,17925,17957,17989,18021,18053,18085,18117,
    18149,18181,18213,18245,18277,18309,18341,18373,18405,18437,
    18469,18501,18533,18565,18597,18629,18661,18693,18725,18757,
    18789,18821,18853,18885,18917,18949,18981,19013,19045,19077,

    19109,19141,19173,19205,19237,19269, 8273,19300,19331,19362,
    19393,19424,19455,19487,19518,19549,19580, 8280, 8401, 8388,
    19602,19634, 8402, 8456, 8430, 8493, 8440, 8507,19665, 8450,
    19696, 8554,19728,19759,19790,19821, 8610, 8692,19852,19884,
    19916,19947,19978,20009, 8552, 8572, 8561, 8782,20041,20073,
    20105, 8573,20136,20167,20198,20229,20261,20293,20325,20357,
    20389,20421,20453, 8574, 8833,20485, 8611,20503, 8662,20534,
     8693,20565, 8694, 8834,20597, 8722,20624, 8724, 8888,20656,
     8748, 8907,20688, 8749,20719,20751, 8783,20767, 8789, 8961,
     8835, 8962, 8889, 9057,20799,20830,20861,20892,20923,20954,

    20985,21016,21048,21080,21112, 8938, 9126, 8971, 9149,21144,
    21176,21208,21240,21272,21304,21336,21368,21400,21432, 9005,
    21464, 9166,21496,21528,21560,21592,21624, 9006, 9058, 9338,
     9125, 9360, 9168, 9224, 9492, 9192, 9580,21655, 9349,21686,
    21718,21749, 9351,21780,21811,21842,21873,21904,21936,21968,
    22000,22032,22063,22094,22125,22156, 9395,22187,22218,22249,
    22280,22311,22343,22374,22405, 9397,22436, 9584,22458, 9657,
     9804,22490, 9611, 9724, 9891,22521,22552,22583,22614, 9882,
     9910,10112,22646,22678,22710,22741,22772, 9399,22803,22835,
    22866,22897, 9440, 9937, 9486,22928,22960,22991,23022, 9534,

    23053,10129,10365,23085,23117,23149,23181,23213,23244,23275,
    23306,10414, 9536,23337,23369,23401,23433,23465,23497,23529,
    23561,10496,23593,23611,10284,23642,23673,23704,23735,10640,
    23767,23794,10652,23826,10791,23858,23889,23921,23937,23968,
    10835,10837,10839,23992,24024,24055,24086,24117,24148,24180,
    24211,24242,10874, 9538,24273,24305,24337,24369,24401,10920,
    11000,24433,24465,24497,24529,24561,24593,24625,24657,24689,
    24721,24753,24785,10964,24817,24849,24881,24913,24945,24977,
    10966, 9567,11329,11091,11123, 9610,11345,11311,25008,25039,
    25071,25102,25133,25164,25195, 9628,11527,25226,11448, 9640,

    25257,25289,25321,10421,25353,25385,25416,25447,25478,25509,
    11602,25540,25571,25602,25633,25665,25697,25728,25759, 9669,
     9671,11849,25781,25812,25843,25874,25905, 9730,11613,11657,
    25937,25968,25999,26031,26062,26093,26124,26155,26186,26210,
    26242,11883,10490,26273,26304,26335,26366,11925,26398,26430,
    26462,26494,26526,26557,26588,26619,12044,26650,26682,12132,
    26714, 9783,26732,26763,26794,26825,10735,26856,26864,26896,
    26928,26959,26990,12201,27021,27053,10870,27085,27117,27149,
    27181,27213,27245,27277,12334,13328,27308,27339,12288,12331,
    27370,27402, 9787,27433,12421,27464,27495,12515,27517,27548,

    27579,27610,27641,27672,12596,27703,27735,27766,27797,27828,
    27859,27890,27915,27946,27970,28002, 9789,28033,28064,28095,
    12517,28127,28159,28191,28223,28255,28286,28317,28349,12552,
    28381,28399,28430, 9793,28446,28478,28509,28541, 9857,28573,
    28605,28637,28669,28701,28733,28765,28796,28828,28860,28891,
    28913,28944,12577, 9887,28975,29006,29037,29068,29099,29122,
    29147,29179,29211,29242,29273,29304,12583,29336,29368,29399,
    29430,29462,29478,29509,29541,29573,29604,12623,29635,29666,
    29697,29728,11494,10968,11050,12707,29752,12902,13006,29784,
     9912,29815,11496,11498,13016,13125

    } ;

static yyconst flex_int16_t yy_def[4497] =
    {   0,
     3943, 3943, 3942,    3, 3944, 3944, 3942,    7, 3942,    9,
     3942,   11, 3942,   13, 3943, 3943, 3942,   17, 3945, 3945,
     3942,   21, 3946, 3946, 3942,   25, 3942,   27, 3947, 3947,
     3943, 3943, 3948, 3948, 3942,   35, 3949, 3949, 3942,   39,
     3942,   41, 3943, 3943, 3943, 3943, 3950, 3950, 3951, 3951,
     3952, 3952, 3942,   53, 3953, 3953, 3954, 3954, 3955, 3955,
     3955, 3955, 3955, 3955, 3942,   65, 3942,   67, 3956, 3956,
     3956, 3956, 3943, 3943, 3957, 3957, 3957, 3957, 3958, 3958,
     3959, 3959, 3943, 3943, 3960, 3960, 3961, 3961, 3943, 3943,
     3943, 3943, 3962, 3962, 3943, 3943, 3943, 3943, 3963, 3963,

     3964, 3964, 3942,  103, 3965, 3965, 3966, 3966, 3967, 3967,
     3942,  111, 3942,  113, 3942,  115, 3942,  117, 3968, 3968,
     3943, 3943, 3969, 3969, 3942,  125, 3970, 3970, 3942,  129,
     3971, 3971, 3942,  133, 3972, 3972, 3942,  137, 3973, 3973,
     3943, 3943, 3943, 3943, 3943, 3943, 3942,  147, 3942,  149,
     3943, 3943, 3942,  153, 3942,  155, 3974, 3974, 3942,  159,
     3943, 3943, 3943, 3943, 3942,  165, 3943, 3943, 3975, 3975,
     3942,  171, 3976, 3976, 3943, 3943, 3977, 3977, 3978, 3978,
     3979, 3979, 3942,  183, 3942,  185, 3980, 3980, 3980, 3980,
     3981, 3981, 3981, 3981, 3982, 3982, 3983, 3983, 3984, 3984,

     3985, 3985, 3986, 3986, 3987, 3987, 3942,  207, 3988, 3988,
     3989, 3989, 3990, 3990, 3991, 3991, 3992, 3992, 3992, 3992,
     3993, 3993, 3978, 3978, 3994, 3994, 3995, 3995, 3996, 3996,
     3942,  231, 3997, 3942, 3942,  235, 3998, 3942, 3999, 3999,
     3942,  241, 3942,  243, 4000, 4000, 3942,  247, 4001, 4001,
     4002, 4002, 4003, 4003, 4004, 4004, 4005, 4005, 4006, 4006,
     3942, 3942, 3942, 3942, 3942, 3942, 3942, 4007, 4008, 3942,
     3942, 3942, 3942, 3942, 3942, 3942, 3942, 3942, 3942, 3942,
     4009, 4010, 4011, 3942, 3942, 4012, 3942, 4013, 3942, 4014,
     3942, 4015, 4016, 3942, 3942, 3942, 3942, 3942, 3942, 3942,

     3942, 4017, 4017, 4017, 3942, 3942, 3942, 3942, 4018, 3942,
     3942, 3942, 3942, 4019, 4020, 4021, 4021, 3942, 4022, 4023,
     3942, 4024, 3942, 3942, 3942, 3942, 3942, 3942, 3942, 3942,
     3942, 3942, 3942, 3942, 3942, 3942, 4025, 3942, 3942, 3942,
     4026, 3942, 3942, 3942, 3942, 3942, 3942, 3942, 3942, 3942,
     3942, 3942, 3942, 4027, 3942, 3942, 4028, 3942, 4029, 3942,
     4029, 4030, 3942, 3942, 3942, 3942, 4031, 4032, 3942, 3942,
     3942, 3942, 3942, 3942, 3942, 3942, 3942, 3942, 3942, 3942,
     4033, 3942, 3942, 3942, 3942, 3942, 3942, 3942, 3942, 3942,
     3942, 3942, 3942, 3942, 3942, 4034, 3942, 4035, 3942, 3942,

     4036, 3942, 3942, 3942, 3942, 4037, 3942, 3942, 3942, 3942,
     3942, 4038, 4039, 4039, 4040, 3942, 4039, 4039, 4039, 4039,
     4039, 4039, 4039, 4039, 4039, 4039, 4039, 4039, 4039, 4039,
     4039, 4039, 4039, 4039, 3942, 4041, 3942, 4041, 4041, 4041,
     4041, 3942, 3942, 3942, 4042, 4043, 3942, 4044, 3942, 3942,
     3942, 3942, 4045, 3942, 3942, 3942, 3942, 3942, 4046, 3942,
     3942, 3942, 3942, 3942, 3942, 3942, 3942, 3942, 3942, 3942,
     3942, 3942, 3942, 3942, 3942, 3942, 3942, 3942, 3942, 3942,
     3942, 3942, 3942, 3942, 3942, 3942, 3942, 3942, 3942, 3942,
     3942, 3942,  492, 4047, 3942, 3942, 3942, 4048, 4048, 4048,

     4048, 4048, 4048, 4048, 4048, 4048, 3942, 3942, 3942, 3942,
     3942, 3942, 3942, 3942, 3942, 3942, 3942, 3942, 3942, 3942,
     3942, 3942, 4049, 4049, 3942, 3942, 3942, 4050, 4051, 3942,
     3942, 3942, 3942, 3942, 3942, 3942, 3942, 4052, 3942, 4053,
     4053, 3942, 3942, 4054, 4055, 3942, 4056, 4057, 4057, 3942,
     3942, 3942, 4058, 3942, 3942, 3942, 3942, 3942, 3942, 4057,
     3942, 3942, 3942, 3942, 3942, 3942, 3942, 3942, 3942, 3942,
     3942, 3942, 3942, 4059, 3942, 3942, 3942, 3942, 3942, 3942,
     3942, 3942, 3942, 3942, 3942, 3942, 3942, 3942, 3942, 4060,
     4060, 4060, 4060, 4060, 3942, 4060, 4061, 3942, 4061, 4061,

     4061, 4061, 4061, 3942, 3942, 3942, 3942, 3942, 3942, 3942,
     3942, 3942, 3942, 3942, 3942, 3942, 3942, 3942, 3942, 3942,
     3942, 4062, 3942, 4062, 4062, 4062, 3942, 3942, 4063, 3942,
     4063, 4063, 4063, 4063, 4064, 3942, 4065, 4065, 4065, 3942,
     3942, 3942, 3942, 3942, 3942, 3942, 3942, 3942, 3942, 3942,
     3942, 3942, 3942, 3942, 4066, 3942, 3942, 4066, 4066, 4066,
     3942, 3942, 3942, 4066, 4067, 3942, 4068, 3942, 4069, 4070,
     4071, 3942, 4072, 3942, 3942, 4073, 4074, 3942, 3942, 3942,
     3942, 3942, 3942, 3942, 3942, 3942, 3942, 3942, 3942, 3942,
     3942, 3942, 4075, 3942, 3942, 3942, 4076, 4077, 3942, 3942,

     3942, 3942, 3942, 3942, 3942, 3942, 3942, 3942, 4078, 3942,
     3942, 3942, 3942, 4079, 3942, 4080, 3942, 3942, 4080, 4080,
     4080, 4081, 3942, 3942, 3942, 4082, 3942, 4083, 4083, 4083,
     4083, 4083, 3942, 4083, 4084, 3942, 3942, 3942, 4085, 4086,
     4086, 4086, 4086, 4086, 3942, 4086, 3942, 3942, 3942, 3942,
     3942, 3942, 3942, 3942, 3942, 3942, 3942, 3942, 4087, 3942,
     4088, 4088, 4088, 4089, 4090, 3942, 3942, 3942, 3942, 3942,
     4091, 4092, 4093, 4094, 3942, 3942, 3942, 3942, 3942, 4095,
     3942, 3942, 3942, 3942, 3942, 3942, 3942, 3942, 3942, 3942,
     3942, 3942, 4096, 4096, 4096, 4097, 3942, 3942, 4098, 4098,

     4098, 4098, 3942, 3942, 3942, 3942, 3942, 4099, 3942, 3942,
     3942, 3942, 3942, 3942, 3942, 3942, 3942, 3942, 3942, 3942,
     3942, 3942, 4100, 3942, 3942, 4101, 3942, 3942, 3942, 4102,
     3942, 3942, 3942, 3942, 3942, 3942, 3942, 3942, 3942, 4103,
     4104, 3942, 3942, 3942, 3942, 4105, 3942, 3942, 3942, 3942,
     3942, 3942, 3942, 3942, 3942, 3942, 3942, 3942, 3942, 4106,
     4107, 4108, 3942, 4109, 3942, 3942, 3942, 3942, 3942, 3942,
     3942, 4110, 3942, 3942, 3942, 3942, 3942, 3942, 3942, 3942,
     3942, 4111, 3942, 3942, 4112, 3942, 3942, 4112, 4113, 3942,
     3942, 4112, 4114, 3942, 3942, 4114, 4115, 3942, 3942, 3942,

     4116, 3942, 3942, 4116, 4117, 3942, 3942, 3942, 4118, 3942,
     3942, 4118, 4119, 3942, 3942, 3942, 4118, 3942, 3942, 3942,
     3942, 3942, 3942, 3942, 3942, 3942, 3942, 3942, 3942, 3942,
     3942, 3942, 3942, 3942, 3942, 3942, 3942, 3942, 3942, 3942,
     3942, 3942, 4120, 4121, 3942, 3942, 4122, 3942, 3942, 3942,
     3942, 3942, 3942, 3942, 3942, 3942, 3942, 3942, 3942, 3942,
     3942, 3942, 3942, 3942, 3942, 3942, 4123, 3942, 3942, 4123,
     3942, 4123, 4124, 3942, 3942, 4125, 4125, 3942, 3942, 3942,
     3942, 3942, 4126, 3942, 4126, 4126, 4126, 3942, 4126, 3942,
     4126, 3942, 4127, 3942, 4127, 4127, 4127, 4127, 3942, 3942,

     3942, 3942, 3942, 3942, 3942, 4128, 4129, 4130, 3942, 3942,
     3942, 3942, 3942, 4131, 4132, 4133, 4134, 4135, 3942, 3942,
     3942, 3942, 3942, 3942, 4136, 4137, 3942, 3942, 3942, 3942,
     3942, 3942, 3942, 3942, 4138, 4138, 3942, 3942, 4139, 3942,
     3942, 3942, 4140, 4141, 4142, 4142, 4143, 4144, 3942, 3942,
     3942, 3942, 4145, 3942, 3942, 3942, 3942, 3942, 4146, 3942,
     3942, 4147, 3942, 3942, 3942, 3942, 3942, 4148, 3942, 3942,
     3942, 3942, 3942, 3942, 3942, 3942, 3942, 3942, 3942, 3942,
     3942, 3942, 3942, 3942, 3942, 3942, 3942, 3942, 3942, 3942,
     4149, 3942, 4149, 4149, 4149, 4149, 4150, 4150, 3942, 4150,

     4150, 4150, 3942, 3942, 4150, 3942, 3942, 4150, 4151, 3942,
     4152, 3942, 4152, 4152, 3942, 4152, 3942, 3942, 3942, 3942,
     4152, 3942, 3942, 3942, 4153, 3942, 3942, 4153, 3942, 3942,
     3942, 3942, 3942, 3942, 3942, 3942, 4154, 3942, 3942, 4155,
     4155, 4156, 3942, 4155, 4157, 4158, 4154, 4154, 4159, 4160,
     4157, 3942, 3942, 3942, 4158, 3942, 3942, 3942, 4161, 4161,
     4162, 3942, 3942, 3942, 3942, 4163, 4163, 3942, 4164, 4164,
     4165, 4164, 4166, 4167, 3942, 3942, 3942, 4166, 3942, 3942,
     3942, 4167, 4167, 4167, 4168, 3942, 3942, 4168, 4169, 3942,
     4170, 4169, 4171, 4169, 4172, 3942, 4173, 4173, 3942, 3942,

     3942, 3942, 3942, 4174, 4174, 4175, 4175, 4176, 4176, 4176,
     4177, 4177, 3942, 3942, 1214, 4176, 4177, 4177, 4178, 4179,
     3942, 3942, 3942, 4180, 4178, 3942, 4181, 4181, 4182, 3942,
     3942, 3942, 3942, 3942, 4183, 4184, 3942, 3942, 3942, 3942,
     3942, 3942, 3942, 3942, 3942, 3942, 4185, 3942, 3942, 3942,
     3942, 3942, 3942, 3942, 3942, 3942, 3942, 3942, 3942, 3942,
     3942, 3942, 3942, 4186, 4186, 4187, 3942, 3942, 3942, 3942,
     4186, 4188, 4189, 4190, 3942, 3942, 4191, 4191, 3942, 3942,
     4192, 3942, 3942, 3942, 4193, 4194, 4188, 3942, 3942, 3942,
     4195, 4196, 4196, 4196, 4196, 4196, 4196, 3942, 4189, 3942,

     4189, 4185, 3942, 4189, 4189, 4189, 4189, 4189, 4189, 4189,
     4189, 4189, 4189, 4189, 4189, 4189, 4189, 4189, 4189, 4189,
     4189, 4189, 4189, 4189, 4189, 4189, 4189, 4189, 4189, 4189,
     4189, 4189, 4189, 4189, 4197, 4197, 4197, 3942, 3942, 3942,
     3942, 4198, 4198, 4199, 4198, 4200, 4201, 4200, 3942, 4201,
     3942, 3942, 3942, 3942, 4202, 3942, 3942, 4202, 3942, 3942,
     3942, 3942, 3942, 3942, 3942, 3942, 3942, 3942, 3942, 3942,
     3942, 4203, 3942, 3942, 3942, 3942, 4203, 4203, 4203, 4203,
     4203, 4203, 4203, 4203, 4203, 4203, 3942, 3942, 3942, 4204,
     4204, 3942, 3942, 4205, 4205, 4206, 4207, 3942, 4208, 3942,

     3942, 3942, 3942, 4209, 3942, 4210, 4209, 3942, 4209, 3942,
     3942, 4211, 4211, 4212, 4211, 4213, 4214, 4213, 4214, 4215,
     4215, 3942, 4216, 4217, 3942, 3942, 3942, 3942, 3942, 3942,
     4215, 3942, 3942, 3942, 3942, 3942, 3942, 3942, 3942, 3942,
     3942, 3942, 3942, 3942, 3942, 3942, 3942, 3942, 4218, 4218,
     3942, 3942, 3942, 4218, 4219, 3942, 4219, 4219, 4219, 3942,
     3942, 4220, 4220, 4220, 4221, 4221, 4221, 4222, 4222, 4222,
     4222, 3942, 3942, 3942, 4223, 3942, 3942, 3942, 3942, 4223,
     4223, 4223, 4224, 4225, 4224, 4226, 3942, 4227, 4226, 4228,
     3942, 4228, 4229, 3942, 3942, 4230, 4230, 3942, 3942, 3942,

     3942, 3942, 4231, 3942, 4232, 3942, 4232, 4233, 3942, 3942,
     4233, 4234, 3942, 4234, 4234, 4235, 3942, 3942, 4235, 4236,
     4236, 4236, 4237, 3942, 3942, 3942, 4237, 3942, 4238, 3942,
     4238, 4238, 3942, 3942, 3942, 3942, 3942, 3942, 3942, 3942,
     3942, 3942, 4239, 4239, 3942, 4240, 4239, 4239, 4241, 4241,
     3942, 3942, 3942, 3942, 4242, 4242, 4243, 4243, 4244, 4245,
     3942, 3942, 3942, 3942, 3942, 3942, 3942, 4246, 4246, 4247,
     3942, 3942, 4247, 3942, 3942, 4248, 4248, 4248, 4249, 3942,
     4249, 4250, 3942, 3942, 4251, 3942, 3942, 3942, 4252, 4252,
     4253, 4252, 4254, 4255, 4254, 4255, 3942, 3942, 3942, 3942,

     3942, 3942, 4256, 3942, 4257, 3942, 4258, 4259, 3942, 3942,
     3942, 3942, 3942, 4260, 4260, 4261, 4261, 3942, 3942, 3942,
     3942, 3942, 3942, 3942, 3942, 3942, 4262, 4263, 4264, 4262,
     4262, 4265, 4266, 4267, 4268, 4269, 4270, 4271, 4272, 4273,
     4271, 3942, 3942, 3942, 3942, 3942, 3942, 4274, 4275, 4276,
     4274, 3942, 3942, 3942, 3942, 3942, 3942, 3942, 4277, 4277,
     4277, 3942, 4278, 4279, 3942, 4279, 3942, 3942, 4279, 3942,
     3942, 4280, 4280, 4280, 3942, 3942, 3942, 3942, 3942, 3942,
     3942, 3942, 3942, 3942, 4281, 4282, 4283, 4281, 4284, 4284,
     4285, 4286, 4287, 4285, 4288, 4288, 3942, 4289, 4289, 4290,

     4291, 4292, 3942, 3942, 3942, 4292, 4291, 3942, 4293, 4293,
     4294, 4295, 3942, 3942, 4295, 3942, 4296, 3942, 4297, 3942,
     3942, 3942, 4298, 4298, 4299, 4298, 4300, 4301, 4300, 4301,
     3942, 3942, 3942, 3942, 3942, 3942, 3942, 3942, 3942, 4302,
     3942, 3942, 3942, 4302, 4302, 4303, 4303, 4303, 3942, 3942,
     3942, 3942, 4303, 4303, 4304, 3942, 3942, 3942, 3942, 3942,
     3942, 3942, 3942, 4303, 4305, 3942, 3942, 4305, 3942, 4306,
     3942, 3942, 3942, 3942, 3942, 3942, 4306, 3942, 3942, 3942,
     3942, 3942, 3942, 4307, 4308, 3942, 4309, 4310, 4310, 4311,
     4312, 4313, 3942, 4314, 4315, 3942, 4316, 3942, 3942, 4317,

     4318, 3942, 4319, 4319, 3942, 3942, 3942, 4320, 4321, 4322,
     4323, 4324, 4325, 4325, 4326, 4326, 4327, 4328, 4329, 4326,
     4330, 3942, 3942, 3942, 3942, 3942, 4331, 3942, 3942, 3942,
     3942, 3942, 3942, 3942, 3942, 3942, 4332, 3942, 3942, 3942,
     3942, 3942, 3942, 3942, 3942, 3942, 3942, 3942, 3942, 3942,
     3942, 3942, 3942, 3942, 3942, 3942, 3942, 3942, 3942, 3942,
     3942, 3942, 3942, 3942, 3942, 3942, 3942, 3942, 4333, 3942,
     3942, 3942, 4334, 3942, 4335, 4336, 3942, 3942, 4337, 4338,
     3942, 4339, 3942, 3942, 4340, 3942, 3942, 3942, 4341, 3942,
     4342, 4332, 3942, 3942, 3942, 3942, 4343, 4344, 4344, 4344,

     4344, 4344, 4344, 4344, 4344, 3942, 4345, 4345, 4345, 3942,
     3942, 4345, 4345, 4345, 4345, 4345, 4345, 4345, 4345, 4345,
     4345, 4345, 4345, 4345, 4345, 4345, 4345, 4345, 4345, 4345,
     4345, 4345, 4345, 4345, 4345, 4345, 4345, 4345, 4345, 4345,
     4345, 4345, 4345, 4345, 4345, 4345, 4345, 4345, 4345, 4345,
     4345, 3942, 3942, 3942, 4346, 4347, 3942, 4340, 3942, 4341,
     3942, 3942, 3942, 3942, 3942, 3942, 3942, 3942, 3942, 3942,
     4340, 3942, 3942, 4341, 3942, 4348, 4348, 4348, 4348, 4348,
     4348, 4348, 4348, 4348, 3942, 3942, 4349, 4350, 3942, 4351,
     4352, 3942, 3942, 3942, 3942, 3942, 3942, 4353, 3942, 3942,

     3942, 4354, 4354, 4355, 4356, 4357, 4358, 4359, 3942, 3942,
     3942, 3942, 3942, 3942, 3942, 3942, 3942, 3942, 3942, 4360,
     4360, 3942, 4361, 4361, 4361, 4362, 4363, 4364, 4364, 3942,
     4365, 3942, 4366, 4366, 3942, 3942, 3942, 3942, 3942, 3942,
     3942, 3942, 3942, 4340, 3942, 4341, 3942, 3942, 3942, 3942,
     3942, 3942, 3942, 3942, 3942, 3942, 3942, 3942, 4367, 4368,
     3942, 4369, 4369, 3942, 3942, 3942, 3942, 3942, 4370, 3942,
     3942, 3942, 3942, 3942, 3942, 3942, 3942, 3942, 4371, 3942,
     3942, 4372, 4372, 3942, 4373, 3942, 4374, 4375, 3942, 3942,
     4376, 3942, 3942, 3942, 3942, 3942, 3942, 3942, 4377, 4378,

     3942, 3942, 3942, 4379, 3942, 3942, 3942, 4380, 3942, 3942,
     3942, 4381, 3942, 3942, 3942, 4382, 3942, 3942, 3942, 4383,
     3942, 3942, 3942, 3942, 3942, 3942, 3942, 3942, 3942, 3942,
     3942, 3942, 3942, 3942, 4384, 3942, 4385, 3942, 4386, 3942,
     4387, 3942, 3942, 3942, 4388, 4389, 3942, 3942, 4390, 4391,
     3942, 3942, 3942, 3942, 3942, 4392, 4392, 4393, 3942, 3942,
     3942, 3942, 3942, 3942, 3942, 3942, 3942, 3942, 3942, 3942,
     3942, 3942, 3942, 3942, 3942, 4394, 4395, 4396, 3942, 3942,
     3942, 3942, 3942, 4397, 4397, 3942, 3942, 4398, 3942, 4399,
     4400, 4401, 4400, 3942, 4402, 4403, 4404, 4405, 4406, 3942,

     3942, 3942, 3942, 3942, 4407, 3942, 3942, 3942, 3942, 3942,
     3942, 3942, 3942, 3942, 3942, 3942, 3942, 3942, 3942, 3942,
     3942, 3942, 3942, 3942, 3942, 3942, 3942, 3942, 3942, 3942,
     3942, 3942, 3942, 3942, 3942, 3942, 3942, 3942, 3942, 3942,
     3942, 3942, 3942, 3942, 3942, 3942, 3942, 3942, 3942, 3942,
     3942, 3942, 3942, 4408, 4408, 3942, 4409, 4410, 4410, 4411,
     3942, 3942, 4412, 4412, 3942, 4413, 4410, 4414, 3942, 3942,
     3942, 3942, 3942, 4415, 3942, 3942, 3942, 3942, 3942, 4416,
     3942, 3942, 4417, 4418, 4419, 4419, 4419, 4419, 4419, 4419,
     4419, 4419, 4420, 4420, 4420, 4420, 4420, 4420, 4420, 4420,

     4420, 4420, 4420, 4420, 4420, 4420, 4420, 4420, 4420, 4420,
     4420, 4420, 4420, 4420, 4420, 4420, 4420, 4420, 4420, 4420,
     4420, 4420, 4420, 4420, 3942, 4420, 4420, 4420, 4420, 4420,
     4420, 4420, 4420, 4420, 4420, 4420, 3942, 3942, 3942, 3942,
     3942, 3942, 3942, 3942, 3942, 3942, 3942, 3942, 3942, 4421,
     4421, 3942, 4421, 4421, 4421, 4421, 3942, 3942, 4421, 4422,
     3942, 4423, 3942, 4424, 4425, 3942, 3942, 3942, 4426, 3942,
     4427, 4428, 4429, 3942, 3942, 3942, 3942, 3942, 4430, 4430,
     3942, 4431, 4431, 4431, 4432, 4433, 3942, 3942, 3942, 3942,
     3942, 3942, 3942, 3942, 3942, 3942, 3942, 3942, 3942, 3942,

     3942, 3942, 4434, 4435, 4435, 3942, 3942, 3942, 3942, 3942,
     4436, 3942, 3942, 3942, 3942, 4437, 3942, 4438, 3942, 3942,
     3942, 3942, 3942, 4439, 4440, 3942, 3942, 4441, 3942, 3942,
     4442, 3942, 3942, 4443, 3942, 3942, 4444, 3942, 3942, 4445,
     3942, 3942, 3942, 3942, 3942, 4446, 3942, 3942, 3942, 3942,
     3942, 3942, 3942, 3942, 4447, 3942, 3942, 3942, 3942, 3942,
     4448, 4448, 3942, 3942, 2464, 3942, 4449, 3942, 3942, 3942,
     3942, 3942, 3942, 3942, 3942, 3942, 4450, 4450, 4451, 4452,
     4452, 4453, 3942, 4454, 4454, 4455, 4456, 3942, 3942, 3942,
     3942, 3942, 3942, 3942, 3942, 3942, 3942, 3942, 3942, 3942,

     3942, 3942, 3942, 3942, 3942, 3942, 3942, 3942, 3942, 3942,
     3942, 3942, 3942, 3942, 3942, 3942, 3942, 3942, 3942, 3942,
     3942, 3942, 3942, 3942, 3942, 3942, 3942, 3942, 3942, 3942,
     3942, 3942, 3942, 3942, 3942, 3942, 3942, 3942, 3942, 3942,
     3942, 3942, 4457, 3942, 4458, 3942, 4459, 3942, 4460, 3942,
     4461, 4461, 4462, 3942, 4463, 3942, 3942, 4464, 4465, 4465,
     4465, 4465, 4465, 4465, 4465, 4465, 4466, 4466, 4466, 4466,
     4466, 4466, 4466, 4466, 4466, 4466, 3942, 3942, 3942, 3942,
     4466, 3942, 3942, 4466, 4466, 4466, 4466, 4466, 4466, 4466,
     4466, 4466, 4466, 4466, 4466, 4466, 4466, 4466, 4466, 4466,

     4466, 4466, 4466, 3942, 3942, 4466, 4466, 4466, 4466, 4466,
     4466, 4466, 4466, 4466, 4466, 4466, 4466, 3942, 3942, 3942,
     3942, 3942, 3942, 3942, 3942, 3942, 4467, 4467, 4467, 4467,
     4467, 4467, 4467, 3942, 3942, 4468, 3942, 4469, 3942, 3942,
     3942, 3942, 4470, 3942, 3942, 3942, 3942, 4471, 4471, 3942,
     4472, 4472, 4472, 4472, 3942, 3942, 3942, 3942, 3942, 3942,
     3942, 3942, 3942, 3942, 3942, 4473, 4473, 3942, 3942, 3942,
     3942, 3942, 3942, 4474, 3942, 3942, 3942, 3942, 3942, 3942,
     3942, 3942, 3942, 3942, 3942, 4475, 3942, 3942, 3942, 3942,
     3942, 3942, 3942, 3942, 3942, 3942, 3942, 3942, 3942, 3942,

     3942, 3942, 3942, 3942, 3942, 3942, 3942, 3942, 3942, 3942,
     4476, 4476, 3942, 3942, 3942, 3942, 3942, 3942, 3942, 3942,
     3942, 3942, 3942, 3942, 3942, 3942, 3942, 4477, 4477, 4478,
     4479, 4480, 3942, 3942, 3942, 3942, 3942, 3942, 3942, 3942,
     3942, 3942, 3942, 3942, 3942, 3942, 3942, 3942, 3942, 3942,
     3942, 3942, 3942, 3942, 3942, 3942, 3942, 3942, 3942, 3942,
     3942, 3942, 3942, 3942, 3942, 3942, 3942, 3942, 3942, 3942,
     3942, 3942, 3942, 3942, 3942, 3942, 3942, 3942, 3942, 3942,
     3942, 3942, 4481, 4481, 4482, 3942, 3942, 3942, 4465, 4465,
     4465, 4465, 4465, 4465, 4465, 4465, 4465, 4466, 4466, 4466,

     4466, 4466, 3942, 3942, 4466, 3942, 4466, 4466, 3942, 3942,
     3942, 4466, 4466, 4466, 4466, 4466, 4466, 4466, 4466, 4466,
     4466, 4466, 4466, 4466, 4466, 4466, 4466, 4466, 4466, 4466,
     4466, 3942, 3942, 4466, 4466, 4466, 4466, 4466, 4466, 4466,
     3942, 3942, 3942, 3942, 4466, 4466, 4466, 3942, 3942, 3942,
     3942, 3942, 3942, 3942, 3942, 4467, 3942, 4467, 4467, 4467,
     3942, 3942, 4467, 4467, 4468, 3942, 3942, 4470, 3942, 4471,
     4472, 4472, 4472, 3942, 3942, 3942, 3942, 3942, 3942, 3942,
     3942, 3942, 3942, 4473, 3942, 4483, 3942, 4475, 3942, 3942,
     3942, 3942, 3942, 3942, 3942, 3942, 3942, 3942, 3942, 3942,

     3942, 3942, 3942, 3942, 3942, 3942, 3942, 3942, 3942, 4476,
     3942, 3942, 3942, 3942, 3942, 3942, 3942, 3942, 3942, 3942,
     3942, 3942, 3942, 3942, 4477, 3942, 3942, 3942, 4480, 3942,
     3942, 3942, 3942, 3942, 2738, 3942, 3942, 3942, 3942, 3942,
     3942, 3942, 3942, 3942, 3942, 3942, 3942, 3942, 3942, 3942,
     3942, 3942, 3942, 3942, 3942, 3942, 3942, 3942, 3942, 3942,
     3942, 3942, 3942, 3942, 3942, 3942, 3942, 3942, 3942, 3942,
     3942, 3942, 3942, 3942, 3942, 3942, 3942, 3942, 3942, 3942,
     3942, 4465, 4465, 4465, 4465, 4465, 4465, 4465, 4465, 4466,
     4466, 4466, 4466, 4466, 4466, 3942, 3942, 3942, 3942, 4466,

     3942, 3942, 4466, 4466, 3942, 3942, 3942, 4466, 4466, 4466,
     3942, 4466, 4466, 3942, 3942, 4466, 4466, 3942, 4466, 4466,
     4466, 4466, 4466, 3942, 3942, 4466, 4466, 3942, 3942, 3009,
     4466, 3942, 3942, 3942, 4466, 4466, 4466, 3942, 3942, 4466,
     4466, 4466, 3942, 3942, 3942, 3942, 3942, 3942, 3942, 4467,
     4467, 3942, 3942, 3942, 3942, 4467, 4468, 3942, 3942, 4470,
     4471, 4472, 4472, 4472, 4484, 3942, 3942, 3942, 4485, 3942,
     4473, 3942, 4483, 4486, 3942, 3942, 3942, 3942, 3942, 3942,
     3942, 3942, 3942, 3942, 3942, 3942, 3942, 3942, 3942, 3942,
     3942, 3942, 3942, 3942, 3942, 3942, 3942, 3942, 3942, 3942,

     4487, 3942, 3942, 3942, 3942, 3942, 4480, 3942, 3942, 3942,
     3942, 2738, 3942, 3942, 3942, 3942, 3942, 3942, 3942, 3942,
     3942, 3942, 3942, 3942, 3942, 3942, 3942, 3942, 3942, 3942,
     3942, 3942, 3942, 3942, 3942, 3942, 3942, 3942, 3942, 3942,
     3942, 3942, 3942, 3942, 3942, 3942, 3942, 3942, 3942, 3942,
     3942, 3942, 3942, 3942, 3942, 3942, 4465, 4465, 4465, 4465,
     4465, 4465, 3942, 4465, 4466, 4466, 4466, 4466, 4466, 3942,
     3942, 3942, 3942, 4466, 3942, 3942, 4466, 4466, 3942, 3942,
     3942, 3942, 3942, 3942, 4466, 4466, 4466, 4466, 3942, 3942,
     3942, 3942, 4466, 3942, 3942, 4466, 4466, 4466, 4466, 4466,

     3942, 4466, 4466, 3942, 3942, 4466, 3942, 3942, 3942, 4466,
     3942, 3942, 4466, 3942, 3942, 3942, 3942, 3942, 4467, 4467,
     4467, 4468, 3942, 3942, 4470, 4472, 4472, 4472, 4484, 4488,
     3942, 3942, 3942, 4485, 4489, 3942, 3942, 4486, 3942, 3942,
     3942, 3942, 3942, 3942, 3942, 3942, 3942, 3942, 3942, 3942,
     3942, 3942, 3942, 3942, 3942, 3942, 3942, 3942, 3942, 3942,
     4480, 3942, 3942, 2738, 3942, 3942, 3942, 3942, 3942, 3942,
     3942, 3942, 3942, 3942, 3942, 3942, 3942, 3942, 3942, 3942,
     3942, 3942, 3942, 3942, 3942, 3942, 3942, 3942, 3942, 3942,
     3942, 3942, 3942, 3942, 3942, 3942, 3942, 3942, 3942, 3942,

     3942, 3942, 4465, 4465, 4465, 3942, 4465, 4465, 4465, 4466,
     4466, 3942, 4466, 3942, 3942, 4466, 3942, 3942, 3942, 3942,
     3942, 3942, 3942, 4466, 3942, 4466, 3942, 3942, 4466, 3942,
     4466, 4466, 4466, 3942, 4466, 4466, 4466, 3942, 3942, 4466,
     3942, 3942, 3942, 3942, 3942, 3942, 4466, 3942, 3942, 3942,
     3942, 3942, 3942, 3942, 4468, 3942, 3942, 4470, 4472, 4488,
     3942, 3942, 4489, 3942, 3942, 3942, 3942, 3942, 3942, 3942,
     3942, 3942, 3942, 3942, 3942, 3942, 3942, 3942, 3942, 3942,
     3942, 3942, 3942, 3942, 4480, 3942, 2738, 3942, 3942, 3942,
     3942, 3942, 3942, 3942, 3942, 3942, 3942, 3942, 3942, 3942,

     3942, 3942, 3942, 3942, 4490, 3942, 3942, 3942, 3942, 3942,
     3942, 3942, 3942, 3942, 4465, 4465, 3942, 4465, 3942, 3942,
     4466, 4466, 4466, 3942, 3942, 3942, 3942, 3942, 3942, 3942,
     3942, 3942, 4466, 3942, 3942, 3942, 3942, 3942, 3942, 3942,
     4466, 4466, 4466, 4466, 3942, 3942, 4466, 4466, 4466, 4466,
     3942, 3942, 3942, 4466, 3942, 3942, 3942, 3942, 4468, 3942,
     3942, 3942, 4472, 3942, 3942, 3942, 3942, 3942, 3942, 3942,
     3942, 3942, 3942, 3942, 3942, 3942, 3942, 3942, 3942, 3942,
     3942, 3942, 4480, 2738, 3942, 3942, 3942, 3942, 3942, 3942,
     3942, 3942, 3942, 3942, 3942, 3942, 4490, 3942, 3942, 3942,

     3942, 3942, 3942, 3942, 3942, 3942, 4465, 3942, 3942, 4466,
     3942, 3942, 3942, 3942, 4466, 3942, 3942, 4491, 4492, 4492,
     4466, 4466, 3942, 3942, 3942, 4466, 4466, 4466, 4466, 3942,
     3942, 4466, 3942, 3942, 3942, 4468, 3942, 4472, 3942, 4493,
     4494, 3942, 3942, 3942, 3942, 3942, 3942, 3942, 2738, 3942,
     3942, 3942, 3942, 3942, 3942, 3942, 3942, 3942, 3942, 3942,
     3942, 3942, 4465, 4466, 3942, 3942, 3942, 3942, 3942, 4492,
     3942, 4466, 4466, 3942, 4466, 4466, 4466, 3942, 3942, 3942,
     3942, 3942, 3942, 4468, 3942, 3942, 4493, 4495, 4494, 4496,
     3942, 3942, 2738, 3942, 3942, 3942, 3942, 3942, 3942, 3942,

     3942, 3942, 3942, 4465, 3942, 3942, 3942, 4466, 3942, 3942,
     4466, 4466, 3942, 3942, 3942, 3942, 4468, 3942, 3942, 4495,
     4496, 2738, 3942, 3942, 3942, 3942, 3942, 3942, 3942, 4465,
     3942, 3942, 3942, 4466, 4466, 3942, 4468, 3942, 3942, 2738,
     3942, 3942, 3942, 3942, 4465, 3942, 3942, 4466, 3942, 3942,
     3942, 4468, 3942, 3942, 2738, 3942, 3942, 3942, 3942, 3942,
     3942, 3942, 3942, 3942, 3942, 3942, 4468, 3942, 3942, 2738,
     3942, 3942, 3942, 3942, 3942, 3942, 4468, 3942, 3942, 2738,
     3942, 3942, 3942, 3942, 4468, 3942, 2738, 3942, 3942, 4468,
     3942, 2738, 3942, 3942, 4468, 3942, 2738, 3942, 3942, 3942,

     3942, 4468, 3942, 2738, 3942, 4468, 3942, 2738, 3942, 4468,
     3942, 2738, 3942, 4468, 3942, 2738, 3942, 4468, 3942, 2738,
     3942, 4468, 3942, 2738, 3942, 4468, 3942, 2738, 3942, 4468,
     3942, 2738, 3942, 4468, 3942, 2738, 3942, 4468, 3942, 2738,
     3942, 4468, 3942, 2738, 3942, 4468, 3942, 2738, 3942, 4468,
     3942, 2738, 3942, 4468, 3942, 2738, 3942, 4468, 3942, 2738,
     3942, 4468, 3942, 2738, 3942, 4468, 3942, 2738, 3942, 4468,
     3942, 2738, 3942, 4468, 3942, 2738, 3942, 4468, 3942, 2738,
     3942, 4468, 3942, 2738, 3942, 4468, 3942, 2738, 3942, 4468,
     3942, 2738, 3942, 4468, 3942, 2738, 3942, 4468, 3942, 2738,

     3942, 4468, 3942, 2738, 3942, 4468, 3942, 2738, 3942, 4468,
     3942, 2738, 3942, 4468, 3942, 2738, 3942, 4468, 3942, 2738,
     3942, 4468, 3942, 2738, 3942, 4468, 3942, 2738, 3942, 4468,
     3942, 2738, 3942, 4468, 3942, 2738, 3942, 4468, 3942, 2738,
     3942, 4468, 3942, 2738, 3942, 4468, 3942, 2738, 3942, 4468,
     3942, 2738, 3942, 4468, 3942, 2738, 3942, 4468, 3942, 2738,
     3942, 4468, 3942, 2738, 3942, 4468, 3942, 2738, 3942, 4468,
     3942, 2738, 3942, 4468, 3942, 2738, 3942, 4468, 3942, 2738,
     3942, 4468, 3942, 2738, 3942, 4468, 3942, 2738, 3942, 4468,
     3942, 2738, 3942, 4468, 3942, 2738, 3942, 4468, 3942, 2738,

     3942, 4468, 3942, 2738, 3942, 4468, 3942, 2738, 3942, 4468,
     3942, 2738, 3942, 4468, 3942, 2738, 3942, 4468, 3942, 2738,
     3942, 4468, 3942, 2738, 3942, 4468, 3942, 2738, 3942, 4468,
     3942, 2738, 3942, 4468, 3942, 2738, 3942, 4468, 3942, 2738,
     4468,    0, 3942, 3942, 3942, 3942, 3942, 3942, 3942, 3942,
     3942, 3942, 3942, 3942, 3942, 3942, 3942, 3942, 3942, 3942,
     3942, 3942, 3942, 3942, 3942, 3942, 3942, 3942, 3942, 3942,
     3942, 3942, 3942, 3942, 3942, 3942, 3942, 3942, 3942, 3942,
     3942, 3942, 3942, 3942, 3942, 3942, 3942, 3942, 3942, 3942,
     3942, 3942, 3942, 3942, 3942, 3942, 3942, 3942, 3942, 3942,

     3942, 3942, 3942, 3942, 3942, 3942, 3942, 3942, 3942, 3942,
     3942, 3942, 3942, 3942, 3942, 3942, 3942, 3942, 3942, 3942,
     3942, 3942, 3942, 3942, 3942, 3942, 3942, 3942, 3942, 3942,
     3942, 3942, 3942, 3942, 3942, 3942, 3942, 3942, 3942, 3942,
     3942, 3942, 3942, 3942, 3942, 3942, 3942, 3942, 3942, 3942,
     3942, 3942, 3942, 3942, 3942, 3942, 3942, 3942, 3942, 3942,
     3942, 3942, 3942, 3942, 3942, 3942, 3942, 3942, 3942, 3942,
     3942, 3942, 3942, 3942, 3942, 3942, 3942, 3942, 3942, 3942,
     3942, 3942, 3942, 3942, 3942, 3942, 3942, 3942, 3942, 3942,
     3942, 3942, 3942, 3942, 3942, 3942, 3942, 3942, 3942, 3942,

     3942, 3942, 3942, 3942, 3942, 3942, 3942, 3942, 3942, 3942,
     3942, 3942, 3942, 3942, 3942, 3942, 3942, 3942, 3942, 3942,
     3942, 3942, 3942, 3942, 3942, 3942, 3942, 3942, 3942, 3942,
     3942, 3942, 3942, 3942, 3942, 3942, 3942, 3942, 3942, 3942,
     3942, 3942, 3942, 3942, 3942, 3942, 3942, 3942, 3942, 3942,
     3942, 3942, 3942, 3942, 3942, 3942, 3942, 3942, 3942, 3942,
     3942, 3942, 3942, 3942, 3942, 3942, 3942, 3942, 3942, 3942,
     3942, 3942, 3942, 3942, 3942, 3942, 3942, 3942, 3942, 3942,
     3942, 3942, 3942, 3942, 3942, 3942, 3942, 3942, 3942, 3942,
     3942, 3942, 3942, 3942, 3942, 3942, 3942, 3942, 3942, 3942,

     3942, 3942, 3942, 3942, 3942, 3942, 3942, 3942, 3942, 3942,
     3942, 3942, 3942, 3942, 3942, 3942, 3942, 3942, 3942, 3942,
     3942, 3942, 3942, 3942, 3942, 3942, 3942, 3942, 3942, 3942,
     3942, 3942, 3942, 3942, 3942, 3942, 3942, 3942, 3942, 3942,
     3942, 3942, 3942, 3942, 3942, 3942, 3942, 3942, 3942, 3942,
     3942, 3942, 3942, 3942, 3942, 3942, 3942, 3942, 3942, 3942,
     3942, 3942, 3942, 3942, 3942, 3942, 3942, 3942, 3942, 3942,
     3942, 3942, 3942, 3942, 3942, 3942, 3942, 3942, 3942, 3942,
     3942, 3942, 3942, 3942, 3942, 3942, 3942, 3942, 3942, 3942,
     3942, 3942, 3942, 3942, 3942, 3942, 3942, 3942, 3942, 3942,

     3942, 3942, 3942, 3942, 3942, 3942, 3942, 3942, 3942, 3942,
     3942, 3942, 3942, 3942, 3942, 3942, 3942, 3942, 3942, 3942,
     3942, 3942, 3942, 3942, 3942, 3942, 3942, 3942, 3942, 3942,
     3942, 3942, 3942, 3942, 3942, 3942, 3942, 3942, 3942, 3942,
     3942, 3942, 3942, 3942, 3942, 3942, 3942, 3942, 3942, 3942,
     3942, 3942, 3942, 3942, 3942, 3942, 3942, 3942, 3942, 3942,
     3942, 3942, 3942, 3942, 3942, 3942, 3942, 3942, 3942, 3942,
     3942, 3942, 3942, 3942, 3942, 3942, 3942, 3942, 3942, 3942,
     3942, 3942, 3942, 3942, 3942, 3942, 3942, 3942, 3942, 3942,
     3942, 3942, 3942, 3942, 3942, 3942, 3942, 3942, 3942, 3942,

     3942, 3942, 3942, 3942, 3942, 3942, 3942, 3942, 3942, 3942,
     3942, 3942, 3942, 3942, 3942, 3942, 3942, 3942, 3942, 3942,
     3942, 3942, 3942, 3942, 3942, 3942, 3942, 3942, 3942, 3942,
     3942, 3942, 3942, 3942, 3942, 3942, 3942, 3942, 3942, 3942,
     3942, 3942, 3942, 3942, 3942, 3942, 3942, 3942, 3942, 3942,
     3942, 3942, 3942, 3942, 3942, 3942, 3942, 3942, 3942, 3942,
     3942, 3942, 3942, 3942, 3942, 3942, 3942, 3942, 3942, 3942,
     3942, 3942, 3942, 3942, 3942, 3942, 3942, 3942, 3942, 3942,
     3942, 3942, 3942, 3942, 3942, 3942, 3942, 3942, 3942, 3942,
     3942, 3942, 3942, 3942, 3942, 3942

    } ;

static yyconst flex_int16_t yy_nxt[29933] =
    {   0,
     3942, 3942,  263, 3942,  263, 3942,  264,  265,  264,  265,
     1276,  266, 3942,  266, 1276, 1123, 1133, 1134, 3942,  267,
     1124,  267,  262,  262,  263,  262,  262,  262,  264,  265,
      268,  262,  262,  266,  262,  262,  262,  262,  262,  262,
      262,  267,  262,  262,  262,  262,  262,  262,  262,  262,
      262,  262,  262,  262,  269,  269,  269,  269,  269,  269,
      269,  269,  269,  269,  269,  269,  269,  269,  269,  269,
      269,  269,  269,  262,  262,  262,  262,  269,  269,  269,
      269,  269,  269,  269,  269,  269,  269,  269,  269,  269,
      269,  269,  269,  269,  269,  269,  269,  269,  269,  269,

      269,  269,  262,  262,  262,  269,  271,  272,  271,  271,
     1131,  273,  274, 1274, 1275, 1132,  275,  271,  272,  271,
      271,  263,  273,  274,  276,  324,  325,  275, 1176, 1484,
      326,  327,  328, 1177, 1158,  276,  263, 1158,  329, 1186,
      387,  388, 1435, 1436, 1187,  389,  330,  263,  331, 1123,
      390,  264,  265,  391, 1124, 1126,  266,  277, 1126, 1203,
      392, 1500, 1203, 1484,  267, 1501, 1127, 2671,  277,  262,
      278,  279,  280,  278,  281,  264,  265,  282,  262,  262,
      266,  262,  262,  262,  262,  262,  262,  283,  267,  262,
      262,  262,  262,  262,  284,  285,  262,  262,  262,  262,

      262,  286,  286,  286,  286,  286,  286,  286,  286,  286,
      286,  286,  286,  286,  286,  286,  286,  286,  286,  286,
      262,  262,  262,  262,  286,  286,  286,  286,  286,  286,
      286,  286,  286,  286,  286,  286,  286,  286,  286,  286,
      286,  286,  286,  286,  286,  286,  286,  286,  286,  287,
      262,  288,  286,  262,  289,  290,  291,  289,  292,  264,
      265,  293,  262,  294,  266,  295,  262,  294,  296,  297,
      296,  262,  298,  262,  262,  262,  262,  262,  299,  294,
      300,  294,  262,  262,  301,  302,  302,  302,  302,  302,
      302,  302,  302,  302,  302,  302,  302,  302,  302,  302,

      302,  302,  302,  302,  295,  262,  262,  262,  302,  303,
      302,  302,  302,  302,  302,  302,  302,  302,  302,  302,
      302,  302,  302,  302,  302,  302,  304,  302,  302,  302,
      302,  302,  302,  287,  262,  292,  302,  305,  305,  306,
      305,  305,  305,  307,  308,  309,  305,  305,  310,  305,
      305,  305,  305,  305,  305,  305,  311,  305,  305,  305,
      305,  305,  312,  313,  305,  305,  305,  305,  305,  314,
      314,  314,  314,  314,  314,  314,  314,  314,  314,  314,
      314,  314,  314,  314,  314,  314,  314,  314,  305,  305,
      305,  305,  314,  314,  314,  314,  314,  314,  314,  314,

      314,  314,  314,  314,  314,  314,  314,  314,  314,  314,
      314,  314,  314,  314,  314,  314,  314,  305,  305,  305,
      314,  305,  305,  306,  305,  305,  305,  307,  308,  315,
      305,  305,  310,  305,  305,  305,  305,  305,  305,  305,
      311,  305,  305,  305,  305,  305,  305,  313,  305,  305,
      305,  305,  305,  316,  316,  316,  316,  316,  316,  316,
      316,  316,  316,  316,  316,  316,  316,  316,  316,  316,
      316,  316,  305,  305,  305,  305,  316,  316,  316,  316,
      316,  316,  316,  316,  316,  316,  316,  316,  316,  316,
      316,  316,  316,  316,  316,  316,  316,  316,  317,  316,

      316,  318,  305,  305,  316,  263, 1338,  263, 1123,  264,
      265,  264,  265, 1124,  266, 1538,  266, 1166, 1166, 1167,
     1166,  263,  267, 1123,  267,  324,  325, 1190, 1124, 1539,
      326,  327,  328, 1191,  451,  450,  451,  451,  329,  264,
      265, 1168, 1193, 1276,  266, 1123,  330, 1276,  331, 1339,
     1124, 1545,  461, 1546,  319, 2070,  319,  262,  262,  263,
      262,  262,  262,  264,  265,  320,  262,  262,  266,  262,
      321,  262,  262,  262,  262,  262,  267,  262,  262,  262,
      262,  262,  262,  262,  262,  262,  262,  262,  262,  322,
      322,  322,  322,  322,  322,  322,  322,  322,  322,  322,

      322,  322,  322,  322,  322,  322,  322,  322,  262,  262,
      262,  262,  322,  322,  322,  322,  322,  322,  322,  322,
      322,  322,  322,  322,  322,  322,  322,  322,  322,  322,
      322,  322,  322,  322,  322,  322,  322,  262,  262,  262,
      322,  332,  333,  334,  332,  333,  332,  335,  336,  337,
      332,  332,  338,  332,  332,  332,  332,  332,  332,  332,
      339,  332,  332,  332,  332,  332,  332,  340,  332,  332,
      332,  332,  332,  341,  341,  341,  341,  341,  341,  341,
      341,  341,  341,  341,  341,  341,  341,  341,  341,  341,
      341,  341,  342,  332,  332,  332,  341,  341,  341,  341,

      341,  341,  341,  341,  341,  341,  341,  341,  341,  341,
      341,  341,  341,  341,  341,  341,  341,  341,  341,  341,
      341,  343,  332,  332,  341,  263, 1384,  263, 1123,  345,
      346,  345,  346, 1124,  347, 1385,  347, 1175, 1175, 1175,
     1175,  263,  348,  437,  348,  387,  388,  438,  439, 1753,
      389, 1230,  440, 1232, 1230,  390, 1233,  263,  391, 1123,
      441,  264,  265, 1754, 1124,  392,  266, 1545,  442, 1546,
     1140, 1140, 1140, 1140,  267, 1753,  349, 1141,  349,  350,
      350,  351,  350,  350,  350,  352,  353,  354,  350,  350,
      355,  350,  350,  350,  350,  350,  350,  350,  356,  350,

      350,  350,  350,  350,  350,  350,  350,  350,  350,  350,
      350,  357,  357,  357,  357,  357,  357,  357,  357,  357,
      357,  357,  357,  357,  357,  357,  357,  357,  357,  357,
      350,  350,  350,  350,  357,  357,  357,  357,  357,  357,
      357,  357,  357,  357,  357,  357,  357,  357,  357,  357,
      357,  357,  357,  357,  357,  357,  357,  357,  357,  358,
      350,  350,  357,  262,  359,  360,  361,  359,  262,  264,
      265,  362,  262,  262,  266,  262,  262,  262,  296,  363,
      296,  262,  298,  262,  262,  262,  262,  262,  364,  285,
      365,  262,  366,  262,  301,  367,  367,  367,  367,  367,

      367,  367,  367,  367,  367,  367,  367,  367,  367,  367,
      367,  367,  367,  367,  262,  368,  262,  262,  367,  367,
      367,  367,  367,  367,  367,  367,  367,  367,  367,  367,
      367,  367,  367,  367,  367,  367,  367,  367,  367,  367,
      367,  367,  367,  369,  262,  262,  367,  371,  372,  371,
      371, 1283,  373,  374, 2674, 1288, 1284,  375,  371,  372,
      371,  371, 1336,  373,  374,  376, 1289, 1337,  375,  263,
     1356, 1484, 1131,  380,  265, 1357,  376, 1132,  381,  382,
      263, 1190, 1861,  383,  380,  265,  267, 1191, 1395,  381,
      382, 1395, 1862,  384,  383, 1123, 1193,  267,  437, 1401,

     1124, 1123,  438,  439,  384, 1484, 1124,  440,  263, 1123,
      377, 1782,  478,  479, 1124,  441,  378,  480,  481,  482,
     1782,  377,  379,  442, 1545,  483, 1546,  378, 1129, 1129,
     1129, 1129, 1194,  379,  451,  450,  451,  451, 1373,  264,
      265, 2065, 1422, 1374,  266, 1422, 1130,  385, 1159, 1159,
     1159, 1159,  461, 1403, 1422, 1160, 2066, 1422,  385,  262,
      393,  394,  395,  393,  396,  264,  397,  398,  399,  400,
      266,  401,  262,  400,  402,  403,  402,  404,  405,  406,
      406,  406,  406,  406,  407,  408,  409,  410,  262,  411,
      412,  413,  413,  413,  413,  413,  413,  413,  413,  413,

      413,  413,  413,  413,  414,  413,  413,  413,  413,  413,
      415,  262,  262,  416,  417,  418,  413,  419,  420,  421,
      422,  423,  413,  424,  425,  426,  427,  428,  413,  429,
      413,  430,  431,  432,  433,  434,  413,  413,  413,  435,
      262,  396,  413,  262,  443,  444,  443,  443,  445,  264,
      265,  446,  262,  262,  266,  262,  262,  262,  262,  262,
      262,  262,  267,  262,  262,  262,  262,  262,  447,  262,
      262,  262,  262,  262,  262,  448,  448,  448,  448,  448,
      448,  448,  448,  448,  448,  448,  448,  448,  448,  448,
      448,  448,  448,  448,  262,  262,  262,  262,  448,  448,

      448,  448,  448,  448,  448,  448,  448,  448,  448,  448,
      448,  448,  448,  448,  448,  448,  448,  448,  448,  448,
      448,  448,  448,  262,  262,  445,  448,  262,  449,  450,
      451,  449,  262,  264,  452,  453,  262,  262,  266,  454,
      262,  262,  262,  455,  262,  262,  456,  262,  262,  262,
      262,  262,  262,  457,  262,  458,  262,  262,  262,  459,
      459,  459,  459,  459,  459,  459,  459,  459,  459,  459,
      459,  459,  459,  459,  459,  459,  459,  459,  460,  262,
      262,  262,  459,  459,  459,  459,  459,  459,  459,  459,
      459,  459,  459,  459,  459,  459,  459,  459,  459,  459,

      459,  459,  459,  459,  459,  459,  459,  262,  262,  262,
      459,  263, 2092,  263, 1373,  264,  462,  264,  462, 1374,
      266,  463,  266,  463, 1796,  464, 1123,  464,  267, 1267,
      267, 1124, 1267, 1797,  465,  466,  465,  466,  468,  469,
      468,  468, 1398,  470,  471, 1456, 1425, 1399,  472,  473,
      474, 1426, 1456,  475, 1445, 1446,  476,  468,  469,  468,
      468, 1433,  470,  471, 2677, 1440, 1434,  472,  473,  474,
     1441, 2101,  475,  263, 1425,  476,  485,  478,  479, 1443,
      486,  487,  480,  481,  482,  488, 1268, 1269, 1456,  464,
      483,  464,  485,  489,  508, 1457,  486,  487,  509,  510,

      490,  488, 1457,  511,  512, 1129, 1129, 1129, 1129,  489,
     2053,  513, 1282, 1282, 1282, 1282,  490,  508,  514,  515,
      630,  509,  510, 1130,  631,  632,  511,  512, 2054,  633,
      591,  263, 2105,  591,  513,  592,  593,  634, 1457, 1123,
      594,  514,  515,  595, 1124, 1453,  591,  263,  596,  591,
     1454,  592,  593, 2109,  491, 2113,  594, 1447, 1448,  595,
     1169, 1169, 1169, 1169,  596, 1517, 1530, 1170, 1517, 1530,
      491,  467,  492,  493,  492,  492,  467,  470,  471,  494,
      467,  467,  472,  467,  467,  467,  467,  495,  467,  467,
      496,  467,  467,  467,  467,  467,  495,  495,  467,  497,

      467,  467,  467,  498,  498,  498,  498,  498,  498,  498,
      498,  498,  498,  498,  498,  498,  498,  498,  498,  498,
      498,  498,  467,  467,  467,  467,  498,  499,  498,  500,
      498,  498,  498,  498,  498,  498,  498,  498,  498,  501,
      502,  498,  498,  503,  504,  505,  498,  506,  498,  498,
      498,  495,  467,  467,  498,  263, 1683, 1684,  263,  517,
      518, 1456,  517,  518,  519, 1667, 2687,  519,  524,  525,
      526,  524,  520,  527,  528,  520, 1450, 1542,  529, 1450,
     1542, 1668,  524,  525,  526,  524,  530,  527,  528, 1451,
     1421, 2121,  529, 1421,  531, 1545, 1393, 1546,  532, 1431,

      530, 1805, 1431, 2690,  521, 1432,  522,  521,  531,  522,
     1806, 1457,  532,  524,  525,  526,  524, 1123,  527,  528,
     2156, 1460, 1124,  529,  524,  525,  526,  524,  263,  527,
      528,  530,  264,  265,  529, 1463, 2691,  266, 2062,  531,
     1464, 1456,  530,  532, 1466,  267, 2156,  533,  534, 1467,
      531,  263, 1123, 1458,  532,  264,  265, 1124, 1459, 2461,
      266,  533,  534, 2244,  524,  525,  526,  524,  267,  527,
      528, 1457,  568, 1123,  529, 1478,  569,  570, 1124, 2245,
     1479,  571,  530, 2461,  572, 1135, 1136, 1136, 1135,  573,
      531, 1457,  533,  535,  536,  524,  525,  526,  524, 1967,

      527,  528, 1137,  533,  535,  529,  568,  566, 1968, 1138,
      569,  570, 1123,  530, 1480,  571, 1481, 1124,  572, 1775,
     1776,  531,  574,  573,  263,  536, 1123, 1484,  264,  265,
      566, 1124, 1482,  266,  606,  607, 1163, 1163, 1163, 1163,
     2187,  267,  263,  533,  537,  263,  264,  265, 2186,  264,
      265,  266,  606,  607,  266, 2222,  574, 1782, 1506,  267,
     1164, 1484,  267, 1506, 1139, 2223, 1264, 1264, 1264, 1264,
      617, 1782,  618, 1265,  533,  537,  262,  262,  263,  262,
      262,  262,  264,  265,  538,  262,  262,  266,  262,  262,
      262,  262,  262,  262,  262,  267,  262,  262,  262,  262,

      262,  262,  539,  262,  262,  262,  262,  262,  540,  540,
      540,  540,  540,  540,  540,  540,  540,  540,  540,  540,
      540,  540,  540,  540,  540,  540,  540,  262,  262,  262,
      262,  540,  540,  540,  540,  540,  540,  540,  540,  540,
      540,  540,  540,  540,  541,  540,  540,  540,  540,  540,
      540,  540,  540,  540,  540,  540,  262,  262,  262,  540,
      262,  542,  543,  542,  542,  544,  264,  265,  545,  262,
      262,  266,  262,  262,  262,  262,  262,  262,  262,  267,
      262,  262,  262,  262,  262,  546,  262,  262,  262,  262,
      262,  262,  547,  547,  547,  547,  547,  547,  547,  547,

      547,  547,  547,  547,  547,  547,  547,  547,  547,  547,
      547,  262,  262,  262,  262,  547,  547,  547,  547,  547,
      547,  547,  547,  547,  547,  547,  547,  547,  547,  547,
      547,  547,  547,  547,  547,  547,  547,  547,  547,  547,
      262,  262,  544,  547,  549,  550, 1123,  549, 1509,  551,
      552, 1124, 1514, 1510,  553,  560,  550, 1515,  560, 1521,
      551,  561,  554, 1531, 1522,  553,  549,  562, 1532,  549,
      555,  563,  552,  554,  556, 1805,  553, 1136, 1136, 1136,
     1136,  555,  263, 1562,  564,  556,  623,  624, 1563, 1805,
     2097,  625,  555, 1373, 1137,  557,  556, 1641, 1374,  626,

     1641, 1138,  549,  562, 2097,  549,  557,  563,  552,  568,
     1123, 1123,  553,  575,  570, 1124, 1124,  565,  576, 1642,
      564,  572, 1642,  558,  559, 1545,  573, 1546,  555, 2446,
     1643,  627,  556,  628,  558,  559, 1484, 1126,  568, 1545,
     1126, 1546,  575,  570, 2278,  557,  557,  576, 1127, 1574,
      572, 1456, 1574,  565, 1575,  573,  550, 2340, 1123,  574,
      577,  578,  550, 1124, 1782,  553,  577,  578, 2528, 1547,
     1484,  553, 2529,  579, 1221, 1221, 1221, 1221, 1782,  579,
      580,  557,  557, 1548, 1354,  556,  580, 1354,  574,  583,
      584,  556, 1611,  585,  586,  583,  584, 1612,  587,  585,

      586, 1457, 1123, 1620,  587,  598,  588, 1124, 1621,  599,
      600,  598,  588, 1624,  601,  599,  600, 2652, 1625, 1630,
      601,  263,  602, 2208, 1631,  264,  265,  263,  602, 2209,
      266,  264,  265, 2693,  581, 2653,  266, 2208,  267,  589,
      581, 1268, 1269, 2209,  267,  589,  609,  610,  609,  609,
     2694,  611,  612, 1222, 2473,  603,  613,  609,  610,  609,
      609,  603,  611,  612,  614, 1435, 1436,  613, 1162, 1163,
     1163, 1162,  615, 1123,  616,  614, 1126,  263, 1124, 1126,
     2473,  264,  265,  615,  263,  616,  266, 1127,  623,  624,
     1445, 1446, 1164,  625,  267, 1200, 1200, 1200, 1200,  604,

      605,  626,  617,  263,  618,  604,  605,  619,  265, 1970,
     1123, 1123,  266,  620,  621, 1124, 1124,  263, 1971, 1201,
      267,  619,  265, 1202, 1123, 1123,  266,  620,  621, 1124,
     1124, 1970,  630,  627,  267,  628,  631,  632, 1848, 2695,
     1971,  633, 1361, 1361, 1361, 1361, 1849, 1139, 1850,  634,
      262,  262,  263,  262,  262,  262,  264,  265,  635,  262,
      262,  266,  262,  262,  262,  262,  262,  262,  262,  267,
      262,  262,  262,  262,  262,  262,  636,  262,  262,  262,
      262,  262,  637,  637,  637,  637,  637,  637,  637,  637,
      637,  637,  637,  637,  637,  637,  637,  637,  637,  637,

      637,  262,  262,  262,  262,  637,  637,  637,  638,  637,
      637,  637,  637,  637,  637,  637,  637,  637,  637,  637,
      637,  637,  637,  637,  637,  637,  639,  637,  637,  637,
      262,  262,  262,  637,  641, 1854,  641, 1123,  642,  643,
      642,  643, 1124,  644, 1855,  644, 1359, 1359, 1359, 1359,
     1856,  645, 2696,  645,  648,  649,  648,  648, 1123,  650,
      651, 1360, 2697, 1124,  652,  648,  649,  648,  648, 1123,
      650,  651,  653, 1484, 1124,  652,  656,  657,  656,  656,
     1660,  658,  659,  653, 2707, 1661,  660,  692, 1460,  661,
     1123,  693,  694,  662,  663, 1124,  695, 2423, 1123, 1180,

     1180, 1180, 1180, 1666,  696, 2422,  664, 1484, 1673, 2708,
     1181,  654,  646, 1674,  646,  656,  657,  656,  656, 1123,
      658,  659,  654, 1164, 1124,  660,  263,  664,  661, 1123,
      264,  265,  662,  663, 1124,  266, 1735,  263, 1457, 1735,
     2709,  264,  265,  267,  692,  664,  266, 1669,  693,  694,
     1669,  690, 2710,  695,  267, 1736, 1342, 1342, 1342, 1342,
     1670,  696,  690, 1343, 1447, 1448,  664,  262,  262,  263,
      262,  262,  262,  264,  265,  665,  262,  262,  266,  262,
      262,  262,  262,  262,  262,  262,  267,  262,  262,  262,
      262,  262,  262,  666,  262,  262,  262,  262,  262,  667,

      667,  667,  667,  667,  667,  667,  667,  667,  667,  667,
      667,  667,  667,  667,  667,  667,  667,  667,  262,  262,
      262,  262,  667,  667,  667,  667,  667,  667,  667,  667,
      667,  667,  667,  667,  667,  667,  667,  667,  667,  667,
      667,  667,  667,  667,  667,  667,  667,  668,  262,  262,
      667,  262,  262,  263,  262,  262,  262,  264,  265,  669,
      262,  262,  266,  262,  262,  262,  262,  262,  262,  262,
      267,  262,  262,  262,  262,  262,  262,  262,  262,  262,
      262,  262,  262,  670,  670,  670,  670,  670,  670,  670,
      670,  670,  670,  670,  670,  670,  670,  670,  670,  670,

      670,  670,  262,  262,  262,  262,  670,  670,  670,  670,
      670,  670,  670,  670,  670,  670,  670,  670,  670,  670,
      670,  670,  670,  670,  670,  670,  670,  670,  670,  670,
      670,  262,  262,  262,  670,  262,  262,  263,  262,  262,
      262,  264,  265,  671,  262,  262,  266,  262,  262,  262,
      262,  672,  262,  262,  267,  262,  262,  262,  262,  262,
      262,  672,  262,  262,  262,  262,  262,  673,  673,  673,
      673,  673,  673,  673,  673,  673,  673,  673,  673,  673,
      673,  673,  673,  673,  673,  673,  262,  262,  262,  262,
      673,  673,  673,  673,  673,  673,  673,  673,  673,  673,

      673,  673,  673,  673,  673,  673,  673,  673,  673,  673,
      673,  673,  673,  673,  673,  262,  262,  262,  673,  262,
      674,  675,  674,  674,  262,  264,  265,  676,  262,  262,
      266,  262,  262,  262,  262,  672,  262,  262,  267,  262,
      262,  262,  262,  262,  262,  672,  262,  262,  262,  262,
      262,  677,  677,  677,  677,  677,  677,  677,  677,  677,
      677,  677,  677,  677,  677,  677,  677,  677,  677,  677,
      262,  262,  262,  262,  677,  677,  677,  677,  677,  677,
      677,  677,  677,  677,  677,  677,  677,  677,  677,  677,
      677,  677,  677,  677,  677,  677,  677,  677,  677,  262,

      262,  262,  677,  679, 2043,  679, 1123,  680,  681,  680,
      681, 1124,  682, 2044,  682, 1237, 1237, 1237, 1237,  263,
      683,  263,  683,  700,  701,  700,  701, 1123,  702, 1123,
      702, 2711, 1124, 1238, 1124,  717,  703,  717,  703,  718,
      719,  718,  719,  704,  720,  704,  720, 1136, 1136, 1136,
     1136,  729,  721, 1123,  721,  730,  731,  684, 1124,  684,
      732, 1123,  733,  685, 1137,  685, 1124, 1123,  734, 2212,
     2213, 1138, 1124,  686,  687,  686,  687, 1392, 1392, 1392,
     1392,  688,  689,  688,  689,  262,  262,  263,  262,  262,
      262,  264,  265,  697,  262,  262,  266,  262,  262,  262,

      262,  262,  262,  262,  267,  262,  262,  262,  262,  262,
      262,  262,  262,  262,  262,  262,  262,  698,  698,  698,
      698,  698,  698,  698,  698,  698,  698,  698,  698,  698,
      698,  698,  698,  698,  698,  698,  262,  262,  262,  262,
      698,  698,  698,  698,  698,  698,  698,  698,  698,  698,
      698,  698,  698,  698,  698,  698,  698,  698,  698,  698,
      698,  698,  698,  698,  698,  262,  262,  262,  698,  705,
      706,  450,  706,  706,  705,  707,  708,  709,  705,  705,
      710,  705,  705,  705,  705,  711,  705,  705,  712,  705,
      705,  705,  705,  705,  705,  713,  705,  705,  705,  705,

      705,  714,  714,  714,  714,  714,  714,  714,  714,  714,
      714,  714,  714,  714,  714,  714,  714,  714,  714,  714,
      705,  705,  705,  705,  714,  714,  714,  714,  714,  714,
      714,  714,  714,  714,  714,  714,  714,  714,  714,  714,
      714,  714,  714,  714,  714,  714,  714,  714,  714,  715,
      705,  705,  714,  262,  262,  263,  262,  262,  262,  264,
      265,  722,  262,  262,  266,  723,  262,  262,  262,  262,
      262,  262,  267,  262,  262,  262,  262,  262,  724,  725,
      262,  262,  262,  262,  262,  726,  726,  726,  726,  726,
      726,  726,  726,  726,  726,  726,  726,  726,  726,  726,

      726,  726,  726,  726,  262,  262,  262,  262,  726,  726,
      726,  726,  726,  726,  726,  726,  726,  726,  726,  726,
      726,  726,  726,  726,  726,  726,  726,  726,  726,  726,
      726,  726,  726,  727,  262,  262,  726,  729, 1123, 1123,
     1749,  730,  731, 1124, 1124, 1750,  732, 2712,  733, 1392,
     1392, 1392, 1392, 2467,  734,  262,  262,  263,  262,  262,
      262,  264,  265,  735,  262,  262,  266,  736,  262,  262,
      262,  737,  262,  262,  267,  262,  262,  262,  262,  262,
      738,  725,  262,  262,  262,  262,  262,  739,  739,  739,
      739,  739,  739,  739,  739,  739,  739,  739,  739,  739,

      739,  739,  739,  739,  739,  739,  262,  262,  262,  262,
      739,  739,  739,  739,  739,  739,  739,  739,  739,  739,
      739,  739,  739,  739,  739,  739,  739,  739,  739,  739,
      739,  739,  739,  739,  739,  727,  262,  262,  739,  741,
     1751, 2714,  741,  742,  743, 1752,  742,  743,  744, 1731,
      745,  744, 1731,  745, 2715, 1742,  746,  263, 1742,  746,
      263,  264,  265,  263,  264,  265,  266,  264,  265,  266,
     1768, 2716,  266, 1743,  267, 1750, 1732,  267, 1751, 1456,
      267, 2717,  747, 1769,  263,  747,  263,  757,  264,  265,
      264,  265, 2718,  266, 1772,  266, 2733,  748, 1456, 1773,

      263,  267, 1780,  267,  264,  265, 1733, 1781,  757,  266,
      263,  766, 2734, 1158,  264,  265, 1158,  267, 1823,  266,
      797,  263, 1741, 1824, 1734,  264,  265,  267, 2735, 1457,
      266,  797,  263,  767, 1744, 2736,  264,  265,  267, 1745,
      749,  266,  750,  798,  768,  769,  751,  770, 1457,  267,
     1158, 1716,  752, 1158, 1716, 2737,  753,  754, 1717,  755,
     1718,  756,  263, 1291, 1718,  263,  264,  265, 1828,  264,
      265,  266, 1831,  748,  266, 1747,  766, 1832, 1747,  267,
      263, 1833,  267,  832,  264,  265, 1834,  833,  834,  266,
      263,  798,  835,  836,  264,  265, 1828,  267,  767,  266,

      837, 1748, 1777, 1203,  809, 1777, 1203,  267, 1764,  768,
      769, 1764,  770, 1293,  810, 1778,  749, 2740,  750, 1294,
     1126, 1765,  751, 1126, 1295, 1296, 1766, 1297,  752, 2273,
     2274, 1127,  753,  754, 1748,  755, 2741,  756,  262,  758,
      263,  262,  758,  262,  264,  265,  759,  262,  262,  266,
      760,  262,  262,  262,  262,  262,  262,  267,  262,  262,
      262,  262,  262,  262,  262,  262,  262,  262,  262,  262,
      761,  761,  761,  761,  761,  761,  761,  761,  761,  761,
      761,  761,  761,  761,  761,  761,  761,  761,  761,  262,
      262,  262,  262,  761,  761,  761,  762,  761,  761,  761,

      761,  761,  761,  761,  761,  761,  761,  761,  761,  761,
      761,  761,  761,  761,  763,  761,  761,  761,  262,  262,
      262,  761,  262,  262,  263,  262,  262,  262,  264,  265,
      764,  262,  262,  266,  262,  262,  262,  262,  262,  262,
      262,  267,  262,  262,  262,  262,  262,  262,  262,  262,
      262,  262,  262,  262,  765,  765,  765,  765,  765,  765,
      765,  765,  765,  765,  765,  765,  765,  765,  765,  765,
      765,  765,  765,  262,  262,  262,  262,  765,  765,  765,
      765,  765,  765,  765,  765,  765,  765,  765,  765,  765,
      765,  765,  765,  765,  765,  765,  765,  765,  765,  765,

      765,  765,  262,  262,  262,  765,  262,  262,  263,  262,
      262,  262,  264,  265,  771,  262,  262,  266,  262,  262,
      262,  262,  262,  262,  262,  267,  262,  262,  262,  262,
      262,  262,  262,  262,  262,  262,  262,  262,  772,  772,
      772,  772,  772,  772,  772,  772,  772,  772,  772,  772,
      772,  772,  772,  772,  772,  772,  772,  262,  262,  262,
      262,  772,  772,  772,  772,  772,  772,  772,  772,  772,
      772,  772,  772,  772,  772,  772,  772,  772,  772,  772,
      772,  772,  772,  772,  772,  772,  262,  262,  262,  772,
      262,  262,  263,  262,  262,  262,  264,  265,  773,  262,

      262,  266,  262,  262,  262,  262,  262,  262,  262,  267,
      262,  262,  262,  262,  262,  262,  262,  262,  262,  262,
      262,  262,  774,  774,  774,  774,  774,  774,  774,  774,
      774,  774,  774,  774,  774,  774,  774,  774,  774,  774,
      774,  262,  262,  262,  262,  774,  774,  774,  774,  774,
      774,  774,  774,  774,  774,  774,  774,  774,  774,  774,
      774,  774,  774,  774,  774,  774,  774,  774,  774,  774,
      262,  262,  262,  774,  776,  777,  776,  776,  832,  778,
      779, 2742,  833,  834,  780,  781,  782,  835,  836,  783,
      784, 1230,  785, 1798, 1230,  837, 1798, 1799, 2097,  786,

      787,  263,  788,  789,  790,  264,  265, 2098, 2743, 2013,
      266, 1800,  263, 1190, 2014,  809,  812,  813,  267, 1191,
     2376,  814,  815,  816,  791,  810,  782, 2744, 1193,  817,
      842,  843,  842,  842, 2376,  844,  845,  818, 2016,  819,
      846,  847,  848, 2017, 1239, 1239, 1239, 1239,  849, 1402,
     1402, 1402, 1402,  792,  782,  776,  777,  776,  776,  854,
      778,  779, 1240,  855,  856,  780,  781,  782,  857, 2745,
      783,  784, 1190,  785, 1230, 2746,  858, 1230, 1191, 1782,
      786,  787,  859,  788,  789,  790,  263, 1193, 1782,  854,
      812,  813, 2747,  855,  856,  814,  815,  816,  857, 1242,

     1242, 1242, 1242,  817, 1506,  791,  858,  782, 2748, 1506,
     2749,  818,  859,  819,  842,  843,  842,  842, 1845,  844,
      845, 1846, 2208, 1244,  846,  847,  848, 1391, 1392, 1392,
     1391, 2208,  849, 1393,  792,  782,  262,  793,  794,  793,
      793,  262,  264,  265,  795,  262,  262,  266,  262,  262,
      262,  262,  262,  262,  262,  267,  262,  262,  262,  262,
      262,  262,  262,  262,  262,  262,  262,  262,  796,  796,
      796,  796,  796,  796,  796,  796,  796,  796,  796,  796,
      796,  796,  796,  796,  796,  796,  796,  262,  262,  262,
      262,  796,  796,  796,  796,  796,  796,  796,  796,  796,

      796,  796,  796,  796,  796,  796,  796,  796,  796,  796,
      796,  796,  796,  796,  796,  796,  262,  262,  262,  796,
      262,  799,  800,  799,  799,  262,  264,  265,  801,  262,
      802,  266,  803,  262,  802,  262,  804,  262,  262,  805,
      262,  262,  262,  262,  262,  262,  806,  262,  807,  262,
      262,  262,  808,  808,  808,  808,  808,  808,  808,  808,
      808,  808,  808,  808,  808,  808,  808,  808,  808,  808,
      808,  262,  262,  262,  262,  808,  808,  808,  808,  808,
      808,  808,  808,  808,  808,  808,  808,  808,  808,  808,
      808,  808,  808,  808,  808,  808,  808,  808,  808,  808,

      262,  262,  262,  808,  820,  821,  822,  821,  821,  823,
      824,  825,  826,  820,  820,  827,  820,  820,  820,  820,
      820,  820,  820,  828,  820,  820,  820,  820,  820,  829,
      820,  820,  820,  820,  820,  820,  830,  830,  830,  830,
      830,  830,  830,  830,  830,  830,  830,  830,  830,  830,
      830,  830,  830,  830,  830,  820,  820,  820,  820,  830,
      830,  830,  830,  830,  830,  830,  830,  830,  830,  830,
      830,  830,  830,  830,  830,  830,  830,  830,  830,  830,
      830,  830,  830,  830,  820,  820,  823,  830,  263, 1506,
     2750,  263,  264,  265, 1506,  264,  265,  266,  838,  839,

      266,  838,  839, 1858, 1422,  267, 1859, 1422,  267, 1865,
      842,  843,  842,  842,  968,  844,  845, 1866,  844,  845,
      846,  847, 1867,  846,  842,  843,  842,  842,  849,  844,
      845,  980, 2273, 2280,  846,  847,  851,  840,  852,  981,
      840,  982,  849, 2095, 1412, 1412, 1412, 1412, 2096, 2751,
      851, 1413,  852,  262,  262,  263,  262,  262,  262,  264,
      265,  860,  262,  262,  266,  262,  262,  262,  262,  262,
      262,  262,  267,  262,  262,  262,  262,  262,  262,  262,
      262,  262,  262,  262,  262,  861,  861,  861,  861,  861,
      861,  861,  861,  861,  861,  861,  861,  861,  861,  861,

      861,  861,  861,  861,  262,  262,  262,  262,  861,  861,
      861,  861,  861,  861,  861,  861,  861,  861,  861,  861,
      861,  861,  861,  861,  861,  861,  861,  861,  861,  861,
      861,  861,  861,  262,  262,  262,  861,  262,  262,  263,
      262,  262,  262,  264,  265,  862,  262,  262,  266,  262,
      262,  262,  262,  262,  262,  262,  267,  262,  262,  262,
      262,  262,  262,  863,  262,  262,  262,  262,  262,  864,
      864,  864,  864,  864,  864,  864,  864,  864,  864,  864,
      864,  864,  864,  864,  864,  864,  864,  864,  262,  262,
      262,  262,  864,  864,  864,  864,  864,  864,  864,  864,

      864,  864,  864,  864,  864,  864,  864,  864,  864,  864,
      864,  864,  864,  864,  864,  864,  864,  262,  262,  262,
      864,  866, 2752,  866, 1749,  867,  868,  867,  868, 1750,
      869, 1422,  869,  870, 1422,  870, 2209,  866,  871,  866,
      871,  873,  868,  873,  868, 2209,  874, 1517,  874,  870,
     1517,  870, 2376,  876,  871,  876,  871,  877,  878,  877,
      878, 2376,  879, 1530,  879,  880, 1530,  880, 2128, 1190,
      881,  872,  881,  872,  876, 1191,  876, 2162,  883,  878,
      883,  878, 2753,  884, 1193,  884,  880,  872,  880,  872,
      886,  881, 1768,  881,  887,  888, 2230, 1750, 2231,  889,

      890,  891, 2755,  882,  886,  882, 2232,  892,  887,  888,
     1545, 2128, 1546,  889,  890,  891, 1542, 1811,  894, 1542,
     2162,  892,  895,  896,  882,  894,  882,  897,  902,  895,
      896, 2239,  903,  904,  897,  898, 2240,  905,  906,  907,
     2128, 1972,  898,  902, 1972,  908,  910,  903,  904, 2162,
      911,  912,  905,  906,  907,  913, 2377,  910, 2404, 2018,
      908,  911,  917,  914, 2474, 2377,  913,  919,  920, 2377,
      919,  968,  921,  922,  914,  969,  970,  923,  924,  925,
      971,  919,  920, 2377,  919,  926,  921,  922,  972, 2502,
     2474,  923,  924,  925, 2503, 1267,  899,  900, 1267,  926,

     1545, 2756, 1546,  899,  900,  468,  469,  468,  468,  263,
      470,  471, 2757, 1010, 1011,  472,  948,  949, 1012, 1450,
      475,  973, 1450,  476,  915,  916, 1013, 1143, 1143, 1143,
     1143, 1144, 1451, 2135, 1145,  915,  916,  928,  929,  928,
      928, 2063,  930,  931, 2758, 2421, 2421,  932,  933,  934,
     2460, 1138, 1268, 1269, 2421,  935,  468,  469,  468,  468,
     2421,  470,  471,  936, 2460,  937,  472,  948,  949, 2759,
     2151,  475,  263, 2151,  476,  263,  951,  952, 2135,  951,
      952,  953, 1421,  954,  953, 1421,  954, 2760, 1393,  955,
      968, 2761,  955, 1574,  844,  977, 1574, 2762, 1575,  846,

      978,  979, 1147, 1147, 1147, 1147, 2135,  980, 1144, 1148,
      938,  928,  929,  928,  928, 1354,  930,  931, 1354, 1137,
     2763,  932,  933,  934, 2764, 1237, 1237, 1237, 1237,  935,
      957,  958,  957,  957, 2765,  959,  960,  936, 2766,  937,
      961,  962,  963, 1238, 2117,  964, 2227, 2117,  965,  957,
      958,  957,  957, 1972,  959,  960, 1972, 1973, 2228,  961,
      962,  963, 2229, 1742,  964,  968, 1742,  965, 2118,  844,
      977, 1974, 1268, 1269,  846,  978,  979, 1461, 1461, 1461,
     1461, 1743,  980, 1150,  938,  939,  939,  940,  939,  939,
      939,  941,  942,  943,  939,  939,  944,  939,  939,  939,

      939,  939,  939,  939,  945,  939,  939,  939,  939,  939,
      939,  946,  939,  939,  939,  939,  939,  947,  947,  947,
      947,  947,  947,  947,  947,  947,  947,  947,  947,  947,
      947,  947,  947,  947,  947,  947,  939,  939,  939,  939,
      947,  947,  947,  947,  947,  947,  947,  947,  947,  947,
      947,  947,  947,  947,  947,  947,  947,  947,  947,  947,
      947,  947,  947,  947,  947,  946,  939,  939,  947,  263,
     2273, 2274,  263,  517,  518,  968,  517,  518,  519,  969,
      970,  519, 1431, 2660,  971, 1431,  520, 1796, 1432,  520,
      968, 2661,  972,  968,  974,  970, 1797,  974,  970,  975,

      984, 2767,  975, 2173,  985,  986, 2768,  972, 1354,  987,
      972, 1354,  988, 1461, 1461, 1461, 1461,  989,  521, 2769,
      966,  521,  968,  966, 2770,  973,  844,  845, 1020,  990,
     1838,  846, 1021, 1022, 2705, 1839, 1840, 1023, 1841,  980,
      973, 1735, 2706,  973, 1735, 1024, 1970,  981, 2173,  982,
      990,  991,  984, 2771,  991, 1971,  985,  986,  994, 2772,
     1736,  987,  995,  996,  992, 1268, 1269,  997,  994,  989,
     2273, 2280,  995,  996,  984,  998, 2173,  997, 1001, 1002,
     1545,  990, 1546, 1003,  984,  998, 2773,  999, 1001, 1002,
     2774, 1004, 2777, 1003, 2778,  263, 2779,  999, 1970, 1081,

     1082, 1004,  990, 1005, 1083,  263, 1084, 1971,  999, 1081,
     1082, 2405, 1085, 1005, 1083, 2780, 1084, 2781,  999, 2782,
     1669, 2784, 1085, 1669, 1005, 1476, 1476, 1476, 1476, 1476,
     1476, 1476, 1476, 1670, 1005,  262,  262,  263,  262,  262,
      262,  264,  265, 1006,  262,  262, 1007,  262,  262,  262,
      262,  262,  262,  262,  267,  262,  262,  262,  262,  262,
      262,  262,  262,  262,  262,  262,  262, 1008, 1008, 1008,
     1008, 1008, 1008, 1008, 1008, 1008, 1008, 1008, 1008, 1008,
     1008, 1008, 1008, 1008, 1008, 1008,  262,  262,  262,  262,
     1008, 1008, 1008, 1008, 1008, 1008, 1008, 1008, 1008, 1008,

     1008, 1008, 1008, 1008, 1008, 1008, 1008, 1008, 1008, 1008,
     1008, 1008, 1008, 1008, 1008,  262,  262,  262, 1008, 1009,
     1009,  263, 1009, 1009, 1009, 1010, 1011, 1014, 1009, 1009,
     1012, 1009, 1009, 1009, 1009, 1009, 1009, 1009, 1013, 1009,
     1009, 1009, 1009, 1009, 1009, 1009, 1009, 1009, 1009, 1009,
     1009, 1015, 1015, 1015, 1015, 1015, 1015, 1015, 1015, 1015,
     1015, 1015, 1015, 1015, 1015, 1015, 1015, 1015, 1015, 1015,
     1009, 1009, 1009, 1009, 1015, 1015, 1015, 1015, 1015, 1015,
     1015, 1015, 1015, 1015, 1015, 1015, 1015, 1015, 1015, 1015,
     1015, 1015, 1015, 1015, 1015, 1015, 1015, 1015, 1015, 1009,

     1009, 1009, 1015,  262,  262,  263,  262,  262,  262,  264,
      265, 1016,  262,  262, 1017,  262,  262,  262,  262,  262,
      262,  262,  267,  262,  262,  262,  262,  262,  262,  262,
      262,  262,  262,  262,  262, 1018, 1018, 1018, 1018, 1018,
     1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018,
     1018, 1018, 1018, 1018,  262,  262,  262,  262, 1018, 1018,
     1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018,
     1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018,
     1018, 1018, 1018,  262,  262,  262, 1018, 1019, 1019, 1020,
     1019, 1019, 1019, 1021, 1022, 1025, 1019, 1019, 1023, 1019,

     1019, 1019, 1019, 1019, 1019, 1019, 1024, 1019, 1019, 1019,
     1019, 1019, 1019, 1019, 1019, 1019, 1019, 1019, 1019, 1026,
     1026, 1026, 1026, 1026, 1026, 1026, 1026, 1026, 1026, 1026,
     1026, 1026, 1026, 1026, 1026, 1026, 1026, 1026, 1019, 1019,
     1019, 1019, 1026, 1026, 1026, 1026, 1026, 1026, 1026, 1026,
     1026, 1026, 1026, 1026, 1026, 1026, 1026, 1026, 1026, 1026,
     1026, 1026, 1026, 1026, 1026, 1026, 1026, 1019, 1019, 1019,
     1026,  263, 1545,  263, 1546, 1028, 1029, 1028, 1029, 2786,
     1030, 2719, 1030, 1239, 1239, 1239, 1239,  263, 1031,  263,
     1031, 1087, 1088, 1087, 1088, 2720, 1089, 1735, 1089, 1642,

     1735, 1240, 1642, 1092, 1090, 2719, 1090, 1093, 1094, 1092,
     1643, 2554, 1095, 1093, 1094, 2787, 1736, 2788, 1095, 2720,
     1096, 2666, 1032, 2604, 1032, 1837, 1096, 1796, 1387, 1387,
     1387, 1387, 1518, 1518, 1518, 1518, 1797, 1906, 2605, 1033,
     1388, 1033, 1034, 1035, 1036, 1035, 1035, 1034, 1037, 1038,
     1039, 1034, 1034, 1040, 1034, 1034, 1034, 1034, 1034, 1034,
     1034, 1041, 1034, 1034, 1034, 1034, 1034, 1034, 1042, 1034,
     1034, 1034, 1034, 1034, 1043, 1043, 1043, 1043, 1043, 1043,
     1043, 1043, 1043, 1043, 1043, 1043, 1043, 1043, 1043, 1043,
     1043, 1043, 1043, 1044, 1034, 1034, 1034, 1043, 1043, 1043,

     1043, 1043, 1043, 1043, 1043, 1043, 1043, 1043, 1043, 1043,
     1043, 1043, 1043, 1043, 1043, 1043, 1043, 1043, 1043, 1043,
     1043, 1043, 1034, 1034, 1034, 1043,  262, 1045, 1046, 1045,
     1045,  262,  264,  265, 1047,  262,  262,  266,  262,  262,
      262,  262,  262,  262,  262,  267,  262,  262,  262,  262,
      262,  262,  262,  262,  262,  262,  262,  262, 1048, 1048,
     1048, 1048, 1048, 1048, 1048, 1048, 1048, 1048, 1048, 1048,
     1048, 1048, 1048, 1048, 1048, 1048, 1048,  262,  262,  262,
      262, 1048, 1048, 1048, 1048, 1048, 1048, 1048, 1048, 1048,
     1048, 1048, 1048, 1048, 1048, 1048, 1048, 1048, 1048, 1048,

     1048, 1048, 1048, 1048, 1048, 1048,  262,  262,  262, 1048,
      263, 2832,  263, 2833, 1050, 1051, 1050, 1051, 2848, 1052,
     1053, 1052, 1053, 2775, 2849, 1098, 1099, 1054, 1098, 1054,
     1100, 1101, 2776, 2215, 2151, 1102, 2216, 2151, 1103, 1152,
     1152, 1152, 1152, 1104, 1242, 1242, 1242, 1242, 2850, 1972,
     1153, 1105, 1972, 1973, 1154, 1106, 1137, 1237, 1237, 1237,
     1237, 2851, 2852, 1138, 1156, 1157, 2853, 1974, 1244, 2854,
     2855, 1568, 1568, 1568, 1568, 1238, 1107, 1055, 1569, 1055,
     1056, 1057, 1058, 1057, 1057, 1059, 1060, 1061, 1062, 1056,
     1056, 1063, 1064, 1065, 1056, 1056, 1056, 1056, 1056, 1066,

     1056, 1056, 1056, 1056, 1056, 1067, 1056, 1056, 1056, 1056,
     1056, 1056, 1068, 1068, 1068, 1068, 1068, 1068, 1068, 1068,
     1068, 1068, 1068, 1068, 1068, 1068, 1068, 1068, 1068, 1068,
     1068, 1056, 1056, 1056, 1056, 1068, 1068, 1068, 1068, 1068,
     1068, 1068, 1068, 1068, 1068, 1068, 1068, 1068, 1068, 1068,
     1068, 1068, 1068, 1068, 1068, 1068, 1068, 1068, 1068, 1068,
     1056, 1056, 1059, 1068, 1070,  263, 2856, 1070, 2117, 1071,
     1072, 2117, 2858, 2859, 1073, 1070,  263, 2860, 1070, 2864,
     1071, 1072, 1074, 1992, 1992, 1073, 1359, 1359, 1359, 1359,
     2867, 1075, 2118, 1074, 1108, 1099, 2009, 1108, 2009, 1100,

     1101, 1360, 1075, 1747, 1102, 1112, 1747, 1109, 2871, 1113,
     1114, 1115, 1110, 1742, 1116, 1972, 1742, 1117, 1972, 2045,
     1105, 1076, 1118, 2872, 1106, 1223, 1223, 1223, 1223, 1748,
     1119, 1743, 1076, 2046, 1120, 2873, 2874, 1077, 1716, 1078,
     2875, 1716, 1224, 1079, 2876, 1107, 1190, 1718, 1077, 1226,
     1078, 1718, 1191, 1190, 1079, 1120, 1115, 1121, 1112, 1191,
     1121, 1193, 1113, 1114, 1115, 2877, 2878, 1116, 1193, 2879,
     1122, 1180, 1180, 1180, 1180, 1118, 1227, 1163, 1163, 1163,
     1163, 1172, 1181, 1119, 1173, 2880, 2881, 1120, 1180, 1180,
     1180, 1180, 2882, 1798, 2169, 1164, 1798, 2169, 2883, 1181,

     1545, 1164, 1546, 1208, 1209, 1209, 1208, 1765, 1120, 1115,
     1210, 2180, 1164, 2190, 1239, 1239, 1239, 1239, 1270, 1270,
     1270, 1270, 1271, 1777, 2885, 1272, 1777, 1183, 1277, 1277,
     1277, 1277, 1240, 2887, 2070, 1278, 1778, 1279, 2070, 2092,
     2092, 1279, 1244, 1298, 1298, 1298, 1298, 1184, 1340, 1340,
     1340, 1340, 1280, 1340, 1340, 1340, 1340, 2169, 1172, 2101,
     2169, 2101, 1352, 1129, 1129, 1352, 1212, 1244, 1353, 1300,
     1765, 2105, 1341, 1606, 1606, 1606, 1606, 1341, 2105, 2109,
     1130, 1279, 1213, 1165, 1214, 1214, 1215, 1214, 1165, 1165,
     1165, 1216, 1165, 1165, 1165, 1165, 1165, 1165, 1165, 1271,

     1165, 1165, 1165, 1165, 1165, 1165, 1165, 1165, 1165, 1165,
     1165, 1165, 1165, 1165, 1165, 1217, 1217, 1217, 1217, 1217,
     1217, 1217, 1217, 1217, 1217, 1217, 1217, 1217, 1217, 1217,
     1217, 1217, 1217, 1217, 1165, 1165, 1165, 1165, 1217, 1217,
     1217, 1217, 1217, 1217, 1217, 1217, 1217, 1218, 1217, 1217,
     1217, 1217, 1217, 1217, 1217, 1217, 1217, 1217, 1217, 1217,
     1217, 1217, 1217, 2109, 1165, 1165, 1217, 1209, 1209, 1209,
     1209, 1545, 2113, 1546, 1210, 1298, 1298, 1298, 1298, 1298,
     1298, 1298, 1298, 1298, 1298, 1298, 1298, 1298, 1298, 1298,
     1298, 1375, 1375, 1375, 1375, 1298, 1298, 1298, 1298, 1244,

     2113, 1300, 2889, 1244, 2121, 1300, 1545, 1244, 1546, 1300,
     1376, 1244, 2121, 1300, 1298, 1298, 1298, 1298, 2890, 1244,
     2667, 1300, 2890, 2891, 2892, 1491, 1491, 1491, 1491, 1301,
     1212, 2893, 2894, 1304, 1487, 1487, 1487, 1487, 1244, 1305,
     1300, 1298, 1298, 1298, 1298, 2884, 3942, 1241, 1242, 1242,
     1241, 1488, 1306, 1243, 1308, 1307, 2169, 2895, 1309, 2169,
     1298, 1298, 1298, 1298, 2896, 1244, 2897, 1300, 2898, 1765,
     2899, 1244, 1298, 1298, 1298, 1298, 1493, 1245, 2900, 1410,
     1410, 1410, 1410, 2901, 1244, 1314, 1300, 1472, 1472, 1472,
     1472, 1246, 1524, 1524, 1524, 1524, 1244, 1247, 1300, 2902,

     1315, 1248, 1249, 1411, 1250, 1251, 1252, 2903, 2904, 1525,
     1253, 1254, 1255, 1256, 1257, 2905, 1258, 1310, 1259, 1260,
     1261, 1262, 1263, 1298, 1298, 1298, 1298, 1311, 1298, 1298,
     1298, 1298, 2909, 1883, 2910, 1312, 1883, 1313, 2911, 1316,
     1298, 1298, 1298, 1298, 1473, 2251, 2912, 1244, 2251, 1300,
     2540, 2913, 1244, 2914, 1300, 1298, 1298, 1298, 1298, 1298,
     1298, 1298, 1298, 1886, 1244, 2915, 1300, 2917, 1298, 1298,
     1298, 1298, 1298, 1298, 1298, 1298, 2918, 1317, 2919, 1244,
     2920, 1300, 2921, 1244, 1886, 1300, 2922, 1298, 1298, 1298,
     1298, 1318, 1244, 2923, 1300, 2916, 1244, 2924, 1300, 1319,

     1298, 1298, 1298, 1298, 1129, 1129, 1129, 1129, 1320, 2886,
     1322, 1244, 2886, 1300, 1321, 1298, 1298, 1298, 1298, 2916,
     1675, 1676, 1130, 1677, 1244, 1678, 1300, 1325, 1679, 1680,
     1323, 2930, 2931, 1324, 1972, 1326, 2932, 1972, 1681, 1244,
     1682, 1300, 2934, 2937, 2938, 1327, 1328, 1340, 1340, 1340,
     1340, 1345, 2018, 2939, 1346, 1349, 1349, 1349, 1349, 1129,
     1129, 1129, 1129, 2364, 2940, 1329, 2364, 1330, 2638, 2943,
     1332, 1341, 1331, 1237, 1237, 1237, 1237, 1130, 1333, 1341,
     2941, 1351, 2944, 1334, 1239, 1239, 1239, 1239, 2945, 2942,
     2170, 1238, 1405, 1405, 1405, 1405, 1405, 1405, 1405, 1405,

     2171, 2946, 1240, 1410, 1410, 1410, 1410, 2437, 2906, 1406,
     2437, 2906, 2686, 1406, 2170, 2947, 1408, 2949, 2951, 2953,
     1408, 1410, 1410, 1410, 1410, 2954, 2171, 1411, 1345, 1362,
     1362, 1362, 1362, 1410, 1410, 1410, 1410, 1415, 2955, 2956,
     1416, 1429, 1429, 1429, 1429, 1411, 1437, 1437, 1437, 1437,
     2957, 1409, 1472, 1472, 1472, 1472, 1363, 1411, 2960, 1430,
     1494, 1494, 1494, 1494, 1438, 1494, 1494, 1494, 1494, 1129,
     1129, 1129, 1129, 1237, 1237, 1237, 1237, 1239, 1239, 1239,
     1239, 2961, 2958, 2962, 1364, 1716, 1365, 1130, 1716, 2959,
     2963, 1238, 2964, 2965, 1718, 1240, 1366, 1367, 1718, 2966,

     1368, 1369, 1370, 2967, 1371, 1526, 1526, 1526, 1526, 1473,
     1129, 1129, 1129, 1129, 1415, 1495, 1129, 1129, 1129, 1129,
     1495, 1237, 1237, 1237, 1237, 2968, 2969, 2970, 1130, 1528,
     1239, 1239, 1239, 1239, 1130, 1568, 1568, 1568, 1568, 1238,
     2971, 2972, 1569, 3942, 3942, 3942, 3942, 2973, 1240, 2974,
     3942, 1571, 1571, 1571, 1571, 2978, 1576, 1576, 1576, 1576,
     2979, 1190, 2976, 1577, 1572, 1578, 1269, 1191, 2980, 1578,
     1576, 1576, 1576, 1576, 2786, 2981, 1193, 1577, 1887, 1578,
     3001, 1887, 1888, 1578, 3942, 3942, 3942, 3942, 3002, 3028,
     3029, 3942, 2907, 3942, 3043, 2907, 1889, 3942, 1576, 1576,

     1576, 1576, 3044, 2908, 3045, 1577, 3046, 1578, 1890, 2479,
     3047, 1578, 1237, 1237, 1237, 1237, 1239, 1239, 1239, 1239,
     1580, 1580, 1580, 1580, 1584, 1584, 1584, 1584, 3049, 1890,
     1238, 3050, 2977, 3051, 1240, 1585, 1587, 1587, 1587, 1587,
     1587, 1587, 1587, 1587, 1589, 1589, 1589, 1589, 1586, 3056,
     3059, 1590, 1202, 3062, 1587, 1587, 1587, 1587, 1592, 3063,
     1588, 1593, 3064, 3065, 1588, 1587, 1587, 1587, 1587, 3066,
     1582, 1597, 1597, 1597, 1597, 3067, 3068, 3069, 1588, 1599,
     1599, 1599, 1599, 1598, 1606, 1606, 1606, 1606, 3070, 1588,
     1600, 1609, 1609, 1609, 1609, 1644, 1644, 1644, 1644, 1644,

     1644, 1644, 1644, 3072, 1601, 1652, 1652, 1652, 1652, 1610,
     1656, 1656, 1656, 1656, 3075, 3076, 1653, 1656, 1656, 1656,
     1656, 1658, 1658, 1658, 1658, 1657, 1545, 3077, 1546, 1602,
     1654, 3078, 1657, 3079, 3078, 1592, 1671, 1671, 1671, 1671,
     1698, 1698, 1698, 1698, 3080, 3081, 3082, 1699, 3083, 1670,
     1698, 1698, 1698, 1698, 1665, 1655, 3084, 1699, 1703, 1703,
     1703, 1703, 1709, 1709, 1709, 1709, 2135, 3071, 3085, 1710,
     1704, 3086, 3087, 1705, 1709, 1709, 1709, 1709, 3088, 3089,
     3090, 1710, 3091, 3092, 1654, 1713, 1713, 1713, 1713, 3093,
     1701, 1721, 1721, 1721, 1721, 2906, 1714, 3094, 2906, 3095,

     1701, 1721, 1721, 1721, 1721, 1723, 1723, 1723, 1723, 1755,
     2907, 3096, 1724, 2907, 3097, 1722, 1721, 1721, 1721, 1721,
     1726, 2908, 3098, 1727, 3099, 1722, 1721, 1721, 1721, 1721,
     1779, 1779, 1779, 1779, 3100, 2886, 1756, 1757, 2886, 1758,
     1722, 1759, 3073, 1778, 1760, 1761, 1755, 3101, 1771, 3102,
     1722, 3103, 1756, 1757, 1762, 1758, 1763, 1759, 3104, 3105,
     1760, 1761, 1129, 1129, 1129, 1129, 1135, 1136, 1136, 1135,
     1762, 3106, 1763, 1178, 1136, 1136, 1136, 1136, 3108, 3110,
     1130, 1731, 3114, 1137, 1731, 1147, 1147, 1147, 1147, 3115,
     1138, 1137, 1148, 1140, 1140, 1140, 1140, 1726, 1138, 3116,

     1141, 3117, 1137, 3942, 3942, 3942, 3942, 3118, 1732, 3119,
     3942, 1783, 1783, 1783, 1783, 1143, 1143, 1143, 1143, 3120,
     3121, 3122, 1153, 3123, 3124, 3125, 1154, 1140, 1140, 1140,
     1140, 3126, 3127, 3128, 1141, 3130, 1156, 1157, 1733, 1138,
     1163, 1163, 1163, 1163, 3132, 1139, 1152, 1152, 1152, 1152,
     3133, 1147, 1147, 1147, 1147, 3136, 1734, 1153, 1148, 1883,
     3137, 1154, 1883, 1137, 1164, 3139, 1150, 3140, 1137, 3141,
     1138, 1156, 1157, 3942, 3942, 3942, 3942, 3142, 3143, 3148,
     3942, 1786, 1786, 1786, 1786, 1788, 1788, 1788, 1788, 1886,
     3942, 3151, 1789, 1791, 1791, 1791, 1791, 1144, 1137, 3152,

     1145, 1152, 1152, 1152, 1152, 3153, 1159, 1159, 1159, 1159,
     1886, 1764, 1153, 1160, 1764, 3154, 1154, 1138, 1137, 1152,
     1152, 1152, 1152, 3038, 1765, 1138, 1156, 1157, 3155, 1766,
     1153, 3156, 1150, 1845, 1154, 3171, 1137, 1748, 3039, 3942,
     3942, 3942, 3942, 1138, 1156, 1157, 3942, 1783, 1783, 1783,
     1783, 3175, 3176, 3179, 3942, 3204, 3205, 3206, 1153, 3211,
     3212, 3216, 1154, 1162, 1163, 1163, 1162, 1166, 1166, 1167,
     1166, 3217, 1156, 1157, 1144, 1166, 1166, 1167, 1166, 1169,
     1169, 1169, 1169, 3218, 3219, 3220, 1170, 1164, 3221, 3224,
     3226, 1168, 3227, 3942, 3942, 3942, 3942, 3228, 3229, 1168,

     3942, 1793, 1793, 1793, 1793, 3231, 1169, 1169, 1169, 1169,
     3232, 3233, 1181, 1170, 1180, 1180, 1180, 1180, 1175, 1175,
     1175, 1175, 3234, 3236, 3237, 1181, 1801, 1801, 1801, 1801,
     1172, 3239, 3241, 1173, 1180, 1180, 1180, 1180, 1164, 3242,
     3240, 3078, 1139, 3240, 3078, 1181, 1180, 1180, 1180, 1180,
     1164, 1180, 1180, 1180, 1180, 3243, 2446, 1181, 1164, 1545,
     3244, 1546, 1181, 1180, 1180, 1180, 1180, 2446, 2135, 3245,
     1164, 3246, 3247, 3248, 1181, 1164, 1200, 1200, 1200, 1200,
     3249, 1208, 1209, 1209, 1208, 3250, 3251, 1164, 1210, 1209,
     1209, 1209, 1209, 3252, 2666, 3253, 1210, 2467, 3254, 2467,

     1201, 3942, 3942, 3942, 3942, 3101, 3256, 1172, 3942, 1223,
     1223, 1223, 1223, 1223, 1223, 1223, 1223, 3257, 1804, 1223,
     1223, 1223, 1223, 1803, 3942, 3258, 1224, 3942, 3259, 3260,
     1224, 3942, 3263, 1226, 3266, 3267, 1224, 1226, 1815, 1815,
     1815, 1815, 3268, 1226, 1212, 1816, 1223, 1223, 1223, 1223,
     3269, 3270, 1212, 1223, 1223, 1223, 1223, 3271, 3273, 3274,
     1213, 3275, 3276, 1224, 1830, 1830, 1830, 1830, 3942, 3278,
     1226, 1264, 1264, 1264, 1264, 3279, 3280, 1226, 1265, 1814,
     3942, 1165, 1214, 1214, 1215, 1214, 1165, 1165, 1165, 1216,
     1165, 1165, 1165, 1165, 1165, 1165, 1165, 1227, 1165, 1165,

     1165, 1165, 1165, 1165, 1165, 1165, 1165, 1165, 1165, 1165,
     1165, 1165, 1165, 1217, 1217, 1217, 1217, 1217, 1217, 1217,
     1217, 1217, 1217, 1217, 1217, 1217, 1217, 1217, 1217, 1217,
     1217, 1217, 1165, 1165, 1165, 1165, 1217, 1217, 1217, 1217,
     1217, 1217, 1217, 1217, 1217, 1218, 1217, 1217, 1217, 1217,
     1217, 1217, 1217, 1217, 1217, 1217, 1217, 1217, 1217, 1217,
     1217, 3281, 1165, 1165, 1217, 3942, 3942, 3942, 3942, 3282,
     3283, 3287, 3942, 1223, 1223, 1223, 1223, 1221, 1221, 1221,
     1221, 1223, 1223, 1223, 1223, 1237, 1237, 1237, 1237, 3292,
     1224, 1239, 1239, 1239, 1239, 3294, 3295, 1226, 1224, 1836,

     1836, 1836, 1836, 1238, 3293, 1226, 3296, 3300, 3301, 1240,
     3942, 3942, 3942, 3942, 2752, 1267, 1290, 3942, 1267, 1868,
     1868, 1868, 1868, 1244, 1270, 1270, 1270, 1270, 1298, 1298,
     1298, 1298, 1227, 2245, 1870, 1870, 1870, 1870, 1870, 1814,
     1264, 1264, 1264, 1264, 3942, 1300, 3314, 1265, 1244, 3315,
     3320, 3321, 1244, 3318, 1300, 3322, 1222, 1835, 1836, 1836,
     1835, 3323, 3319, 1243, 3338, 1874, 1874, 1874, 1874, 3339,
     3345, 3346, 1268, 1269, 1279, 3349, 1875, 3350, 1279, 3351,
     3357, 1244, 1277, 1277, 1277, 1277, 3359, 1245, 2651, 1278,
     3942, 1279, 3361, 3362, 3942, 1279, 1282, 1282, 1282, 1282,

     3364, 1246, 1895, 1895, 1895, 1895, 1280, 1247, 3365, 3366,
     2446, 1248, 1249, 1896, 1250, 1251, 1252, 3370, 1279, 1897,
     1253, 1254, 1255, 1256, 1257, 2446, 1258, 3371, 1259, 1260,
     1261, 1262, 1263, 3372, 3373, 1279, 3942, 3942, 3942, 3942,
     3374, 3375, 2467, 3942, 3240, 3942, 3379, 3240, 2467, 3942,
     1877, 1877, 1877, 1877, 1883, 3380, 2271, 1883, 1884, 2271,
     3942, 3381, 1878, 1879, 3367, 3368, 3382, 1885, 1892, 1892,
     1892, 1892, 1271, 3383, 1881, 1272, 1882, 1895, 1895, 1895,
     1895, 3384, 3376, 3389, 1886, 3376, 2272, 3378, 1896, 3942,
     3378, 3390, 1244, 3377, 1897, 1895, 1895, 1895, 1895, 1895,

     1895, 1895, 1895, 3391, 3393, 1886, 1896, 2272, 3394, 3395,
     1896, 3148, 1897, 3396, 3398, 3399, 1897, 1895, 1895, 1895,
     1895, 1895, 1895, 1895, 1895, 3402, 1716, 3405, 1896, 1716,
     3406, 3407, 1896, 1717, 1897, 1718, 3408, 3410, 1897, 1718,
     3411, 3412, 1899, 1298, 1298, 1298, 1298, 3414, 3424, 1271,
     1298, 1298, 1298, 1298, 3425, 1298, 1298, 1298, 1298, 3429,
     3430, 1900, 1901, 1910, 1910, 1910, 1910, 1244, 1902, 1300,
     1298, 1298, 1298, 1298, 1244, 3431, 1300, 3432, 3453, 1244,
     1905, 1300, 1298, 1298, 1298, 1298, 1845, 1867, 1903, 3455,
     3456, 1904, 3457, 3458, 1244, 3463, 1300, 1907, 1908, 3464,

     3465, 1909, 1298, 1298, 1298, 1298, 1244, 3466, 1300, 1298,
     1298, 1298, 1298, 2446, 1298, 1298, 1298, 1298, 1298, 1298,
     1298, 1298, 1911, 3471, 3467, 3468, 1244, 3467, 1300, 1298,
     1298, 1298, 1298, 1244, 3472, 1300, 3473, 3474, 1244, 1912,
     1300, 3475, 1244, 2467, 1300, 1298, 1298, 1298, 1298, 1298,
     1298, 1298, 1298, 1244, 1913, 1300, 3478, 1914, 1298, 1298,
     1298, 1298, 1298, 1298, 1298, 1298, 1915, 3469, 3470, 1244,
     3469, 1300, 3479, 1244, 1917, 1300, 1916, 1298, 1298, 1298,
     1298, 3480, 1244, 3481, 1300, 3482, 1244, 3486, 1300, 3487,
     1918, 1919, 1298, 1298, 1298, 1298, 1298, 1298, 1298, 1298,

     3489, 1244, 3492, 1300, 1298, 1298, 1298, 1298, 1921, 1298,
     1298, 1298, 1298, 3493, 3476, 1922, 1244, 3476, 1300, 1920,
     1244, 3376, 1300, 3498, 3376, 1925, 3477, 1923, 1244, 3499,
     1300, 1924, 3377, 1244, 3500, 1300, 3505, 1298, 1298, 1298,
     1298, 3506, 3424, 3318, 1926, 1298, 1298, 1298, 1298, 1927,
     1298, 1298, 1298, 1298, 1931, 1928, 3378, 1929, 3512, 3378,
     1932, 1244, 3513, 1300, 3514, 1930, 1837, 1906, 2223, 1244,
     2275, 1300, 2073, 2275, 1244, 2073, 1300, 1298, 1298, 1298,
     1298, 3533, 1933, 1298, 1298, 1298, 1298, 1298, 1298, 1298,
     1298, 1298, 1298, 1298, 1298, 1934, 1298, 1298, 1298, 1298,

     1890, 1244, 2075, 1300, 3534, 3535, 3538, 1244, 3539, 1300,
     3542, 1244, 3543, 1300, 2135, 1244, 1936, 1300, 1935, 3544,
     1244, 1890, 1300, 2075, 1298, 1298, 1298, 1298, 2135, 1298,
     1298, 1298, 1298, 3545, 1298, 1298, 1298, 1298, 3546, 1939,
     1937, 1340, 1340, 1340, 1340, 1938, 3540, 1940, 1244, 3540,
     1300, 1943, 1942, 1244, 3101, 1300, 3541, 1941, 1244, 3541,
     1300, 1298, 1298, 1298, 1298, 1341, 3547, 1944, 1298, 1298,
     1298, 1298, 3101, 3551, 3137, 1298, 1298, 1298, 1298, 1298,
     1298, 1298, 1298, 3467, 3468, 1244, 3467, 1300, 3469, 3470,
     1945, 3469, 1244, 3554, 1300, 3555, 3556, 1947, 1946, 1244,

     3559, 1300, 3560, 1244, 3561, 1300, 1342, 1342, 1342, 1342,
     3562, 3565, 3566, 1343, 3942, 3942, 3942, 3942, 3565, 3567,
     3568, 3942, 3582, 3583, 1948, 1954, 1954, 1954, 1954, 1342,
     1342, 1342, 1342, 1949, 3226, 3586, 1343, 1349, 1349, 1349,
     1349, 2135, 3591, 2135, 1951, 3101, 1950, 1349, 1349, 1349,
     1349, 1351, 1956, 1956, 1956, 1956, 1345, 1887, 3592, 1346,
     1887, 1341, 3101, 1351, 1349, 1349, 1349, 1349, 3595, 3596,
     3597, 1341, 3598, 1351, 3599, 2018, 1341, 1352, 1129, 1129,
     1352, 1883, 3600, 1353, 1883, 1957, 3601, 1890, 1341, 1887,
     1351, 3565, 1887, 1959, 1958, 1130, 3606, 1359, 1359, 1359,

     1359, 1361, 1361, 1361, 1361, 3607, 3476, 1960, 1890, 3476,
     3616, 1886, 1360, 1361, 1361, 1361, 1361, 3619, 3477, 1890,
     1375, 1375, 1375, 1375, 2135, 3101, 1375, 1375, 1375, 1375,
     3624, 3414, 1886, 1345, 1975, 1975, 1975, 1975, 3625, 1376,
     1890, 1362, 1362, 1362, 1362, 1376, 1387, 1387, 1387, 1387,
     1985, 1985, 1985, 1985, 1988, 1989, 1989, 1988, 1388, 3628,
     1393, 1986, 1989, 1989, 1989, 1989, 1395, 3629, 1363, 1395,
     1994, 1994, 1994, 1994, 3562, 3631, 1987, 1995, 1996, 1997,
     1995, 1402, 1402, 1402, 1402, 1990, 1990, 1990, 1990, 1990,
     2002, 2002, 2002, 2002, 3632, 3636, 1364, 2003, 1365, 3639,

     1405, 1405, 1405, 1405, 1405, 1405, 1405, 1405, 1366, 1367,
     3642, 3598, 1368, 1369, 1370, 2076, 1371, 1406, 2076, 3540,
     3541, 1406, 3540, 3541, 1408, 3643, 3587, 3589, 1408, 1405,
     1405, 1405, 1405, 1405, 1405, 1405, 1405, 1410, 1410, 1410,
     1410, 1412, 1412, 1412, 1412, 2078, 1406, 3644, 1413, 3942,
     1406, 3646, 3942, 1408, 2000, 3647, 3942, 1408, 3651, 3654,
     3657, 1411, 3942, 3942, 3942, 3942, 2078, 3658, 3664, 3942,
     1412, 1412, 1412, 1412, 3666, 3669, 3644, 1413, 1410, 1410,
     1410, 1410, 2007, 2007, 2007, 2007, 1415, 3679, 3684, 1416,
     1410, 1410, 1410, 1410, 3689, 3694, 1125, 1422, 3942, 2005,

     1422, 3942, 1411, 1185, 1125, 3942, 1411, 2011, 2011, 2011,
     2011, 1185, 2670, 2669, 1411, 2668, 1870, 1870, 1870, 1870,
     1870, 1429, 1429, 1429, 1429, 1437, 1437, 1437, 1437, 1461,
     1461, 1461, 1461, 1472, 1472, 1472, 1472, 2665, 2076, 1430,
     2664, 2076, 2077, 1438, 1476, 1476, 1476, 1476, 1487, 1487,
     1487, 1487, 1487, 1487, 1487, 1487, 2077, 2028, 2028, 2028,
     2028, 2663, 2662, 1415, 2029, 1488, 2659, 2658, 2078, 1488,
     2030, 1487, 1487, 1487, 1487, 1491, 1491, 1491, 1491, 1491,
     1491, 1491, 1491, 2657, 1491, 1491, 1491, 1491, 1488, 2078,
     1473, 2033, 2033, 2033, 2033, 2656, 2655, 2654, 2034, 1494,

     1494, 1494, 1494, 2041, 2041, 2041, 2041, 1518, 1518, 1518,
     1518, 1189, 1526, 1526, 1526, 1526, 2651, 1188, 2042, 1189,
     1524, 1524, 1524, 1524, 1188, 1197, 1493, 2650, 2649, 2648,
     1493, 2647, 1188, 1197, 2032, 1493, 1528, 1525, 1526, 1526,
     1526, 1526, 1526, 1526, 1526, 1526, 2072, 2072, 2072, 2072,
     2646, 2009, 2073, 1204, 1495, 2073, 2074, 1568, 1568, 1568,
     1568, 1204, 2641, 1206, 1569, 2074, 1528, 3942, 3942, 3942,
     3942, 1206, 1198, 1219, 3942, 1571, 1571, 1571, 1571, 1198,
     1883, 1219, 2075, 1883, 1992, 2361, 2047, 1198, 1572, 1571,
     1571, 1571, 1571, 1571, 1571, 1571, 1571, 2633, 1576, 1576,

     1576, 1576, 1572, 2075, 2632, 1577, 1572, 1578, 2631, 1205,
     1886, 1578, 3942, 3942, 3942, 3942, 1205, 2630, 2629, 3942,
     2628, 3942, 2627, 1207, 1205, 3942, 1576, 1576, 1576, 1576,
     1207, 1886, 2626, 1577, 2625, 1578, 2624, 2623, 1207, 1578,
     1580, 1580, 1580, 1580, 1580, 1580, 1580, 1580, 1580, 1580,
     1580, 1580, 1584, 1584, 1584, 1584, 2622, 2082, 2082, 2082,
     2082, 1229, 2621, 1585, 2083, 1587, 1587, 1587, 1587, 2620,
     2084, 1589, 1589, 1589, 1589, 1355, 1586, 1229, 1590, 3942,
     3942, 3942, 3942, 1355, 1372, 1229, 3942, 2619, 1358, 1588,
     1582, 2618, 1372, 2557, 1582, 1358, 1404, 1468, 1582, 1589,

     1589, 1589, 1589, 1358, 1404, 1468, 1590, 1587, 1587, 1587,
     1587, 2088, 2088, 2088, 2088, 1592, 2556, 1286, 1593, 1587,
     1587, 1587, 1587, 2554, 1597, 1597, 1597, 1597, 2269, 2550,
     2543, 1588, 2542, 1286, 1483, 1588, 1598, 2089, 2089, 2089,
     2089, 1286, 1483, 1588, 1599, 1599, 1599, 1599, 2090, 1606,
     1606, 1606, 1606, 2541, 2539, 1600, 2094, 2094, 2094, 2094,
     1609, 1609, 1609, 1609, 2103, 2103, 2103, 2103, 2538, 1601,
     2107, 2107, 2107, 2107, 2111, 2111, 2111, 2111, 1610, 2115,
     2115, 2115, 2115, 1641, 2537, 1486, 1641, 1644, 1644, 1644,
     1644, 2536, 1592, 1486, 1602, 2123, 2123, 2123, 2123, 1292,

     2535, 2534, 2116, 2116, 2116, 2116, 2116, 1652, 1652, 1652,
     1652, 1656, 1656, 1656, 1656, 1292, 1490, 1496, 1653, 1658,
     1658, 1658, 1658, 1292, 1490, 1496, 1657, 1658, 1658, 1658,
     1658, 2533, 1654, 1671, 1671, 1671, 1671, 1671, 1671, 1671,
     1671, 1698, 1698, 1698, 1698, 1505, 1670, 1508, 1699, 3942,
     3942, 3942, 3942, 1505, 2532, 1508, 3942, 1655, 1703, 1703,
     1703, 1703, 1703, 1703, 1703, 1703, 1703, 1703, 1703, 1703,
     1704, 1516, 1523, 1705, 1704, 2531, 2530, 1705, 1704, 1516,
     1523, 1705, 2142, 2142, 2142, 2142, 1654, 2143, 2143, 2143,
     2143, 1701, 1703, 1703, 1703, 1703, 2527, 2526, 1377, 3942,

     2144, 2144, 2144, 2144, 1704, 1377, 1543, 1705, 1709, 1709,
     1709, 1709, 1549, 1377, 1543, 1710, 3942, 3942, 3942, 3942,
     1549, 2525, 2524, 3942, 1713, 1713, 1713, 1713, 1713, 1713,
     1713, 1713, 2523, 2522, 2521, 1714, 2520, 2519, 2518, 1714,
     1713, 1713, 1713, 1713, 1721, 1721, 1721, 1721, 2517, 1469,
     1497, 1714, 1723, 1723, 1723, 1723, 1469, 1497, 1555, 1724,
     3942, 3942, 3942, 3942, 1469, 1497, 1555, 3942, 1722, 1723,
     1723, 1723, 1723, 2516, 2515, 2514, 1724, 1721, 1721, 1721,
     1721, 2150, 2150, 2150, 2150, 1726, 2513, 2512, 1727, 1721,
     1721, 1721, 1721, 1779, 1779, 1779, 1779, 1779, 1779, 1779,

     1779, 1722, 2511, 2510, 1511, 1722, 1778, 1783, 1783, 1783,
     1783, 1511, 1557, 1722, 1783, 1783, 1783, 1783, 1153, 1511,
     1557, 2509, 1154, 1519, 2508, 1153, 2507, 2506, 2505, 1154,
     1519, 2504, 1156, 1157, 2175, 2175, 2175, 2175, 1519, 1156,
     1157, 1788, 1788, 1788, 1788, 1153, 2501, 2500, 1789, 1154,
     1786, 1786, 1786, 1786, 1786, 1786, 1786, 1786, 1138, 1156,
     1157, 1614, 1726, 3942, 3942, 3942, 3942, 1137, 2499, 1614,
     3942, 1137, 1791, 1791, 1791, 1791, 1144, 1550, 1556, 1145,
     1783, 1783, 1783, 1783, 1550, 1556, 1793, 1793, 1793, 1793,
     2496, 1153, 1550, 1556, 1616, 1154, 1138, 1181, 1793, 1793,

     1793, 1793, 1616, 2495, 1828, 1156, 1157, 2492, 2491, 1181,
     1180, 1180, 1180, 1180, 2490, 1801, 1801, 1801, 1801, 1172,
     2275, 1181, 1173, 2275, 1180, 1180, 1180, 1180, 1648, 1685,
     1180, 1180, 1180, 1180, 1164, 1181, 1648, 1685, 2489, 1164,
     2488, 1181, 2191, 2191, 2191, 2191, 2192, 1224, 1164, 2193,
     1890, 2485, 1190, 1144, 1164, 1223, 1223, 1223, 1223, 1223,
     1223, 1223, 1223, 2189, 2476, 1687, 2194, 1815, 1815, 1815,
     1815, 1890, 1224, 1558, 1816, 2475, 1224, 2472, 2471, 1226,
     1558, 1687, 2470, 1226, 3942, 3942, 3942, 3942, 1558, 1687,
     2275, 3942, 2469, 2275, 2468, 2185, 1172, 2184, 1223, 1223,

     1223, 1223, 2199, 2199, 2199, 2199, 2206, 2467, 2466, 1816,
     2211, 2211, 2211, 2211, 2462, 2207, 2207, 2207, 2207, 2459,
     1890, 2458, 1226, 2192, 1868, 1868, 1868, 1868, 2196, 2210,
     2211, 2211, 2210, 2457, 1244, 1243, 1892, 1892, 1892, 1892,
     1271, 1890, 1615, 1272, 1868, 1868, 1868, 1868, 1689, 1615,
     1300, 2456, 2455, 1244, 2147, 2251, 1689, 1615, 2251, 1245,
     1244, 2258, 2258, 2258, 2258, 1617, 1617, 2454, 2259, 2138,
     1300, 2136, 1617, 1246, 1870, 1870, 1870, 1870, 1870, 1247,
     1617, 2452, 1651, 1248, 1249, 1280, 1250, 1251, 1252, 1651,
     2451, 1691, 1253, 1254, 1255, 1256, 1257, 1651, 1258, 1691,

     1259, 1260, 1261, 1262, 1263, 1874, 1874, 1874, 1874, 1975,
     1975, 1975, 1975, 2450, 1279, 1695, 1875, 1271, 1279, 2254,
     2254, 2254, 2254, 1695, 2449, 2448, 2255, 2447, 1279, 2446,
     2445, 1693, 1279, 1877, 1877, 1877, 1877, 2261, 2261, 2261,
     2261, 2277, 2444, 2256, 2277, 1878, 1879, 1693, 2262, 2263,
     2263, 2263, 2263, 2443, 2278, 1693, 2264, 1881, 1279, 2121,
     2121, 2265, 1877, 1877, 1877, 1877, 1892, 1892, 1892, 1892,
     1271, 2279, 1279, 1272, 1878, 1879, 1895, 1895, 1895, 1895,
     1895, 1895, 1895, 1895, 2439, 2438, 1881, 1896, 1882, 2113,
     1244, 1896, 2279, 1895, 1895, 1895, 1895, 1897, 1895, 1895,

     1895, 1895, 2113, 2109, 1896, 1895, 1895, 1895, 1895, 1896,
     1897, 1910, 1910, 1910, 1910, 1897, 1896, 1895, 1895, 1895,
     1895, 2109, 1897, 2105, 1895, 1895, 1895, 1895, 1896, 1895,
     1895, 1895, 1895, 2105, 1897, 1896, 1298, 1298, 1298, 1298,
     1896, 1897, 1895, 1895, 1895, 1895, 1897, 1271, 2285, 1298,
     1298, 1298, 1298, 1896, 1688, 1298, 1298, 1298, 1298, 1897,
     1244, 1688, 1300, 1954, 1954, 1954, 1954, 2286, 2293, 1688,
     1911, 2101, 1702, 1244, 1712, 1300, 1690, 2101, 2287, 1244,
     1702, 1300, 1712, 1690, 2424, 2291, 2422, 2289, 2092, 1351,
     2288, 1690, 2290, 2295, 2294, 1298, 1298, 1298, 1298, 1298,

     1298, 1298, 1298, 1298, 1298, 1298, 1298, 2092, 1298, 1298,
     1298, 1298, 2292, 1298, 1298, 1298, 1298, 1582, 1785, 1244,
     1795, 1300, 1273, 1244, 2080, 1300, 1785, 1244, 1795, 1300,
     1273, 2280, 1244, 2274, 1300, 2070, 2070, 1244, 2410, 1300,
     1298, 1298, 1298, 1298, 1298, 1298, 1298, 1298, 2409, 2408,
     1298, 1298, 1298, 1298, 1298, 1298, 1298, 1298, 1298, 1298,
     1298, 1298, 2407, 1286, 1244, 2406, 1300, 1545, 1244, 2296,
     1300, 1286, 2297, 2299, 1244, 2298, 1300, 2061, 1244, 2403,
     1300, 2402, 1244, 2401, 1300, 2300, 1298, 1298, 1298, 1298,
     1298, 1298, 1298, 1298, 2400, 1298, 1298, 1298, 1298, 2352,

     2352, 2352, 2352, 2301, 1298, 1298, 1298, 1298, 1694, 1292,
     1244, 2399, 1300, 2302, 1244, 1694, 1300, 1292, 2303, 1244,
     2304, 1300, 2398, 1694, 2397, 2305, 2396, 2395, 1244, 2394,
     1300, 2393, 1298, 1298, 1298, 1298, 1298, 1298, 1298, 1298,
     1298, 1298, 1298, 1298, 2392, 2306, 1298, 1298, 1298, 1298,
     2363, 2363, 2363, 2363, 2308, 2307, 1244, 1347, 1300, 1417,
     1244, 1594, 1300, 2309, 1244, 1347, 1300, 1417, 2174, 1594,
     1244, 2339, 1300, 1298, 1298, 1298, 1298, 2174, 1298, 1298,
     1298, 1298, 1298, 1298, 1298, 1298, 1298, 1298, 1298, 1298,
     1687, 2310, 1298, 1298, 1298, 1298, 1696, 1244, 1687, 1300,

     1188, 2311, 1244, 1696, 1300, 2390, 1244, 1188, 1300, 2313,
     1244, 1696, 1300, 2312, 1883, 1188, 1244, 1883, 1300, 1298,
     1298, 1298, 1298, 1298, 1298, 1298, 1298, 1198, 1298, 1298,
     1298, 1298, 2314, 1693, 1198, 2315, 1298, 1298, 1298, 1298,
     2174, 1693, 1198, 1244, 1886, 1300, 2389, 1244, 2317, 1300,
     2387, 1719, 1244, 2316, 1300, 1298, 1298, 1298, 1298, 1719,
     1244, 2384, 1300, 1728, 1189, 1886, 2318, 1298, 1298, 1298,
     2325, 1728, 2383, 2382, 2319, 1298, 1298, 1298, 1298, 1244,
     1189, 1300, 2320, 2381, 1298, 1298, 1298, 1298, 1189, 2380,
     2379, 1244, 1189, 1300, 1810, 1298, 1298, 1298, 1298, 1244,

     1189, 1300, 1810, 2321, 2019, 2322, 2378, 2015, 1244, 2323,
     1300, 1298, 1298, 1298, 1298, 1298, 1298, 1298, 1298, 1244,
     2324, 1300, 1298, 1298, 1298, 1298, 1298, 1298, 1298, 1298,
     1298, 1298, 1298, 1298, 2009, 1244, 2009, 1300, 2369, 1244,
     1205, 1300, 2357, 2357, 2357, 2357, 1244, 1205, 1300, 2326,
     1244, 2327, 1300, 1819, 1244, 1205, 1300, 1954, 1954, 1954,
     1954, 1819, 1298, 1298, 1298, 1298, 2358, 2368, 2328, 1298,
     1298, 1298, 1298, 1992, 1298, 1298, 1298, 1298, 1992, 2361,
     2359, 2331, 2356, 1351, 2330, 2329, 1244, 2271, 1300, 2275,
     2271, 2355, 2275, 1244, 2332, 1300, 2277, 2333, 1244, 2277,

     1300, 1956, 1956, 1956, 1956, 1345, 2027, 2354, 1346, 2278,
     2159, 1810, 2284, 2339, 2027, 2174, 1543, 2272, 2159, 1890,
     2284, 2353, 2340, 2351, 1543, 1341, 2279, 1810, 2350, 2336,
     1985, 1985, 1985, 1985, 2278, 1810, 2334, 2349, 2272, 2348,
     1890, 1986, 2335, 2362, 2363, 2363, 2362, 2279, 2364, 1393,
     2366, 2364, 1995, 1996, 1997, 1995, 1987, 2347, 2346, 2367,
     2367, 2367, 2367, 1997, 1996, 1997, 1997, 1990, 1990, 1990,
     1990, 1990, 2002, 2002, 2002, 2002, 2345, 2344, 2343, 2003,
     1616, 2342, 1345, 3942, 3942, 3942, 3942, 2341, 1616, 1819,
     3942, 2370, 2370, 2370, 2370, 1405, 1405, 1405, 1405, 2007,

     2007, 2007, 2007, 1415, 2338, 1819, 1416, 1207, 1406, 2337,
     2195, 1848, 1406, 1819, 1207, 1408, 2374, 1229, 2195, 1408,
     2283, 2282, 1207, 1411, 2281, 2375, 2375, 2375, 2375, 2028,
     2028, 2028, 2028, 1229, 2269, 3519, 2029, 3942, 3942, 3942,
     3942, 1229, 2030, 3519, 3942, 1487, 1487, 1487, 1487, 2267,
     3942, 2253, 2252, 1891, 2372, 2250, 2033, 2033, 2033, 2033,
     1891, 2249, 1488, 2034, 3942, 3942, 3942, 3942, 1891, 2248,
     2247, 3942, 2388, 2388, 2388, 2388, 2041, 2041, 2041, 2041,
     1415, 2391, 2391, 2391, 2391, 2412, 2073, 2076, 2246, 2073,
     2076, 2042, 2243, 2242, 2413, 2413, 2413, 2413, 2082, 2082,

     2082, 2082, 2241, 2238, 2237, 2083, 2236, 3942, 3942, 3942,
     3942, 2084, 2174, 2174, 3942, 2235, 2075, 2078, 2234, 2233,
     3942, 2414, 2414, 2414, 2414, 2415, 2415, 2415, 2415, 2088,
     2088, 2088, 2088, 1592, 2084, 2419, 1593, 2075, 2078, 2089,
     2089, 2089, 2089, 2226, 2420, 2420, 2420, 2420, 2426, 2417,
     2090, 2437, 2429, 1588, 2437, 2225, 2432, 2427, 2427, 2427,
     2427, 2430, 2430, 2430, 2430, 2433, 2433, 2433, 2433, 2435,
     2116, 2116, 2116, 2116, 2116, 2441, 2224, 2221, 2436, 2436,
     2436, 2436, 2220, 2219, 2442, 2442, 2442, 2442, 1703, 1703,
     1703, 1703, 2142, 2142, 2142, 2142, 2143, 2143, 2143, 2143,

     1704, 2218, 2217, 1705, 2144, 2144, 2144, 2144, 2214, 1828,
     1592, 2144, 2144, 2144, 2144, 2150, 2150, 2150, 2150, 1726,
     1828, 2204, 1727, 2175, 2175, 2175, 2175, 2203, 1821, 2175,
     2175, 2175, 2175, 2202, 1153, 1821, 2201, 1821, 1154, 1722,
     1153, 2200, 1227, 1821, 1154, 1358, 1224, 1138, 1156, 1157,
     2189, 2186, 1358, 1138, 1156, 1157, 1180, 1180, 1180, 1180,
     1358, 2480, 2480, 2480, 2480, 2183, 2182, 1181, 2481, 2483,
     2483, 2483, 2483, 1828, 2199, 2199, 2199, 2199, 2174, 2172,
     1164, 1816, 2494, 2494, 2494, 2494, 2168, 2258, 2258, 2258,
     2258, 1765, 2167, 2194, 2259, 2166, 1726, 2463, 2463, 2463,

     2463, 2463, 2463, 2463, 2463, 2463, 2463, 2463, 2463, 2463,
     2463, 2463, 2463, 2463, 2463, 2463, 2463, 2464, 2464, 2464,
     2464, 2464, 2463, 2463, 2463, 2463, 2463, 2463, 2463, 2464,
     2464, 2464, 2464, 2464, 2464, 2464, 2464, 2464, 2464, 2464,
     2464, 2464, 2464, 2464, 2464, 2464, 2464, 2464, 2463, 2463,
     2463, 2463, 2464, 2464, 2464, 2464, 2464, 2464, 2464, 2464,
     2464, 2464, 2464, 2464, 2464, 2464, 2464, 2464, 2464, 2464,
     2464, 2464, 2464, 2464, 2464, 2464, 2464, 2463, 2463, 2463,
     2465, 1180, 1180, 1180, 1180, 1180, 1180, 1180, 1180, 2165,
     2164, 2027, 1181, 2163, 2161, 2160, 1181, 2191, 2191, 2191,

     2191, 2192, 2158, 2157, 2193, 1164, 1754, 2027, 1741, 1164,
     2483, 2483, 2483, 2483, 2192, 2027, 1741, 2484, 2155, 1741,
     2154, 2194, 1223, 1223, 1223, 1223, 1223, 1223, 1223, 1223,
     2498, 2498, 2498, 2498, 2194, 2544, 2544, 2544, 2544, 1224,
     3942, 3942, 3942, 3942, 2478, 2153, 1226, 3942, 2152, 1739,
     1226, 1737, 2477, 1729, 1244, 2254, 2254, 2254, 2254, 2546,
     2148, 2547, 2255, 2147, 1279, 1708, 1708, 2140, 1279, 2352,
     2352, 2352, 2352, 3942, 3942, 3942, 3942, 2138, 2192, 2256,
     3942, 1377, 3942, 2136, 2134, 2133, 3942, 2487, 1377, 2132,
     2131, 2192, 2497, 2498, 2498, 2497, 1377, 3942, 1243, 2548,

     2548, 2548, 2548, 2261, 2261, 2261, 2261, 2130, 1279, 2129,
     2127, 1878, 2126, 2125, 2262, 2124, 1244, 2263, 2263, 2263,
     2263, 2121, 1245, 1881, 2264, 1882, 3942, 2119, 2159, 2265,
     2006, 3942, 3942, 3942, 3942, 2113, 1246, 2006, 3942, 2109,
     2105, 2101, 1247, 3942, 2159, 2006, 1248, 1249, 2099, 1250,
     1251, 1252, 2159, 1618, 1618, 1253, 1254, 1255, 1256, 1257,
     2092, 1258, 1604, 1259, 1260, 1261, 1262, 1263, 2264, 1298,
     1298, 1298, 1298, 2265, 2352, 2352, 2352, 2352, 1595, 2086,
     2551, 2551, 2551, 2551, 2551, 2254, 2254, 2254, 2254, 2081,
     2080, 2070, 2259, 1244, 1279, 1300, 2068, 2284, 1279, 2548,

     2548, 2548, 2548, 1895, 1895, 1895, 1895, 2067, 2567, 2256,
     2064, 1878, 1469, 2284, 1896, 1895, 1895, 1895, 1895, 1469,
     1897, 2284, 2061, 1881, 2059, 2058, 1896, 1469, 1895, 1895,
     1895, 1895, 1897, 1895, 1895, 1895, 1895, 2057, 1279, 1896,
     1895, 1895, 1895, 1895, 1896, 1897, 2357, 2357, 2357, 2357,
     1897, 1896, 1895, 1895, 1895, 1895, 2056, 1897, 2055, 1895,
     1895, 1895, 1895, 1896, 1895, 1895, 1895, 1895, 2052, 1897,
     1896, 1895, 1895, 1895, 1895, 1896, 1897, 2637, 2637, 2637,
     2637, 1897, 1896, 1298, 1298, 1298, 1298, 2559, 1897, 2051,
     2050, 2049, 2561, 2560, 1298, 1298, 1298, 1298, 1298, 1298,

     1298, 1298, 2048, 2562, 1504, 2040, 2039, 1244, 2038, 1300,
     1298, 1298, 1298, 1298, 1298, 1298, 1298, 1298, 1244, 2037,
     1300, 2036, 1244, 2035, 1300, 2568, 2026, 2563, 2025, 2565,
     2024, 2569, 2564, 2023, 1244, 2022, 1300, 1474, 1244, 2021,
     1300, 1298, 1298, 1298, 1298, 2566, 1298, 1298, 1298, 1298,
     1298, 1298, 1298, 1298, 2570, 2020, 1497, 1452, 1298, 1298,
     1298, 1298, 2019, 1497, 1444, 1244, 1444, 1300, 1511, 2015,
     1244, 1497, 1300, 2012, 1244, 1511, 1300, 2582, 2582, 2582,
     2582, 2571, 1244, 1511, 1300, 2009, 2572, 1298, 1298, 1298,
     1298, 1418, 1298, 1298, 1298, 1298, 2573, 2634, 2634, 2634,

     2634, 1244, 1406, 1300, 2636, 2637, 2637, 2636, 2635, 2001,
     1393, 1244, 1999, 1300, 1992, 1984, 1244, 2575, 1300, 2574,
     1983, 2576, 2577, 2578, 2578, 2578, 2578, 2577, 2577, 2577,
     2577, 2577, 2577, 2577, 2577, 2577, 2577, 2577, 2577, 2577,
     2577, 2577, 1543, 1298, 1298, 1298, 1298, 2579, 1982, 2580,
     2577, 2577, 2577, 2577, 1981, 1980, 2583, 1979, 1543, 1978,
     2584, 2585, 1298, 1298, 1298, 1298, 1543, 1244, 1977, 1300,
     1976, 1969, 1992, 2577, 2577, 2577, 2577, 2357, 2357, 2357,
     2357, 2640, 2640, 2640, 2640, 1966, 1244, 1965, 1300, 1298,
     1298, 1298, 1298, 1298, 1298, 1298, 1298, 1298, 1298, 1298,

     1298, 2358, 2577, 2577, 2577, 2581, 2586, 1519, 1298, 1298,
     1298, 1298, 1964, 1244, 1519, 1300, 1963, 1244, 1962, 1300,
     1961, 1244, 1519, 1300, 1298, 1298, 1298, 1298, 1298, 1298,
     1298, 1298, 1244, 2587, 1300, 1298, 1298, 1298, 1298, 1298,
     1298, 1298, 1298, 1298, 1298, 1298, 1298, 1348, 1244, 1953,
     1300, 1550, 1244, 1556, 1300, 1558, 2588, 1952, 1550, 1244,
     1556, 1300, 1558, 1244, 2589, 1300, 1550, 1244, 1556, 1300,
     1558, 2590, 1298, 1298, 1298, 1298, 2591, 1616, 1298, 1298,
     1298, 1298, 1298, 1298, 1298, 1298, 1298, 1298, 1298, 1298,
     2087, 2592, 1303, 1616, 2595, 1906, 1244, 2087, 1300, 2593,

     1894, 1616, 1244, 2594, 1300, 2087, 1244, 1893, 1300, 1876,
     1244, 2596, 1300, 1872, 1298, 1298, 1298, 1298, 1298, 1298,
     1298, 1298, 1298, 1298, 1298, 1298, 1298, 1298, 1298, 1298,
     1487, 1487, 1487, 1487, 2598, 1871, 1615, 2597, 1244, 1864,
     1300, 2600, 1244, 1615, 1300, 1863, 1244, 1488, 1300, 1860,
     1244, 1615, 1300, 1857, 2599, 1298, 1298, 1298, 1298, 1853,
     1298, 1298, 1298, 1298, 1298, 1298, 1298, 1298, 1298, 1298,
     1298, 1298, 1852, 2601, 1851, 3230, 1847, 2602, 1844, 1244,
     1651, 1300, 1688, 2604, 1244, 2603, 1300, 1651, 1244, 1688,
     1300, 3230, 1244, 1843, 1300, 1651, 1303, 1688, 2605, 3230,

     1298, 1298, 1298, 1298, 1298, 1298, 1298, 1298, 1298, 1298,
     1298, 1298, 1842, 1837, 1828, 2607, 1617, 1617, 2606, 1298,
     1298, 1298, 1298, 1617, 1244, 2609, 1300, 2608, 1244, 1826,
     1300, 1617, 1244, 1825, 1300, 1298, 1298, 1298, 1298, 2370,
     2370, 2370, 2370, 1244, 1822, 1300, 1298, 1298, 1298, 1298,
     1298, 1298, 1298, 1298, 1227, 3942, 1406, 3235, 1228, 1244,
     1820, 1300, 2611, 1408, 1818, 2610, 2370, 2370, 2370, 2370,
     1244, 2612, 1300, 3235, 1244, 2613, 1300, 1812, 1196, 1809,
     2614, 3235, 1808, 1406, 1405, 1405, 1405, 1405, 2009, 1807,
     1408, 1802, 1178, 1178, 2615, 1151, 1133, 2645, 2645, 2645,

     2645, 1406, 2388, 2388, 2388, 2388, 2070, 1690, 1408, 2391,
     2391, 2391, 2391, 1774, 1690, 2673, 2673, 2673, 2673, 1771,
     2616, 1741, 1690, 2617, 2414, 2414, 2414, 2414, 2415, 2415,
     2415, 2415, 2092, 2415, 2415, 2415, 2415, 2084, 2101, 1694,
     1741, 2676, 2676, 2676, 2676, 1741, 1694, 2679, 2679, 2679,
     2679, 2105, 2417, 1741, 1694, 2109, 2643, 2417, 1739, 2113,
     2681, 2681, 2681, 2681, 2683, 2683, 2683, 2683, 2685, 2685,
     2685, 2685, 2121, 2480, 2480, 2480, 2480, 1738, 1737, 1729,
     2481, 2689, 2689, 2689, 2689, 2698, 2699, 1720, 1708, 1697,
     2700, 1692, 1686, 2701, 2702, 3942, 3942, 3942, 3942, 1665,

     1650, 1647, 3942, 2703, 1646, 2704, 2463, 2463, 2463, 2463,
     2463, 2463, 2463, 2463, 2463, 2463, 2463, 2463, 2463, 2463,
     2463, 2463, 2463, 2463, 2463, 2463, 2464, 2464, 2464, 2464,
     2464, 2463, 2463, 2463, 2463, 2463, 2463, 2463, 2464, 2464,
     2464, 2464, 2464, 2464, 2464, 2464, 2464, 2464, 2464, 2464,
     2464, 2464, 2464, 2464, 2464, 2464, 2464, 2463, 2463, 2463,
     2463, 2464, 2464, 2464, 2464, 2464, 2464, 2464, 2464, 2464,
     2464, 2464, 2464, 2464, 2464, 2464, 2464, 2464, 2464, 2464,
     2464, 2464, 2464, 2464, 2464, 2464, 2463, 2463, 2463, 2465,
     2721, 2722, 1645, 1640, 1637, 2723, 1634, 1629, 2724, 2725,

     1180, 1180, 1180, 1180, 1180, 1180, 1180, 1180, 2726, 1623,
     2727, 1181, 1619, 1618, 1613, 1181, 2483, 2483, 2483, 2483,
     2483, 2483, 2483, 2483, 1164, 1608, 1604, 1696, 1164, 2731,
     2731, 2731, 2731, 2192, 1696, 1595, 2484, 1583, 2137, 1567,
     2194, 1566, 1696, 1565, 2194, 2137, 1223, 1223, 1223, 1223,
     1564, 1561, 2137, 2194, 2139, 2728, 2739, 2739, 2739, 2739,
     2137, 2139, 2729, 1224, 2754, 2754, 2754, 2754, 2139, 1560,
     1226, 2783, 2783, 2783, 2783, 1554, 2139, 1553, 2255, 1552,
     1244, 1551, 2544, 2544, 2544, 2544, 2857, 2857, 2857, 2857,
     1541, 2548, 2548, 2548, 2548, 2256, 2544, 2544, 2544, 2544,

     1540, 1537, 1536, 1878, 1535, 2732, 2546, 1534, 1533, 1513,
     2192, 2738, 2739, 2739, 2738, 1881, 2264, 1243, 1504, 1502,
     2546, 2265, 2547, 1499, 2548, 2548, 2548, 2548, 2551, 2551,
     2551, 2551, 2551, 1498, 1477, 1244, 1878, 2866, 2866, 2866,
     2866, 1245, 1474, 2583, 2264, 1471, 1470, 1452, 1881, 2265,
     1882, 2861, 2861, 2861, 2861, 1246, 2551, 2551, 2551, 2551,
     2551, 1247, 2862, 1444, 2149, 1248, 1249, 1439, 1250, 1251,
     1252, 2149, 1428, 1427, 1253, 1254, 1255, 1256, 1257, 2149,
     1258, 1424, 1259, 1260, 1261, 1262, 1263, 1895, 1895, 1895,
     1895, 1895, 1895, 1895, 1895, 3074, 1418, 3588, 1896, 3590,

     1401, 3074, 1896, 3588, 1897, 3590, 1400, 1397, 1897, 1895,
     1895, 1895, 1895, 1895, 1895, 1895, 1895, 3074, 1389, 3588,
     1896, 3590, 1386, 2863, 1896, 3074, 1897, 3588, 1383, 3590,
     1897, 1895, 1895, 1895, 1895, 1895, 1895, 1895, 1895, 1382,
     1381, 1380, 1896, 2146, 2146, 1379, 1896, 1378, 1897, 1348,
     2146, 1303, 1897, 1895, 1895, 1895, 1895, 1290, 2146, 1298,
     1298, 1298, 1298, 2789, 1896, 1287, 1285, 1236, 2790, 1234,
     1897, 1895, 1895, 1895, 1895, 1895, 1895, 1895, 1895, 1231,
     1228, 1220, 1896, 1244, 2791, 1300, 1896, 1199, 1897, 1196,
     2793, 1179, 1897, 1178, 2798, 2869, 2869, 2869, 2869, 2792,

     1298, 1298, 1298, 1298, 1298, 1298, 1298, 1298, 2634, 2634,
     2634, 2634, 2794, 1298, 1298, 1298, 1298, 1151, 2177, 2635,
     3942, 2795, 3942, 3942, 1244, 2177, 1300, 2198, 1244, 2198,
     1300, 3942, 3942, 2177, 2796, 3942, 2198, 1244, 2797, 1300,
     3942, 3942, 3942, 2799, 2198, 2800, 1298, 1298, 1298, 1298,
     2803, 2803, 2803, 2803, 3942, 1298, 1298, 1298, 1298, 2806,
     2806, 2806, 2806, 1298, 1298, 1298, 1298, 3942, 3942, 3942,
     1244, 3942, 1300, 1821, 1244, 3942, 1300, 3942, 2801, 1244,
     1821, 1300, 1821, 1244, 3942, 1300, 3942, 1244, 1821, 1300,
     1298, 1298, 1298, 1298, 1298, 1298, 1298, 1298, 3942, 3942,

     3942, 2802, 1298, 1298, 1298, 1298, 2582, 2582, 2582, 2582,
     2811, 2811, 2811, 2811, 1244, 3942, 1300, 3942, 1244, 3942,
     1300, 3942, 2807, 3942, 3942, 3942, 1244, 2805, 1300, 2804,
     1244, 3942, 1300, 3942, 1244, 3942, 1300, 3942, 1298, 1298,
     1298, 1298, 1298, 1298, 1298, 1298, 1298, 1298, 1298, 1298,
     1298, 1298, 1298, 1298, 3942, 3942, 3942, 2808, 1298, 1298,
     1298, 1298, 1244, 2809, 1300, 3942, 1244, 3942, 1300, 3942,
     1244, 3942, 1300, 3942, 1244, 3942, 1300, 3942, 2810, 3942,
     3942, 3942, 1244, 3942, 1300, 3942, 1298, 1298, 1298, 1298,
     1298, 1298, 1298, 1298, 1298, 1298, 1298, 1298, 3942, 2813,

     1298, 1298, 1298, 1298, 1298, 1298, 1298, 1298, 2815, 3942,
     1244, 2812, 1300, 2814, 1244, 3942, 1300, 3942, 1244, 3942,
     1300, 2816, 3942, 3942, 1244, 3942, 1300, 3942, 1244, 3942,
     1300, 3942, 1298, 1298, 1298, 1298, 3942, 1298, 1298, 1298,
     1298, 3942, 3942, 3942, 2817, 1298, 1298, 1298, 1298, 2865,
     2866, 2866, 2865, 2819, 3942, 1393, 1244, 2818, 1300, 3942,
     2820, 1244, 3942, 1300, 3942, 2188, 3942, 2821, 3942, 1244,
     2188, 1300, 2188, 2822, 1298, 1298, 1298, 1298, 3942, 3942,
     2188, 1298, 1298, 1298, 1298, 1298, 1298, 1298, 1298, 1298,
     1298, 1298, 1298, 3942, 3942, 2824, 3942, 3942, 1244, 1891,

     1300, 3942, 3942, 2823, 2825, 1244, 1891, 1300, 3942, 1244,
     3942, 1300, 3942, 1244, 1891, 1300, 1298, 1298, 1298, 1298,
     1298, 1298, 1298, 1298, 3942, 1298, 1298, 1298, 1298, 1298,
     1298, 1298, 1298, 1298, 1298, 1298, 1298, 3942, 3942, 2826,
     1244, 1377, 1300, 3942, 1244, 3942, 1300, 3942, 1377, 1244,
     2827, 1300, 3942, 1244, 3942, 1300, 1377, 1244, 2828, 1300,
     2829, 1298, 1298, 1298, 1298, 1298, 1298, 1298, 1298, 1298,
     1298, 1298, 1298, 2830, 3942, 3942, 3942, 2831, 1298, 1298,
     1298, 1298, 3942, 3942, 3942, 1244, 3942, 1300, 3942, 1244,
     2836, 1300, 3942, 1244, 2835, 1300, 2834, 2841, 2841, 2841,

     2841, 3942, 1244, 3942, 1300, 2843, 2843, 2843, 2843, 3942,
     3942, 1298, 1298, 1298, 2844, 1298, 1298, 1298, 1298, 3942,
     2838, 1244, 3942, 1300, 1298, 1298, 1298, 1298, 2839, 1244,
     3942, 1300, 3942, 2840, 2837, 1244, 3942, 1300, 3942, 1244,
     3942, 1300, 1405, 1405, 1405, 1405, 3942, 3942, 1244, 3942,
     1300, 3942, 3942, 3942, 3942, 2082, 2082, 2082, 2082, 1406,
     2006, 3942, 2083, 3942, 3942, 3942, 1408, 2006, 2084, 3942,
     2846, 1180, 1180, 1180, 1180, 2006, 2842, 2926, 2926, 2926,
     2926, 3942, 1181, 3942, 2845, 3942, 3942, 2847, 1181, 2731,
     2731, 2731, 2731, 2192, 3942, 1164, 2484, 2933, 2933, 2933,

     2933, 2927, 1223, 1223, 1223, 1223, 2936, 2936, 2936, 2936,
     3942, 2868, 3942, 2194, 2870, 2948, 2948, 2948, 2948, 1224,
     2950, 2950, 2950, 2950, 3942, 3942, 1226, 3942, 2925, 3942,
     1244, 2754, 2754, 2754, 2754, 2952, 2952, 2952, 2952, 2975,
     2975, 2975, 2975, 2783, 2783, 2783, 2783, 3942, 1469, 3942,
     2255, 2254, 2254, 2254, 2254, 1469, 2928, 3942, 2255, 3942,
     1279, 3942, 3942, 1469, 1279, 3942, 3942, 3942, 2929, 3942,
     2192, 2935, 2936, 2936, 2935, 2256, 3942, 1243, 2544, 2544,
     2544, 2544, 1895, 1895, 1895, 1895, 3942, 3942, 2809, 1895,
     1895, 1895, 1895, 1896, 2804, 1244, 3942, 3942, 3942, 1897,

     1896, 1245, 2546, 2810, 1279, 3942, 1897, 2803, 2803, 2803,
     2803, 2857, 2857, 2857, 2857, 1246, 3942, 2087, 2842, 3942,
     3942, 1247, 3942, 3942, 2087, 1248, 1249, 3942, 1250, 1251,
     1252, 1244, 2087, 1300, 1253, 1254, 1255, 1256, 1257, 3942,
     1258, 3942, 1259, 1260, 1261, 1262, 1263, 1895, 1895, 1895,
     1895, 1895, 1895, 1895, 1895, 2982, 3942, 3942, 1896, 3942,
     3942, 3942, 1896, 3942, 1897, 3942, 3942, 3942, 1897, 1895,
     1895, 1895, 1895, 1895, 1895, 1895, 1895, 3942, 3942, 3942,
     1896, 3942, 3942, 3942, 1896, 3942, 1897, 3942, 3942, 3942,
     1897, 1895, 1895, 1895, 1895, 1895, 1895, 1895, 1895, 3942,

     3942, 3942, 1896, 3942, 2146, 2146, 1896, 2983, 1897, 3942,
     3942, 2146, 1897, 3942, 1895, 1895, 1895, 1895, 2984, 2146,
     1298, 1298, 1298, 1298, 3942, 1896, 2857, 2857, 2857, 2857,
     2986, 1897, 1298, 1298, 1298, 1298, 3942, 1298, 1298, 1298,
     1298, 3942, 2985, 2137, 1244, 3942, 1300, 2149, 2987, 3942,
     2137, 3942, 2988, 2990, 2149, 3942, 1244, 2137, 1300, 3942,
     3942, 1244, 2149, 1300, 3942, 2137, 3942, 2991, 2992, 1298,
     1298, 1298, 1298, 1298, 1298, 1298, 1298, 1298, 1298, 1298,
     1298, 2806, 2806, 2806, 2806, 2989, 3942, 2998, 2998, 2998,
     2998, 3942, 3942, 1244, 3942, 1300, 3942, 1244, 2999, 1300,

     3942, 1244, 3942, 1300, 3942, 1244, 3942, 1300, 3942, 3942,
     3942, 1244, 3942, 1300, 3942, 1298, 1298, 1298, 1298, 2811,
     2811, 2811, 2811, 3942, 1298, 1298, 1298, 1298, 3942, 3942,
     2994, 1247, 2993, 1298, 1298, 1298, 1298, 2177, 2996, 1244,
     1911, 1300, 3942, 1244, 2177, 1300, 3942, 3942, 1244, 2995,
     1300, 3942, 2177, 2997, 3942, 1262, 3942, 1244, 3942, 1300,
     3005, 3005, 3005, 3005, 3942, 3006, 3007, 3007, 3007, 3007,
     3942, 1298, 1298, 1298, 1298, 1298, 1298, 1298, 1298, 1298,
     1298, 1298, 1298, 3942, 1244, 3942, 1300, 3003, 3000, 3942,
     1244, 3942, 1300, 3942, 3942, 1244, 3004, 1300, 3942, 1244,

     3942, 1300, 3942, 1244, 3942, 1300, 3011, 3011, 3011, 3011,
     3942, 1298, 1298, 1298, 1298, 1298, 1298, 1298, 1298, 3014,
     3014, 3014, 3014, 1298, 1298, 1298, 1298, 3942, 3008, 3942,
     1244, 2188, 1300, 1377, 3009, 1244, 2188, 1300, 2188, 1244,
     1377, 1300, 3942, 3015, 3010, 1300, 2188, 1244, 1377, 1300,
     1298, 1298, 1298, 1298, 3018, 3018, 3018, 3018, 1298, 1298,
     1298, 1298, 3052, 3052, 3052, 3052, 3012, 3942, 1469, 3942,
     3013, 3942, 3942, 3053, 1244, 1469, 1300, 3942, 1244, 3942,
     1300, 3942, 1244, 1469, 1300, 1298, 1298, 1298, 1298, 1298,
     1298, 1298, 1298, 2730, 1298, 1298, 1298, 1298, 3942, 1377,

     2730, 3016, 1298, 1298, 1298, 1298, 1377, 3942, 2730, 1244,
     2198, 1300, 2198, 1244, 1377, 1300, 3942, 3019, 1244, 2198,
     1300, 3942, 3017, 3942, 3942, 3942, 1244, 2198, 1300, 3024,
     3024, 3024, 3024, 1298, 1298, 1298, 1298, 3942, 3942, 2730,
     3020, 3942, 1298, 1298, 1298, 1298, 2730, 3942, 3021, 3054,
     3054, 3054, 3054, 3025, 2730, 1300, 3942, 1244, 3942, 1300,
     3032, 3032, 3032, 3032, 3942, 3942, 1244, 3022, 1300, 3033,
     3033, 3033, 3033, 3026, 3942, 3023, 1298, 1298, 1298, 1298,
     1298, 1298, 1298, 1298, 1244, 3942, 1300, 1298, 1298, 1298,
     1298, 3942, 3030, 1244, 3942, 1300, 2841, 2841, 2841, 2841,

     1244, 3027, 1300, 3942, 1244, 3942, 1300, 2843, 2843, 2843,
     2843, 1244, 3942, 1300, 3031, 1298, 1298, 1298, 1298, 3942,
     1244, 3942, 1300, 3238, 3942, 3942, 1298, 1298, 1298, 1298,
     3238, 1244, 3942, 1300, 1298, 1298, 1298, 1298, 3238, 1244,
     3036, 1300, 1298, 1298, 1298, 1298, 3942, 3942, 3034, 3035,
     1244, 3942, 1300, 3037, 2861, 2861, 2861, 2861, 1244, 3942,
     1300, 3055, 3055, 3055, 3055, 2862, 1244, 3942, 1300, 3942,
     3942, 3942, 3038, 2861, 2861, 2861, 2861, 3057, 3058, 3058,
     3057, 3942, 3942, 1393, 2862, 3942, 3942, 3039, 3058, 3058,
     3058, 3058, 1405, 1405, 1405, 1405, 3942, 3942, 3942, 3041,

     3942, 3942, 3942, 3942, 3040, 3942, 3942, 3042, 3942, 1406,
     1180, 1180, 1180, 1180, 3942, 3942, 1408, 2926, 2926, 2926,
     2926, 1181, 1223, 1223, 1223, 1223, 3048, 3942, 1181, 3109,
     3109, 3109, 3109, 3942, 1164, 2933, 2933, 2933, 2933, 1224,
     3942, 2927, 3111, 3111, 3111, 3111, 1226, 3060, 3112, 3113,
     3113, 3112, 3113, 3113, 3113, 3113, 2948, 2948, 2948, 2948,
     2950, 2950, 2950, 2950, 3942, 3061, 2952, 2952, 2952, 2952,
     3129, 3129, 3129, 3129, 3942, 3942, 1244, 3131, 3131, 3131,
     3131, 3107, 3942, 2729, 3134, 3134, 3134, 3134, 3138, 3138,
     3138, 3138, 3144, 3144, 3144, 3144, 2928, 3149, 3149, 3149,

     3149, 3150, 3150, 3150, 3150, 3942, 3942, 3942, 3135, 3942,
     1247, 2975, 2975, 2975, 2975, 3942, 3145, 2996, 3360, 1911,
     1895, 1895, 1895, 1895, 3942, 3360, 3942, 1895, 1895, 1895,
     1895, 1896, 2997, 3360, 1262, 3942, 3146, 1897, 1896, 1895,
     1895, 1895, 1895, 3942, 1897, 3942, 1895, 1895, 1895, 1895,
     1896, 1895, 1895, 1895, 1895, 3942, 1897, 1896, 1895, 1895,
     1895, 1895, 1896, 1897, 3147, 3942, 3942, 3942, 1897, 1896,
     3163, 3163, 3163, 3163, 3942, 1897, 3942, 3942, 3942, 3157,
     3034, 1896, 3158, 1298, 1298, 1298, 1298, 1897, 3942, 1895,
     1895, 1895, 1895, 3942, 3159, 1298, 1298, 1298, 1298, 3942,

     1896, 1298, 1298, 1298, 1298, 3160, 1897, 1244, 3942, 1300,
     1298, 1298, 1298, 1298, 3189, 3189, 3189, 3189, 3942, 1244,
     3942, 1300, 3363, 3942, 3161, 1244, 3162, 1300, 3942, 3363,
     3165, 3942, 3620, 3942, 1244, 3942, 1300, 3363, 1837, 3620,
     3166, 3167, 1298, 1298, 1298, 1298, 3942, 3620, 3164, 3170,
     3170, 3170, 3170, 2998, 2998, 2998, 2998, 3172, 3172, 3172,
     3172, 3942, 3173, 3942, 2999, 3942, 1244, 3173, 1300, 1298,
     1298, 1298, 1298, 1244, 3942, 1300, 3942, 1244, 3942, 1300,
     3942, 3942, 3168, 1298, 1298, 1298, 1298, 1298, 1298, 1298,
     1298, 3942, 3942, 1244, 3942, 1300, 3005, 3005, 3005, 3005,

     3942, 3006, 3942, 3183, 3183, 3183, 3183, 1244, 3942, 1300,
     3942, 1244, 3942, 1300, 3942, 3169, 3007, 3007, 3007, 3007,
     1244, 3942, 1300, 3011, 3011, 3011, 3011, 1244, 3174, 3184,
     3942, 3942, 3942, 1298, 1298, 1298, 1298, 3942, 3942, 3942,
     1244, 3621, 1300, 3014, 3014, 3014, 3014, 1244, 3621, 1300,
     3942, 3177, 1298, 1298, 1298, 1298, 3621, 1244, 3942, 1300,
     3178, 3190, 3190, 3190, 3190, 3942, 3942, 3015, 3942, 1300,
     3942, 3942, 3942, 3180, 3942, 3942, 1244, 3942, 1300, 3215,
     3215, 3215, 3215, 3942, 3942, 1244, 3942, 1300, 3181, 3942,
     3182, 2577, 2578, 2578, 2578, 2578, 2577, 2577, 2577, 2577,

     2577, 2577, 2577, 2577, 2577, 2577, 2577, 2577, 2577, 2577,
     2577, 3186, 1298, 1298, 1298, 1298, 2579, 3188, 2580, 2577,
     2577, 2577, 2577, 3191, 3191, 3191, 3191, 3018, 3018, 3018,
     3018, 3192, 3192, 3192, 3192, 3942, 1244, 3942, 1300, 3942,
     3942, 3942, 2577, 2577, 2577, 2577, 3185, 3025, 3942, 1300,
     3942, 1244, 3942, 1300, 3942, 1244, 3942, 1300, 1298, 1298,
     1298, 1298, 3194, 3194, 3194, 3194, 3942, 3942, 3942, 3187,
     3942, 2577, 2577, 2577, 2581, 1298, 1298, 1298, 1298, 3942,
     3942, 3942, 1244, 3942, 1300, 3942, 3195, 3942, 1300, 3942,
     1298, 1298, 1298, 1298, 3942, 3024, 3024, 3024, 3024, 1244,

     3942, 1300, 3201, 3201, 3201, 3201, 3196, 1298, 1298, 1298,
     1298, 3942, 3942, 3942, 1244, 3193, 1300, 3942, 3942, 3025,
     3942, 1300, 1298, 1298, 1298, 1298, 1837, 3054, 3054, 3054,
     3054, 1244, 3942, 1300, 3197, 3942, 3942, 2139, 3198, 3146,
     3207, 3207, 3207, 3207, 2139, 3942, 1244, 3942, 1300, 3200,
     3942, 2139, 3942, 3199, 3032, 3032, 3032, 3032, 3942, 2139,
     3942, 3202, 3942, 3942, 3208, 3942, 1300, 3147, 3033, 3033,
     3033, 3033, 1298, 1298, 1298, 1298, 3942, 3942, 1244, 3942,
     1300, 3209, 3209, 3209, 3209, 3942, 3942, 3203, 1298, 1298,
     1298, 1298, 1244, 3942, 1300, 3942, 1244, 3942, 1300, 1298,

     1298, 1298, 1298, 3942, 3942, 1244, 3942, 1300, 3214, 3214,
     3214, 3214, 1244, 3942, 1300, 1298, 1298, 1298, 1298, 3052,
     3052, 3052, 3052, 1244, 3942, 1300, 3055, 3055, 3055, 3055,
     3053, 3008, 1244, 3942, 1300, 3052, 3052, 3052, 3052, 1244,
     3942, 1300, 3054, 3054, 3054, 3054, 3053, 3210, 3055, 3055,
     3055, 3055, 3222, 3223, 3223, 3222, 3942, 3942, 1393, 3223,
     3223, 3223, 3223, 1405, 1405, 1405, 1405, 3942, 3213, 3942,
     3942, 3942, 3942, 3942, 2574, 1223, 1223, 1223, 1223, 3942,
     1406, 3262, 3262, 3262, 3262, 3942, 3942, 1408, 3109, 3109,
     3109, 3109, 1224, 3111, 3111, 3111, 3111, 3942, 3942, 1226,

     3264, 3265, 3265, 3264, 3942, 3265, 3265, 3265, 3265, 3272,
     3272, 3272, 3272, 3277, 3277, 3277, 3277, 3942, 3942, 3942,
     3225, 3129, 3129, 3129, 3129, 3942, 3942, 3942, 2648, 1244,
     3131, 3131, 3131, 3131, 3134, 3134, 3134, 3134, 3189, 3189,
     3189, 3189, 3261, 3284, 3284, 3284, 3284, 3285, 3285, 3285,
     3285, 3138, 3138, 3138, 3138, 3942, 3942, 3942, 3135, 3286,
     3286, 3286, 3286, 3288, 3288, 3288, 3288, 3144, 3144, 3144,
     3144, 3145, 3201, 3201, 3201, 3201, 3297, 3297, 3297, 3297,
     3149, 3149, 3149, 3149, 3942, 3942, 3942, 3289, 3942, 3942,
     3942, 3145, 3150, 3150, 3150, 3150, 3299, 3299, 3299, 3299,

     3298, 3302, 3302, 3302, 3302, 3942, 3942, 3290, 3942, 3942,
     3942, 3146, 1895, 1895, 1895, 1895, 1895, 1895, 1895, 1895,
     3942, 3942, 3942, 1896, 3942, 3942, 3942, 1896, 3942, 1897,
     3942, 3942, 3942, 1897, 3942, 3291, 3942, 3942, 3942, 3147,
     1895, 1895, 1895, 1895, 3306, 3306, 3306, 3306, 3942, 3942,
     3942, 1896, 3942, 3942, 3942, 1896, 3942, 1897, 3942, 3942,
     3942, 1897, 3942, 1895, 1895, 1895, 1895, 1895, 1895, 1895,
     1895, 3942, 3942, 3304, 1896, 3942, 3942, 3942, 1896, 3303,
     1897, 3942, 3942, 3942, 1897, 3163, 3163, 3163, 3163, 1895,
     1895, 1895, 1895, 3942, 3942, 3942, 1896, 3942, 3942, 3942,

     1896, 1298, 1298, 1298, 1298, 3305, 1897, 1298, 1298, 1298,
     1298, 1298, 1298, 1298, 1298, 1298, 1298, 1298, 1298, 3942,
     3942, 3942, 3307, 3942, 3942, 1244, 3942, 1300, 3942, 3942,
     3942, 1244, 3308, 1300, 3942, 1244, 3942, 1300, 3942, 1244,
     3942, 1300, 3312, 3312, 3312, 3312, 3942, 3309, 3170, 3170,
     3170, 3170, 3942, 3942, 3310, 3942, 3942, 3031, 3942, 3172,
     3172, 3172, 3172, 3942, 3173, 3942, 1244, 3942, 1300, 3173,
     3942, 3942, 1244, 3942, 1300, 3942, 3942, 3311, 1298, 1298,
     1298, 1298, 3942, 1298, 1298, 1298, 1298, 3317, 3317, 3317,
     3317, 3183, 3183, 3183, 3183, 1298, 1298, 1298, 1298, 3942,

     3942, 3942, 1244, 3942, 1300, 3942, 3942, 1244, 3942, 1300,
     3942, 1244, 3942, 1300, 3942, 1244, 3942, 3184, 3942, 1244,
     3942, 1300, 3325, 3325, 3325, 3325, 3942, 1298, 1298, 1298,
     1298, 3327, 3327, 3327, 3327, 3189, 3189, 3189, 3189, 3942,
     3190, 3190, 3190, 3190, 3942, 3942, 1244, 3942, 1300, 3313,
     3316, 1244, 3942, 1300, 3942, 3328, 3942, 1300, 3191, 3191,
     3191, 3191, 3942, 3324, 1244, 3942, 1300, 3192, 3192, 3192,
     3192, 1298, 1298, 1298, 1298, 3194, 3194, 3194, 3194, 3942,
     3942, 3942, 3025, 3942, 1300, 3942, 3326, 3330, 3330, 3330,
     3330, 1244, 3942, 1300, 3942, 1244, 3942, 1300, 3942, 3195,

     3942, 1300, 1298, 1298, 1298, 1298, 3942, 1298, 1298, 1298,
     1298, 1837, 1298, 1298, 1298, 1298, 3942, 3942, 3942, 3290,
     3334, 3334, 3334, 3334, 3942, 3942, 1244, 3942, 1300, 3942,
     3329, 1244, 3942, 1300, 3942, 3942, 1244, 3942, 1300, 1298,
     1298, 1298, 1298, 3942, 1244, 3942, 1300, 3291, 3201, 3201,
     3201, 3201, 1298, 1298, 1298, 1298, 3331, 1298, 1298, 1298,
     1298, 3942, 3942, 1244, 3942, 1300, 1298, 1298, 1298, 1298,
     3942, 3333, 3332, 3942, 3942, 3942, 1244, 3942, 1300, 3942,
     3942, 1244, 3942, 1300, 3207, 3207, 3207, 3207, 3942, 3942,
     1244, 3942, 1300, 3341, 3341, 3341, 3341, 3335, 3336, 3942,

     3209, 3209, 3209, 3209, 3344, 3344, 3344, 3344, 3208, 3942,
     1300, 1298, 1298, 1298, 1298, 3942, 3942, 1837, 3214, 3214,
     3214, 3214, 3942, 3942, 1244, 3337, 1300, 3942, 1244, 3942,
     1300, 3942, 3942, 3942, 3340, 1244, 3942, 1300, 3215, 3215,
     3215, 3215, 1244, 3942, 1300, 3352, 3352, 3352, 3352, 3942,
     1247, 3353, 3353, 3353, 3353, 3942, 3942, 3342, 3942, 1911,
     3354, 3354, 3354, 3354, 3942, 3355, 3356, 3356, 3355, 3942,
     3347, 1393, 2997, 3942, 1262, 3343, 3356, 3356, 3356, 3356,
     1405, 1405, 1405, 1405, 3369, 3369, 3369, 3369, 1223, 1223,
     1223, 1223, 3262, 3262, 3262, 3262, 3942, 1406, 3386, 3386,

     3386, 3386, 3942, 3348, 1408, 1224, 3387, 3388, 3388, 3387,
     3942, 3942, 1226, 3388, 3388, 3388, 3388, 3392, 3392, 3392,
     3392, 3272, 3272, 3272, 3272, 3397, 3397, 3397, 3397, 3277,
     3277, 3277, 3277, 3400, 3400, 3400, 3400, 1244, 3942, 3358,
     3401, 3401, 3401, 3401, 3403, 3403, 3403, 3403, 3284, 3284,
     3284, 3284, 3285, 3285, 3285, 3285, 3286, 3286, 3286, 3286,
     3942, 3385, 3288, 3288, 3288, 3288, 3942, 3942, 3404, 3330,
     3330, 3330, 3330, 3942, 3942, 3942, 3145, 3409, 3409, 3409,
     3409, 3297, 3297, 3297, 3297, 3942, 3289, 3341, 3341, 3341,
     3341, 3299, 3299, 3299, 3299, 3413, 3413, 3413, 3413, 3302,

     3302, 3302, 3302, 3942, 3942, 3298, 3290, 1895, 1895, 1895,
     1895, 1895, 1895, 1895, 1895, 3942, 3942, 3942, 1896, 3942,
     3942, 3942, 1896, 3942, 1897, 3942, 3942, 3942, 1897, 3417,
     3417, 3417, 3417, 3942, 3291, 3942, 3306, 3306, 3306, 3306,
     1896, 1247, 1895, 1895, 1895, 1895, 1897, 1896, 3342, 3942,
     1911, 3942, 3942, 1896, 3942, 1298, 1298, 1298, 1298, 1897,
     3942, 3942, 3942, 2997, 3942, 1262, 3343, 3942, 3942, 3942,
     3416, 3419, 3419, 3419, 3419, 3420, 3420, 3420, 3420, 1244,
     3415, 1300, 1896, 3942, 3942, 3942, 1896, 3942, 1897, 3942,
     3942, 3942, 1897, 1298, 1298, 1298, 1298, 3942, 3942, 3942,

     3418, 3942, 3942, 3942, 3421, 3312, 3312, 3312, 3312, 1298,
     1298, 1298, 1298, 3426, 3426, 3426, 3426, 1244, 3942, 1300,
     3317, 3317, 3317, 3317, 3427, 3427, 3427, 3427, 3942, 1244,
     3942, 1300, 3942, 1244, 3942, 1300, 3942, 1244, 3942, 1300,
     1298, 1298, 1298, 1298, 1244, 3942, 1300, 3325, 3325, 3325,
     3325, 3942, 3422, 3434, 3434, 3434, 3435, 3327, 3327, 3327,
     3327, 3942, 3942, 3942, 1244, 3942, 1300, 3942, 3942, 3423,
     3942, 1244, 3942, 1300, 3942, 3942, 3942, 1244, 3942, 1300,
     3942, 3328, 3942, 1300, 3436, 3436, 3436, 3436, 3330, 3330,
     3330, 3330, 3942, 3451, 3451, 3451, 3451, 3341, 3341, 3341,

     3341, 3942, 3942, 3428, 3942, 3942, 3942, 3433, 1837, 3437,
     3438, 3438, 3438, 3438, 3437, 3437, 3437, 3437, 3437, 3437,
     3437, 3437, 3437, 3437, 3437, 3437, 3437, 3437, 3437, 1298,
     1298, 1298, 1298, 3942, 3439, 3437, 3440, 3437, 3437, 3437,
     3437, 1298, 1298, 1298, 1298, 1298, 1298, 1298, 1298, 3352,
     3352, 3352, 3352, 1244, 3942, 1300, 3334, 3334, 3334, 3334,
     3437, 3437, 3437, 3437, 3942, 1244, 3942, 1300, 3942, 1244,
     3942, 1300, 3452, 3942, 3942, 3442, 3445, 3445, 3445, 3445,
     1244, 3942, 1300, 3942, 1298, 1298, 1298, 1298, 3942, 3437,
     3437, 3437, 3441, 3942, 3942, 1298, 1298, 1298, 1298, 3942,

     3446, 3942, 1300, 1298, 1298, 1298, 1298, 3942, 1244, 3443,
     1300, 3344, 3344, 3344, 3344, 3942, 3942, 3444, 3942, 1244,
     3447, 1300, 3942, 3942, 3449, 3942, 3942, 1244, 3942, 1300,
     3434, 3434, 3434, 3434, 3942, 1244, 3942, 1300, 3353, 3353,
     3353, 3353, 3354, 3354, 3354, 3354, 3942, 3942, 3448, 3352,
     3352, 3352, 3352, 3942, 1244, 3942, 1300, 3353, 3353, 3353,
     3353, 3354, 3354, 3354, 3354, 3942, 3942, 3942, 3450, 3942,
     3454, 3459, 3460, 3460, 3459, 3942, 3942, 1393, 3460, 3460,
     3460, 3460, 3461, 3461, 3461, 3461, 3462, 3462, 3462, 3462,
     3369, 3369, 3369, 3369, 1223, 1223, 1223, 1223, 3386, 3386,

     3386, 3386, 3942, 1406, 3484, 3485, 3485, 3484, 3942, 3942,
     1408, 1224, 3485, 3485, 3485, 3485, 3942, 3942, 1226, 3488,
     3488, 3488, 3488, 3392, 3392, 3392, 3392, 3490, 3490, 3490,
     3490, 3491, 3491, 3491, 3491, 3942, 1244, 3397, 3397, 3397,
     3397, 3494, 3494, 3494, 3494, 3400, 3400, 3400, 3400, 3401,
     3401, 3401, 3401, 3495, 3495, 3495, 3496, 3403, 3403, 3403,
     3403, 3436, 3436, 3436, 3436, 3942, 3483, 3497, 3497, 3497,
     3497, 3409, 3409, 3409, 3409, 3501, 3501, 3501, 3501, 3942,
     3942, 3404, 3413, 3413, 3413, 3413, 3495, 3495, 3495, 3495,
     1895, 1895, 1895, 1895, 3508, 3508, 3508, 3508, 3942, 3502,

     3942, 1896, 3942, 3942, 3942, 1896, 3942, 1897, 3942, 3942,
     3942, 1897, 3417, 3417, 3417, 3417, 3942, 3942, 3942, 3503,
     3942, 3942, 3942, 1896, 3509, 3509, 3509, 3509, 3419, 3419,
     3419, 3419, 3942, 3942, 3942, 1896, 3942, 3942, 3942, 1896,
     3942, 1897, 3942, 3942, 3942, 3507, 3942, 3504, 3420, 3420,
     3420, 3420, 1298, 1298, 1298, 1298, 3942, 3942, 3942, 1896,
     1298, 1298, 1298, 1298, 1298, 1298, 1298, 1298, 3511, 3511,
     3511, 3511, 3426, 3426, 3426, 3426, 1244, 3942, 1300, 3427,
     3427, 3427, 3427, 3942, 1244, 3942, 1300, 3942, 1244, 3942,
     1300, 1298, 1298, 1298, 1298, 3942, 1244, 3942, 1300, 3434,

     3434, 3434, 3434, 3434, 3434, 3434, 3434, 3436, 3436, 3436,
     3436, 1298, 1298, 1298, 1298, 1244, 3942, 1300, 3017, 3510,
     3942, 3942, 3942, 1244, 3942, 1300, 3942, 1244, 3942, 1300,
     1298, 1298, 1298, 1298, 3942, 1244, 3942, 1300, 3523, 3523,
     3523, 3523, 3525, 3525, 3525, 3525, 3942, 2583, 3515, 3451,
     3451, 3451, 3451, 3942, 1244, 3942, 1300, 3942, 3428, 3942,
     3516, 3942, 3524, 3942, 1300, 3942, 1837, 3942, 3942, 3942,
     3521, 3537, 3537, 3537, 3537, 3517, 3437, 3438, 3438, 3438,
     3438, 3437, 3437, 3437, 3518, 3437, 3437, 3437, 3437, 3437,
     3437, 3437, 3437, 3437, 3437, 3437, 3461, 3461, 3461, 3461,

     3942, 3439, 3437, 3440, 3437, 3437, 3437, 3437, 3519, 3519,
     3519, 3519, 3519, 3519, 3519, 3519, 3519, 3519, 3519, 3519,
     3519, 3519, 3519, 3519, 3519, 3519, 3519, 3437, 3437, 3437,
     3437, 3519, 3519, 3519, 3519, 3519, 3519, 3519, 3519, 3519,
     3519, 3519, 3519, 3519, 3519, 3519, 3519, 3519, 3519, 3519,
     3519, 3519, 3519, 3519, 3519, 3519, 3437, 3437, 3437, 3520,
     1298, 1298, 1298, 1298, 3445, 3445, 3445, 3445, 1298, 1298,
     1298, 1298, 1298, 1298, 1298, 1298, 1298, 1298, 1298, 1298,
     1298, 1298, 1298, 1298, 1244, 3942, 1300, 3942, 3446, 3942,
     1300, 3942, 1244, 3942, 1300, 3942, 1244, 3942, 1300, 3942,

     1244, 3942, 1300, 3942, 1244, 3942, 1300, 3942, 3503, 3530,
     3530, 3530, 3530, 3942, 1298, 1298, 1298, 1298, 3528, 3942,
     3942, 3942, 3526, 3536, 3537, 3537, 3536, 3942, 3942, 1393,
     3942, 3942, 3942, 3522, 3942, 3942, 3504, 3527, 1244, 3942,
     1300, 3462, 3462, 3462, 3462, 3548, 3548, 3548, 3548, 3942,
     3942, 3942, 3529, 3549, 3550, 3550, 3549, 3942, 1406, 3942,
     3942, 3942, 1224, 3942, 3942, 1408, 3942, 3942, 3942, 1226,
     3942, 3532, 3550, 3550, 3550, 3550, 3552, 3552, 3552, 3552,
     3488, 3488, 3488, 3488, 3553, 3553, 3553, 3553, 3531, 3490,
     3490, 3490, 3490, 3942, 3942, 3942, 1244, 3491, 3491, 3491,

     3491, 3494, 3494, 3494, 3494, 3495, 3495, 3495, 3495, 3495,
     3495, 3495, 3495, 3497, 3497, 3497, 3497, 3557, 3557, 3557,
     3557, 3501, 3501, 3501, 3501, 3525, 3525, 3525, 3525, 1895,
     1895, 1895, 1895, 3508, 3508, 3508, 3508, 3942, 3942, 3942,
     1896, 3558, 3942, 3942, 1896, 3502, 1897, 3509, 3509, 3509,
     3509, 1298, 1298, 1298, 1298, 3942, 3942, 3942, 1896, 3511,
     3511, 3511, 3511, 3942, 3942, 3503, 3516, 3942, 1298, 1298,
     1298, 1298, 3942, 3942, 3942, 1244, 3942, 1300, 3942, 3942,
     3942, 3517, 3569, 3569, 3569, 3569, 3569, 3569, 3569, 3569,
     3942, 3942, 1244, 3504, 1300, 1298, 1298, 1298, 1298, 3942,

     3942, 3942, 3563, 3942, 1298, 1298, 1298, 1298, 3564, 3571,
     3942, 3942, 3942, 3571, 3523, 3523, 3523, 3523, 3942, 1244,
     3942, 1300, 3574, 3574, 3574, 3574, 3942, 2303, 1244, 3942,
     1300, 3525, 3525, 3525, 3525, 3942, 3942, 3572, 3524, 3942,
     1300, 1298, 1298, 1298, 1298, 3942, 1837, 1298, 1298, 1298,
     1298, 1298, 1298, 1298, 1298, 3578, 3578, 3578, 3578, 3530,
     3530, 3530, 3530, 3942, 3942, 1244, 3942, 1300, 3942, 3942,
     3942, 1244, 3942, 1300, 3942, 1244, 3573, 1300, 3942, 3579,
     3942, 1300, 1298, 1298, 1298, 1298, 3942, 3575, 3580, 3580,
     3580, 3580, 3942, 3584, 3585, 3585, 3584, 3942, 3577, 1393,

     3585, 3585, 3585, 3585, 3942, 3942, 1244, 3942, 1300, 3548,
     3548, 3548, 3548, 3942, 3942, 3576, 3593, 3594, 3594, 3593,
     3594, 3594, 3594, 3594, 3552, 3552, 3552, 3552, 3553, 3553,
     3553, 3553, 3942, 1226, 3557, 3557, 3557, 3557, 3942, 3942,
     3942, 2303, 3942, 3942, 1244, 3574, 3574, 3574, 3574, 3602,
     3602, 3602, 3602, 1895, 1895, 1895, 1895, 3942, 3558, 1298,
     1298, 1298, 1298, 3942, 1896, 3942, 3942, 3581, 3942, 3942,
     1897, 3942, 3942, 3603, 3605, 3605, 3605, 3605, 3569, 3569,
     3569, 3569, 3942, 1244, 3942, 1300, 3569, 3569, 3569, 3569,
     3942, 1298, 1298, 1298, 1298, 3609, 3609, 3609, 3609, 3574,

     3574, 3574, 3574, 3942, 3942, 3571, 1298, 1298, 1298, 1298,
     3942, 3942, 3942, 3571, 3942, 1244, 3604, 1300, 3347, 3610,
     3942, 1300, 3942, 1298, 1298, 1298, 1298, 3942, 3942, 3942,
     1244, 3942, 1300, 1298, 1298, 1298, 1298, 3942, 3608, 3578,
     3578, 3578, 3578, 3942, 3942, 3942, 3611, 1244, 3942, 1300,
     3613, 3613, 3613, 3613, 3942, 3942, 3942, 1244, 3942, 1300,
     3942, 3942, 3942, 3579, 3942, 1300, 3580, 3580, 3580, 3580,
     3614, 3614, 3614, 3614, 1837, 3617, 3618, 3618, 3617, 3529,
     3942, 1393, 3618, 3618, 3618, 3618, 3622, 3623, 3623, 3622,
     3623, 3623, 3623, 3623, 3942, 3942, 3612, 3626, 3626, 3626,

     3626, 3602, 3602, 3602, 3602, 3613, 3613, 3613, 3613, 1895,
     1895, 1895, 1895, 3942, 1244, 3605, 3605, 3605, 3605, 3942,
     1896, 3627, 3942, 3942, 3942, 3603, 1897, 1298, 1298, 1298,
     1298, 3609, 3609, 3609, 3609, 3633, 3633, 3633, 3633, 1298,
     1298, 1298, 1298, 1298, 1298, 1298, 1298, 3942, 3942, 3615,
     3942, 1244, 3942, 1300, 3942, 3610, 3942, 1300, 3942, 1837,
     3942, 3942, 3942, 1244, 3942, 1300, 3942, 1244, 3942, 1300,
     3942, 3942, 3942, 3573, 3942, 3942, 3942, 3630, 3942, 3942,
     3942, 3634, 3613, 3613, 3613, 3613, 3614, 3614, 3614, 3614,
     3637, 3638, 3638, 3637, 3942, 3942, 1393, 3638, 3638, 3638,

     3638, 3640, 3641, 3641, 3640, 3641, 3641, 3641, 3641, 3626,
     3626, 3626, 3626, 3942, 3942, 3635, 3633, 3633, 3633, 3633,
     1895, 1895, 1895, 1895, 3633, 3633, 3633, 3633, 3942, 1244,
     3942, 1896, 3942, 3627, 3942, 3942, 3942, 1897, 1298, 1298,
     1298, 1298, 3649, 3649, 3649, 3649, 3652, 3653, 3653, 3652,
     3942, 3942, 1393, 3653, 3653, 3653, 3653, 3655, 3656, 3656,
     3655, 3942, 1244, 3942, 1300, 3942, 3650, 3942, 1300, 3656,
     3656, 3656, 3656, 3659, 3659, 3659, 3659, 3661, 3661, 3661,
     3661, 3662, 3662, 3662, 3662, 3648, 3942, 3645, 1896, 1298,
     1298, 1298, 1298, 1244, 1897, 3942, 3942, 3660, 3649, 3649,

     3649, 3649, 3665, 3665, 3665, 3665, 3667, 3668, 3668, 3667,
     3942, 3942, 1393, 1244, 3942, 1300, 3668, 3668, 3668, 3668,
     3942, 3942, 3650, 3942, 1300, 3942, 1837, 3670, 3671, 3671,
     3670, 3671, 3671, 3671, 3671, 3635, 3672, 3672, 3672, 3672,
     3659, 3659, 3659, 3659, 3665, 3665, 3665, 3665, 3661, 3661,
     3661, 3661, 3942, 3942, 3942, 1244, 3942, 3942, 3942, 1896,
     3663, 3942, 3942, 3942, 3660, 3662, 3662, 3662, 3662, 3673,
     3673, 3673, 3673, 3665, 3665, 3665, 3665, 3675, 3675, 3675,
     3675, 3677, 3678, 3678, 3677, 3942, 3942, 1393, 3678, 3678,
     3678, 3678, 3680, 3681, 3681, 3680, 3681, 3681, 3681, 3681,

     3672, 3672, 3672, 3672, 3676, 3673, 3673, 3673, 3673, 3675,
     3675, 3675, 3675, 3682, 3682, 3682, 3682, 3942, 3683, 3942,
     1244, 3942, 3942, 3683, 3685, 3686, 3686, 3685, 3942, 3942,
     1393, 3686, 3686, 3686, 3686, 3942, 3676, 3687, 3688, 3688,
     3687, 3688, 3688, 3688, 3688, 3942, 3942, 3942, 3674, 3682,
     3682, 3682, 3682, 3942, 3683, 3690, 3691, 3691, 3690, 3683,
     3942, 1393, 3942, 3942, 3942, 1244, 3691, 3691, 3691, 3691,
     3692, 3693, 3693, 3692, 3693, 3693, 3693, 3693, 3695, 3696,
     3696, 3695, 3684, 3942, 1393, 3696, 3696, 3696, 3696, 3697,
     3698, 3698, 3697, 3698, 3698, 3698, 3698, 3942, 1244, 3699,

     3699, 3699, 3699, 3942, 3700, 3702, 3703, 3703, 3702, 3700,
     3942, 1393, 3703, 3703, 3703, 3703, 3942, 1244, 3684, 3704,
     3705, 3705, 3704, 3705, 3705, 3705, 3705, 3701, 3699, 3699,
     3699, 3699, 3699, 3699, 3699, 3699, 3706, 3707, 3707, 3706,
     3942, 3942, 1393, 3707, 3707, 3707, 3707, 1244, 3708, 3709,
     3709, 3708, 3709, 3709, 3709, 3709, 3701, 3942, 3942, 3942,
     3701, 3710, 3711, 3711, 3710, 3942, 3942, 1393, 3711, 3711,
     3711, 3711, 3712, 3713, 3713, 3712, 1244, 3713, 3713, 3713,
     3713, 3714, 3715, 3715, 3714, 3942, 3942, 1393, 3715, 3715,
     3715, 3715, 3716, 3717, 3717, 3716, 3717, 3717, 3717, 3717,

     3942, 1244, 3718, 3719, 3719, 3718, 3942, 3942, 1393, 3719,
     3719, 3719, 3719, 3720, 3721, 3721, 3720, 3942, 3942, 3942,
     1244, 3721, 3721, 3721, 3721, 3722, 3723, 3723, 3722, 3942,
     3942, 1393, 3723, 3723, 3723, 3723, 3724, 3725, 3725, 3724,
     3725, 3725, 3725, 3725, 3942, 1244, 3726, 3727, 3727, 3726,
     3942, 3942, 1393, 3727, 3727, 3727, 3727, 3728, 3729, 3729,
     3728, 3942, 3942, 3942, 1244, 3729, 3729, 3729, 3729, 3730,
     3731, 3731, 3730, 3942, 3942, 1393, 3731, 3731, 3731, 3731,
     3732, 3733, 3733, 3732, 3733, 3733, 3733, 3733, 3942, 1244,
     3734, 3735, 3735, 3734, 3942, 3942, 1393, 3735, 3735, 3735,

     3735, 3736, 3737, 3737, 3736, 3942, 3942, 3942, 1244, 3737,
     3737, 3737, 3737, 3738, 3739, 3739, 3738, 3942, 3942, 1393,
     3739, 3739, 3739, 3739, 3740, 3741, 3741, 3740, 3741, 3741,
     3741, 3741, 3942, 1244, 3742, 3743, 3743, 3742, 3942, 3942,
     1393, 3743, 3743, 3743, 3743, 3744, 3745, 3745, 3744, 3942,
     3942, 3942, 1244, 3745, 3745, 3745, 3745, 3746, 3747, 3747,
     3746, 3942, 3942, 1393, 3747, 3747, 3747, 3747, 3748, 3749,
     3749, 3748, 3749, 3749, 3749, 3749, 3942, 1244, 3750, 3751,
     3751, 3750, 3942, 3942, 1393, 3751, 3751, 3751, 3751, 3752,
     3753, 3753, 3752, 3942, 3942, 3942, 1244, 3753, 3753, 3753,

     3753, 3754, 3755, 3755, 3754, 3942, 3942, 1393, 3755, 3755,
     3755, 3755, 3756, 3757, 3757, 3756, 3757, 3757, 3757, 3757,
     3942, 1244, 3758, 3759, 3759, 3758, 3942, 3942, 1393, 3759,
     3759, 3759, 3759, 3760, 3761, 3761, 3760, 3942, 3942, 3942,
     1244, 3761, 3761, 3761, 3761, 3762, 3763, 3763, 3762, 3942,
     3942, 1393, 3763, 3763, 3763, 3763, 3764, 3765, 3765, 3764,
     3765, 3765, 3765, 3765, 3942, 1244, 3766, 3767, 3767, 3766,
     3942, 3942, 1393, 3767, 3767, 3767, 3767, 3768, 3769, 3769,
     3768, 3942, 3942, 3942, 1244, 3769, 3769, 3769, 3769, 3770,
     3771, 3771, 3770, 3942, 3942, 1393, 3771, 3771, 3771, 3771,

     3772, 3773, 3773, 3772, 3773, 3773, 3773, 3773, 3942, 1244,
     3774, 3775, 3775, 3774, 3942, 3942, 1393, 3775, 3775, 3775,
     3775, 3776, 3777, 3777, 3776, 3942, 3942, 3942, 1244, 3777,
     3777, 3777, 3777, 3778, 3779, 3779, 3778, 3942, 3942, 1393,
     3779, 3779, 3779, 3779, 3780, 3781, 3781, 3780, 3781, 3781,
     3781, 3781, 3942, 1244, 3782, 3783, 3783, 3782, 3942, 3942,
     1393, 3783, 3783, 3783, 3783, 3784, 3785, 3785, 3784, 3942,
     3942, 3942, 1244, 3785, 3785, 3785, 3785, 3786, 3787, 3787,
     3786, 3942, 3942, 1393, 3787, 3787, 3787, 3787, 3788, 3789,
     3789, 3788, 3789, 3789, 3789, 3789, 3942, 1244, 3790, 3791,

     3791, 3790, 3942, 3942, 1393, 3791, 3791, 3791, 3791, 3792,
     3793, 3793, 3792, 3942, 3942, 3942, 1244, 3793, 3793, 3793,
     3793, 3794, 3795, 3795, 3794, 3942, 3942, 1393, 3795, 3795,
     3795, 3795, 3796, 3797, 3797, 3796, 3797, 3797, 3797, 3797,
     3942, 1244, 3798, 3799, 3799, 3798, 3942, 3942, 1393, 3799,
     3799, 3799, 3799, 3800, 3801, 3801, 3800, 3942, 3942, 3942,
     1244, 3801, 3801, 3801, 3801, 3802, 3803, 3803, 3802, 3942,
     3942, 1393, 3803, 3803, 3803, 3803, 3804, 3805, 3805, 3804,
     3805, 3805, 3805, 3805, 3942, 1244, 3806, 3807, 3807, 3806,
     3942, 3942, 1393, 3807, 3807, 3807, 3807, 3808, 3809, 3809,

     3808, 3942, 3942, 3942, 1244, 3809, 3809, 3809, 3809, 3810,
     3811, 3811, 3810, 3942, 3942, 1393, 3811, 3811, 3811, 3811,
     3812, 3813, 3813, 3812, 3813, 3813, 3813, 3813, 3942, 1244,
     3814, 3815, 3815, 3814, 3942, 3942, 1393, 3815, 3815, 3815,
     3815, 3816, 3817, 3817, 3816, 3942, 3942, 3942, 1244, 3817,
     3817, 3817, 3817, 3818, 3819, 3819, 3818, 3942, 3942, 1393,
     3819, 3819, 3819, 3819, 3820, 3821, 3821, 3820, 3821, 3821,
     3821, 3821, 3942, 1244, 3822, 3823, 3823, 3822, 3942, 3942,
     1393, 3823, 3823, 3823, 3823, 3824, 3825, 3825, 3824, 3942,
     3942, 3942, 1244, 3825, 3825, 3825, 3825, 3826, 3827, 3827,

     3826, 3942, 3942, 1393, 3827, 3827, 3827, 3827, 3828, 3829,
     3829, 3828, 3829, 3829, 3829, 3829, 3942, 1244, 3830, 3831,
     3831, 3830, 3942, 3942, 1393, 3831, 3831, 3831, 3831, 3832,
     3833, 3833, 3832, 3942, 3942, 3942, 1244, 3833, 3833, 3833,
     3833, 3834, 3835, 3835, 3834, 3942, 3942, 1393, 3835, 3835,
     3835, 3835, 3836, 3837, 3837, 3836, 3837, 3837, 3837, 3837,
     3942, 1244, 3838, 3839, 3839, 3838, 3942, 3942, 1393, 3839,
     3839, 3839, 3839, 3840, 3841, 3841, 3840, 3942, 3942, 3942,
     1244, 3841, 3841, 3841, 3841, 3842, 3843, 3843, 3842, 3942,
     3942, 1393, 3843, 3843, 3843, 3843, 3844, 3845, 3845, 3844,

     3845, 3845, 3845, 3845, 3942, 1244, 3846, 3847, 3847, 3846,
     3942, 3942, 1393, 3847, 3847, 3847, 3847, 3848, 3849, 3849,
     3848, 3942, 3942, 3942, 1244, 3849, 3849, 3849, 3849, 3850,
     3851, 3851, 3850, 3942, 3942, 1393, 3851, 3851, 3851, 3851,
     3852, 3853, 3853, 3852, 3853, 3853, 3853, 3853, 3942, 1244,
     3854, 3855, 3855, 3854, 3942, 3942, 1393, 3855, 3855, 3855,
     3855, 3856, 3857, 3857, 3856, 3942, 3942, 3942, 1244, 3857,
     3857, 3857, 3857, 3858, 3859, 3859, 3858, 3942, 3942, 1393,
     3859, 3859, 3859, 3859, 3860, 3861, 3861, 3860, 3861, 3861,
     3861, 3861, 3942, 1244, 3862, 3863, 3863, 3862, 3942, 3942,

     1393, 3863, 3863, 3863, 3863, 3864, 3865, 3865, 3864, 3942,
     3942, 3942, 1244, 3865, 3865, 3865, 3865, 3866, 3867, 3867,
     3866, 3942, 3942, 1393, 3867, 3867, 3867, 3867, 3868, 3869,
     3869, 3868, 3869, 3869, 3869, 3869, 3942, 1244, 3870, 3871,
     3871, 3870, 3942, 3942, 1393, 3871, 3871, 3871, 3871, 3872,
     3873, 3873, 3872, 3942, 3942, 3942, 1244, 3873, 3873, 3873,
     3873, 3874, 3875, 3875, 3874, 3942, 3942, 1393, 3875, 3875,
     3875, 3875, 3876, 3877, 3877, 3876, 3877, 3877, 3877, 3877,
     3942, 1244, 3878, 3879, 3879, 3878, 3942, 3942, 1393, 3879,
     3879, 3879, 3879, 3880, 3881, 3881, 3880, 3942, 3942, 3942,

     1244, 3881, 3881, 3881, 3881, 3882, 3883, 3883, 3882, 3942,
     3942, 1393, 3883, 3883, 3883, 3883, 3884, 3885, 3885, 3884,
     3885, 3885, 3885, 3885, 3942, 1244, 3886, 3887, 3887, 3886,
     3942, 3942, 1393, 3887, 3887, 3887, 3887, 3888, 3889, 3889,
     3888, 3942, 3942, 3942, 1244, 3889, 3889, 3889, 3889, 3890,
     3891, 3891, 3890, 3942, 3942, 1393, 3891, 3891, 3891, 3891,
     3892, 3893, 3893, 3892, 3893, 3893, 3893, 3893, 3942, 1244,
     3894, 3895, 3895, 3894, 3942, 3942, 1393, 3895, 3895, 3895,
     3895, 3896, 3897, 3897, 3896, 3942, 3942, 3942, 1244, 3897,
     3897, 3897, 3897, 3898, 3899, 3899, 3898, 3942, 3942, 1393,

     3899, 3899, 3899, 3899, 3900, 3901, 3901, 3900, 3901, 3901,
     3901, 3901, 3942, 1244, 3902, 3903, 3903, 3902, 3942, 3942,
     1393, 3903, 3903, 3903, 3903, 3904, 3905, 3905, 3904, 3942,
     3942, 3942, 1244, 3905, 3905, 3905, 3905, 3906, 3907, 3907,
     3906, 3942, 3942, 1393, 3907, 3907, 3907, 3907, 3908, 3909,
     3909, 3908, 3909, 3909, 3909, 3909, 3942, 1244, 3910, 3911,
     3911, 3910, 3942, 3942, 1393, 3911, 3911, 3911, 3911, 3912,
     3913, 3913, 3912, 3942, 3942, 3942, 1244, 3913, 3913, 3913,
     3913, 3914, 3915, 3915, 3914, 3942, 3942, 1393, 3915, 3915,
     3915, 3915, 3916, 3917, 3917, 3916, 3917, 3917, 3917, 3917,

     3942, 1244, 3918, 3919, 3919, 3918, 3942, 3942, 1393, 3919,
     3919, 3919, 3919, 3920, 3921, 3921, 3920, 3942, 3942, 3942,
     1244, 3921, 3921, 3921, 3921, 3922, 3923, 3923, 3922, 3942,
     3942, 1393, 3923, 3923, 3923, 3923, 3924, 3925, 3925, 3924,
     3925, 3925, 3925, 3925, 3942, 1244, 3926, 3927, 3927, 3926,
     3942, 3942, 1393, 3927, 3927, 3927, 3927, 3928, 3929, 3929,
     3928, 3942, 3942, 3942, 1244, 3929, 3929, 3929, 3929, 3930,
     3931, 3931, 3930, 3942, 3942, 1393, 3931, 3931, 3931, 3931,
     3932, 3933, 3933, 3932, 3933, 3933, 3933, 3933, 3942, 1244,
     3934, 3935, 3935, 3934, 3942, 3942, 1393, 3935, 3935, 3935,

     3935, 3936, 3937, 3937, 3936, 3942, 3942, 3942, 1244, 3937,
     3937, 3937, 3937, 3938, 3939, 3939, 3938, 3942, 3942, 1393,
     3939, 3939, 3939, 3939, 3940, 1270, 1270, 3940, 1270, 1270,
     1270, 1270, 3942, 1244, 3941, 3942, 3942, 3941, 3942, 3942,
     1393, 3940, 1270, 1270, 3940, 3941, 3942, 3942, 3941, 3942,
     3942, 1393, 1244,  262,  262,  262,  262,  262,  262,  262,
      262,  262,  262,  262,  262,  262,  262,  262,  262,  262,
      262,  262,  262,  262,  262,  262,  262,  262,  262,  262,
      262,  262,  262,  262,  262,  270,  270,  270,  270,  270,
      270,  270,  270,  270,  270,  270,  270,  270,  270,  270,

      270,  270,  270,  270,  270,  270,  270,  270,  270,  270,
      270,  270,  270,  270,  270,  270,  270,  323,  323,  323,
      323,  323,  323,  323,  323,  323,  323,  323,  323,  323,
      323,  323,  323,  323,  323,  323,  323,  323,  323,  323,
      323,  323,  323,  323,  323,  323,  323,  323,  323,  344,
      344,  344,  344,  344,  344,  344,  344,  344,  344,  344,
      344,  344,  344,  344,  344,  344,  344,  344,  344,  344,
      344,  344,  344,  344,  344,  344,  344,  344,  344,  344,
      344,  370,  370,  370,  370,  370,  370,  370,  370,  370,
      370,  370,  370,  370,  370,  370,  370,  370,  370,  370,

      370,  370,  370,  370,  370,  370,  370,  370,  370,  370,
      370,  370,  370,  386,  386,  386,  386,  386,  386,  386,
      386,  386,  386,  386,  386,  386,  386,  386,  386,  386,
      386,  386,  386,  386,  386,  386,  386,  386,  386,  386,
      386,  386,  386,  386,  386,  436,  436,  436,  436,  436,
      436,  436,  436,  436,  436,  436,  436,  436,  436,  436,
      436,  436,  436,  436,  436,  436,  436,  436,  436,  436,
      436,  436,  436,  436,  436,  436,  436,  467,  467,  467,
      467,  467,  467,  467,  467,  467,  467,  467,  467,  467,
      467,  467,  467,  467,  467,  467,  467,  467,  467,  467,

      467,  467,  467,  467,  467,  467,  467,  467,  467,  477,
      477,  477,  477,  477,  477,  477,  477,  477,  477,  477,
      477,  477,  477,  477,  477,  477,  477,  477,  477,  477,
      477,  477,  477,  477,  477,  477,  477,  477,  477,  477,
      477,  484,  484,  484,  484,  484,  484,  484,  484,  484,
      484,  484,  484,  484,  484,  484,  484,  484,  484,  484,
      484,  484,  484,  484,  484,  484,  484,  484,  484,  484,
      484,  484,  484,  507,  507,  507,  507,  507,  507,  507,
      507,  507,  507,  507,  507,  507,  507,  507,  507,  507,
      507,  507,  507,  507,  507,  507,  507,  507,  507,  507,

      507,  507,  507,  507,  507,  516,  516,  516,  516,  516,
      516,  516,  516,  516,  516,  516,  516,  516,  516,  516,
      516,  516,  516,  516,  516,  516,  516,  516,  516,  516,
      516,  516,  516,  516,  516,  516,  516,  523,  523,  523,
      523,  523,  523,  523,  523,  523,  523,  523,  523,  523,
      523,  523,  523,  523,  523,  523,  523,  523,  523,  523,
      523,  523,  523,  523,  523,  523,  523,  523,  523,  548,
      548,  548,  548,  548,  548,  548,  548,  548,  548,  548,
      548,  548,  548,  548,  548,  548,  548,  548,  548,  548,
      548,  548,  548,  548,  548,  548,  548,  548,  548,  548,

      548,  567,  567,  567,  567,  567,  567,  567,  567,  567,
      567,  567,  567,  567,  567,  567,  567,  567,  567,  567,
      567,  567,  567,  567,  567,  567,  567,  567,  567,  567,
      567,  567,  567,  557,  557,  557,  557,  557,  557,  557,
      557,  557,  557,  557,  557,  557,  557,  557,  557,  557,
      557,  557,  557,  557,  557,  557,  557,  557,  557,  557,
      557,  557,  557,  557,  557,  582,  582,  582,  582,  582,
      582,  582,  582,  582,  582,  582,  582,  582,  582,  582,
      582,  582,  582,  582,  582,  582,  582,  582,  582,  582,
      582,  582,  582,  582,  582,  582,  582,  590,  590,  590,

      590,  590,  590,  590,  590,  590,  590,  590,  590,  590,
      590,  590,  590,  590,  590,  590,  590,  590,  590,  590,
      590,  590,  590,  590,  590,  590,  590,  590,  590,  597,
      597,  597,  597,  597,  597,  597,  597,  597,  597,  597,
      597,  597,  597,  597,  597,  597,  597,  597,  597,  597,
      597,  597,  597,  597,  597,  597,  597,  597,  597,  597,
      597,  608,  608,  608,  608,  608,  608,  608,  608,  608,
      608,  608,  608,  608,  608,  608,  608,  608,  608,  608,
      608,  608,  608,  608,  608,  608,  608,  608,  608,  608,
      608,  608,  608,  622,  622,  622,  622,  622,  622,  622,

      622,  622,  622,  622,  622,  622,  622,  622,  622,  622,
      622,  622,  622,  622,  622,  622,  622,  622,  622,  622,
      622,  622,  622,  622,  622,  629,  629,  629,  629,  629,
      629,  629,  629,  629,  629,  629,  629,  629,  629,  629,
      629,  629,  629,  629,  629,  629,  629,  629,  629,  629,
      629,  629,  629,  629,  629,  629,  629,  640,  640,  640,
      640,  640,  640,  640,  640,  640,  640,  640,  640,  640,
      640,  640,  640,  640,  640,  640,  640,  640,  640,  640,
      640,  640,  640,  640,  640,  640,  640,  640,  640,  647,
      647,  647,  647,  647,  647,  647,  647,  647,  647,  647,

      647,  647,  647,  647,  647,  647,  647,  647,  647,  647,
      647,  647,  647,  647,  647,  647,  647,  647,  647,  647,
      647,  655,  655,  655,  655,  655,  655,  655,  655,  655,
      655,  655,  655,  655,  655,  655,  655,  655,  655,  655,
      655,  655,  655,  655,  655,  655,  655,  655,  655,  655,
      655,  655,  655,  678,  678,  678,  678,  678,  678,  678,
      678,  678,  678,  678,  678,  678,  678,  678,  678,  678,
      678,  678,  678,  678,  678,  678,  678,  678,  678,  678,
      678,  678,  678,  678,  678,  691,  691,  691,  691,  691,
      691,  691,  691,  691,  691,  691,  691,  691,  691,  691,

      691,  691,  691,  691,  691,  691,  691,  691,  691,  691,
      691,  691,  691,  691,  691,  691,  691,  699,  699,  699,
      699,  699,  699,  699,  699,  699,  699,  699,  699,  699,
      699,  699,  699,  699,  699,  699,  699,  699,  699,  699,
      699,  699,  699,  699,  699,  699,  699,  699,  699,  716,
      716,  716,  716,  716,  716,  716,  716,  716,  716,  716,
      716,  716,  716,  716,  716,  716,  716,  716,  716,  716,
      716,  716,  716,  716,  716,  716,  716,  716,  716,  716,
      716,  728,  728,  728,  728,  728,  728,  728,  728,  728,
      728,  728,  728,  728,  728,  728,  728,  728,  728,  728,

      728,  728,  728,  728,  728,  728,  728,  728,  728,  728,
      728,  728,  728,  740,  740,  740,  740,  740,  740,  740,
      740,  740,  740,  740,  740,  740,  740,  740,  740,  740,
      740,  740,  740,  740,  740,  740,  740,  740,  740,  740,
      740,  740,  740,  740,  740,  775,  775,  775,  775,  775,
      775,  775,  775,  775,  775,  775,  775,  775,  775,  775,
      775,  775,  775,  775,  775,  775,  775,  775,  775,  775,
      775,  775,  775,  775,  775,  775,  775,  811,  811,  811,
      811,  811,  811,  811,  811,  811,  811,  811,  811,  811,
      811,  811,  811,  811,  811,  811,  811,  811,  811,  811,

      811,  811,  811,  811,  811,  811,  811,  811,  811,  831,
      831,  831,  831,  831,  831,  831,  831,  831,  831,  831,
      831,  831,  831,  831,  831,  831,  831,  831,  831,  831,
      831,  831,  831,  831,  831,  831,  831,  831,  831,  831,
      831,  841,  841,  841,  841,  841,  841,  841,  841,  841,
      841,  841,  841,  841,  841,  841,  841,  841,  841,  841,
      841,  841,  841,  841,  841,  841,  841,  841,  841,  841,
      841,  841,  841,  850,  850,  850,  850,  850,  850,  850,
      850,  850,  850,  850,  850,  850,  850,  850,  850,  850,
      850,  850,  850,  850,  850,  850,  850,  850,  850,  850,

      850,  850,  850,  850,  850,  853,  853,  853,  853,  853,
      853,  853,  853,  853,  853,  853,  853,  853,  853,  853,
      853,  853,  853,  853,  853,  853,  853,  853,  853,  853,
      853,  853,  853,  853,  853,  853,  853,  865,  865,  865,
      865,  865,  865,  865,  865,  865,  865,  865,  865,  865,
      865,  865,  865,  865,  865,  865,  865,  865,  865,  865,
      865,  865,  865,  865,  865,  865,  865,  865,  865,  875,
      875,  875,  875,  875,  875,  875,  875,  875,  875,  875,
      875,  875,  875,  875,  875,  875,  875,  875,  875,  875,
      875,  875,  875,  875,  875,  875,  875,  875,  875,  875,

      875,  885,  885,  885,  885,  885,  885,  885,  885,  885,
      885,  885,  885,  885,  885,  885,  885,  885,  885,  885,
      885,  885,  885,  885,  885,  885,  885,  885,  885,  885,
      885,  885,  885,  893,  893,  893,  893,  893,  893,  893,
      893,  893,  893,  893,  893,  893,  893,  893,  893,  893,
      893,  893,  893,  893,  893,  893,  893,  893,  893,  893,
      893,  893,  893,  893,  893,  901,  901,  901,  901,  901,
      901,  901,  901,  901,  901,  901,  901,  901,  901,  901,
      901,  901,  901,  901,  901,  901,  901,  901,  901,  901,
      901,  901,  901,  901,  901,  901,  901,  909,  909,  909,

      909,  909,  909,  909,  909,  909,  909,  909,  909,  909,
      909,  909,  909,  909,  909,  909,  909,  909,  909,  909,
      909,  909,  909,  909,  909,  909,  909,  909,  909,  918,
      918,  918,  918,  918,  918,  918,  918,  918,  918,  918,
      918,  918,  918,  918,  918,  918,  918,  918,  918,  918,
      918,  918,  918,  918,  918,  918,  918,  918,  918,  918,
      918,  927,  927,  927,  927,  927,  927,  927,  927,  927,
      927,  927,  927,  927,  927,  927,  927,  927,  927,  927,
      927,  927,  927,  927,  927,  927,  927,  927,  927,  927,
      927,  927,  927,  467,  467,  467,  467,  467,  467,  467,

      467,  467,  467,  467,  467,  467,  467,  467,  467,  467,
      467,  467,  467,  467,  467,  467,  467,  467,  467,  467,
      467,  467,  467,  467,  467,  950,  950,  950,  950,  950,
      950,  950,  950,  950,  950,  950,  950,  950,  950,  950,
      950,  950,  950,  950,  950,  950,  950,  950,  950,  950,
      950,  950,  950,  950,  950,  950,  950,  956,  956,  956,
      956,  956,  956,  956,  956,  956,  956,  956,  956,  956,
      956,  956,  956,  956,  956,  956,  956,  956,  956,  956,
      956,  956,  956,  956,  956,  956,  956,  956,  956,  516,
      516,  516,  516,  516,  516,  516,  516,  516,  516,  516,

      516,  516,  516,  516,  516,  516,  516,  516,  516,  516,
      516,  516,  516,  516,  516,  516,  516,  516,  516,  516,
      516,  967,  967,  967,  967,  967,  967,  967,  967,  967,
      967,  967,  967,  967,  967,  967,  967,  967,  967,  967,
      967,  967,  967,  967,  967,  967,  967,  967,  967,  967,
      967,  967,  967,  976,  976,  976,  976,  976,  976,  976,
      976,  976,  976,  976,  976,  976,  976,  976,  976,  976,
      976,  976,  976,  976,  976,  976,  976,  976,  976,  976,
      976,  976,  976,  976,  976,  983,  983,  983,  983,  983,
      983,  983,  983,  983,  983,  983,  983,  983,  983,  983,

      983,  983,  983,  983,  983,  983,  983,  983,  983,  983,
      983,  983,  983,  983,  983,  983,  983,  993,  993,  993,
      993,  993,  993,  993,  993,  993,  993,  993,  993,  993,
      993,  993,  993,  993,  993,  993,  993,  993,  993,  993,
      993,  993,  993,  993,  993,  993,  993,  993,  993, 1000,
     1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000,
     1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000,
     1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000,
     1000, 1009, 1009, 1009, 1009, 1009, 1009, 1009, 1009, 1009,
     1009, 1009, 1009, 1009, 1009, 1009, 1009, 1009, 1009, 1009,

     1009, 1009, 1009, 1009, 1009, 1009, 1009, 1009, 1009, 1009,
     1009, 1009, 1009, 1019, 1019, 1019, 1019, 1019, 1019, 1019,
     1019, 1019, 1019, 1019, 1019, 1019, 1019, 1019, 1019, 1019,
     1019, 1019, 1019, 1019, 1019, 1019, 1019, 1019, 1019, 1019,
     1019, 1019, 1019, 1019, 1019, 1027, 1027, 1027, 1027, 1027,
     1027, 1027, 1027, 1027, 1027, 1027, 1027, 1027, 1027, 1027,
     1027, 1027, 1027, 1027, 1027, 1027, 1027, 1027, 1027, 1027,
     1027, 1027, 1027, 1027, 1027, 1027, 1027, 1049, 1049, 1049,
     1049, 1049, 1049, 1049, 1049, 1049, 1049, 1049, 1049, 1049,
     1049, 1049, 1049, 1049, 1049, 1049, 1049, 1049, 1049, 1049,

     1049, 1049, 1049, 1049, 1049, 1049, 1049, 1049, 1049, 1069,
     1069, 1069, 1069, 1069, 1069, 1069, 1069, 1069, 1069, 1069,
     1069, 1069, 1069, 1069, 1069, 1069, 1069, 1069, 1069, 1069,
     1069, 1069, 1069, 1069, 1069, 1069, 1069, 1069, 1069, 1069,
     1069, 1080, 1080, 1080, 1080, 1080, 1080, 1080, 1080, 1080,
     1080, 1080, 1080, 1080, 1080, 1080, 1080, 1080, 1080, 1080,
     1080, 1080, 1080, 1080, 1080, 1080, 1080, 1080, 1080, 1080,
     1080, 1080, 1080, 1086, 1086, 1086, 1086, 1086, 1086, 1086,
     1086, 1086, 1086, 1086, 1086, 1086, 1086, 1086, 1086, 1086,
     1086, 1086, 1086, 1086, 1086, 1086, 1086, 1086, 1086, 1086,

     1086, 1086, 1086, 1086, 1086, 1091, 1091, 1091, 1091, 1091,
     1091, 1091, 1091, 1091, 1091, 1091, 1091, 1091, 1091, 1091,
     1091, 1091, 1091, 1091, 1091, 1091, 1091, 1091, 1091, 1091,
     1091, 1091, 1091, 1091, 1091, 1091, 1091, 1097, 1097, 1097,
     1097, 1097, 1097, 1097, 1097, 1097, 1097, 1097, 1097, 1097,
     1097, 1097, 1097, 1097, 1097, 1097, 1097, 1097, 1097, 1097,
     1097, 1097, 1097, 1097, 1097, 1097, 1097, 1097, 1097, 1111,
     1111, 1111, 1111, 1111, 1111, 1111, 1111, 1111, 1111, 1111,
     1111, 1111, 1111, 1111, 1111, 1111, 1111, 1111, 1111, 1111,
     1111, 1111, 1111, 1111, 1111, 1111, 1111, 1111, 1111, 1111,

     1111, 1128, 3942, 3942, 3942, 3942, 3942, 3942, 3942, 3942,
     1128, 3942, 3942, 3942, 3942, 3942, 1128, 3942, 3942, 3942,
     3942, 3942, 3942, 1128, 3942, 3942, 3942, 3942, 3942, 3942,
     3942, 1128, 1142, 1142, 1142, 3942, 3942, 3942, 1142, 3942,
     3942, 3942, 3942, 3942, 3942, 3942, 3942, 3942, 3942, 3942,
     3942, 3942, 3942, 3942, 1142, 3942, 3942, 3942, 3942, 3942,
     3942, 3942, 1142, 1146, 1146, 1146, 1146, 3942, 3942, 1146,
     3942, 3942, 3942, 3942, 3942, 3942, 3942, 3942, 3942, 1146,
     3942, 3942, 3942, 3942, 3942, 1146, 3942, 3942, 3942, 3942,
     3942, 3942, 1146, 1146, 1149, 1149, 1149, 3942, 3942, 3942,

     1149, 3942, 3942, 3942, 3942, 3942, 3942, 1149, 3942, 3942,
     3942, 3942, 3942, 3942, 3942, 3942, 1149, 3942, 3942, 3942,
     3942, 3942, 3942, 1149, 1149, 1155, 1155, 1155, 3942, 3942,
     3942, 3942, 3942, 3942, 1155, 3942, 3942, 1155, 1155, 3942,
     1155, 1155, 1155, 1155, 3942, 3942, 3942, 1155, 3942, 3942,
     3942, 3942, 3942, 3942, 3942, 1155, 1161, 1161, 1161, 3942,
     3942, 3942, 1161, 3942, 3942, 3942, 3942, 3942, 3942, 3942,
     3942, 3942, 3942, 3942, 3942, 3942, 3942, 3942, 1161, 3942,
     3942, 3942, 3942, 3942, 3942, 3942, 1161, 1165, 1165, 1165,
     1165, 1165, 1165, 1165, 1165, 1165, 1165, 1165, 1165, 1165,

     3942, 1165, 1165, 1165, 1165, 1165, 1165, 1165, 1165, 1165,
     1165, 1165, 1165, 1165, 1165, 3942, 1165, 1165, 1165, 1171,
     1171, 1171, 3942, 3942, 3942, 1171, 3942, 3942, 3942, 3942,
     3942, 3942, 3942, 3942, 3942, 3942, 3942, 3942, 3942, 3942,
     3942, 1171, 3942, 3942, 3942, 3942, 3942, 3942, 3942, 1171,
     1174, 1174, 1174, 1174, 3942, 3942, 1174, 3942, 3942, 3942,
     3942, 3942, 3942, 3942, 3942, 3942, 1174, 3942, 3942, 3942,
     3942, 3942, 1174, 3942, 3942, 3942, 3942, 3942, 3942, 1174,
     1174, 1182, 1182, 1182, 3942, 3942, 3942, 3942, 3942, 3942,
     1182, 3942, 3942, 3942, 3942, 3942, 1182, 1182, 3942, 3942,

     3942, 3942, 3942, 1182, 3942, 3942, 3942, 3942, 3942, 3942,
     3942, 1182, 1192, 3942, 3942, 3942, 1192, 3942, 1192, 3942,
     3942, 1192, 3942, 3942, 3942, 1192, 3942, 3942, 3942, 3942,
     3942, 3942, 3942, 1192, 1195, 1195, 3942, 1195, 1195, 1195,
     1195, 1195, 1195, 1195, 1195, 1195, 1195, 1195, 1195, 1195,
     1195, 1195, 1195, 1195, 1195, 1195, 1195, 1195, 1195, 1195,
     1195, 1195, 1195, 1195, 1195, 1195, 1211, 1211, 1211, 3942,
     3942, 3942, 1211, 3942, 3942, 3942, 3942, 3942, 3942, 3942,
     3942, 3942, 3942, 3942, 3942, 3942, 3942, 3942, 1211, 3942,
     3942, 3942, 3942, 1211, 3942, 3942, 1211, 1225, 1225, 1225,

     3942, 3942, 3942, 3942, 3942, 3942, 3942, 3942, 3942, 3942,
     1225, 3942, 1225, 1225, 3942, 3942, 3942, 3942, 3942, 1225,
     3942, 1225, 3942, 3942, 3942, 3942, 3942, 1225, 1235, 1235,
     3942, 1235, 1235, 1235, 1235, 1235, 1235, 3942, 1235, 1235,
     1235, 1235, 1235, 1235, 1235, 1235, 1235, 1235, 1235, 1235,
     1235, 1235, 1235, 1235, 1235, 1235, 1235, 1235, 1235, 1235,
     1266, 1266, 1266, 3942, 3942, 3942, 1266, 3942, 3942, 3942,
     3942, 3942, 3942, 3942, 3942, 3942, 3942, 3942, 3942, 3942,
     3942, 3942, 1266, 3942, 3942, 3942, 3942, 3942, 3942, 3942,
     1266, 1273, 1273, 1273, 1273, 3942, 3942, 1273, 3942, 3942,

     3942, 3942, 3942, 3942, 3942, 3942, 3942, 1273, 3942, 3942,
     3942, 3942, 3942, 1273, 3942, 3942, 3942, 3942, 3942, 3942,
     1273, 1273, 1281, 1281, 1281, 3942, 3942, 3942, 1281, 1281,
     3942, 3942, 3942, 1281, 3942, 3942, 3942, 3942, 1281, 3942,
     3942, 3942, 3942, 3942, 1281, 3942, 3942, 3942, 1281, 3942,
     3942, 3942, 1281, 1299, 1299, 1299, 3942, 3942, 3942, 3942,
     3942, 3942, 3942, 3942, 3942, 3942, 3942, 3942, 1299, 1299,
     3942, 1299, 3942, 3942, 3942, 1299, 3942, 3942, 3942, 3942,
     3942, 3942, 3942, 1299, 1302, 1302, 1302, 1302, 1302, 1302,
     1302, 1302, 1302, 1302, 1302, 1302, 1302, 1302, 1302, 1302,

     1302, 1302, 1302, 1302, 1302, 1302, 1302, 1302, 1302, 1302,
     1302, 1302, 1302, 1302, 1302, 1302, 1335, 1335, 3942, 1335,
     1335, 1335, 1335, 1335, 1335, 1335, 1335, 1335, 1335, 1335,
     1335, 1335, 1335, 1335, 1335, 3942, 1335, 1335, 1335, 1335,
     1335, 1335, 1335, 1335, 1335, 1335, 1335, 1335, 1344, 1344,
     1344, 3942, 3942, 3942, 1344, 3942, 3942, 3942, 3942, 3942,
     3942, 3942, 3942, 3942, 3942, 3942, 3942, 3942, 3942, 3942,
     1344, 3942, 3942, 3942, 3942, 3942, 3942, 3942, 1344, 1347,
     1347, 1347, 1347, 3942, 3942, 1347, 3942, 3942, 3942, 3942,
     3942, 3942, 3942, 3942, 3942, 1347, 3942, 3942, 3942, 3942,

     3942, 1347, 3942, 3942, 3942, 3942, 3942, 3942, 1347, 1347,
     1350, 1350, 1350, 3942, 3942, 3942, 3942, 3942, 3942, 3942,
     3942, 3942, 3942, 3942, 3942, 1350, 1350, 3942, 1350, 3942,
     3942, 3942, 1350, 3942, 3942, 3942, 3942, 3942, 3942, 3942,
     1350, 1390, 1390, 3942, 3942, 1390, 3942, 3942, 1390, 1390,
     3942, 1390, 1390, 1390, 1390, 1390, 3942, 1390, 1390, 1390,
     3942, 1390, 1390, 3942, 1390, 1390, 1390, 1390, 1390, 3942,
     3942, 1390, 1390, 1394, 1394, 3942, 1394, 1394, 1394, 1394,
     1394, 1394, 1394, 1394, 1394, 1394, 1394, 1394, 1394, 1394,
     1394, 1394, 1394, 1394, 1394, 1394, 1394, 1394, 1394, 1394,

     1394, 1394, 1394, 1394, 1394, 1396, 1396, 3942, 1396, 1396,
     1396, 1396, 1396, 1396, 3942, 1396, 1396, 1396, 1396, 1396,
     1396, 1396, 1396, 1396, 1396, 1396, 1396, 1396, 1396, 1396,
     1396, 1396, 1396, 1396, 1396, 1396, 1396, 1407, 1407, 1407,
     3942, 3942, 3942, 3942, 3942, 3942, 3942, 3942, 3942, 3942,
     1407, 3942, 1407, 1407, 3942, 3942, 3942, 3942, 3942, 1407,
     3942, 3942, 3942, 3942, 3942, 3942, 3942, 1407, 1414, 1414,
     1414, 3942, 3942, 3942, 1414, 3942, 3942, 3942, 3942, 3942,
     3942, 3942, 3942, 3942, 3942, 3942, 3942, 3942, 3942, 3942,
     1414, 3942, 3942, 3942, 3942, 3942, 3942, 3942, 1414, 1417,

     1417, 1417, 1417, 3942, 3942, 1417, 3942, 3942, 3942, 3942,
     3942, 3942, 3942, 3942, 3942, 1417, 3942, 3942, 3942, 3942,
     3942, 1417, 3942, 3942, 3942, 3942, 3942, 3942, 1417, 1417,
     1419, 1419, 1419, 3942, 3942, 3942, 3942, 3942, 3942, 3942,
     3942, 3942, 3942, 3942, 3942, 1419, 1419, 3942, 3942, 3942,
     3942, 3942, 1419, 3942, 3942, 3942, 3942, 3942, 3942, 3942,
     1419, 1420, 1420, 3942, 1420, 1420, 3942, 3942, 1420, 1420,
     3942, 1420, 1420, 1420, 1420, 1420, 3942, 1420, 1420, 1420,
     3942, 1420, 1420, 3942, 1420, 1420, 3942, 1420, 1420, 3942,
     3942, 1420, 1420, 1423, 1423, 3942, 1423, 1423, 1423, 1423,

     1423, 1423, 3942, 1423, 1423, 1423, 1423, 1423, 1423, 1423,
     1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423,
     1423, 1423, 1423, 1423, 1423, 1442, 1442, 3942, 1442, 1442,
     1442, 1442, 1442, 1442, 1442, 1442, 1442, 1442, 1442, 1442,
     1442, 1442, 1442, 1442, 1442, 1442, 1442, 1442, 1442, 1442,
     1442, 1442, 1442, 1442, 1442, 1442, 1442, 1449, 1449, 3942,
     1449, 1449, 1449, 1449, 1449, 1449, 1449, 1449, 1449, 3942,
     1449, 1449, 1449, 1449, 1449, 1449, 1449, 1449, 1449, 1449,
     1449, 1449, 1449, 1449, 1449, 1449, 1449, 1449, 1449, 1455,
     1455, 1455, 1455, 1455, 1455, 1455, 1455, 1455, 1455, 1455,

     1455, 1455, 1455, 1455, 1455, 1455, 1455, 1455, 1455, 1455,
     1455, 1455, 1455, 1455, 1455, 1455, 1455, 1455, 1455, 1455,
     1455, 1462, 1462, 3942, 1462, 1462, 3942, 1462, 1462, 1462,
     1462, 1462, 1462, 1462, 1462, 1462, 1462, 1462, 1462, 1462,
     1462, 1462, 1462, 1462, 1462, 3942, 1462, 3942, 1462, 1462,
     1462, 1462, 1462, 1465, 1465, 3942, 1465, 1465, 1465, 1465,
     1465, 1465, 1465, 1465, 1465, 1465, 1465, 1465, 1465, 1465,
     1465, 1465, 1465, 1465, 1465, 1465, 1465, 1465, 1465, 1465,
     1465, 1465, 1465, 1465, 1465, 1475, 3942, 3942, 3942, 1475,
     1475, 1475, 1475, 1475, 1475, 1475, 1475, 3942, 1475, 3942,

     3942, 1475, 1475, 1475, 1475, 1475, 1475, 1475, 1475, 1475,
     1475, 1475, 1475, 1475, 1475, 1475, 1475, 1485, 3942, 1485,
     3942, 3942, 3942, 3942, 3942, 3942, 1485, 3942, 1485, 3942,
     3942, 3942, 3942, 3942, 1485, 1489, 1489, 1489, 3942, 3942,
     3942, 3942, 3942, 3942, 3942, 3942, 3942, 3942, 1489, 3942,
     1489, 3942, 3942, 3942, 3942, 3942, 3942, 1489, 3942, 3942,
     3942, 3942, 3942, 3942, 3942, 1489, 1492, 1492, 1492, 3942,
     3942, 3942, 3942, 3942, 3942, 3942, 3942, 3942, 3942, 3942,
     3942, 1492, 3942, 3942, 3942, 3942, 3942, 3942, 1492, 3942,
     1492, 3942, 3942, 3942, 3942, 3942, 1492, 1503, 1503, 3942,

     1503, 1503, 1503, 1503, 1503, 1503, 1503, 1503, 1503, 1503,
     1503, 1503, 1503, 1503, 1503, 1503, 1503, 1503, 1503, 1503,
     1503, 1503, 1503, 1503, 1503, 1503, 1503, 1503, 1503, 1507,
     3942, 3942, 3942, 1507, 3942, 3942, 3942, 3942, 3942, 3942,
     1507, 3942, 3942, 3942, 3942, 3942, 3942, 1507, 3942, 3942,
     3942, 3942, 3942, 3942, 3942, 1507, 1512, 1512, 3942, 1512,
     1512, 3942, 1512, 1512, 1512, 1512, 1512, 1512, 1512, 1512,
     1512, 1512, 1512, 1512, 1512, 1512, 1512, 1512, 1512, 1512,
     1512, 1512, 1512, 1512, 1512, 1512, 1512, 1512, 1520, 1520,
     1520, 1520, 1520, 1520, 1520, 1520, 1520, 1520, 1520, 3942,

     1520, 1520, 1520, 1520, 1520, 1520, 1520, 1520, 1520, 1520,
     1520, 1520, 1520, 1520, 1520, 1520, 1520, 1520, 1520, 1520,
     1527, 1527, 1527, 3942, 3942, 3942, 3942, 3942, 3942, 3942,
     3942, 3942, 3942, 3942, 3942, 1527, 1527, 3942, 3942, 3942,
     3942, 3942, 1527, 3942, 3942, 3942, 3942, 3942, 3942, 3942,
     1527, 1529, 1529, 1529, 1529, 1529, 1529, 1529, 1529, 1529,
     1529, 1529, 3942, 1529, 1529, 1529, 1529, 1529, 1529, 1529,
     1529, 1529, 1529, 1529, 1529, 1529, 1529, 1529, 1529, 1529,
     1529, 1529, 1529, 1544, 1544, 3942, 1544, 3942, 3942, 3942,
     1544, 3942, 3942, 3942, 3942, 3942, 3942, 3942, 1544, 1559,

     1559, 3942, 1559, 1559, 1559, 1559, 1559, 1559, 3942, 1559,
     1559, 1559, 1559, 1559, 1559, 1559, 1559, 1559, 1559, 1559,
     1559, 1559, 1559, 1559, 1559, 1559, 1559, 1559, 1559, 1559,
     1559, 1570, 1570, 1570, 3942, 3942, 3942, 1570, 3942, 3942,
     3942, 3942, 3942, 3942, 3942, 3942, 3942, 3942, 3942, 3942,
     3942, 3942, 3942, 1570, 3942, 3942, 3942, 3942, 3942, 3942,
     3942, 1570, 1573, 1573, 1573, 3942, 3942, 3942, 3942, 3942,
     3942, 3942, 3942, 1573, 3942, 3942, 3942, 1573, 3942, 3942,
     3942, 3942, 3942, 3942, 1573, 3942, 3942, 3942, 3942, 3942,
     3942, 3942, 1573, 1579, 1579, 1579, 3942, 3942, 3942, 1579,

     1579, 3942, 3942, 3942, 1579, 3942, 3942, 3942, 3942, 3942,
     3942, 3942, 3942, 3942, 3942, 1579, 3942, 3942, 3942, 3942,
     3942, 3942, 3942, 1579, 1581, 1581, 1581, 3942, 3942, 3942,
     3942, 3942, 3942, 3942, 3942, 3942, 3942, 3942, 3942, 1581,
     3942, 3942, 3942, 3942, 3942, 3942, 1581, 1581, 3942, 3942,
     3942, 3942, 3942, 3942, 1581, 1591, 1591, 1591, 3942, 3942,
     3942, 1591, 3942, 3942, 3942, 3942, 3942, 3942, 3942, 3942,
     3942, 3942, 3942, 3942, 3942, 3942, 3942, 1591, 3942, 3942,
     3942, 3942, 3942, 3942, 3942, 1591, 1594, 1594, 1594, 1594,
     3942, 3942, 1594, 3942, 3942, 3942, 3942, 3942, 3942, 3942,

     3942, 3942, 1594, 3942, 3942, 3942, 3942, 3942, 1594, 3942,
     3942, 3942, 3942, 3942, 3942, 1594, 1594, 1596, 1596, 1596,
     3942, 3942, 3942, 3942, 3942, 3942, 3942, 3942, 3942, 3942,
     3942, 3942, 1596, 1596, 3942, 3942, 3942, 3942, 3942, 1596,
     3942, 3942, 3942, 3942, 3942, 3942, 3942, 1596, 1603, 1603,
     3942, 1603, 1603, 1603, 1603, 1603, 1603, 1603, 1603, 1603,
     1603, 1603, 1603, 1603, 1603, 1603, 1603, 1603, 1603, 1603,
     1603, 1603, 1603, 1603, 1603, 1603, 1603, 1603, 1603, 1603,
     1605, 3942, 3942, 3942, 1605, 3942, 3942, 1605, 1605, 3942,
     3942, 3942, 1605, 1605, 1605, 3942, 1605, 1605, 1605, 1605,

     1605, 1605, 1605, 1605, 1605, 1605, 1605, 1605, 1605, 1605,
     1605, 1605, 1607, 1607, 3942, 1607, 1607, 1607, 1607, 1607,
     1607, 3942, 1607, 1607, 1607, 1607, 1607, 1607, 1607, 1607,
     1607, 1607, 1607, 1607, 1607, 1607, 1607, 1607, 1607, 1607,
     1607, 1607, 1607, 1607, 1622, 1622, 3942, 1622, 1622, 1622,
     1622, 1622, 1622, 1622, 1622, 1622, 1622, 1622, 1622, 1622,
     1622, 1622, 1622, 1622, 1622, 1622, 1622, 1622, 1622, 1622,
     1622, 1622, 1622, 1622, 1622, 1622, 1626, 1626, 3942, 1626,
     1626, 1626, 1626, 1626, 1626, 1626, 1626, 1626, 1626, 1626,
     1626, 1626, 1626, 1626, 1626, 1626, 1626, 1626, 1626, 1626,

     1626, 1626, 1626, 1626, 1626, 1626, 1626, 1626, 1627, 1627,
     3942, 1627, 1627, 3942, 1627, 1627, 1627, 3942, 3942, 3942,
     1627, 1627, 1627, 1627, 1627, 1627, 1627, 1627, 1627, 1627,
     1627, 1627, 1627, 1627, 1627, 1627, 1627, 1627, 1627, 1627,
     1628, 1628, 3942, 1628, 1628, 1628, 1628, 1628, 1628, 3942,
     1628, 1628, 1628, 1628, 1628, 1628, 1628, 1628, 1628, 1628,
     1628, 1628, 1628, 1628, 1628, 1628, 1628, 1628, 1628, 1628,
     1628, 1628, 1632, 1632, 3942, 1632, 1632, 3942, 1632, 1632,
     1632, 3942, 1632, 1632, 1632, 1632, 1632, 3942, 1632, 1632,
     1632, 1632, 1632, 1632, 1632, 1632, 1632, 1632, 1632, 1632,

     3942, 3942, 1632, 1632, 1633, 1633, 3942, 1633, 1633, 1633,
     1633, 1633, 1633, 3942, 1633, 1633, 1633, 1633, 1633, 1633,
     1633, 1633, 1633, 1633, 1633, 1633, 1633, 1633, 1633, 1633,
     1633, 1633, 1633, 1633, 1633, 1633, 1635, 1635, 3942, 1635,
     1635, 3942, 1635, 1635, 1635, 3942, 3942, 3942, 1635, 1635,
     1635, 3942, 1635, 1635, 1635, 1635, 1635, 1635, 1635, 1635,
     1635, 1635, 1635, 1635, 1635, 1635, 1635, 1635, 1636, 1636,
     3942, 1636, 1636, 1636, 1636, 1636, 1636, 3942, 1636, 1636,
     1636, 1636, 1636, 1636, 1636, 1636, 1636, 1636, 1636, 1636,
     1636, 1636, 1636, 1636, 1636, 1636, 1636, 1636, 1636, 1636,

     1638, 1638, 3942, 1638, 1638, 3942, 1638, 1638, 1638, 3942,
     1638, 1638, 1638, 1638, 1638, 3942, 1638, 1638, 1638, 1638,
     1638, 1638, 1638, 1638, 1638, 1638, 1638, 1638, 3942, 3942,
     1638, 1638, 1639, 1639, 3942, 1639, 1639, 1639, 1639, 1639,
     1639, 3942, 1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639,
     1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639,
     1639, 1639, 1639, 1639, 1649, 1649, 3942, 1649, 1649, 1649,
     1649, 1649, 1649, 3942, 1649, 1649, 1649, 1649, 1649, 1649,
     1649, 1649, 1649, 1649, 1649, 1649, 1649, 1649, 1649, 1649,
     1649, 1649, 1649, 1649, 1649, 1649, 1659, 1659, 3942, 1659,

     1659, 3942, 1659, 1659, 1659, 3942, 1659, 1659, 1659, 1659,
     1659, 1659, 1659, 1659, 1659, 1659, 1659, 1659, 1659, 1659,
     1659, 3942, 1659, 1659, 1659, 1659, 1659, 1659, 1662, 1662,
     3942, 1662, 1662, 1662, 1662, 1662, 1662, 1662, 1662, 1662,
     1662, 1662, 1662, 1662, 1662, 1662, 1662, 1662, 1662, 1662,
     1662, 1662, 1662, 1662, 1662, 1662, 1662, 1662, 1662, 1662,
     1663, 1663, 3942, 1663, 1663, 3942, 1663, 1663, 1663, 3942,
     3942, 3942, 1663, 1663, 1663, 3942, 1663, 1663, 1663, 1663,
     1663, 1663, 1663, 1663, 1663, 1663, 1663, 1663, 1663, 1663,
     1663, 1663, 1664, 1664, 3942, 1664, 1664, 1664, 1664, 1664,

     1664, 1664, 1664, 1664, 3942, 1664, 1664, 1664, 1664, 1664,
     1664, 1664, 1664, 1664, 3942, 1664, 1664, 3942, 1664, 1664,
     1664, 1664, 1664, 1664, 1672, 1672, 3942, 1672, 1672, 1672,
     1672, 1672, 1672, 1672, 1672, 1672, 1672, 1672, 1672, 1672,
     1672, 1672, 1672, 1672, 1672, 1672, 3942, 1672, 1672, 3942,
     1672, 1672, 1672, 1672, 1672, 1672, 1700, 1700, 1700, 3942,
     3942, 3942, 1700, 3942, 3942, 3942, 3942, 3942, 3942, 3942,
     3942, 3942, 3942, 3942, 3942, 3942, 3942, 3942, 1700, 1700,
     3942, 3942, 3942, 3942, 3942, 3942, 1700, 1706, 1706, 1706,
     3942, 3942, 3942, 3942, 3942, 3942, 3942, 1706, 3942, 1706,

     3942, 3942, 1706, 3942, 3942, 3942, 3942, 3942, 3942, 1706,
     3942, 3942, 3942, 3942, 3942, 3942, 3942, 1706, 1707, 1707,
     1707, 1707, 1707, 1707, 1707, 1707, 1707, 1707, 1707, 1707,
     1707, 1707, 1707, 1707, 1707, 1707, 1707, 1707, 1707, 1707,
     1707, 1707, 1707, 1707, 1707, 1707, 1707, 1707, 1707, 1707,
     1711, 1711, 1711, 3942, 3942, 3942, 1711, 3942, 3942, 3942,
     3942, 3942, 3942, 3942, 3942, 3942, 3942, 3942, 3942, 3942,
     3942, 3942, 1711, 3942, 3942, 3942, 3942, 3942, 3942, 3942,
     1711, 1715, 1715, 1715, 3942, 3942, 3942, 3942, 3942, 3942,
     1715, 3942, 3942, 3942, 3942, 3942, 1715, 3942, 3942, 3942,

     3942, 3942, 3942, 1715, 3942, 3942, 3942, 3942, 3942, 3942,
     3942, 1715, 1719, 3942, 3942, 3942, 3942, 3942, 1719, 1719,
     3942, 3942, 3942, 1719, 3942, 3942, 3942, 3942, 3942, 3942,
     3942, 3942, 3942, 3942, 1719, 3942, 3942, 3942, 3942, 3942,
     3942, 3942, 1719, 1725, 1725, 1725, 3942, 3942, 3942, 1725,
     3942, 3942, 3942, 3942, 3942, 3942, 3942, 3942, 3942, 3942,
     3942, 3942, 3942, 3942, 3942, 1725, 3942, 3942, 3942, 3942,
     3942, 3942, 3942, 1725, 1728, 1728, 1728, 1728, 3942, 3942,
     1728, 3942, 3942, 3942, 3942, 3942, 3942, 3942, 3942, 3942,
     1728, 3942, 3942, 3942, 3942, 3942, 1728, 3942, 3942, 3942,

     3942, 3942, 3942, 1728, 1728, 1730, 1730, 1730, 3942, 3942,
     3942, 3942, 3942, 3942, 3942, 3942, 3942, 3942, 3942, 3942,
     1730, 1730, 3942, 3942, 3942, 3942, 3942, 1730, 3942, 3942,
     3942, 3942, 3942, 3942, 3942, 1730, 1740, 1740, 1740, 1740,
     1740, 1740, 1740, 1740, 1740, 1740, 1740, 1740, 1740, 1740,
     1740, 1740, 1740, 1740, 1740, 1740, 1740, 1740, 1740, 1740,
     1740, 1740, 1740, 1740, 1740, 1740, 1740, 1740, 1746, 1746,
     3942, 1746, 1746, 1746, 1746, 1746, 1746, 1746, 1746, 1746,
     3942, 1746, 1746, 3942, 1746, 1746, 1746, 1746, 1746, 1746,
     3942, 1746, 1746, 3942, 1746, 1746, 1746, 1746, 1746, 1746,

     1767, 1767, 1767, 1767, 1767, 1767, 1767, 1767, 1767, 1767,
     1767, 1767, 1767, 1767, 1767, 1767, 3942, 1767, 1767, 1767,
     1767, 1767, 1767, 3942, 1767, 1767, 1767, 1767, 1767, 1767,
     1767, 1767, 1770, 1770, 3942, 1770, 1770, 1770, 1770, 3942,
     1770, 1770, 1770, 1770, 3942, 1770, 1770, 3942, 1770, 1770,
     1770, 3942, 1770, 1770, 3942, 1770, 1770, 3942, 3942, 1770,
     1770, 1770, 1770, 1770, 1128, 3942, 3942, 3942, 3942, 3942,
     3942, 3942, 3942, 1128, 3942, 3942, 3942, 3942, 3942, 1128,
     3942, 3942, 3942, 3942, 3942, 3942, 1128, 3942, 3942, 3942,
     3942, 3942, 3942, 3942, 1128, 1149, 1149, 1149, 3942, 3942,

     3942, 1149, 3942, 3942, 3942, 3942, 3942, 3942, 1149, 3942,
     3942, 3942, 3942, 3942, 3942, 3942, 3942, 1149, 3942, 3942,
     3942, 3942, 3942, 3942, 1149, 1149, 1142, 1142, 1142, 3942,
     3942, 3942, 1142, 3942, 3942, 3942, 3942, 3942, 3942, 3942,
     3942, 3942, 3942, 3942, 3942, 3942, 3942, 3942, 1142, 3942,
     3942, 3942, 3942, 3942, 3942, 3942, 1142, 1784, 1784, 1784,
     3942, 3942, 3942, 3942, 3942, 3942, 1784, 3942, 3942, 1784,
     3942, 3942, 1784, 3942, 1784, 1784, 3942, 3942, 3942, 1784,
     3942, 3942, 3942, 3942, 3942, 3942, 3942, 1784, 1155, 1155,
     1155, 3942, 3942, 3942, 3942, 3942, 3942, 1155, 3942, 3942,

     1155, 1155, 3942, 1155, 1155, 1155, 1155, 3942, 3942, 3942,
     1155, 3942, 3942, 3942, 3942, 3942, 3942, 3942, 1155, 1787,
     1787, 1787, 3942, 3942, 3942, 3942, 3942, 3942, 3942, 3942,
     3942, 3942, 1787, 3942, 1787, 3942, 3942, 3942, 3942, 3942,
     3942, 1787, 3942, 3942, 3942, 3942, 3942, 3942, 3942, 1787,
     1790, 1790, 1790, 3942, 3942, 3942, 1790, 3942, 3942, 3942,
     3942, 3942, 3942, 3942, 3942, 3942, 3942, 3942, 3942, 3942,
     3942, 3942, 1790, 3942, 3942, 3942, 3942, 3942, 3942, 3942,
     1790, 1161, 1161, 1161, 3942, 3942, 3942, 1161, 3942, 3942,
     3942, 3942, 3942, 3942, 3942, 3942, 3942, 3942, 3942, 3942,

     3942, 3942, 3942, 1161, 3942, 3942, 3942, 3942, 3942, 3942,
     3942, 1161, 1792, 1792, 1792, 3942, 3942, 3942, 3942, 3942,
     3942, 1792, 3942, 3942, 1792, 3942, 3942, 1792, 3942, 1792,
     1792, 3942, 3942, 3942, 1792, 3942, 3942, 3942, 3942, 3942,
     3942, 3942, 1792, 1165, 1165, 1165, 1165, 1165, 1165, 1165,
     1165, 1165, 1165, 1165, 1165, 1165, 3942, 1165, 1165, 1165,
     1165, 1165, 1165, 1165, 1165, 1165, 1165, 1165, 1165, 1165,
     1165, 3942, 1165, 1165, 1165, 1171, 1171, 1171, 3942, 3942,
     3942, 1171, 3942, 3942, 3942, 3942, 3942, 3942, 3942, 3942,
     3942, 3942, 3942, 3942, 3942, 3942, 3942, 1171, 3942, 3942,

     3942, 3942, 3942, 3942, 3942, 1171, 1794, 1794, 1794, 3942,
     3942, 3942, 3942, 3942, 3942, 1794, 3942, 3942, 3942, 3942,
     3942, 1794, 3942, 3942, 3942, 3942, 3942, 3942, 1794, 3942,
     3942, 3942, 3942, 3942, 3942, 3942, 1794, 1182, 1182, 1182,
     3942, 3942, 3942, 3942, 3942, 3942, 1182, 3942, 3942, 3942,
     3942, 3942, 1182, 1182, 3942, 3942, 3942, 3942, 3942, 1182,
     3942, 3942, 3942, 3942, 3942, 3942, 3942, 1182, 1192, 3942,
     3942, 3942, 1192, 3942, 1192, 3942, 3942, 1192, 3942, 3942,
     3942, 1192, 3942, 3942, 3942, 3942, 3942, 3942, 3942, 1192,
     1195, 1195, 3942, 1195, 1195, 1195, 1195, 1195, 1195, 1195,

     1195, 1195, 1195, 1195, 1195, 1195, 1195, 1195, 1195, 1195,
     1195, 1195, 1195, 1195, 1195, 1195, 1195, 1195, 1195, 1195,
     1195, 1195, 1211, 1211, 1211, 3942, 3942, 3942, 1211, 3942,
     3942, 3942, 3942, 3942, 3942, 3942, 3942, 3942, 3942, 3942,
     3942, 3942, 3942, 3942, 1211, 3942, 3942, 3942, 3942, 1211,
     3942, 3942, 1211, 1813, 1813, 1813, 3942, 3942, 3942, 3942,
     3942, 3942, 3942, 3942, 3942, 3942, 1813, 3942, 1813, 1813,
     3942, 3942, 3942, 3942, 3942, 1813, 3942, 3942, 3942, 3942,
     3942, 3942, 3942, 1813, 1225, 1225, 1225, 3942, 3942, 3942,
     3942, 3942, 3942, 3942, 3942, 3942, 3942, 1225, 3942, 1225,

     1225, 3942, 3942, 3942, 3942, 3942, 1225, 3942, 1225, 3942,
     3942, 3942, 3942, 3942, 1225, 1817, 1817, 1817, 3942, 3942,
     3942, 1817, 3942, 3942, 3942, 3942, 3942, 3942, 3942, 3942,
     3942, 3942, 3942, 3942, 3942, 3942, 3942, 1817, 3942, 3942,
     3942, 3942, 3942, 3942, 3942, 1817, 1827, 1827, 3942, 1827,
     1827, 1827, 1827, 1827, 1827, 1827, 1827, 1827, 1827, 1827,
     1827, 1827, 1827, 1827, 1827, 1827, 1827, 1827, 1827, 1827,
     1827, 3942, 1827, 1827, 1827, 1827, 1827, 1827, 1829, 1829,
     3942, 1829, 1829, 1829, 1829, 1829, 1829, 1829, 1829, 1829,
     1829, 1829, 1829, 1829, 1829, 1829, 1829, 1829, 1829, 1829,

     1829, 1829, 1829, 1829, 1829, 1829, 1829, 1829, 1829, 1829,
     1302, 1302, 1302, 1302, 1302, 1302, 1302, 1302, 1302, 1302,
     1302, 1302, 1302, 1302, 1302, 1302, 1302, 1302, 1302, 1302,
     1302, 1302, 1302, 1302, 1302, 1302, 1302, 1302, 1302, 1302,
     1302, 1302, 1266, 1266, 1266, 3942, 3942, 3942, 1266, 3942,
     3942, 3942, 3942, 3942, 3942, 3942, 3942, 3942, 3942, 3942,
     3942, 3942, 3942, 3942, 1266, 3942, 3942, 3942, 3942, 3942,
     3942, 3942, 1266, 1869, 1869, 1869, 3942, 3942, 3942, 3942,
     3942, 3942, 3942, 3942, 3942, 3942, 3942, 3942, 1869, 3942,
     3942, 1869, 3942, 3942, 3942, 1869, 3942, 3942, 3942, 3942,

     3942, 3942, 3942, 1869, 1299, 1299, 1299, 3942, 3942, 3942,
     3942, 3942, 3942, 3942, 3942, 3942, 3942, 3942, 3942, 1299,
     1299, 3942, 1299, 3942, 3942, 3942, 1299, 3942, 3942, 3942,
     3942, 3942, 3942, 3942, 1299, 1873, 1873, 3942, 1873, 1873,
     1873, 1873, 1873, 1873, 1873, 1873, 1873, 1873, 1873, 1873,
     1873, 1873, 1873, 1873, 1873, 1873, 1873, 1873, 1873, 1873,
     1873, 1873, 1873, 1873, 1873, 1873, 1873, 1281, 1281, 1281,
     3942, 3942, 3942, 1281, 1281, 3942, 3942, 3942, 1281, 3942,
     3942, 3942, 3942, 1281, 3942, 3942, 3942, 3942, 3942, 1281,
     3942, 3942, 3942, 1281, 3942, 3942, 3942, 1281, 1880, 1880,

     1880, 3942, 3942, 3942, 3942, 3942, 3942, 3942, 1880, 1880,
     3942, 3942, 3942, 1880, 1880, 3942, 1880, 3942, 3942, 3942,
     1880, 3942, 3942, 3942, 3942, 3942, 3942, 3942, 1880, 1898,
     1898, 1898, 3942, 3942, 3942, 3942, 3942, 3942, 1898, 3942,
     3942, 3942, 1898, 3942, 1898, 3942, 3942, 3942, 3942, 3942,
     3942, 1898, 3942, 3942, 3942, 3942, 3942, 3942, 3942, 1898,
     1335, 1335, 3942, 1335, 1335, 1335, 1335, 1335, 1335, 1335,
     1335, 1335, 1335, 1335, 1335, 1335, 1335, 1335, 1335, 3942,
     1335, 1335, 1335, 1335, 1335, 1335, 1335, 1335, 1335, 1335,
     1335, 1335, 1344, 1344, 1344, 3942, 3942, 3942, 1344, 3942,

     3942, 3942, 3942, 3942, 3942, 3942, 3942, 3942, 3942, 3942,
     3942, 3942, 3942, 3942, 1344, 3942, 3942, 3942, 3942, 3942,
     3942, 3942, 1344, 1955, 1955, 1955, 3942, 3942, 3942, 3942,
     3942, 3942, 3942, 3942, 3942, 3942, 3942, 3942, 1955, 3942,
     3942, 1955, 3942, 3942, 3942, 1955, 3942, 3942, 3942, 3942,
     3942, 3942, 3942, 1955, 1350, 1350, 1350, 3942, 3942, 3942,
     3942, 3942, 3942, 3942, 3942, 3942, 3942, 3942, 3942, 1350,
     1350, 3942, 1350, 3942, 3942, 3942, 1350, 3942, 3942, 3942,
     3942, 3942, 3942, 3942, 1350, 1390, 1390, 3942, 3942, 1390,
     3942, 3942, 1390, 1390, 3942, 1390, 1390, 1390, 1390, 1390,

     3942, 1390, 1390, 1390, 3942, 1390, 1390, 3942, 1390, 1390,
     1390, 1390, 1390, 3942, 3942, 1390, 1390, 1394, 1394, 3942,
     1394, 1394, 1394, 1394, 1394, 1394, 1394, 1394, 1394, 1394,
     1394, 1394, 1394, 1394, 1394, 1394, 1394, 1394, 1394, 1394,
     1394, 1394, 1394, 1394, 1394, 1394, 1394, 1394, 1394, 1991,
     1991, 3942, 1991, 1991, 1991, 1991, 1991, 1991, 1991, 1991,
     1991, 1991, 1991, 1991, 1991, 1991, 1991, 1991, 1991, 1991,
     1991, 1991, 1991, 1991, 3942, 1991, 1991, 1991, 1991, 1991,
     1991, 1993, 1993, 3942, 1993, 1993, 1993, 1993, 1993, 1993,
     1993, 1993, 1993, 1993, 1993, 1993, 1993, 1993, 1993, 1993,

     1993, 1993, 1993, 1993, 1993, 1993, 1993, 1993, 1993, 1993,
     1993, 1993, 1993, 1998, 1998, 3942, 1998, 1998, 1998, 1998,
     1998, 1998, 1998, 1998, 1998, 1998, 1998, 1998, 1998, 1998,
     1998, 1998, 1998, 1998, 1998, 1998, 1998, 1998, 1998, 1998,
     1998, 1998, 1998, 1998, 1998, 1407, 1407, 1407, 3942, 3942,
     3942, 3942, 3942, 3942, 3942, 3942, 3942, 3942, 1407, 3942,
     1407, 1407, 3942, 3942, 3942, 3942, 3942, 1407, 3942, 3942,
     3942, 3942, 3942, 3942, 3942, 1407, 2004, 2004, 2004, 3942,
     3942, 3942, 2004, 3942, 3942, 3942, 3942, 3942, 3942, 3942,
     3942, 3942, 3942, 3942, 3942, 3942, 3942, 3942, 2004, 3942,

     3942, 3942, 3942, 3942, 3942, 3942, 2004, 1414, 1414, 1414,
     3942, 3942, 3942, 1414, 3942, 3942, 3942, 3942, 3942, 3942,
     3942, 3942, 3942, 3942, 3942, 3942, 3942, 3942, 3942, 1414,
     3942, 3942, 3942, 3942, 3942, 3942, 3942, 1414, 1419, 1419,
     1419, 3942, 3942, 3942, 3942, 3942, 3942, 3942, 3942, 3942,
     3942, 3942, 3942, 1419, 1419, 3942, 3942, 3942, 3942, 3942,
     1419, 3942, 3942, 3942, 3942, 3942, 3942, 3942, 1419, 1420,
     1420, 3942, 1420, 1420, 3942, 3942, 1420, 1420, 3942, 1420,
     1420, 1420, 1420, 1420, 3942, 1420, 1420, 1420, 3942, 1420,
     1420, 3942, 1420, 1420, 3942, 1420, 1420, 3942, 3942, 1420,

     1420, 2008, 2008, 3942, 2008, 2008, 2008, 2008, 2008, 2008,
     2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008,
     2008, 2008, 2008, 2008, 2008, 2008, 3942, 2008, 2008, 2008,
     2008, 2008, 2008, 2010, 2010, 3942, 2010, 2010, 2010, 2010,
     2010, 2010, 2010, 2010, 2010, 2010, 2010, 2010, 2010, 2010,
     2010, 2010, 2010, 2010, 2010, 2010, 2010, 2010, 2010, 2010,
     2010, 2010, 2010, 2010, 2010, 1449, 1449, 3942, 1449, 1449,
     1449, 1449, 1449, 1449, 1449, 1449, 1449, 3942, 1449, 1449,
     1449, 1449, 1449, 1449, 1449, 1449, 1449, 1449, 1449, 1449,
     1449, 1449, 1449, 1449, 1449, 1449, 1449, 1455, 1455, 1455,

     1455, 1455, 1455, 1455, 1455, 1455, 1455, 1455, 1455, 1455,
     1455, 1455, 1455, 1455, 1455, 1455, 1455, 1455, 1455, 1455,
     1455, 1455, 1455, 1455, 1455, 1455, 1455, 1455, 1455, 1462,
     1462, 3942, 1462, 1462, 3942, 1462, 1462, 1462, 1462, 1462,
     1462, 1462, 1462, 1462, 1462, 1462, 1462, 1462, 1462, 1462,
     1462, 1462, 1462, 3942, 1462, 3942, 1462, 1462, 1462, 1462,
     1462, 1465, 1465, 3942, 1465, 1465, 1465, 1465, 1465, 1465,
     1465, 1465, 1465, 1465, 1465, 1465, 1465, 1465, 1465, 1465,
     1465, 1465, 1465, 1465, 1465, 1465, 1465, 1465, 1465, 1465,
     1465, 1465, 1465, 1475, 3942, 3942, 3942, 1475, 1475, 1475,

     1475, 1475, 1475, 1475, 1475, 3942, 1475, 3942, 3942, 1475,
     1475, 1475, 1475, 1475, 1475, 1475, 1475, 1475, 1475, 1475,
     1475, 1475, 1475, 1475, 1475, 1485, 3942, 1485, 3942, 3942,
     3942, 3942, 3942, 3942, 1485, 3942, 1485, 3942, 3942, 3942,
     3942, 3942, 1485, 1489, 1489, 1489, 3942, 3942, 3942, 3942,
     3942, 3942, 3942, 3942, 3942, 3942, 1489, 3942, 1489, 3942,
     3942, 3942, 3942, 3942, 3942, 1489, 3942, 3942, 3942, 3942,
     3942, 3942, 3942, 1489, 2031, 2031, 2031, 3942, 3942, 3942,
     2031, 3942, 3942, 3942, 3942, 2031, 3942, 3942, 3942, 3942,
     3942, 3942, 3942, 3942, 3942, 3942, 2031, 3942, 3942, 3942,

     3942, 3942, 3942, 3942, 2031, 1492, 1492, 1492, 3942, 3942,
     3942, 3942, 3942, 3942, 3942, 3942, 3942, 3942, 3942, 3942,
     1492, 3942, 3942, 3942, 3942, 3942, 3942, 1492, 3942, 1492,
     3942, 3942, 3942, 3942, 3942, 1492, 1490, 1490, 1490, 3942,
     3942, 3942, 1490, 3942, 3942, 3942, 3942, 3942, 3942, 3942,
     3942, 3942, 3942, 3942, 3942, 3942, 3942, 3942, 1490, 3942,
     3942, 3942, 3942, 3942, 3942, 3942, 1490, 1503, 1503, 3942,
     1503, 1503, 1503, 1503, 1503, 1503, 1503, 1503, 1503, 1503,
     1503, 1503, 1503, 1503, 1503, 1503, 1503, 1503, 1503, 1503,
     1503, 1503, 1503, 1503, 1503, 1503, 1503, 1503, 1503, 1507,

     3942, 3942, 3942, 1507, 3942, 3942, 3942, 3942, 3942, 3942,
     1507, 3942, 3942, 3942, 3942, 3942, 3942, 1507, 3942, 3942,
     3942, 3942, 3942, 3942, 3942, 1507, 1512, 1512, 3942, 1512,
     1512, 3942, 1512, 1512, 1512, 1512, 1512, 1512, 1512, 1512,
     1512, 1512, 1512, 1512, 1512, 1512, 1512, 1512, 1512, 1512,
     1512, 1512, 1512, 1512, 1512, 1512, 1512, 1512, 1520, 1520,
     1520, 1520, 1520, 1520, 1520, 1520, 1520, 1520, 1520, 3942,
     1520, 1520, 1520, 1520, 1520, 1520, 1520, 1520, 1520, 1520,
     1520, 1520, 1520, 1520, 1520, 1520, 1520, 1520, 1520, 1520,
     1527, 1527, 1527, 3942, 3942, 3942, 3942, 3942, 3942, 3942,

     3942, 3942, 3942, 3942, 3942, 1527, 1527, 3942, 3942, 3942,
     3942, 3942, 1527, 3942, 3942, 3942, 3942, 3942, 3942, 3942,
     1527, 1529, 1529, 1529, 1529, 1529, 1529, 1529, 1529, 1529,
     1529, 1529, 3942, 1529, 1529, 1529, 1529, 1529, 1529, 1529,
     1529, 1529, 1529, 1529, 1529, 1529, 1529, 1529, 1529, 1529,
     1529, 1529, 1529, 1544, 1544, 3942, 1544, 3942, 3942, 3942,
     1544, 3942, 3942, 3942, 3942, 3942, 3942, 3942, 1544, 2060,
     3942, 3942, 3942, 3942, 3942, 3942, 2060, 3942, 3942, 3942,
     2060, 2060, 3942, 3942, 2060, 2060, 3942, 3942, 3942, 2060,
     3942, 2060, 2069, 2069, 3942, 2069, 2069, 2069, 2069, 2069,

     2069, 2069, 2069, 2069, 2069, 2069, 2069, 2069, 2069, 2069,
     2069, 2069, 2069, 2069, 2069, 2069, 2069, 3942, 2069, 2069,
     2069, 2069, 2069, 2069, 2071, 2071, 3942, 2071, 2071, 2071,
     2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071,
     2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071,
     2071, 2071, 2071, 2071, 2071, 2071, 1570, 1570, 1570, 3942,
     3942, 3942, 1570, 3942, 3942, 3942, 3942, 3942, 3942, 3942,
     3942, 3942, 3942, 3942, 3942, 3942, 3942, 3942, 1570, 3942,
     3942, 3942, 3942, 3942, 3942, 3942, 1570, 1573, 1573, 1573,
     3942, 3942, 3942, 3942, 3942, 3942, 3942, 3942, 1573, 3942,

     3942, 3942, 1573, 3942, 3942, 3942, 3942, 3942, 3942, 1573,
     3942, 3942, 3942, 3942, 3942, 3942, 3942, 1573, 1579, 1579,
     1579, 3942, 3942, 3942, 1579, 1579, 3942, 3942, 3942, 1579,
     3942, 3942, 3942, 3942, 3942, 3942, 3942, 3942, 3942, 3942,
     1579, 3942, 3942, 3942, 3942, 3942, 3942, 3942, 1579, 1581,
     1581, 1581, 3942, 3942, 3942, 3942, 3942, 3942, 3942, 3942,
     3942, 3942, 3942, 3942, 1581, 3942, 3942, 3942, 3942, 3942,
     3942, 1581, 1581, 3942, 3942, 3942, 3942, 3942, 3942, 1581,
     2079, 2079, 3942, 2079, 2079, 2079, 2079, 2079, 2079, 2079,
     2079, 2079, 2079, 2079, 2079, 2079, 2079, 2079, 2079, 2079,

     2079, 2079, 2079, 2079, 2079, 2079, 2079, 2079, 2079, 2079,
     2079, 2079, 2085, 2085, 2085, 3942, 3942, 3942, 2085, 3942,
     3942, 3942, 3942, 2085, 3942, 3942, 3942, 3942, 3942, 3942,
     3942, 3942, 3942, 3942, 2085, 3942, 3942, 3942, 3942, 3942,
     3942, 3942, 2085, 1591, 1591, 1591, 3942, 3942, 3942, 1591,
     3942, 3942, 3942, 3942, 3942, 3942, 3942, 3942, 3942, 3942,
     3942, 3942, 3942, 3942, 3942, 1591, 3942, 3942, 3942, 3942,
     3942, 3942, 3942, 1591, 1596, 1596, 1596, 3942, 3942, 3942,
     3942, 3942, 3942, 3942, 3942, 3942, 3942, 3942, 3942, 1596,
     1596, 3942, 3942, 3942, 3942, 3942, 1596, 3942, 3942, 3942,

     3942, 3942, 3942, 3942, 1596, 1603, 1603, 3942, 1603, 1603,
     1603, 1603, 1603, 1603, 1603, 1603, 1603, 1603, 1603, 1603,
     1603, 1603, 1603, 1603, 1603, 1603, 1603, 1603, 1603, 1603,
     1603, 1603, 1603, 1603, 1603, 1603, 1603, 1605, 3942, 3942,
     3942, 1605, 3942, 3942, 1605, 1605, 3942, 3942, 3942, 1605,
     1605, 1605, 3942, 1605, 1605, 1605, 1605, 1605, 1605, 1605,
     1605, 1605, 1605, 1605, 1605, 1605, 1605, 1605, 1605, 2091,
     2091, 3942, 2091, 2091, 2091, 2091, 2091, 2091, 2091, 2091,
     2091, 2091, 2091, 2091, 2091, 2091, 2091, 2091, 2091, 2091,
     2091, 2091, 2091, 2091, 3942, 2091, 2091, 2091, 2091, 2091,

     2091, 2093, 2093, 3942, 2093, 2093, 2093, 2093, 2093, 2093,
     2093, 2093, 2093, 2093, 2093, 2093, 2093, 2093, 2093, 2093,
     2093, 2093, 2093, 2093, 2093, 2093, 2093, 2093, 2093, 2093,
     2093, 2093, 2093, 1627, 1627, 3942, 1627, 1627, 3942, 1627,
     1627, 1627, 3942, 3942, 3942, 1627, 1627, 1627, 1627, 1627,
     1627, 1627, 1627, 1627, 1627, 1627, 1627, 1627, 1627, 1627,
     1627, 1627, 1627, 1627, 1627, 2100, 2100, 3942, 2100, 2100,
     2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100,
     2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100,
     3942, 2100, 2100, 2100, 2100, 2100, 2100, 2102, 2102, 3942,

     2102, 2102, 2102, 2102, 2102, 2102, 2102, 2102, 2102, 2102,
     2102, 2102, 2102, 2102, 2102, 2102, 2102, 2102, 2102, 2102,
     2102, 2102, 2102, 2102, 2102, 2102, 2102, 2102, 2102, 1632,
     1632, 3942, 1632, 1632, 3942, 1632, 1632, 1632, 3942, 1632,
     1632, 1632, 1632, 1632, 3942, 1632, 1632, 1632, 1632, 1632,
     1632, 1632, 1632, 1632, 1632, 1632, 1632, 3942, 3942, 1632,
     1632, 2104, 2104, 3942, 2104, 2104, 2104, 2104, 2104, 2104,
     2104, 2104, 2104, 2104, 2104, 2104, 2104, 2104, 2104, 2104,
     2104, 2104, 2104, 2104, 2104, 2104, 3942, 2104, 2104, 2104,
     2104, 2104, 2104, 2106, 2106, 3942, 2106, 2106, 2106, 2106,

     2106, 2106, 2106, 2106, 2106, 2106, 2106, 2106, 2106, 2106,
     2106, 2106, 2106, 2106, 2106, 2106, 2106, 2106, 2106, 2106,
     2106, 2106, 2106, 2106, 2106, 1635, 1635, 3942, 1635, 1635,
     3942, 1635, 1635, 1635, 3942, 3942, 3942, 1635, 1635, 1635,
     3942, 1635, 1635, 1635, 1635, 1635, 1635, 1635, 1635, 1635,
     1635, 1635, 1635, 1635, 1635, 1635, 1635, 2108, 2108, 3942,
     2108, 2108, 2108, 2108, 2108, 2108, 2108, 2108, 2108, 2108,
     2108, 2108, 2108, 2108, 2108, 2108, 2108, 2108, 2108, 2108,
     2108, 2108, 3942, 2108, 2108, 2108, 2108, 2108, 2108, 2110,
     2110, 3942, 2110, 2110, 2110, 2110, 2110, 2110, 2110, 2110,

     2110, 2110, 2110, 2110, 2110, 2110, 2110, 2110, 2110, 2110,
     2110, 2110, 2110, 2110, 2110, 2110, 2110, 2110, 2110, 2110,
     2110, 1638, 1638, 3942, 1638, 1638, 3942, 1638, 1638, 1638,
     3942, 1638, 1638, 1638, 1638, 1638, 3942, 1638, 1638, 1638,
     1638, 1638, 1638, 1638, 1638, 1638, 1638, 1638, 1638, 3942,
     3942, 1638, 1638, 2112, 2112, 3942, 2112, 2112, 2112, 2112,
     2112, 2112, 2112, 2112, 2112, 2112, 2112, 2112, 2112, 2112,
     2112, 2112, 2112, 2112, 2112, 2112, 2112, 2112, 3942, 2112,
     2112, 2112, 2112, 2112, 2112, 2114, 2114, 3942, 2114, 2114,
     2114, 2114, 2114, 2114, 2114, 2114, 2114, 2114, 2114, 2114,

     2114, 2114, 2114, 2114, 2114, 2114, 2114, 2114, 2114, 2114,
     2114, 2114, 2114, 2114, 2114, 2114, 2114, 2120, 2120, 3942,
     2120, 2120, 2120, 2120, 2120, 2120, 2120, 2120, 2120, 2120,
     2120, 2120, 2120, 2120, 2120, 2120, 2120, 2120, 2120, 2120,
     2120, 2120, 3942, 2120, 2120, 2120, 2120, 2120, 2120, 2122,
     2122, 3942, 2122, 2122, 2122, 2122, 2122, 2122, 2122, 2122,
     2122, 2122, 2122, 2122, 2122, 2122, 2122, 2122, 2122, 2122,
     2122, 2122, 2122, 2122, 2122, 2122, 2122, 2122, 2122, 2122,
     2122, 1659, 1659, 3942, 1659, 1659, 3942, 1659, 1659, 1659,
     3942, 1659, 1659, 1659, 1659, 1659, 1659, 1659, 1659, 1659,

     1659, 1659, 1659, 1659, 1659, 1659, 3942, 1659, 1659, 1659,
     1659, 1659, 1659, 1663, 1663, 3942, 1663, 1663, 3942, 1663,
     1663, 1663, 3942, 3942, 3942, 1663, 1663, 1663, 3942, 1663,
     1663, 1663, 1663, 1663, 1663, 1663, 1663, 1663, 1663, 1663,
     1663, 1663, 1663, 1663, 1663, 1664, 1664, 3942, 1664, 1664,
     1664, 1664, 1664, 1664, 1664, 1664, 1664, 3942, 1664, 1664,
     1664, 1664, 1664, 1664, 1664, 1664, 1664, 3942, 1664, 1664,
     3942, 1664, 1664, 1664, 1664, 1664, 1664, 1672, 1672, 3942,
     1672, 1672, 1672, 1672, 1672, 1672, 1672, 1672, 1672, 1672,
     1672, 1672, 1672, 1672, 1672, 1672, 1672, 1672, 1672, 3942,

     1672, 1672, 3942, 1672, 1672, 1672, 1672, 1672, 1672, 1700,
     1700, 1700, 3942, 3942, 3942, 1700, 3942, 3942, 3942, 3942,
     3942, 3942, 3942, 3942, 3942, 3942, 3942, 3942, 3942, 3942,
     3942, 1700, 1700, 3942, 3942, 3942, 3942, 3942, 3942, 1700,
     2141, 2141, 2141, 3942, 3942, 3942, 3942, 3942, 3942, 3942,
     2141, 3942, 2141, 3942, 3942, 2141, 3942, 3942, 3942, 3942,
     3942, 3942, 2141, 3942, 3942, 3942, 3942, 3942, 3942, 3942,
     2141, 1707, 1707, 1707, 1707, 1707, 1707, 1707, 1707, 1707,
     1707, 1707, 1707, 1707, 1707, 1707, 1707, 1707, 1707, 1707,
     1707, 1707, 1707, 1707, 1707, 1707, 1707, 1707, 1707, 1707,

     1707, 1707, 1707, 1706, 1706, 1706, 3942, 3942, 3942, 3942,
     3942, 3942, 3942, 1706, 3942, 1706, 3942, 3942, 1706, 3942,
     3942, 3942, 3942, 3942, 3942, 1706, 3942, 3942, 3942, 3942,
     3942, 3942, 3942, 1706, 1711, 1711, 1711, 3942, 3942, 3942,
     1711, 3942, 3942, 3942, 3942, 3942, 3942, 3942, 3942, 3942,
     3942, 3942, 3942, 3942, 3942, 3942, 1711, 3942, 3942, 3942,
     3942, 3942, 3942, 3942, 1711, 2145, 2145, 2145, 3942, 3942,
     3942, 3942, 3942, 3942, 3942, 3942, 3942, 3942, 3942, 3942,
     2145, 3942, 3942, 3942, 3942, 3942, 3942, 2145, 3942, 3942,
     3942, 3942, 3942, 3942, 3942, 2145, 1715, 1715, 1715, 3942,

     3942, 3942, 3942, 3942, 3942, 1715, 3942, 3942, 3942, 3942,
     3942, 1715, 3942, 3942, 3942, 3942, 3942, 3942, 1715, 3942,
     3942, 3942, 3942, 3942, 3942, 3942, 1715, 1725, 1725, 1725,
     3942, 3942, 3942, 1725, 3942, 3942, 3942, 3942, 3942, 3942,
     3942, 3942, 3942, 3942, 3942, 3942, 3942, 3942, 3942, 1725,
     3942, 3942, 3942, 3942, 3942, 3942, 3942, 1725, 1730, 1730,
     1730, 3942, 3942, 3942, 3942, 3942, 3942, 3942, 3942, 3942,
     3942, 3942, 3942, 1730, 1730, 3942, 3942, 3942, 3942, 3942,
     1730, 3942, 3942, 3942, 3942, 3942, 3942, 3942, 1730, 1740,
     1740, 1740, 1740, 1740, 1740, 1740, 1740, 1740, 1740, 1740,

     1740, 1740, 1740, 1740, 1740, 1740, 1740, 1740, 1740, 1740,
     1740, 1740, 1740, 1740, 1740, 1740, 1740, 1740, 1740, 1740,
     1740, 1746, 1746, 3942, 1746, 1746, 1746, 1746, 1746, 1746,
     1746, 1746, 1746, 3942, 1746, 1746, 3942, 1746, 1746, 1746,
     1746, 1746, 1746, 3942, 1746, 1746, 3942, 1746, 1746, 1746,
     1746, 1746, 1746, 1767, 1767, 1767, 1767, 1767, 1767, 1767,
     1767, 1767, 1767, 1767, 1767, 1767, 1767, 1767, 3942, 3942,
     1767, 1767, 1767, 1767, 1767, 1767, 3942, 1767, 1767, 1767,
     1767, 1767, 1767, 1767, 1767, 1770, 1770, 3942, 1770, 1770,
     1770, 1770, 3942, 1770, 1770, 1770, 1770, 3942, 1770, 1770,

     3942, 1770, 1770, 1770, 3942, 1770, 1770, 3942, 1770, 1770,
     3942, 3942, 1770, 1770, 1770, 1770, 1770, 1784, 1784, 1784,
     3942, 3942, 3942, 3942, 3942, 3942, 1784, 3942, 3942, 1784,
     3942, 3942, 1784, 3942, 1784, 1784, 3942, 3942, 3942, 1784,
     3942, 3942, 3942, 3942, 3942, 3942, 3942, 1784, 2176, 2176,
     2176, 3942, 3942, 3942, 3942, 3942, 3942, 2176, 3942, 3942,
     2176, 3942, 3942, 2176, 2176, 2176, 2176, 3942, 3942, 3942,
     2176, 3942, 3942, 3942, 3942, 3942, 3942, 3942, 2176, 1787,
     1787, 1787, 3942, 3942, 3942, 3942, 3942, 3942, 3942, 3942,
     3942, 3942, 1787, 3942, 1787, 3942, 3942, 3942, 3942, 3942,

     3942, 1787, 3942, 3942, 3942, 3942, 3942, 3942, 3942, 1787,
     1790, 1790, 1790, 3942, 3942, 3942, 1790, 3942, 3942, 3942,
     3942, 3942, 3942, 3942, 3942, 3942, 3942, 3942, 3942, 3942,
     3942, 3942, 1790, 3942, 3942, 3942, 3942, 3942, 3942, 3942,
     1790, 1785, 1785, 1785, 1785, 3942, 3942, 1785, 3942, 3942,
     3942, 3942, 3942, 3942, 3942, 3942, 3942, 1785, 3942, 3942,
     3942, 3942, 3942, 1785, 3942, 3942, 3942, 3942, 3942, 3942,
     1785, 1785, 1792, 1792, 1792, 3942, 3942, 3942, 3942, 3942,
     3942, 1792, 3942, 3942, 1792, 3942, 3942, 1792, 3942, 1792,
     1792, 3942, 3942, 3942, 1792, 3942, 3942, 3942, 3942, 3942,

     3942, 3942, 1792, 1794, 1794, 1794, 3942, 3942, 3942, 3942,
     3942, 3942, 1794, 3942, 3942, 3942, 3942, 3942, 1794, 3942,
     3942, 3942, 3942, 3942, 3942, 1794, 3942, 3942, 3942, 3942,
     3942, 3942, 3942, 1794, 2178, 2178, 2178, 3942, 3942, 3942,
     3942, 3942, 3942, 2178, 3942, 3942, 3942, 3942, 3942, 2178,
     2178, 3942, 3942, 3942, 3942, 3942, 2178, 3942, 3942, 3942,
     3942, 3942, 3942, 3942, 2178, 2179, 2179, 2179, 2179, 2179,
     2179, 2179, 2179, 2179, 2179, 2179, 2179, 3942, 2179, 2179,
     3942, 2179, 2179, 2179, 2179, 2179, 2179, 2179, 2179, 2179,
     2179, 2179, 2179, 2179, 2179, 2179, 2179, 2181, 2181, 2181,

     2181, 2181, 2181, 2181, 2181, 2181, 2181, 2181, 2181, 2181,
     2181, 2181, 3942, 2181, 2181, 2181, 2181, 2181, 2181, 2181,
     2181, 2181, 2181, 2181, 2181, 2181, 2181, 2181, 2181, 1795,
     1795, 1795, 1795, 3942, 3942, 1795, 3942, 3942, 3942, 3942,
     3942, 3942, 3942, 3942, 3942, 1795, 3942, 3942, 3942, 3942,
     3942, 1795, 3942, 3942, 3942, 3942, 3942, 3942, 1795, 1795,
     1182, 1182, 1182, 3942, 3942, 3942, 3942, 3942, 3942, 1182,
     3942, 3942, 3942, 3942, 3942, 1182, 1182, 3942, 3942, 3942,
     3942, 3942, 1182, 3942, 3942, 3942, 3942, 3942, 3942, 3942,
     1182, 1192, 3942, 3942, 3942, 1192, 3942, 1192, 3942, 3942,

     1192, 3942, 3942, 3942, 1192, 3942, 3942, 3942, 3942, 3942,
     3942, 3942, 1192, 2195, 2195, 2195, 2195, 3942, 3942, 2195,
     3942, 3942, 3942, 3942, 3942, 3942, 3942, 3942, 3942, 2195,
     3942, 3942, 3942, 3942, 3942, 2195, 3942, 3942, 3942, 3942,
     3942, 3942, 2195, 2195, 1813, 1813, 1813, 3942, 3942, 3942,
     3942, 3942, 3942, 3942, 3942, 3942, 3942, 1813, 3942, 1813,
     1813, 3942, 3942, 3942, 3942, 3942, 1813, 3942, 3942, 3942,
     3942, 3942, 3942, 3942, 1813, 1817, 1817, 1817, 3942, 3942,
     3942, 1817, 3942, 3942, 3942, 3942, 3942, 3942, 3942, 3942,
     3942, 3942, 3942, 3942, 3942, 3942, 3942, 1817, 3942, 3942,

     3942, 3942, 3942, 3942, 3942, 1817, 2197, 2197, 2197, 3942,
     3942, 3942, 3942, 3942, 3942, 3942, 3942, 3942, 3942, 3942,
     3942, 2197, 2197, 3942, 3942, 3942, 3942, 3942, 2197, 3942,
     3942, 3942, 3942, 3942, 3942, 3942, 2197, 2205, 2205, 3942,
     2205, 2205, 2205, 2205, 2205, 2205, 2205, 2205, 2205, 2205,
     2205, 2205, 2205, 2205, 2205, 2205, 2205, 2205, 2205, 2205,
     2205, 2205, 3942, 2205, 2205, 2205, 2205, 2205, 2205, 1273,
     1273, 1273, 1273, 3942, 3942, 1273, 3942, 3942, 3942, 3942,
     3942, 3942, 3942, 3942, 3942, 1273, 3942, 3942, 3942, 3942,
     3942, 1273, 3942, 3942, 3942, 3942, 3942, 3942, 1273, 1273,

     1869, 1869, 1869, 3942, 3942, 3942, 3942, 3942, 3942, 3942,
     3942, 3942, 3942, 3942, 3942, 1869, 3942, 3942, 1869, 3942,
     3942, 3942, 1869, 3942, 3942, 3942, 3942, 3942, 3942, 3942,
     1869, 1873, 1873, 3942, 1873, 1873, 1873, 1873, 1873, 1873,
     1873, 1873, 1873, 1873, 1873, 1873, 1873, 1873, 1873, 1873,
     1873, 1873, 1873, 1873, 1873, 1873, 1873, 1873, 1873, 1873,
     1873, 1873, 1873, 2257, 2257, 2257, 3942, 3942, 3942, 2257,
     2257, 3942, 3942, 3942, 2257, 3942, 3942, 3942, 3942, 2257,
     3942, 3942, 3942, 3942, 3942, 2257, 3942, 3942, 3942, 2257,
     3942, 3942, 3942, 2257, 2260, 2260, 2260, 3942, 3942, 3942,

     2260, 3942, 3942, 3942, 3942, 3942, 3942, 3942, 3942, 3942,
     2260, 3942, 3942, 3942, 3942, 3942, 2260, 3942, 3942, 3942,
     3942, 3942, 3942, 3942, 2260, 2266, 2266, 2266, 3942, 3942,
     3942, 2266, 3942, 3942, 3942, 2266, 3942, 3942, 3942, 3942,
     3942, 3942, 3942, 3942, 3942, 3942, 3942, 2266, 3942, 3942,
     3942, 3942, 3942, 3942, 3942, 2266, 1880, 1880, 1880, 3942,
     3942, 3942, 3942, 3942, 3942, 3942, 1880, 1880, 3942, 3942,
     3942, 1880, 1880, 3942, 1880, 3942, 3942, 3942, 1880, 3942,
     3942, 3942, 3942, 3942, 3942, 3942, 1880, 2268, 3942, 3942,
     3942, 3942, 3942, 3942, 2268, 3942, 3942, 3942, 2268, 2268,

     3942, 3942, 2268, 2268, 3942, 3942, 3942, 2268, 3942, 2268,
     2270, 2270, 2270, 2270, 2270, 2270, 2270, 2270, 2270, 2270,
     2270, 2270, 3942, 2270, 2270, 3942, 2270, 2270, 2270, 2270,
     2270, 2270, 2270, 2270, 2270, 2270, 2270, 2270, 2270, 2270,
     2270, 2270, 2276, 2276, 2276, 2276, 2276, 2276, 2276, 2276,
     2276, 2276, 2276, 2276, 2276, 2276, 2276, 3942, 2276, 2276,
     2276, 2276, 2276, 2276, 2276, 2276, 2276, 2276, 2276, 2276,
     2276, 2276, 2276, 2276, 1898, 1898, 1898, 3942, 3942, 3942,
     3942, 3942, 3942, 1898, 3942, 3942, 3942, 1898, 3942, 1898,
     3942, 3942, 3942, 3942, 3942, 3942, 1898, 3942, 3942, 3942,

     3942, 3942, 3942, 3942, 1898, 1299, 1299, 1299, 3942, 3942,
     3942, 3942, 3942, 3942, 3942, 3942, 3942, 3942, 3942, 3942,
     1299, 1299, 3942, 1299, 3942, 3942, 3942, 1299, 3942, 3942,
     3942, 3942, 3942, 3942, 3942, 1299, 1955, 1955, 1955, 3942,
     3942, 3942, 3942, 3942, 3942, 3942, 3942, 3942, 3942, 3942,
     3942, 1955, 3942, 3942, 1955, 3942, 3942, 3942, 1955, 3942,
     3942, 3942, 3942, 3942, 3942, 3942, 1955, 1347, 1347, 1347,
     1347, 3942, 3942, 1347, 3942, 3942, 3942, 3942, 3942, 3942,
     3942, 3942, 3942, 1347, 3942, 3942, 3942, 3942, 3942, 1347,
     3942, 3942, 3942, 3942, 3942, 3942, 1347, 1347, 2360, 2360,

     2360, 2360, 2360, 2360, 2360, 2360, 2360, 2360, 2360, 2360,
     2360, 2360, 2360, 2360, 2360, 2360, 2360, 2360, 2360, 2360,
     2360, 2360, 2360, 2360, 2360, 2360, 2360, 2360, 2360, 2360,
     1390, 1390, 1390, 1390, 1390, 3942, 1390, 1390, 1390, 3942,
     1390, 1390, 1390, 1390, 1390, 3942, 1390, 1390, 1390, 3942,
     1390, 1390, 3942, 1390, 1390, 1390, 1390, 1390, 3942, 3942,
     1390, 1390, 1394, 1394, 3942, 1394, 1394, 1394, 1394, 1394,
     1394, 1394, 1394, 1394, 1394, 1394, 1394, 1394, 1394, 1394,
     1394, 1394, 1394, 1394, 1394, 1394, 1394, 1394, 1394, 1394,
     1394, 1394, 1394, 1394, 2365, 2365, 3942, 2365, 2365, 2365,

     2365, 2365, 2365, 2365, 2365, 2365, 2365, 2365, 2365, 2365,
     2365, 2365, 2365, 2365, 2365, 2365, 2365, 2365, 2365, 3942,
     2365, 2365, 2365, 2365, 2365, 2365, 1998, 1998, 3942, 1998,
     1998, 1998, 1998, 1998, 1998, 1998, 1998, 1998, 1998, 1998,
     1998, 1998, 1998, 1998, 1998, 1998, 1998, 1998, 1998, 1998,
     1998, 1998, 1998, 1998, 1998, 1998, 1998, 1998, 2004, 2004,
     2004, 3942, 3942, 3942, 2004, 3942, 3942, 3942, 3942, 3942,
     3942, 3942, 3942, 3942, 3942, 3942, 3942, 3942, 3942, 3942,
     2004, 3942, 3942, 3942, 3942, 3942, 3942, 3942, 2004, 2371,
     2371, 2371, 3942, 3942, 3942, 3942, 3942, 3942, 3942, 3942,

     3942, 3942, 2371, 3942, 2371, 2371, 3942, 3942, 3942, 3942,
     3942, 2371, 3942, 3942, 3942, 3942, 3942, 3942, 3942, 2371,
     1407, 1407, 1407, 3942, 3942, 3942, 3942, 3942, 3942, 3942,
     3942, 3942, 3942, 1407, 3942, 1407, 1407, 3942, 3942, 3942,
     3942, 3942, 1407, 3942, 3942, 3942, 3942, 3942, 3942, 3942,
     1407, 1417, 1417, 1417, 1417, 3942, 3942, 1417, 3942, 3942,
     3942, 3942, 3942, 3942, 3942, 3942, 3942, 1417, 3942, 3942,
     3942, 3942, 3942, 1417, 3942, 3942, 3942, 3942, 3942, 3942,
     1417, 1417, 2373, 2373, 3942, 2373, 2373, 2373, 2373, 2373,
     2373, 2373, 2373, 2373, 2373, 2373, 2373, 2373, 2373, 2373,

     2373, 2373, 2373, 2373, 2373, 2373, 2373, 3942, 2373, 2373,
     2373, 2373, 2373, 2373, 1475, 3942, 3942, 3942, 1475, 1475,
     1475, 1475, 1475, 1475, 1475, 1475, 3942, 1475, 3942, 3942,
     1475, 1475, 1475, 1475, 1475, 1475, 1475, 1475, 1475, 1475,
     1475, 1475, 1475, 1475, 1475, 1475, 2385, 3942, 2385, 3942,
     3942, 3942, 3942, 3942, 3942, 2385, 3942, 2385, 3942, 3942,
     3942, 3942, 3942, 2385, 2031, 2031, 2031, 3942, 3942, 3942,
     2031, 3942, 3942, 3942, 3942, 2031, 3942, 3942, 3942, 3942,
     3942, 3942, 3942, 3942, 3942, 3942, 2031, 3942, 3942, 3942,
     3942, 3942, 3942, 3942, 2031, 2386, 2386, 2386, 3942, 3942,

     3942, 3942, 3942, 3942, 3942, 3942, 3942, 3942, 2386, 3942,
     2386, 3942, 3942, 3942, 3942, 3942, 3942, 2386, 3942, 3942,
     3942, 3942, 3942, 3942, 3942, 2386, 1490, 1490, 1490, 3942,
     3942, 3942, 1490, 3942, 3942, 3942, 3942, 3942, 3942, 3942,
     3942, 3942, 3942, 3942, 3942, 3942, 3942, 3942, 1490, 3942,
     3942, 3942, 3942, 3942, 3942, 3942, 1490, 2060, 3942, 3942,
     3942, 3942, 3942, 3942, 2060, 3942, 3942, 3942, 2060, 2060,
     3942, 3942, 2060, 2060, 3942, 3942, 3942, 2060, 3942, 2060,
     1544, 1544, 3942, 1544, 3942, 3942, 3942, 1544, 3942, 3942,
     3942, 3942, 3942, 3942, 3942, 1544, 2411, 2411, 3942, 2411,

     2411, 2411, 2411, 2411, 2411, 2411, 2411, 2411, 2411, 2411,
     2411, 2411, 2411, 2411, 2411, 2411, 2411, 2411, 2411, 2411,
     2411, 3942, 2411, 2411, 2411, 2411, 2411, 2411, 2079, 2079,
     3942, 2079, 2079, 2079, 2079, 2079, 2079, 2079, 2079, 2079,
     2079, 2079, 2079, 2079, 2079, 2079, 2079, 2079, 2079, 2079,
     2079, 2079, 2079, 2079, 2079, 2079, 2079, 2079, 2079, 2079,
     2085, 2085, 2085, 3942, 3942, 3942, 2085, 3942, 3942, 3942,
     3942, 2085, 3942, 3942, 3942, 3942, 3942, 3942, 3942, 3942,
     3942, 3942, 2085, 3942, 3942, 3942, 3942, 3942, 3942, 3942,
     2085, 2416, 2416, 2416, 3942, 3942, 3942, 3942, 3942, 3942,

     3942, 3942, 3942, 3942, 3942, 3942, 2416, 2416, 3942, 3942,
     3942, 3942, 3942, 2416, 3942, 3942, 3942, 3942, 3942, 3942,
     3942, 2416, 1594, 1594, 1594, 1594, 3942, 3942, 1594, 3942,
     3942, 3942, 3942, 3942, 3942, 3942, 3942, 3942, 1594, 3942,
     3942, 3942, 3942, 3942, 1594, 3942, 3942, 3942, 3942, 3942,
     3942, 1594, 1594, 2418, 2418, 3942, 2418, 2418, 2418, 2418,
     2418, 2418, 2418, 2418, 2418, 2418, 2418, 2418, 2418, 2418,
     2418, 2418, 2418, 2418, 2418, 2418, 2418, 2418, 3942, 2418,
     2418, 2418, 2418, 2418, 2418, 2425, 2425, 3942, 2425, 2425,
     2425, 2425, 2425, 2425, 2425, 2425, 2425, 2425, 2425, 2425,

     2425, 2425, 2425, 2425, 2425, 2425, 2425, 2425, 2425, 2425,
     3942, 2425, 2425, 2425, 2425, 2425, 2425, 2428, 2428, 3942,
     2428, 2428, 2428, 2428, 2428, 2428, 2428, 2428, 2428, 2428,
     2428, 2428, 2428, 2428, 2428, 2428, 2428, 2428, 2428, 2428,
     2428, 2428, 3942, 2428, 2428, 2428, 2428, 2428, 2428, 2431,
     2431, 3942, 2431, 2431, 2431, 2431, 2431, 2431, 2431, 2431,
     2431, 2431, 2431, 2431, 2431, 2431, 2431, 2431, 2431, 2431,
     2431, 2431, 2431, 2431, 3942, 2431, 2431, 2431, 2431, 2431,
     2431, 2434, 2434, 3942, 2434, 2434, 2434, 2434, 2434, 2434,
     2434, 2434, 2434, 2434, 2434, 2434, 2434, 2434, 2434, 2434,

     2434, 2434, 2434, 2434, 2434, 2434, 3942, 2434, 2434, 2434,
     2434, 2434, 2434, 1638, 1638, 3942, 1638, 1638, 3942, 1638,
     1638, 1638, 3942, 1638, 1638, 1638, 1638, 1638, 3942, 1638,
     1638, 1638, 1638, 1638, 1638, 1638, 1638, 1638, 1638, 1638,
     1638, 3942, 3942, 1638, 1638, 2440, 2440, 3942, 2440, 2440,
     2440, 2440, 2440, 2440, 2440, 2440, 2440, 2440, 2440, 2440,
     2440, 2440, 2440, 2440, 2440, 2440, 2440, 2440, 2440, 2440,
     3942, 2440, 2440, 2440, 2440, 2440, 2440, 2453, 2453, 2453,
     2453, 2453, 2453, 2453, 2453, 2453, 2453, 2453, 2453, 2453,
     2453, 2453, 2453, 3942, 2453, 2453, 2453, 2453, 2453, 2453,

     3942, 2453, 2453, 2453, 2453, 2453, 2453, 2453, 2453, 2141,
     2141, 2141, 3942, 3942, 3942, 3942, 3942, 3942, 3942, 2141,
     3942, 2141, 3942, 3942, 2141, 3942, 3942, 3942, 3942, 3942,
     3942, 2141, 3942, 3942, 3942, 3942, 3942, 3942, 3942, 2141,
     2145, 2145, 2145, 3942, 3942, 3942, 3942, 3942, 3942, 3942,
     3942, 3942, 3942, 3942, 3942, 2145, 3942, 3942, 3942, 3942,
     3942, 3942, 2145, 3942, 3942, 3942, 3942, 3942, 3942, 3942,
     2145, 1728, 1728, 1728, 1728, 3942, 3942, 1728, 3942, 3942,
     3942, 3942, 3942, 3942, 3942, 3942, 3942, 1728, 3942, 3942,
     3942, 3942, 3942, 1728, 3942, 3942, 3942, 3942, 3942, 3942,

     1728, 1728, 1746, 1746, 3942, 1746, 1746, 1746, 1746, 1746,
     1746, 1746, 1746, 1746, 3942, 1746, 1746, 3942, 1746, 1746,
     1746, 1746, 1746, 1746, 3942, 1746, 1746, 3942, 1746, 1746,
     1746, 1746, 1746, 1746, 2176, 2176, 2176, 3942, 3942, 3942,
     3942, 3942, 3942, 2176, 3942, 3942, 2176, 3942, 3942, 2176,
     2176, 2176, 2176, 3942, 3942, 3942, 2176, 3942, 3942, 3942,
     3942, 3942, 3942, 3942, 2176, 2178, 2178, 2178, 3942, 3942,
     3942, 3942, 3942, 3942, 2178, 3942, 3942, 3942, 3942, 3942,
     2178, 2178, 3942, 3942, 3942, 3942, 3942, 2178, 3942, 3942,
     3942, 3942, 3942, 3942, 3942, 2178, 1182, 1182, 1182, 3942,

     3942, 3942, 3942, 3942, 3942, 1182, 3942, 3942, 3942, 3942,
     3942, 1182, 1182, 3942, 3942, 3942, 3942, 3942, 1182, 3942,
     3942, 3942, 3942, 3942, 3942, 3942, 1182, 1192, 3942, 3942,
     3942, 1192, 3942, 1192, 3942, 3942, 1192, 3942, 3942, 3942,
     1192, 3942, 3942, 3942, 3942, 3942, 3942, 3942, 1192, 2195,
     2195, 2195, 2195, 3942, 3942, 2195, 3942, 3942, 3942, 3942,
     3942, 3942, 3942, 3942, 3942, 2195, 3942, 3942, 3942, 3942,
     3942, 2195, 3942, 3942, 3942, 3942, 3942, 3942, 2195, 2195,
     2482, 2482, 2482, 3942, 3942, 3942, 2482, 3942, 3942, 3942,
     3942, 3942, 3942, 3942, 3942, 3942, 3942, 3942, 3942, 3942,

     3942, 3942, 2482, 3942, 3942, 3942, 3942, 3942, 3942, 3942,
     2482, 2486, 2486, 2486, 3942, 3942, 3942, 3942, 3942, 3942,
     3942, 3942, 3942, 3942, 3942, 3942, 2486, 2486, 3942, 3942,
     3942, 3942, 3942, 2486, 3942, 3942, 3942, 3942, 3942, 3942,
     3942, 2486, 1813, 1813, 1813, 3942, 3942, 3942, 3942, 3942,
     3942, 3942, 3942, 3942, 3942, 1813, 3942, 1813, 1813, 3942,
     3942, 3942, 3942, 3942, 1813, 3942, 3942, 3942, 3942, 3942,
     3942, 3942, 1813, 2197, 2197, 2197, 3942, 3942, 3942, 3942,
     3942, 3942, 3942, 3942, 3942, 3942, 3942, 3942, 2197, 2197,
     3942, 3942, 3942, 3942, 3942, 2197, 3942, 3942, 3942, 3942,

     3942, 3942, 3942, 2197, 1817, 1817, 1817, 3942, 3942, 3942,
     1817, 3942, 3942, 3942, 3942, 3942, 3942, 3942, 3942, 3942,
     3942, 3942, 3942, 3942, 3942, 3942, 1817, 3942, 3942, 3942,
     3942, 3942, 3942, 3942, 1817, 2493, 2493, 3942, 2493, 2493,
     2493, 2493, 2493, 2493, 2493, 2493, 2493, 2493, 2493, 2493,
     2493, 2493, 2493, 2493, 2493, 2493, 2493, 2493, 2493, 2493,
     3942, 2493, 2493, 2493, 2493, 2493, 2493, 2257, 2257, 2257,
     3942, 3942, 3942, 2257, 2257, 3942, 3942, 3942, 2257, 3942,
     3942, 3942, 3942, 2257, 3942, 3942, 3942, 3942, 3942, 2257,
     3942, 3942, 3942, 2257, 3942, 3942, 3942, 2257, 2545, 2545,

     2545, 3942, 3942, 3942, 3942, 3942, 3942, 3942, 3942, 3942,
     3942, 3942, 3942, 2545, 2545, 3942, 2545, 3942, 3942, 3942,
     2545, 3942, 3942, 3942, 3942, 3942, 3942, 3942, 2545, 2260,
     2260, 2260, 3942, 3942, 3942, 2260, 3942, 3942, 3942, 3942,
     3942, 3942, 3942, 3942, 3942, 3942, 3942, 3942, 3942, 3942,
     3942, 2260, 3942, 3942, 3942, 3942, 3942, 3942, 3942, 2260,
     2549, 2549, 2549, 3942, 3942, 3942, 3942, 3942, 3942, 3942,
     2549, 3942, 3942, 3942, 3942, 2549, 2549, 3942, 2549, 3942,
     3942, 3942, 2549, 3942, 3942, 3942, 3942, 3942, 3942, 3942,
     2549, 2266, 2266, 2266, 3942, 3942, 3942, 2266, 3942, 3942,

     3942, 2266, 3942, 3942, 3942, 3942, 3942, 3942, 3942, 3942,
     3942, 3942, 3942, 2266, 3942, 3942, 3942, 3942, 3942, 3942,
     3942, 2266, 2552, 3942, 3942, 3942, 2552, 3942, 3942, 3942,
     3942, 2552, 3942, 3942, 3942, 3942, 3942, 3942, 2552, 3942,
     3942, 3942, 3942, 3942, 3942, 3942, 2552, 2268, 3942, 3942,
     3942, 3942, 3942, 3942, 2268, 3942, 3942, 3942, 2268, 2268,
     3942, 3942, 2268, 2268, 3942, 3942, 3942, 2268, 3942, 2268,
     2553, 2553, 2553, 2553, 2553, 2553, 2553, 2553, 2553, 2553,
     2553, 2553, 2553, 2553, 2553, 2553, 2553, 2553, 2553, 2553,
     2553, 2553, 2553, 2553, 2553, 2553, 2553, 2553, 2553, 2553,

     2553, 2553, 2555, 2555, 3942, 2555, 2555, 2555, 2555, 2555,
     2555, 2555, 2555, 2555, 2555, 2555, 2555, 2555, 2555, 2555,
     2555, 2555, 2555, 2555, 2555, 2555, 2555, 2555, 2555, 2555,
     2555, 2555, 2555, 2555, 2558, 2558, 2558, 3942, 3942, 3942,
     3942, 3942, 3942, 2558, 3942, 3942, 3942, 2558, 3942, 2558,
     3942, 3942, 3942, 3942, 3942, 3942, 2558, 3942, 3942, 3942,
     3942, 3942, 3942, 3942, 2558, 1898, 1898, 1898, 3942, 3942,
     3942, 3942, 3942, 3942, 1898, 3942, 3942, 3942, 1898, 3942,
     1898, 3942, 3942, 3942, 3942, 3942, 3942, 1898, 3942, 3942,
     3942, 3942, 3942, 3942, 3942, 1898, 1299, 1299, 1299, 3942,

     3942, 3942, 3942, 3942, 3942, 3942, 3942, 3942, 3942, 3942,
     3942, 1299, 1299, 3942, 1299, 3942, 3942, 3942, 1299, 3942,
     3942, 3942, 3942, 3942, 3942, 3942, 1299, 2360, 2360, 2360,
     2360, 2360, 2360, 2360, 2360, 2360, 2360, 2360, 2360, 2360,
     2360, 2360, 2360, 2360, 2360, 2360, 2360, 2360, 2360, 2360,
     2360, 2360, 2360, 2360, 2360, 2360, 2360, 2360, 2360, 1390,
     1390, 1390, 1390, 1390, 3942, 1390, 1390, 1390, 3942, 1390,
     1390, 1390, 1390, 1390, 3942, 1390, 1390, 1390, 3942, 1390,
     1390, 3942, 1390, 1390, 1390, 1390, 1390, 3942, 3942, 1390,
     1390, 1394, 1394, 3942, 1394, 1394, 1394, 1394, 1394, 1394,

     1394, 1394, 1394, 1394, 1394, 1394, 1394, 1394, 1394, 1394,
     1394, 1394, 1394, 1394, 1394, 1394, 1394, 1394, 1394, 1394,
     1394, 1394, 1394, 2639, 2639, 3942, 2639, 2639, 2639, 2639,
     2639, 2639, 2639, 2639, 2639, 2639, 2639, 2639, 2639, 2639,
     2639, 2639, 2639, 2639, 2639, 2639, 2639, 2639, 3942, 2639,
     2639, 2639, 2639, 2639, 2639, 2642, 2642, 2642, 2642, 2642,
     2642, 2642, 2642, 2642, 2642, 2642, 2642, 2642, 2642, 2642,
     2642, 3942, 2642, 2642, 2642, 2642, 2642, 2642, 3942, 2642,
     2642, 2642, 2642, 2642, 2642, 2642, 2642, 2371, 2371, 2371,
     3942, 3942, 3942, 3942, 3942, 3942, 3942, 3942, 3942, 3942,

     2371, 3942, 2371, 2371, 3942, 3942, 3942, 3942, 3942, 2371,
     3942, 3942, 3942, 3942, 3942, 3942, 3942, 2371, 1407, 1407,
     1407, 3942, 3942, 3942, 3942, 3942, 3942, 3942, 3942, 3942,
     3942, 1407, 3942, 1407, 1407, 3942, 3942, 3942, 3942, 3942,
     1407, 3942, 3942, 3942, 3942, 3942, 3942, 3942, 1407, 2644,
     2644, 3942, 2644, 2644, 2644, 2644, 2644, 2644, 2644, 2644,
     2644, 2644, 2644, 2644, 2644, 2644, 2644, 2644, 2644, 2644,
     2644, 2644, 2644, 2644, 3942, 2644, 2644, 2644, 2644, 2644,
     2644, 1475, 3942, 3942, 3942, 1475, 1475, 1475, 1475, 1475,
     1475, 1475, 1475, 3942, 1475, 3942, 3942, 1475, 1475, 1475,

     1475, 1475, 1475, 1475, 1475, 1475, 1475, 1475, 1475, 1475,
     1475, 1475, 1475, 2385, 3942, 2385, 3942, 3942, 3942, 3942,
     3942, 3942, 2385, 3942, 2385, 3942, 3942, 3942, 3942, 3942,
     2385, 2386, 2386, 2386, 3942, 3942, 3942, 3942, 3942, 3942,
     3942, 3942, 3942, 3942, 2386, 3942, 2386, 3942, 3942, 3942,
     3942, 3942, 3942, 2386, 3942, 3942, 3942, 3942, 3942, 3942,
     3942, 2386, 1544, 1544, 3942, 1544, 3942, 3942, 3942, 1544,
     3942, 3942, 3942, 3942, 3942, 3942, 3942, 1544, 2672, 2672,
     3942, 2672, 2672, 2672, 2672, 2672, 2672, 2672, 2672, 2672,
     2672, 2672, 2672, 2672, 2672, 2672, 2672, 2672, 2672, 2672,

     2672, 2672, 2672, 3942, 2672, 2672, 2672, 2672, 2672, 2672,
     2416, 2416, 2416, 3942, 3942, 3942, 3942, 3942, 3942, 3942,
     3942, 3942, 3942, 3942, 3942, 2416, 2416, 3942, 3942, 3942,
     3942, 3942, 2416, 3942, 3942, 3942, 3942, 3942, 3942, 3942,
     2416, 2675, 2675, 3942, 2675, 2675, 2675, 2675, 2675, 2675,
     2675, 2675, 2675, 2675, 2675, 2675, 2675, 2675, 2675, 2675,
     2675, 2675, 2675, 2675, 2675, 2675, 3942, 2675, 2675, 2675,
     2675, 2675, 2675, 2678, 2678, 3942, 2678, 2678, 2678, 2678,
     2678, 2678, 2678, 2678, 2678, 2678, 2678, 2678, 2678, 2678,
     2678, 2678, 2678, 2678, 2678, 2678, 2678, 2678, 3942, 2678,

     2678, 2678, 2678, 2678, 2678, 2680, 2680, 3942, 2680, 2680,
     2680, 2680, 2680, 2680, 2680, 2680, 2680, 2680, 2680, 2680,
     2680, 2680, 2680, 2680, 2680, 2680, 2680, 2680, 2680, 2680,
     3942, 2680, 2680, 2680, 2680, 2680, 2680, 2682, 2682, 3942,
     2682, 2682, 2682, 2682, 2682, 2682, 2682, 2682, 2682, 2682,
     2682, 2682, 2682, 2682, 2682, 2682, 2682, 2682, 2682, 2682,
     2682, 2682, 3942, 2682, 2682, 2682, 2682, 2682, 2682, 2684,
     2684, 3942, 2684, 2684, 2684, 2684, 2684, 2684, 2684, 2684,
     2684, 2684, 2684, 2684, 2684, 2684, 2684, 2684, 2684, 2684,
     2684, 2684, 2684, 2684, 3942, 2684, 2684, 2684, 2684, 2684,

     2684, 1638, 1638, 3942, 1638, 1638, 1638, 1638, 1638, 1638,
     3942, 1638, 1638, 1638, 1638, 1638, 3942, 1638, 1638, 1638,
     1638, 1638, 1638, 1638, 1638, 1638, 1638, 1638, 1638, 3942,
     3942, 1638, 1638, 2688, 2688, 3942, 2688, 2688, 2688, 2688,
     2688, 2688, 2688, 2688, 2688, 2688, 2688, 2688, 2688, 2688,
     2688, 2688, 2688, 2688, 2688, 2688, 2688, 2688, 3942, 2688,
     2688, 2688, 2688, 2688, 2688, 2692, 2692, 2692, 2692, 2692,
     2692, 2692, 2692, 2692, 2692, 2692, 2692, 2692, 2692, 2692,
     2692, 3942, 2692, 2692, 2692, 2692, 2692, 2692, 3942, 2692,
     2692, 2692, 2692, 2692, 2692, 2692, 2692, 1719, 3942, 3942,

     3942, 3942, 3942, 1719, 1719, 3942, 3942, 3942, 1719, 3942,
     3942, 3942, 3942, 3942, 3942, 3942, 3942, 3942, 3942, 1719,
     3942, 3942, 3942, 3942, 3942, 3942, 3942, 1719, 1746, 1746,
     3942, 1746, 1746, 1746, 1746, 1746, 1746, 1746, 1746, 1746,
     3942, 1746, 1746, 3942, 1746, 1746, 1746, 1746, 1746, 1746,
     3942, 1746, 1746, 3942, 1746, 1746, 1746, 1746, 1746, 1746,
     2713, 2713, 2713, 2713, 2713, 2713, 2713, 2713, 2713, 2713,
     2713, 2713, 2713, 2713, 2713, 2713, 3942, 2713, 2713, 2713,
     2713, 2713, 2713, 3942, 2713, 2713, 2713, 2713, 2713, 2713,
     2713, 2713, 1182, 1182, 1182, 3942, 3942, 3942, 3942, 3942,

     3942, 1182, 3942, 3942, 3942, 3942, 3942, 1182, 1182, 3942,
     3942, 3942, 3942, 3942, 1182, 3942, 3942, 3942, 3942, 3942,
     3942, 3942, 1182, 1192, 3942, 3942, 3942, 1192, 3942, 1192,
     3942, 3942, 1192, 3942, 3942, 3942, 1192, 3942, 3942, 3942,
     3942, 3942, 3942, 3942, 1192, 2482, 2482, 2482, 3942, 3942,
     3942, 2482, 3942, 3942, 3942, 3942, 3942, 3942, 3942, 3942,
     3942, 3942, 3942, 3942, 3942, 3942, 3942, 2482, 3942, 3942,
     3942, 3942, 3942, 3942, 3942, 2482, 2486, 2486, 2486, 3942,
     3942, 3942, 3942, 3942, 3942, 3942, 3942, 3942, 3942, 3942,
     3942, 2486, 2486, 3942, 3942, 3942, 3942, 3942, 2486, 3942,

     3942, 3942, 3942, 3942, 3942, 3942, 2486, 1813, 1813, 1813,
     3942, 3942, 3942, 3942, 3942, 3942, 3942, 3942, 3942, 3942,
     1813, 3942, 1813, 1813, 3942, 3942, 3942, 3942, 3942, 1813,
     3942, 3942, 3942, 3942, 3942, 3942, 3942, 1813, 2257, 2257,
     2257, 3942, 3942, 3942, 2257, 3942, 3942, 3942, 3942, 3942,
     3942, 3942, 3942, 3942, 2257, 3942, 3942, 3942, 3942, 3942,
     2257, 3942, 3942, 3942, 3942, 3942, 3942, 3942, 2257, 2545,
     2545, 2545, 3942, 3942, 3942, 3942, 3942, 3942, 3942, 3942,
     3942, 3942, 3942, 3942, 2545, 2545, 3942, 2545, 3942, 3942,
     3942, 2545, 3942, 3942, 3942, 3942, 3942, 3942, 3942, 2545,

     2785, 3942, 3942, 3942, 3942, 3942, 3942, 2785, 3942, 3942,
     3942, 2785, 2785, 3942, 3942, 2785, 2785, 3942, 3942, 3942,
     2785, 3942, 2785, 2549, 2549, 2549, 3942, 3942, 3942, 3942,
     3942, 3942, 3942, 2549, 3942, 3942, 3942, 3942, 2549, 2549,
     3942, 2549, 3942, 3942, 3942, 2549, 3942, 3942, 3942, 3942,
     3942, 3942, 3942, 2549, 2552, 3942, 3942, 3942, 2552, 3942,
     3942, 3942, 3942, 2552, 3942, 3942, 3942, 3942, 3942, 3942,
     2552, 3942, 3942, 3942, 3942, 3942, 3942, 3942, 2552, 2553,
     2553, 2553, 2553, 2553, 2553, 2553, 2553, 2553, 2553, 2553,
     2553, 2553, 2553, 2553, 2553, 2553, 2553, 2553, 2553, 2553,

     2553, 2553, 2553, 2553, 2553, 2553, 2553, 2553, 2553, 2553,
     2553, 2555, 2555, 3942, 2555, 2555, 2555, 2555, 2555, 2555,
     2555, 2555, 2555, 2555, 2555, 2555, 2555, 2555, 2555, 2555,
     2555, 2555, 2555, 2555, 2555, 2555, 2555, 2555, 2555, 2555,
     2555, 2555, 2555, 2558, 2558, 2558, 3942, 3942, 3942, 3942,
     3942, 3942, 2558, 3942, 3942, 3942, 2558, 3942, 2558, 3942,
     3942, 3942, 3942, 3942, 3942, 2558, 3942, 3942, 3942, 3942,
     3942, 3942, 3942, 2558, 1898, 1898, 1898, 3942, 3942, 3942,
     3942, 3942, 3942, 1898, 3942, 3942, 3942, 1898, 3942, 1898,
     3942, 3942, 3942, 3942, 3942, 3942, 1898, 3942, 3942, 3942,

     3942, 3942, 3942, 3942, 1898, 1299, 1299, 1299, 3942, 3942,
     3942, 3942, 3942, 3942, 3942, 3942, 3942, 3942, 3942, 3942,
     1299, 1299, 3942, 1299, 3942, 3942, 3942, 1299, 3942, 3942,
     3942, 3942, 3942, 3942, 3942, 1299, 1390, 1390, 1390, 1390,
     1390, 3942, 1390, 1390, 1390, 3942, 1390, 1390, 1390, 1390,
     1390, 3942, 1390, 1390, 1390, 3942, 1390, 1390, 3942, 1390,
     1390, 1390, 1390, 1390, 3942, 3942, 1390, 1390, 1394, 1394,
     3942, 1394, 1394, 1394, 1394, 1394, 1394, 1394, 1394, 1394,
     1394, 1394, 1394, 1394, 1394, 1394, 1394, 1394, 1394, 1394,
     1394, 1394, 1394, 1394, 1394, 1394, 1394, 1394, 1394, 1394,

     1407, 1407, 1407, 3942, 3942, 3942, 3942, 3942, 3942, 3942,
     3942, 3942, 3942, 1407, 3942, 1407, 1407, 3942, 3942, 3942,
     3942, 3942, 1407, 3942, 3942, 3942, 3942, 3942, 3942, 3942,
     1407, 1469, 1469, 1469, 3942, 3942, 3942, 3942, 3942, 3942,
     3942, 3942, 3942, 3942, 3942, 3942, 1469, 3942, 3942, 3942,
     3942, 3942, 3942, 1469, 3942, 3942, 3942, 3942, 3942, 3942,
     3942, 1469, 1475, 3942, 3942, 3942, 1475, 1475, 1475, 1475,
     1475, 1475, 1475, 1475, 3942, 1475, 3942, 3942, 1475, 1475,
     1475, 1475, 1475, 1475, 1475, 1475, 1475, 1475, 1475, 1475,
     1475, 1475, 1475, 1475, 1544, 1544, 3942, 1544, 3942, 3942,

     3942, 1544, 3942, 3942, 3942, 3942, 3942, 3942, 3942, 1544,
     2085, 2085, 2085, 3942, 3942, 3942, 2085, 3942, 3942, 3942,
     3942, 2085, 3942, 3942, 3942, 3942, 3942, 3942, 3942, 3942,
     3942, 3942, 2085, 3942, 3942, 3942, 3942, 3942, 3942, 3942,
     2085, 2888, 2888, 3942, 2888, 2888, 3942, 2888, 2888, 2888,
     2888, 2888, 2888, 2888, 2888, 2888, 2888, 2888, 2888, 2888,
     2888, 2888, 2888, 2888, 2888, 2888, 2888, 2888, 2888, 2888,
     2888, 2888, 2888, 1746, 1746, 3942, 1746, 1746, 1746, 1746,
     1746, 1746, 1746, 1746, 1746, 3942, 1746, 1746, 3942, 1746,
     1746, 1746, 1746, 1746, 1746, 3942, 1746, 1746, 3942, 1746,

     1746, 1746, 1746, 1746, 1746, 1182, 1182, 1182, 3942, 3942,
     3942, 3942, 3942, 3942, 1182, 3942, 3942, 3942, 3942, 3942,
     1182, 1182, 3942, 3942, 3942, 3942, 3942, 1182, 3942, 3942,
     3942, 3942, 3942, 3942, 3942, 1182, 2195, 2195, 2195, 2195,
     3942, 3942, 2195, 3942, 3942, 3942, 3942, 3942, 3942, 3942,
     3942, 3942, 2195, 3942, 3942, 3942, 3942, 3942, 2195, 3942,
     3942, 3942, 3942, 3942, 3942, 2195, 2195, 1813, 1813, 1813,
     3942, 3942, 3942, 3942, 3942, 3942, 3942, 3942, 3942, 3942,
     1813, 3942, 1813, 1813, 3942, 3942, 3942, 3942, 3942, 1813,
     3942, 3942, 3942, 3942, 3942, 3942, 3942, 1813, 2257, 2257,

     2257, 3942, 3942, 3942, 2257, 3942, 3942, 3942, 3942, 3942,
     3942, 3942, 3942, 3942, 3942, 3942, 3942, 3942, 3942, 3942,
     2257, 3942, 3942, 3942, 3942, 3942, 3942, 3942, 2257, 2785,
     3942, 3942, 3942, 3942, 3942, 3942, 2785, 3942, 3942, 3942,
     2785, 2785, 3942, 3942, 2785, 2785, 3942, 3942, 3942, 2785,
     3942, 2785, 3255, 3255, 3255, 3255, 3255, 3255, 3255, 3255,
     3255, 3255, 3255, 3255, 3255, 3255, 3255, 3255, 3942, 3255,
     3255, 3255, 3255, 3255, 3255, 3942, 3255, 3255, 3255, 3255,
     3255, 3255, 3255, 3255, 3437, 3437, 3437, 3437, 3437, 3437,
     3437, 3437, 3437, 3437, 3437, 3437, 3437, 3437, 3437, 3437,

     3942, 3437, 3437, 3437, 3437, 3437, 3437, 3942, 3437, 3437,
     3437, 3437, 3437, 3437, 3437, 3437, 3570, 3570, 3570, 3942,
     3942, 3942, 3942, 3942, 3942, 3942, 3942, 3942, 3942, 3942,
     3942, 3570, 3942, 3942, 3942, 3570, 3942, 3942, 3570, 3942,
     3942, 3942, 3942, 3942, 3942, 3942, 3570,  261, 3942, 3942,
     3942, 3942, 3942, 3942, 3942, 3942, 3942, 3942, 3942, 3942,
     3942, 3942, 3942, 3942, 3942, 3942, 3942, 3942, 3942, 3942,
     3942, 3942, 3942, 3942, 3942, 3942, 3942, 3942, 3942, 3942,
     3942, 3942, 3942, 3942, 3942, 3942, 3942, 3942, 3942, 3942,
     3942, 3942, 3942, 3942, 3942, 3942, 3942, 3942, 3942, 3942,

     3942, 3942, 3942, 3942, 3942, 3942, 3942, 3942, 3942, 3942,
     3942, 3942, 3942, 3942, 3942, 3942, 3942, 3942, 3942, 3942,
     3942, 3942, 3942, 3942, 3942, 3942, 3942, 3942, 3942, 3942,
     3942, 3942
    } ;

static yyconst flex_int16_t yy_chk[29933] =
    {   0,
        0,    0,    1,    0,    2,    0,    1,    1,    2,    2,
      400,    1,    0,    2,  400,  267,  277,  277,    0,    1,
      267,    2,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,

        3,    3,    3,    3,    3,    3,    5,    5,    5,    5,
      276,    5,    5,  399,  399,  276,    5,    6,    6,    6,
        6,   19,    6,    6,    5,   19,   19,    6,  298,  667,
       19,   19,   19,  298,  287,    6,   33,  287,   19,  311,
       33,   33,  565,  565,  311,   33,   19,   83,   19,  329,
       33,   83,   83,   33,  329,  269,   83,    5,  269,  333,
       33,  686,  333,  667,   83,  686,  269, 2410,    6,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,

        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,

        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,

       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,

       13,   13,   13,   13,   13,   15,  442,   16,  339,   15,
       15,   16,   16,  339,   15,  754,   16,  290,  290,  290,
      290,   20,   15,  348,   16,   20,   20,  316,  348,  754,
       20,   20,   20,  316,   43,   43,   43,   43,   20,   43,
       43,  290,  316, 1276,   43,  356,   20, 1276,   20,  442,
      356,  761,   43,  761,   15, 2411,   16,   17,   17,   17,
       17,   17,   17,   17,   17,   17,   17,   17,   17,   17,
       17,   17,   17,   17,   17,   17,   17,   17,   17,   17,
       17,   17,   17,   17,   17,   17,   17,   17,   17,   17,
       17,   17,   17,   17,   17,   17,   17,   17,   17,   17,

       17,   17,   17,   17,   17,   17,   17,   17,   17,   17,
       17,   17,   17,   17,   17,   17,   17,   17,   17,   17,
       17,   17,   17,   17,   17,   17,   17,   17,   17,   17,
       17,   17,   17,   17,   17,   17,   17,   17,   17,   17,
       17,   21,   21,   21,   21,   21,   21,   21,   21,   21,
       21,   21,   21,   21,   21,   21,   21,   21,   21,   21,
       21,   21,   21,   21,   21,   21,   21,   21,   21,   21,
       21,   21,   21,   21,   21,   21,   21,   21,   21,   21,
       21,   21,   21,   21,   21,   21,   21,   21,   21,   21,
       21,   21,   21,   21,   21,   21,   21,   21,   21,   21,

       21,   21,   21,   21,   21,   21,   21,   21,   21,   21,
       21,   21,   21,   21,   21,   21,   21,   21,   21,   21,
       21,   21,   21,   21,   21,   23,  505,   24,  376,   23,
       23,   24,   24,  376,   23,  505,   24,  296,  296,  296,
      296,   34,   23,   37,   24,   34,   34,   37,   37, 1105,
       34,  369,   37,  378,  369,   34,  378,   84,   34,  391,
       37,   84,   84, 1105,  391,   34,   84, 1543,   37, 1543,
      281,  281,  281,  281,   84, 1105,   23,  281,   24,   25,
       25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
       25,   25,   25,   25,   25,   25,   25,   25,   25,   25,

       25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
       25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
       25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
       25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
       25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
       25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
       25,   25,   25,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,

       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   29,   29,   29,
       29,  405,   29,   29, 2417,  409,  405,   29,   30,   30,
       30,   30,  441,   30,   30,   29,  409,  441,   30,   31,
      456, 1483,  461,   31,   31,  456,   30,  461,   31,   31,
       32,  317, 1260,   31,   32,   32,   31,  317,  528,   32,
       32,  528, 1260,   31,   32,  476,  317,   32,   38,  536,

      476,  483,   38,   38,   32, 1483,  483,   38,   49,  489,
       29, 1131,   49,   49,  489,   38,   29,   49,   49,   49,
     1131,   30,   29,   38, 1544,   49, 1544,   30,  271,  271,
      271,  271,  317,   30,   44,   44,   44,   44,  496,   44,
       44, 1552,  552,  496,   44,  552,  271,   31,  288,  288,
      288,  288,   44,  536,  561,  288, 1552,  561,   32,   35,
       35,   35,   35,   35,   35,   35,   35,   35,   35,   35,
       35,   35,   35,   35,   35,   35,   35,   35,   35,   35,
       35,   35,   35,   35,   35,   35,   35,   35,   35,   35,
       35,   35,   35,   35,   35,   35,   35,   35,   35,   35,

       35,   35,   35,   35,   35,   35,   35,   35,   35,   35,
       35,   35,   35,   35,   35,   35,   35,   35,   35,   35,
       35,   35,   35,   35,   35,   35,   35,   35,   35,   35,
       35,   35,   35,   35,   35,   35,   35,   35,   35,   35,
       35,   35,   35,   39,   39,   39,   39,   39,   39,   39,
       39,   39,   39,   39,   39,   39,   39,   39,   39,   39,
       39,   39,   39,   39,   39,   39,   39,   39,   39,   39,
       39,   39,   39,   39,   39,   39,   39,   39,   39,   39,
       39,   39,   39,   39,   39,   39,   39,   39,   39,   39,
       39,   39,   39,   39,   39,   39,   39,   39,   39,   39,

       39,   39,   39,   39,   39,   39,   39,   39,   39,   39,
       39,   39,   39,   39,   39,   39,   39,   39,   39,   39,
       39,   39,   39,   39,   39,   39,   39,   41,   41,   41,
       41,   41,   41,   41,   41,   41,   41,   41,   41,   41,
       41,   41,   41,   41,   41,   41,   41,   41,   41,   41,
       41,   41,   41,   41,   41,   41,   41,   41,   41,   41,
       41,   41,   41,   41,   41,   41,   41,   41,   41,   41,
       41,   41,   41,   41,   41,   41,   41,   41,   41,   41,
       41,   41,   41,   41,   41,   41,   41,   41,   41,   41,
       41,   41,   41,   41,   41,   41,   41,   41,   41,   41,

       41,   41,   41,   41,   41,   41,   41,   41,   41,   41,
       41,   45, 2418,   46,  513,   45,   45,   46,   46,  513,
       45,   45,   46,   46, 1176,   45,  520,   46,   45,  397,
       46,  520,  397, 1176,   45,   45,   46,   46,   47,   47,
       47,   47,  530,   47,   47,  597,  554,  530,   47,   47,
       47,  554,  599,   47,  584,  584,   47,   48,   48,   48,
       48,  564,   48,   48, 2421,  573,  564,   48,   48,   48,
      573, 2425,   48,   50,  579,   48,   51,   50,   50,  579,
       51,   51,   50,   50,   50,   51,  397,  397,  600,   45,
       50,   46,   52,   51,   55,  597,   52,   52,   55,   55,

       51,   52,  599,   55,   55,  272,  272,  272,  272,   52,
     1537,   55,  402,  402,  402,  402,   52,   56,   55,   55,
      101,   56,   56,  272,  101,  101,   56,   56, 1537,  101,
       85,   85, 2428,   85,   56,   85,   85,  101,  600,  588,
       85,   56,   56,   85,  588,  596,   86,   86,   85,   86,
      596,   86,   86, 2431,   51, 2434,   86,  589,  589,   86,
      292,  292,  292,  292,   86,  724,  745,  292,  724,  745,
       52,   53,   53,   53,   53,   53,   53,   53,   53,   53,
       53,   53,   53,   53,   53,   53,   53,   53,   53,   53,
       53,   53,   53,   53,   53,   53,   53,   53,   53,   53,

       53,   53,   53,   53,   53,   53,   53,   53,   53,   53,
       53,   53,   53,   53,   53,   53,   53,   53,   53,   53,
       53,   53,   53,   53,   53,   53,   53,   53,   53,   53,
       53,   53,   53,   53,   53,   53,   53,   53,   53,   53,
       53,   53,   53,   53,   53,   53,   53,   53,   53,   53,
       53,   53,   53,   53,   53,   57, 1005, 1005,   58,   57,
       57,  601,   58,   58,   57,  990, 2439,   58,   59,   59,
       59,   59,   57,   59,   59,   58,  591,  758,   59,  591,
      758,  990,   60,   60,   60,   60,   59,   60,   60,  591,
      549, 2440,   60,  549,   59, 1547,  549, 1547,   59,  560,

       60, 1186,  560, 2443,   57,  560,   57,   58,   60,   58,
     1186,  601,   60,   61,   61,   61,   61,  614,   61,   61,
     1753,  603,  614,   61,   62,   62,   62,   62,   73,   62,
       62,   61,   73,   73,   62,  626, 2444,   73, 1547,   61,
      626,  602,   62,   61,  634,   73, 1753,   59,   59,  634,
       62,   74,  645,  602,   62,   74,   74,  645,  602, 2156,
       74,   60,   60, 1862,   63,   63,   63,   63,   74,   63,
       63,  603,   75,  653,   63,  663,   75,   75,  653, 1862,
      663,   75,   63, 2156,   75,  278,  278,  278,  278,   75,
       63,  602,   61,   61,   63,   64,   64,   64,   64, 1370,

       64,   64,  278,   62,   62,   64,   76,   73, 1370,  278,
       76,   76,  683,   64,  664,   76,  664,  683,   76, 1120,
     1120,   64,   75,   76,   91,   64,  696, 1485,   91,   91,
       74,  696,  664,   91,   91,   91,  291,  291,  291,  291,
     1806,   91,   92,   63,   63,   95,   92,   92, 1806,   95,
       95,   92,   92,   92,   95, 1846,   76, 1132,  698,   92,
      291, 1485,   95,  698,  278, 1846,  396,  396,  396,  396,
       95, 1132,   95,  396,   64,   64,   65,   65,   65,   65,
       65,   65,   65,   65,   65,   65,   65,   65,   65,   65,
       65,   65,   65,   65,   65,   65,   65,   65,   65,   65,

       65,   65,   65,   65,   65,   65,   65,   65,   65,   65,
       65,   65,   65,   65,   65,   65,   65,   65,   65,   65,
       65,   65,   65,   65,   65,   65,   65,   65,   65,   65,
       65,   65,   65,   65,   65,   65,   65,   65,   65,   65,
       65,   65,   65,   65,   65,   65,   65,   65,   65,   65,
       65,   65,   65,   65,   65,   65,   65,   65,   65,   65,
       67,   67,   67,   67,   67,   67,   67,   67,   67,   67,
       67,   67,   67,   67,   67,   67,   67,   67,   67,   67,
       67,   67,   67,   67,   67,   67,   67,   67,   67,   67,
       67,   67,   67,   67,   67,   67,   67,   67,   67,   67,

       67,   67,   67,   67,   67,   67,   67,   67,   67,   67,
       67,   67,   67,   67,   67,   67,   67,   67,   67,   67,
       67,   67,   67,   67,   67,   67,   67,   67,   67,   67,
       67,   67,   67,   67,   67,   67,   67,   67,   67,   67,
       67,   67,   67,   67,   69,   69,  703,   69,  712,   69,
       69,  703,  721,  712,   69,   70,   70,  721,   70,  734,
       70,   70,   69,  746,  734,   70,   71,   71,  746,   71,
       69,   71,   71,   70,   69, 1187,   71,  279,  279,  279,
      279,   70,   99,  785,   71,   70,   99,   99,  785, 1187,
     1612,   99,   71,  805,  279,   69,   71,  917,  805,   99,

      917,  279,   72,   72, 1612,   72,   70,   72,   72,   77,
      817,  828,   72,   77,   77,  817,  828,   71,   77,  919,
       72,   77,  919,   69,   69,  762,   77,  762,   72, 2445,
      919,   99,   72,   99,   70,   70, 2027, 1125,   78,  763,
     1125,  763,   78,   78, 2046,   71,   71,   78, 1125,  797,
       78, 1455,  797,   72,  797,   78,   79, 2046,  837,   77,
       79,   79,   80,  837, 1781,   79,   80,   80, 2240,  762,
     2027,   80, 2240,   79,  366,  366,  366,  366, 1781,   80,
       79,   72,   72,  763,  452,   79,   80,  452,   78,   81,
       81,   80,  849,   81,   81,   82,   82,  849,   81,   82,

       82, 1455,  858,  871,   82,   87,   81,  858,  871,   87,
       87,   88,   82,  881,   87,   88,   88, 2383,  881,  892,
       88,   89,   87, 1832,  892,   89,   89,   90,   88, 1834,
       89,   90,   90, 2447,   79, 2383,   90, 1832,   89,   81,
       80,  452,  452, 1834,   90,   82,   93,   93,   93,   93,
     2448,   93,   93,  366, 2170,   87,   93,   94,   94,   94,
       94,   88,   94,   94,   93, 1436, 1436,   94,  289,  289,
      289,  289,   93,  898,   93,   94, 1126,   96,  898, 1126,
     2170,   96,   96,   94,  100,   94,   96, 1126,  100,  100,
     1446, 1446,  289,  100,   96,  331,  331,  331,  331,   89,

       89,  100,   96,   97,   96,   90,   90,   97,   97, 1373,
      908,  914,   97,   97,   97,  908,  914,   98, 1373,  331,
       97,   98,   98,  331,  926,  935,   98,   98,   98,  926,
      935, 1425,  102,  100,   98,  100,  102,  102, 1252, 2449,
     1425,  102,  475,  475,  475,  475, 1252,  289, 1252,  102,
      103,  103,  103,  103,  103,  103,  103,  103,  103,  103,
      103,  103,  103,  103,  103,  103,  103,  103,  103,  103,
      103,  103,  103,  103,  103,  103,  103,  103,  103,  103,
      103,  103,  103,  103,  103,  103,  103,  103,  103,  103,
      103,  103,  103,  103,  103,  103,  103,  103,  103,  103,

      103,  103,  103,  103,  103,  103,  103,  103,  103,  103,
      103,  103,  103,  103,  103,  103,  103,  103,  103,  103,
      103,  103,  103,  103,  103,  103,  103,  103,  103,  103,
      103,  103,  103,  103,  105, 1256,  106,  945,  105,  105,
      106,  106,  945,  105, 1256,  106,  468,  468,  468,  468,
     1256,  105, 2450,  106,  107,  107,  107,  107,  955,  107,
      107,  468, 2451,  955,  107,  108,  108,  108,  108,  965,
      108,  108,  107, 2385,  965,  108,  109,  109,  109,  109,
      972,  109,  109,  108, 2456,  972,  109,  123, 1457,  109,
      980,  123,  123,  109,  109,  980,  123, 2098,  989,  302,

      302,  302,  302,  989,  123, 2098,  109, 2385,  998, 2457,
      302,  107,  105,  998,  106,  110,  110,  110,  110, 1004,
      110,  110,  108,  302, 1004,  110,  121,  109,  110, 1013,
      121,  121,  110,  110, 1013,  121, 1075,  122, 1457, 1075,
     2458,  122,  122,  121,  124,  110,  122,  991,  124,  124,
      991,  121, 2459,  124,  122, 1075,  445,  445,  445,  445,
      991,  124,  122,  445, 1448, 1448,  110,  111,  111,  111,
      111,  111,  111,  111,  111,  111,  111,  111,  111,  111,
      111,  111,  111,  111,  111,  111,  111,  111,  111,  111,
      111,  111,  111,  111,  111,  111,  111,  111,  111,  111,

      111,  111,  111,  111,  111,  111,  111,  111,  111,  111,
      111,  111,  111,  111,  111,  111,  111,  111,  111,  111,
      111,  111,  111,  111,  111,  111,  111,  111,  111,  111,
      111,  111,  111,  111,  111,  111,  111,  111,  111,  111,
      111,  111,  111,  111,  111,  111,  111,  111,  111,  111,
      111,  113,  113,  113,  113,  113,  113,  113,  113,  113,
      113,  113,  113,  113,  113,  113,  113,  113,  113,  113,
      113,  113,  113,  113,  113,  113,  113,  113,  113,  113,
      113,  113,  113,  113,  113,  113,  113,  113,  113,  113,
      113,  113,  113,  113,  113,  113,  113,  113,  113,  113,

      113,  113,  113,  113,  113,  113,  113,  113,  113,  113,
      113,  113,  113,  113,  113,  113,  113,  113,  113,  113,
      113,  113,  113,  113,  113,  113,  113,  113,  113,  113,
      113,  113,  113,  113,  113,  115,  115,  115,  115,  115,
      115,  115,  115,  115,  115,  115,  115,  115,  115,  115,
      115,  115,  115,  115,  115,  115,  115,  115,  115,  115,
      115,  115,  115,  115,  115,  115,  115,  115,  115,  115,
      115,  115,  115,  115,  115,  115,  115,  115,  115,  115,
      115,  115,  115,  115,  115,  115,  115,  115,  115,  115,
      115,  115,  115,  115,  115,  115,  115,  115,  115,  115,

      115,  115,  115,  115,  115,  115,  115,  115,  115,  115,
      115,  115,  115,  115,  115,  115,  115,  115,  115,  117,
      117,  117,  117,  117,  117,  117,  117,  117,  117,  117,
      117,  117,  117,  117,  117,  117,  117,  117,  117,  117,
      117,  117,  117,  117,  117,  117,  117,  117,  117,  117,
      117,  117,  117,  117,  117,  117,  117,  117,  117,  117,
      117,  117,  117,  117,  117,  117,  117,  117,  117,  117,
      117,  117,  117,  117,  117,  117,  117,  117,  117,  117,
      117,  117,  117,  117,  117,  117,  117,  117,  117,  117,
      117,  117,  117,  117,  117,  117,  117,  117,  117,  117,

      117,  117,  117,  119, 1509,  120, 1024,  119,  119,  120,
      120, 1024,  119, 1509,  120,  383,  383,  383,  383,  127,
      119,  128,  120,  127,  127,  128,  128, 1031,  127, 1041,
      128, 2461, 1031,  383, 1041,  131,  127,  132,  128,  131,
      131,  132,  132,  127,  131,  128,  132,  280,  280,  280,
      280,  135,  131, 1054,  132,  135,  135,  119, 1054,  120,
      135, 1066,  135,  119,  280,  120, 1066, 1074,  135, 1838,
     1838,  280, 1074,  119,  119,  120,  120,  525,  525,  525,
      525,  119,  119,  120,  120,  125,  125,  125,  125,  125,
      125,  125,  125,  125,  125,  125,  125,  125,  125,  125,

      125,  125,  125,  125,  125,  125,  125,  125,  125,  125,
      125,  125,  125,  125,  125,  125,  125,  125,  125,  125,
      125,  125,  125,  125,  125,  125,  125,  125,  125,  125,
      125,  125,  125,  125,  125,  125,  125,  125,  125,  125,
      125,  125,  125,  125,  125,  125,  125,  125,  125,  125,
      125,  125,  125,  125,  125,  125,  125,  125,  125,  125,
      125,  125,  125,  125,  125,  125,  125,  125,  125,  129,
      129,  129,  129,  129,  129,  129,  129,  129,  129,  129,
      129,  129,  129,  129,  129,  129,  129,  129,  129,  129,
      129,  129,  129,  129,  129,  129,  129,  129,  129,  129,

      129,  129,  129,  129,  129,  129,  129,  129,  129,  129,
      129,  129,  129,  129,  129,  129,  129,  129,  129,  129,
      129,  129,  129,  129,  129,  129,  129,  129,  129,  129,
      129,  129,  129,  129,  129,  129,  129,  129,  129,  129,
      129,  129,  129,  129,  129,  129,  129,  129,  129,  129,
      129,  129,  129,  133,  133,  133,  133,  133,  133,  133,
      133,  133,  133,  133,  133,  133,  133,  133,  133,  133,
      133,  133,  133,  133,  133,  133,  133,  133,  133,  133,
      133,  133,  133,  133,  133,  133,  133,  133,  133,  133,
      133,  133,  133,  133,  133,  133,  133,  133,  133,  133,

      133,  133,  133,  133,  133,  133,  133,  133,  133,  133,
      133,  133,  133,  133,  133,  133,  133,  133,  133,  133,
      133,  133,  133,  133,  133,  133,  133,  133,  133,  133,
      133,  133,  133,  133,  133,  133,  133,  136, 1085, 1090,
     1103,  136,  136, 1085, 1090, 1103,  136, 2462,  136,  526,
      526,  526,  526, 2466,  136,  137,  137,  137,  137,  137,
      137,  137,  137,  137,  137,  137,  137,  137,  137,  137,
      137,  137,  137,  137,  137,  137,  137,  137,  137,  137,
      137,  137,  137,  137,  137,  137,  137,  137,  137,  137,
      137,  137,  137,  137,  137,  137,  137,  137,  137,  137,

      137,  137,  137,  137,  137,  137,  137,  137,  137,  137,
      137,  137,  137,  137,  137,  137,  137,  137,  137,  137,
      137,  137,  137,  137,  137,  137,  137,  137,  137,  137,
      137,  137,  137,  137,  137,  137,  137,  137,  137,  139,
     1104, 2468,  140,  139,  139, 1104,  140,  140,  139, 1070,
      139,  140, 1070,  140, 2469, 1092,  139,  141, 1092,  140,
      142,  141,  141,  145,  142,  142,  141,  145,  145,  142,
     1109, 2470,  145, 1092,  141, 1109, 1070,  142, 1110, 1458,
      145, 2471,  141, 1110,  146,  142,  143,  145,  146,  146,
      143,  143, 2472,  146, 1118,  143, 2488,  143, 1459, 1118,

      151,  146, 1130,  143,  151,  151, 1070, 1130,  146,  151,
      161,  151, 2489, 1139,  161,  161, 1139,  151, 1232,  161,
      161,  162, 1096, 1232, 1070,  162,  162,  161, 2490, 1458,
      162,  162,  163,  151, 1096, 2491,  163,  163,  162, 1096,
      143,  163,  143,  163,  151,  151,  143,  151, 1459,  163,
     1158, 1053,  143, 1158, 1053, 2492,  143,  143, 1053,  143,
     1053,  143,  144,  412, 1053,  152,  144,  144, 2493,  152,
      152,  144, 1238,  144,  152, 1098,  152, 1238, 1098,  144,
      164, 1240,  152,  173,  164,  164, 1240,  173,  173,  164,
      167,  164,  173,  173,  167,  167, 2494,  164,  152,  167,

      173, 1098, 1121, 1203,  167, 1121, 1203,  167, 1108,  152,
      152, 1108,  152,  412,  167, 1121,  144, 2499,  144,  412,
     1128, 1108,  144, 1128,  412,  412, 1108,  412,  144, 1886,
     1886, 1128,  144,  144, 1108,  144, 2500,  144,  147,  147,
      147,  147,  147,  147,  147,  147,  147,  147,  147,  147,
      147,  147,  147,  147,  147,  147,  147,  147,  147,  147,
      147,  147,  147,  147,  147,  147,  147,  147,  147,  147,
      147,  147,  147,  147,  147,  147,  147,  147,  147,  147,
      147,  147,  147,  147,  147,  147,  147,  147,  147,  147,
      147,  147,  147,  147,  147,  147,  147,  147,  147,  147,

      147,  147,  147,  147,  147,  147,  147,  147,  147,  147,
      147,  147,  147,  147,  147,  147,  147,  147,  147,  147,
      147,  147,  149,  149,  149,  149,  149,  149,  149,  149,
      149,  149,  149,  149,  149,  149,  149,  149,  149,  149,
      149,  149,  149,  149,  149,  149,  149,  149,  149,  149,
      149,  149,  149,  149,  149,  149,  149,  149,  149,  149,
      149,  149,  149,  149,  149,  149,  149,  149,  149,  149,
      149,  149,  149,  149,  149,  149,  149,  149,  149,  149,
      149,  149,  149,  149,  149,  149,  149,  149,  149,  149,
      149,  149,  149,  149,  149,  149,  149,  149,  149,  149,

      149,  149,  149,  149,  149,  149,  153,  153,  153,  153,
      153,  153,  153,  153,  153,  153,  153,  153,  153,  153,
      153,  153,  153,  153,  153,  153,  153,  153,  153,  153,
      153,  153,  153,  153,  153,  153,  153,  153,  153,  153,
      153,  153,  153,  153,  153,  153,  153,  153,  153,  153,
      153,  153,  153,  153,  153,  153,  153,  153,  153,  153,
      153,  153,  153,  153,  153,  153,  153,  153,  153,  153,
      153,  153,  153,  153,  153,  153,  153,  153,  153,  153,
      153,  153,  153,  153,  153,  153,  153,  153,  153,  153,
      155,  155,  155,  155,  155,  155,  155,  155,  155,  155,

      155,  155,  155,  155,  155,  155,  155,  155,  155,  155,
      155,  155,  155,  155,  155,  155,  155,  155,  155,  155,
      155,  155,  155,  155,  155,  155,  155,  155,  155,  155,
      155,  155,  155,  155,  155,  155,  155,  155,  155,  155,
      155,  155,  155,  155,  155,  155,  155,  155,  155,  155,
      155,  155,  155,  155,  155,  155,  155,  155,  155,  155,
      155,  155,  155,  155,  155,  155,  155,  155,  155,  155,
      155,  155,  155,  155,  157,  157,  157,  157,  174,  157,
      157, 2501,  174,  174,  157,  157,  157,  174,  174,  157,
      157, 1213,  157, 1177, 1213,  174, 1177, 1177, 1611,  157,

      157,  168,  157,  157,  157,  168,  168, 1611, 2502, 1430,
      168, 1177,  169, 1189, 1430,  168,  169,  169,  168, 1189,
     2014,  169,  169,  169,  157,  168,  157, 2503, 1189,  169,
      177,  177,  177,  177, 2014,  177,  177,  169, 1438,  169,
      177,  177,  177, 1438,  384,  384,  384,  384,  177,  534,
      534,  534,  534,  157,  157,  158,  158,  158,  158,  181,
      158,  158,  384,  181,  181,  158,  158,  158,  181, 2504,
      158,  158, 1192,  158, 1230, 2505,  181, 1230, 1192, 1780,
      158,  158,  181,  158,  158,  158,  170, 1192, 1780,  182,
      170,  170, 2506,  182,  182,  170,  170,  170,  182,  394,

      394,  394,  394,  170, 1505,  158,  182,  158, 2507, 1505,
     2508,  170,  182,  170,  178,  178,  178,  178, 1250,  178,
      178, 1250, 1831,  394,  178,  178,  178,  524,  524,  524,
      524, 1831,  178,  524,  158,  158,  159,  159,  159,  159,
      159,  159,  159,  159,  159,  159,  159,  159,  159,  159,
      159,  159,  159,  159,  159,  159,  159,  159,  159,  159,
      159,  159,  159,  159,  159,  159,  159,  159,  159,  159,
      159,  159,  159,  159,  159,  159,  159,  159,  159,  159,
      159,  159,  159,  159,  159,  159,  159,  159,  159,  159,
      159,  159,  159,  159,  159,  159,  159,  159,  159,  159,

      159,  159,  159,  159,  159,  159,  159,  159,  159,  159,
      159,  159,  159,  159,  159,  159,  159,  159,  159,  159,
      165,  165,  165,  165,  165,  165,  165,  165,  165,  165,
      165,  165,  165,  165,  165,  165,  165,  165,  165,  165,
      165,  165,  165,  165,  165,  165,  165,  165,  165,  165,
      165,  165,  165,  165,  165,  165,  165,  165,  165,  165,
      165,  165,  165,  165,  165,  165,  165,  165,  165,  165,
      165,  165,  165,  165,  165,  165,  165,  165,  165,  165,
      165,  165,  165,  165,  165,  165,  165,  165,  165,  165,
      165,  165,  165,  165,  165,  165,  165,  165,  165,  165,

      165,  165,  165,  165,  171,  171,  171,  171,  171,  171,
      171,  171,  171,  171,  171,  171,  171,  171,  171,  171,
      171,  171,  171,  171,  171,  171,  171,  171,  171,  171,
      171,  171,  171,  171,  171,  171,  171,  171,  171,  171,
      171,  171,  171,  171,  171,  171,  171,  171,  171,  171,
      171,  171,  171,  171,  171,  171,  171,  171,  171,  171,
      171,  171,  171,  171,  171,  171,  171,  171,  171,  171,
      171,  171,  171,  171,  171,  171,  171,  171,  171,  171,
      171,  171,  171,  171,  171,  171,  171,  171,  175, 1507,
     2509,  176,  175,  175, 1507,  176,  176,  175,  175,  175,

      176,  176,  176, 1258, 1393,  175, 1258, 1393,  176, 1263,
      179,  179,  179,  179,  223,  179,  179, 1263,  223,  223,
      179,  179, 1263,  223,  180,  180,  180,  180,  179,  180,
      180,  223, 1890, 1890,  180,  180,  179,  175,  179,  223,
      176,  223,  180, 1610,  544,  544,  544,  544, 1610, 2510,
      180,  544,  180,  183,  183,  183,  183,  183,  183,  183,
      183,  183,  183,  183,  183,  183,  183,  183,  183,  183,
      183,  183,  183,  183,  183,  183,  183,  183,  183,  183,
      183,  183,  183,  183,  183,  183,  183,  183,  183,  183,
      183,  183,  183,  183,  183,  183,  183,  183,  183,  183,

      183,  183,  183,  183,  183,  183,  183,  183,  183,  183,
      183,  183,  183,  183,  183,  183,  183,  183,  183,  183,
      183,  183,  183,  183,  183,  183,  183,  183,  183,  183,
      183,  183,  183,  183,  183,  183,  183,  185,  185,  185,
      185,  185,  185,  185,  185,  185,  185,  185,  185,  185,
      185,  185,  185,  185,  185,  185,  185,  185,  185,  185,
      185,  185,  185,  185,  185,  185,  185,  185,  185,  185,
      185,  185,  185,  185,  185,  185,  185,  185,  185,  185,
      185,  185,  185,  185,  185,  185,  185,  185,  185,  185,
      185,  185,  185,  185,  185,  185,  185,  185,  185,  185,

      185,  185,  185,  185,  185,  185,  185,  185,  185,  185,
      185,  185,  185,  185,  185,  185,  185,  185,  185,  185,
      185,  187, 2511,  188, 1749,  187,  187,  188,  188, 1749,
      187, 1432,  188,  187, 1432,  188, 1833,  189,  187,  190,
      188,  189,  189,  190,  190, 1833,  189, 1517,  190,  189,
     1517,  190, 2013,  191,  189,  192,  190,  191,  191,  192,
      192, 2013,  191, 1530,  192,  191, 1530,  192, 1677, 1194,
      191,  187,  192,  188,  193, 1194,  194, 1758,  193,  193,
      194,  194, 2512,  193, 1194,  194,  193,  189,  194,  190,
      195,  193, 1768,  194,  195,  195, 1851, 1768, 1851,  195,

      195,  195, 2514,  191,  196,  192, 1851,  195,  196,  196,
     2062, 1677, 2062,  196,  196,  196, 1542, 1194,  197, 1542,
     1758,  196,  197,  197,  193,  198,  194,  197,  199,  198,
      198, 1858,  199,  199,  198,  197, 1858,  199,  199,  199,
     1677, 1443,  198,  200, 1443,  199,  201,  200,  200, 1758,
      201,  201,  200,  200,  200,  201, 2016,  202, 2062, 1443,
      200,  202,  202,  201, 2171, 2016,  202,  203,  203, 2017,
      203,  217,  203,  203,  202,  217,  217,  203,  203,  203,
      217,  204,  204, 2017,  204,  203,  204,  204,  217, 2215,
     2171,  204,  204,  204, 2215, 1243,  197,  197, 1243,  204,

     1548, 2515, 1548,  198,  198,  209,  209,  209,  209,  233,
      209,  209, 2516,  233,  233,  209,  209,  209,  233, 1450,
      209,  217, 1450,  209,  201,  201,  233,  282,  282,  282,
      282,  282, 1450, 1684,  282,  202,  202,  205,  205,  205,
      205, 1548,  205,  205, 2517, 2095, 2096,  205,  205,  205,
     2155,  282, 1243, 1243, 2095,  205,  210,  210,  210,  210,
     2096,  210,  210,  205, 2155,  205,  210,  210,  210, 2518,
     1736,  210,  211, 1736,  210,  212,  211,  211, 1684,  212,
      212,  211, 1421,  211,  212, 1421,  212, 2519, 1421,  211,
      221, 2520,  212, 1574,  221,  221, 1574, 2521, 1574,  221,

      221,  221,  283,  283,  283,  283, 1684,  221,  282,  283,
      205,  206,  206,  206,  206, 1353,  206,  206, 1353,  283,
     2522,  206,  206,  206, 2523,  390,  390,  390,  390,  206,
      213,  213,  213,  213, 2524,  213,  213,  206, 2525,  206,
      213,  213,  213,  390, 1646,  213, 1850, 1646,  213,  214,
      214,  214,  214, 1374,  214,  214, 1374, 1374, 1850,  214,
      214,  214, 1850, 1741,  214,  222, 1741,  214, 1646,  222,
      222, 1374, 1353, 1353,  222,  222,  222,  609,  609,  609,
      609, 1741,  222,  283,  206,  207,  207,  207,  207,  207,
      207,  207,  207,  207,  207,  207,  207,  207,  207,  207,

      207,  207,  207,  207,  207,  207,  207,  207,  207,  207,
      207,  207,  207,  207,  207,  207,  207,  207,  207,  207,
      207,  207,  207,  207,  207,  207,  207,  207,  207,  207,
      207,  207,  207,  207,  207,  207,  207,  207,  207,  207,
      207,  207,  207,  207,  207,  207,  207,  207,  207,  207,
      207,  207,  207,  207,  207,  207,  207,  207,  207,  207,
      207,  207,  207,  207,  207,  207,  207,  207,  207,  215,
     2272, 2272,  216,  215,  215,  218,  216,  216,  215,  218,
      218,  216, 1431, 2397,  218, 1431,  215, 2182, 1431,  216,
      219, 2397,  218,  220,  219,  219, 2182,  220,  220,  219,

      225, 2526,  220, 1776,  225,  225, 2527,  219, 1354,  225,
      220, 1354,  225,  610,  610,  610,  610,  225,  215, 2528,
      215,  216,  224,  216, 2529,  218,  224,  224,  237,  225,
     1245,  224,  237,  237, 2454, 1245, 1245,  237, 1245,  224,
      219, 1732, 2454,  220, 1732,  237, 2278,  224, 1776,  224,
      225,  226,  226, 2530,  226, 2278,  226,  226,  227, 2532,
     1732,  226,  227,  227,  226, 1354, 1354,  227,  228,  226,
     2279, 2279,  228,  228,  229,  227, 1776,  228,  229,  229,
     2063,  226, 2063,  229,  230,  228, 2533,  227,  230,  230,
     2534,  229, 2536,  230, 2537,  251, 2538,  228, 2378,  251,

      251,  230,  226,  229,  251,  252,  251, 2378,  227,  252,
      252, 2063,  251,  230,  252, 2539,  252, 2541,  228, 2542,
     1669, 2546,  252, 1669,  229,  656,  656,  656,  656,  657,
      657,  657,  657, 1669,  230,  231,  231,  231,  231,  231,
      231,  231,  231,  231,  231,  231,  231,  231,  231,  231,
      231,  231,  231,  231,  231,  231,  231,  231,  231,  231,
      231,  231,  231,  231,  231,  231,  231,  231,  231,  231,
      231,  231,  231,  231,  231,  231,  231,  231,  231,  231,
      231,  231,  231,  231,  231,  231,  231,  231,  231,  231,
      231,  231,  231,  231,  231,  231,  231,  231,  231,  231,

      231,  231,  231,  231,  231,  231,  231,  231,  231,  231,
      231,  231,  231,  231,  231,  231,  231,  231,  231,  234,
      234,  234,  234,  234,  234,  234,  234,  234,  234,  234,
      234,  234,  234,  234,  234,  234,  234,  234,  234,  234,
      234,  234,  234,  234,  234,  234,  234,  234,  234,  234,
      234,  234,  234,  234,  234,  234,  234,  234,  234,  234,
      234,  234,  234,  234,  234,  234,  234,  234,  234,  234,
      234,  234,  234,  234,  234,  234,  234,  234,  234,  234,
      234,  234,  234,  234,  234,  234,  234,  234,  234,  234,
      234,  234,  234,  234,  234,  234,  234,  234,  234,  234,

      234,  234,  234,  235,  235,  235,  235,  235,  235,  235,
      235,  235,  235,  235,  235,  235,  235,  235,  235,  235,
      235,  235,  235,  235,  235,  235,  235,  235,  235,  235,
      235,  235,  235,  235,  235,  235,  235,  235,  235,  235,
      235,  235,  235,  235,  235,  235,  235,  235,  235,  235,
      235,  235,  235,  235,  235,  235,  235,  235,  235,  235,
      235,  235,  235,  235,  235,  235,  235,  235,  235,  235,
      235,  235,  235,  235,  235,  235,  235,  235,  235,  235,
      235,  235,  235,  235,  235,  235,  235,  238,  238,  238,
      238,  238,  238,  238,  238,  238,  238,  238,  238,  238,

      238,  238,  238,  238,  238,  238,  238,  238,  238,  238,
      238,  238,  238,  238,  238,  238,  238,  238,  238,  238,
      238,  238,  238,  238,  238,  238,  238,  238,  238,  238,
      238,  238,  238,  238,  238,  238,  238,  238,  238,  238,
      238,  238,  238,  238,  238,  238,  238,  238,  238,  238,
      238,  238,  238,  238,  238,  238,  238,  238,  238,  238,
      238,  238,  238,  238,  238,  238,  238,  238,  238,  238,
      238,  239, 2404,  240, 2404,  239,  239,  240,  240, 2547,
      239, 2473,  240,  392,  392,  392,  392,  253,  239,  254,
      240,  253,  253,  254,  254, 2474,  253, 1735,  254, 1642,

     1735,  392, 1642,  255,  253, 2473,  254,  255,  255,  256,
     1642, 2553,  255,  256,  256, 2554, 1735, 2556,  256, 2474,
      255, 2404,  239, 2531,  240, 2579,  256, 2476,  512,  512,
      512,  512,  725,  725,  725,  725, 2476, 2580, 2531,  239,
      512,  240,  241,  241,  241,  241,  241,  241,  241,  241,
      241,  241,  241,  241,  241,  241,  241,  241,  241,  241,
      241,  241,  241,  241,  241,  241,  241,  241,  241,  241,
      241,  241,  241,  241,  241,  241,  241,  241,  241,  241,
      241,  241,  241,  241,  241,  241,  241,  241,  241,  241,
      241,  241,  241,  241,  241,  241,  241,  241,  241,  241,

      241,  241,  241,  241,  241,  241,  241,  241,  241,  241,
      241,  241,  241,  241,  241,  241,  241,  241,  241,  241,
      241,  241,  241,  241,  241,  241,  243,  243,  243,  243,
      243,  243,  243,  243,  243,  243,  243,  243,  243,  243,
      243,  243,  243,  243,  243,  243,  243,  243,  243,  243,
      243,  243,  243,  243,  243,  243,  243,  243,  243,  243,
      243,  243,  243,  243,  243,  243,  243,  243,  243,  243,
      243,  243,  243,  243,  243,  243,  243,  243,  243,  243,
      243,  243,  243,  243,  243,  243,  243,  243,  243,  243,
      243,  243,  243,  243,  243,  243,  243,  243,  243,  243,

      243,  243,  243,  243,  243,  243,  243,  243,  243,  243,
      245, 2604,  246, 2605,  245,  245,  246,  246, 2619,  245,
      245,  246,  246, 2535, 2620,  257,  257,  245,  257,  246,
      257,  257, 2535, 1840, 2151,  257, 1840, 2151,  257,  286,
      286,  286,  286,  257,  395,  395,  395,  395, 2621, 1426,
      286,  257, 1426, 1426,  286,  257,  286,  403,  403,  403,
      403, 2622, 2623,  286,  286,  286, 2624, 1426,  395, 2625,
     2626,  793,  793,  793,  793,  403,  257,  245,  793,  246,
      247,  247,  247,  247,  247,  247,  247,  247,  247,  247,
      247,  247,  247,  247,  247,  247,  247,  247,  247,  247,

      247,  247,  247,  247,  247,  247,  247,  247,  247,  247,
      247,  247,  247,  247,  247,  247,  247,  247,  247,  247,
      247,  247,  247,  247,  247,  247,  247,  247,  247,  247,
      247,  247,  247,  247,  247,  247,  247,  247,  247,  247,
      247,  247,  247,  247,  247,  247,  247,  247,  247,  247,
      247,  247,  247,  247,  247,  247,  247,  247,  247,  247,
      247,  247,  247,  247,  249,  249, 2627,  249, 2117,  249,
      249, 2117, 2629, 2630,  249,  250,  250, 2631,  250, 2633,
      250,  250,  249, 2639, 2640,  250,  469,  469,  469,  469,
     2641,  249, 2117,  250,  258,  258, 2644,  258, 2645,  258,

      258,  469,  250, 1747,  258,  259, 1747,  258, 2652,  259,
      259,  259,  258, 1742,  259, 1510, 1742,  259, 1510, 1510,
      258,  249,  259, 2653,  258,  367,  367,  367,  367, 1747,
      259, 1742,  250, 1510,  259, 2654, 2656,  249, 1716,  249,
     2657, 1716,  367,  249, 2658,  258, 2479, 1716,  250,  367,
      250, 1716, 2479, 1811,  250,  259,  259,  260,  260, 1811,
      260, 2479,  260,  260,  260, 2659, 2660,  260, 1811, 2661,
      260,  303,  303,  303,  303,  260,  367,  293,  293,  293,
      293,  293,  303,  260,  293, 2662, 2663,  260,  304,  304,
      304,  304, 2664, 1798, 1769,  303, 1798, 1769, 2665,  304,

     2666,  293, 2666,  359,  359,  359,  359, 1769,  260,  260,
      359, 1798,  304, 1811,  408,  408,  408,  408,  398,  398,
      398,  398,  398, 1777, 2668,  398, 1777,  303,  401,  401,
      401,  401,  408, 2670, 2672,  401, 1777,  401, 2673, 2675,
     2676,  401,  398,  413,  413,  413,  413,  304,  443,  443,
      443,  443,  401,  444,  444,  444,  444, 2168,  293, 2678,
     2168, 2679,  449,  449,  449,  449,  359,  413,  449,  413,
     2168, 2680,  443,  842,  842,  842,  842,  444, 2681, 2682,
      449,  401,  359,  360,  360,  360,  360,  360,  360,  360,
      360,  360,  360,  360,  360,  360,  360,  360,  360,  398,

      360,  360,  360,  360,  360,  360,  360,  360,  360,  360,
      360,  360,  360,  360,  360,  360,  360,  360,  360,  360,
      360,  360,  360,  360,  360,  360,  360,  360,  360,  360,
      360,  360,  360,  360,  360,  360,  360,  360,  360,  360,
      360,  360,  360,  360,  360,  360,  360,  360,  360,  360,
      360,  360,  360,  360,  360,  360,  360,  360,  360,  360,
      360,  360,  360, 2683,  360,  360,  360,  361,  361,  361,
      361, 2405, 2684, 2405,  361,  414,  414,  414,  414,  417,
      417,  417,  417,  418,  418,  418,  418,  419,  419,  419,
      419,  497,  497,  497,  497,  420,  420,  420,  420,  414,

     2685,  414, 2687,  417, 2688,  417, 2667,  418, 2667,  418,
      497,  419, 2689,  419,  422,  422,  422,  422, 2690,  420,
     2405,  420, 2691, 2693, 2694,  673,  673,  673,  673,  414,
      361, 2695, 2696,  417,  670,  670,  670,  670,  422,  418,
      422,  423,  423,  423,  423, 2667,  361,  393,  393,  393,
      393,  670,  419,  393,  420,  419, 2169, 2697,  420, 2169,
      421,  421,  421,  421, 2698,  423, 2699,  423, 2700, 2169,
     2701,  393,  424,  424,  424,  424,  673,  393, 2702,  542,
      542,  542,  542, 2703,  421,  422,  421,  648,  648,  648,
      648,  393,  737,  737,  737,  737,  424,  393,  424, 2704,

      423,  393,  393,  542,  393,  393,  393, 2705, 2706,  737,
      393,  393,  393,  393,  393, 2707,  393,  421,  393,  393,
      393,  393,  393,  425,  425,  425,  425,  421,  426,  426,
      426,  426, 2710, 1883, 2712,  421, 1883,  421, 2714,  424,
      427,  427,  427,  427,  648, 2251, 2715,  425, 2251,  425,
     2251, 2716,  426, 2717,  426,  428,  428,  428,  428,  429,
      429,  429,  429, 1883,  427, 2718,  427, 2720,  430,  430,
      430,  430,  431,  431,  431,  431, 2721,  425, 2722,  428,
     2723,  428, 2724,  429, 1883,  429, 2725,  432,  432,  432,
      432,  426,  430, 2726,  430, 2719,  431, 2727,  431,  427,

      433,  433,  433,  433,  450,  450,  450,  450,  427, 2669,
      428,  432, 2669,  432,  427,  434,  434,  434,  434, 2719,
      999,  999,  450,  999,  433,  999,  433,  430,  999,  999,
      429, 2733, 2734,  429, 1972,  431, 2735, 1972,  999,  434,
      999,  434, 2737, 2740, 2741,  431,  432,  446,  446,  446,
      446,  446, 1972, 2742,  446,  448,  448,  448,  448,  451,
      451,  451,  451, 2364, 2743,  432, 2364,  433, 2364, 2745,
      434,  446,  433,  455,  455,  455,  455,  451,  434,  448,
     2744,  448, 2746,  434,  466,  466,  466,  466, 2747, 2744,
     1774,  455,  540,  540,  540,  540,  541,  541,  541,  541,

     1774, 2748,  466,  543,  543,  543,  543, 2437, 2708,  540,
     2437, 2708, 2437,  541, 1774, 2749,  540, 2751, 2753, 2756,
      541,  547,  547,  547,  547, 2757, 1774,  543,  446,  492,
      492,  492,  492,  545,  545,  545,  545,  545, 2758, 2759,
      545,  559,  559,  559,  559,  547,  566,  566,  566,  566,
     2760,  541,  649,  649,  649,  649,  492,  545, 2762,  559,
      674,  674,  674,  674,  566,  675,  675,  675,  675,  706,
      706,  706,  706,  711,  711,  711,  711,  713,  713,  713,
      713, 2763, 2761, 2764,  492, 1718,  492,  706, 1718, 2761,
     2765,  711, 2766, 2767, 1718,  713,  492,  492, 1718, 2768,

      492,  492,  492, 2769,  492,  739,  739,  739,  739,  649,
      776,  776,  776,  776,  545,  674,  777,  777,  777,  777,
      675,  783,  783,  783,  783, 2770, 2771, 2772,  776,  739,
      786,  786,  786,  786,  777,  794,  794,  794,  794,  783,
     2773, 2774,  794,  795,  795,  795,  795, 2775,  786, 2776,
      795,  796,  796,  796,  796, 2779,  799,  799,  799,  799,
     2780, 2190, 2778,  799,  796,  799, 2781, 2190, 2782,  799,
      800,  800,  800,  800, 2785, 2788, 2190,  800, 1284,  800,
     2809, 1284, 1284,  800,  801,  801,  801,  801, 2810, 2832,
     2833,  801, 2709,  801, 2848, 2709, 1284,  801,  802,  802,

      802,  802, 2849, 2709, 2851,  802, 2852,  802, 1284, 2190,
     2853,  802,  804,  804,  804,  804,  806,  806,  806,  806,
      808,  808,  808,  808,  819,  819,  819,  819, 2855, 1284,
      804, 2856, 2778, 2858,  806,  819,  821,  821,  821,  821,
      822,  822,  822,  822,  823,  823,  823,  823,  819, 2864,
     2867,  823,  819, 2871,  826,  826,  826,  826,  826, 2872,
      821,  826, 2873, 2876,  822,  830,  830,  830,  830, 2877,
      808,  836,  836,  836,  836, 2878, 2879, 2881,  826,  839,
      839,  839,  839,  836,  843,  843,  843,  843, 2883,  830,
      839,  848,  848,  848,  848,  928,  928,  928,  928,  929,

      929,  929,  929, 2885,  839,  954,  954,  954,  954,  848,
      957,  957,  957,  957, 2887, 2888,  954,  958,  958,  958,
      958,  964,  964,  964,  964,  957, 2884, 2889, 2884,  839,
      954, 2890,  958, 2891, 2890,  826,  992,  992,  992,  992,
     1035, 1035, 1035, 1035, 2892, 2893, 2894, 1035, 2895,  992,
     1036, 1036, 1036, 1036,  992,  954, 2896, 1036, 1043, 1043,
     1043, 1043, 1045, 1045, 1045, 1045, 2897, 2884, 2898, 1045,
     1043, 2899, 2900, 1043, 1046, 1046, 1046, 1046, 2901, 2902,
     2903, 1046, 2904, 2905,  954, 1048, 1048, 1048, 1048, 2909,
     1035, 1057, 1057, 1057, 1057, 2906, 1048, 2911, 2906, 2912,

     1036, 1058, 1058, 1058, 1058, 1059, 1059, 1059, 1059, 1106,
     2907, 2913, 1059, 2907, 2914, 1057, 1062, 1062, 1062, 1062,
     1062, 2907, 2915, 1062, 2916, 1058, 1068, 1068, 1068, 1068,
     1122, 1122, 1122, 1122, 2918, 2886, 1106, 1106, 2886, 1106,
     1062, 1106, 2886, 1122, 1106, 1106, 1107, 2919, 1122, 2920,
     1068, 2921, 1107, 1107, 1106, 1107, 1106, 1107, 2922, 2923,
     1107, 1107, 1129, 1129, 1129, 1129, 1135, 1135, 1135, 1135,
     1107, 2924, 1107, 2927, 1136, 1136, 1136, 1136, 2930, 2932,
     1129, 1731, 2937, 1135, 1731, 1137, 1137, 1137, 1137, 2938,
     1135, 1136, 1137, 1140, 1140, 1140, 1140, 1062, 1136, 2939,

     1140, 2940, 1137, 1141, 1141, 1141, 1141, 2941, 1731, 2942,
     1141, 1142, 1142, 1142, 1142, 1143, 1143, 1143, 1143, 2943,
     2944, 2945, 1142, 2946, 2947, 2949, 1142, 1144, 1144, 1144,
     1144, 2951, 2953, 2954, 1144, 2956, 1142, 1142, 1731, 1143,
     1163, 1163, 1163, 1163, 2958, 1135, 1146, 1146, 1146, 1146,
     2959, 1147, 1147, 1147, 1147, 2961, 1731, 1146, 1147, 1884,
     2962, 1146, 1884, 1146, 1163, 2964, 1137, 2965, 1147, 2966,
     1146, 1146, 1146, 1148, 1148, 1148, 1148, 2967, 2968, 2970,
     1148, 1149, 1149, 1149, 1149, 1150, 1150, 1150, 1150, 1884,
     1148, 2973, 1150, 1151, 1151, 1151, 1151, 1151, 1149, 2974,

     1151, 1152, 1152, 1152, 1152, 2977, 1159, 1159, 1159, 1159,
     1884, 1764, 1152, 1159, 1764, 2978, 1152, 1151, 1152, 1155,
     1155, 1155, 1155, 2976, 1764, 1152, 1152, 1152, 2979, 1764,
     1155, 2981, 1147, 2996, 1155, 2997, 1155, 1764, 2976, 1160,
     1160, 1160, 1160, 1155, 1155, 1155, 1160, 1161, 1161, 1161,
     1161, 3001, 3002, 3006, 1148, 3028, 3029, 3030, 1161, 3038,
     3039, 3044, 1161, 1162, 1162, 1162, 1162, 1166, 1166, 1166,
     1166, 3045, 1161, 1161, 1151, 1167, 1167, 1167, 1167, 1169,
     1169, 1169, 1169, 3049, 3050, 3051, 1169, 1162, 3056, 3059,
     3062, 1166, 3063, 1170, 1170, 1170, 1170, 3064, 3065, 1167,

     1170, 1171, 1171, 1171, 1171, 3066, 1172, 1172, 1172, 1172,
     3067, 3068, 1171, 1172, 1174, 1174, 1174, 1174, 1175, 1175,
     1175, 1175, 3069, 3070, 3072, 1174, 1178, 1178, 1178, 1178,
     1178, 3075, 3077, 1178, 1180, 1180, 1180, 1180, 1174, 3079,
     3076, 3078, 1162, 3076, 3078, 1180, 1182, 1182, 1182, 1182,
     1178, 1183, 1183, 1183, 1183, 3080, 3081, 1182, 1180, 3071,
     3082, 3071, 1183, 1184, 1184, 1184, 1184, 3083, 3084, 3085,
     1182, 3086, 3087, 3088, 1184, 1183, 1200, 1200, 1200, 1200,
     3089, 1208, 1208, 1208, 1208, 3092, 3093, 1184, 1208, 1209,
     1209, 1209, 1209, 3094, 3071, 3095, 1209, 3096, 3097, 3098,

     1200, 1210, 1210, 1210, 1210, 3100, 3102, 1178, 1210, 1211,
     1211, 1211, 1211, 1212, 1212, 1212, 1212, 3103, 1184, 1217,
     1217, 1217, 1217, 1183, 3073, 3104, 1211, 3073, 3105, 3106,
     1212, 3073, 3110, 1211, 3114, 3115, 1217, 1212, 1220, 1220,
     1220, 1220, 3116, 1217, 1208, 1220, 1219, 1219, 1219, 1219,
     3117, 3118, 1209, 1223, 1223, 1223, 1223, 3119, 3121, 3122,
     1208, 3123, 3124, 1219, 1236, 1236, 1236, 1236, 1209, 3126,
     1219, 1264, 1264, 1264, 1264, 3127, 3128, 1223, 1264, 1212,
     1210, 1214, 1214, 1214, 1214, 1214, 1214, 1214, 1214, 1214,
     1214, 1214, 1214, 1214, 1214, 1214, 1214, 1219, 1214, 1214,

     1214, 1214, 1214, 1214, 1214, 1214, 1214, 1214, 1214, 1214,
     1214, 1214, 1214, 1214, 1214, 1214, 1214, 1214, 1214, 1214,
     1214, 1214, 1214, 1214, 1214, 1214, 1214, 1214, 1214, 1214,
     1214, 1214, 1214, 1214, 1214, 1214, 1214, 1214, 1214, 1214,
     1214, 1214, 1214, 1214, 1214, 1214, 1214, 1214, 1214, 1214,
     1214, 1214, 1214, 1214, 1214, 1214, 1214, 1214, 1214, 1214,
     1214, 3130, 1214, 1214, 1214, 1216, 1216, 1216, 1216, 3132,
     3133, 3140, 1216, 1218, 1218, 1218, 1218, 1221, 1221, 1221,
     1221, 1225, 1225, 1225, 1225, 1237, 1237, 1237, 1237, 3142,
     1218, 1239, 1239, 1239, 1239, 3143, 3146, 1218, 1225, 1242,

     1242, 1242, 1242, 1237, 3142, 1225, 3147, 3152, 3153, 1239,
     1265, 1265, 1265, 1265, 3155, 1267, 3156, 1265, 1267, 1266,
     1266, 1266, 1266, 1242, 1270, 1270, 1270, 1270, 1273, 1273,
     1273, 1273, 1225, 3171, 1267, 1267, 1267, 1267, 1267, 1218,
     1271, 1271, 1271, 1271, 1216, 1266, 3175, 1271, 1270, 3176,
     3180, 3181, 1273, 3179, 1273, 3182, 1221, 1241, 1241, 1241,
     1241, 3184, 3179, 1241, 3204, 1279, 1279, 1279, 1279, 3205,
     3211, 3212, 1267, 1267, 1279, 3216, 1279, 3217, 1279, 3218,
     3224, 1241, 1277, 1277, 1277, 1277, 3227, 1241, 3228, 1277,
     3229, 1277, 3231, 3233, 3234, 1277, 1282, 1282, 1282, 1282,

     3236, 1241, 1292, 1292, 1292, 1292, 1277, 1241, 3237, 3239,
     3242, 1241, 1241, 1292, 1241, 1241, 1241, 3243, 1279, 1292,
     1241, 1241, 1241, 1241, 1241, 3244, 1241, 3245, 1241, 1241,
     1241, 1241, 1241, 3246, 3247, 1277, 1278, 1278, 1278, 1278,
     3248, 3249, 3252, 1278, 3240, 1278, 3253, 3240, 3254, 1278,
     1281, 1281, 1281, 1281, 1283, 3256, 1885, 1283, 1283, 1885,
     1278, 3257, 1281, 1281, 3240, 3240, 3258, 1283, 1287, 1287,
     1287, 1287, 1287, 3259, 1281, 1287, 1281, 1293, 1293, 1293,
     1293, 3260, 3250, 3266, 1283, 3250, 1885, 3251, 1293, 1278,
     3251, 3267, 1287, 3250, 1293, 1294, 1294, 1294, 1294, 1295,

     1295, 1295, 1295, 3268, 3270, 1283, 1294, 1885, 3271, 3273,
     1295, 3274, 1294, 3275, 3278, 3279, 1295, 1296, 1296, 1296,
     1296, 1297, 1297, 1297, 1297, 3282, 2455, 3287, 1296, 2455,
     3290, 3291, 1297, 2455, 1296, 2455, 3292, 3294, 1297, 2455,
     3295, 3296, 1293, 1298, 1298, 1298, 1298, 3301, 3314, 1287,
     1299, 1299, 1299, 1299, 3315, 1301, 1301, 1301, 1301, 3319,
     3320, 1294, 1294, 1303, 1303, 1303, 1303, 1298, 1295, 1298,
     1304, 1304, 1304, 1304, 1299, 3321, 1299, 3322, 3339, 1301,
     1297, 1301, 1305, 1305, 1305, 1305, 3342, 3343, 1296, 3342,
     3345, 1296, 3346, 3348, 1304, 3359, 1304, 1301, 1301, 3364,

     3365, 1301, 1306, 1306, 1306, 1306, 1305, 3366, 1305, 1307,
     1307, 1307, 1307, 3370, 1308, 1308, 1308, 1308, 1309, 1309,
     1309, 1309, 1303, 3371, 3367, 3367, 1306, 3367, 1306, 1310,
     1310, 1310, 1310, 1307, 3372, 1307, 3373, 3374, 1308, 1304,
     1308, 3375, 1309, 3379, 1309, 1311, 1311, 1311, 1311, 1312,
     1312, 1312, 1312, 1310, 1305, 1310, 3380, 1306, 1313, 1313,
     1313, 1313, 1314, 1314, 1314, 1314, 1307, 3368, 3368, 1311,
     3368, 1311, 3381, 1312, 1308, 1312, 1307, 1315, 1315, 1315,
     1315, 3382, 1313, 3383, 1313, 3384, 1314, 3389, 1314, 3390,
     1309, 1310, 1316, 1316, 1316, 1316, 1317, 1317, 1317, 1317,

     3393, 1315, 3396, 1315, 1318, 1318, 1318, 1318, 1312, 1319,
     1319, 1319, 1319, 3398, 3377, 1313, 1316, 3377, 1316, 1311,
     1317, 3376, 1317, 3406, 3376, 1314, 3377, 1313, 1318, 3407,
     1318, 1313, 3376, 1319, 3408, 1319, 3411, 1320, 1320, 1320,
     1320, 3412, 3425, 3429, 1315, 1321, 1321, 1321, 1321, 1316,
     1322, 1322, 1322, 1322, 1317, 1316, 3378, 1316, 3430, 3378,
     1318, 1320, 3431, 1320, 3432, 1316, 3439, 3440, 3455, 1321,
     1888, 1321, 2073, 1888, 1322, 2073, 1322, 1323, 1323, 1323,
     1323, 3456, 1319, 1324, 1324, 1324, 1324, 1325, 1325, 1325,
     1325, 1326, 1326, 1326, 1326, 1320, 1327, 1327, 1327, 1327,

     1888, 1323, 2073, 1323, 3457, 3458, 3463, 1324, 3464, 1324,
     3471, 1325, 3472, 1325, 3473, 1326, 1322, 1326, 1321, 3474,
     1327, 1888, 1327, 2073, 1328, 1328, 1328, 1328, 3475, 1329,
     1329, 1329, 1329, 3478, 1330, 1330, 1330, 1330, 3479, 1324,
     1323, 1340, 1340, 1340, 1340, 1323, 3465, 1325, 1328, 3465,
     1328, 1327, 1326, 1329, 3480, 1329, 3466, 1325, 1330, 3466,
     1330, 1331, 1331, 1331, 1331, 1340, 3481, 1327, 1332, 1332,
     1332, 1332, 3482, 3486, 3492, 1333, 1333, 1333, 1333, 1334,
     1334, 1334, 1334, 3467, 3467, 1331, 3467, 1331, 3469, 3469,
     1328, 3469, 1332, 3493, 1332, 3498, 3499, 1330, 1329, 1333,

     3503, 1333, 3504, 1334, 3505, 1334, 1342, 1342, 1342, 1342,
     3506, 3512, 3513, 1342, 1343, 1343, 1343, 1343, 3514, 3516,
     3517, 1343, 3534, 3535, 1331, 1344, 1344, 1344, 1344, 1345,
     1345, 1345, 1345, 1332, 3538, 3539, 1345, 1347, 1347, 1347,
     1347, 3542, 3543, 3544, 1334, 3545, 1333, 1349, 1349, 1349,
     1349, 1344, 1348, 1348, 1348, 1348, 1348, 1887, 3546, 1348,
     1887, 1347, 3547, 1347, 1350, 1350, 1350, 1350, 3551, 3554,
     3555, 1349, 3556, 1349, 3559, 1887, 1348, 1352, 1352, 1352,
     1352, 1356, 3560, 1352, 1356, 1356, 3561, 1887, 1350, 1357,
     1350, 3566, 1357, 1357, 1356, 1352, 3567, 1359, 1359, 1359,

     1359, 1360, 1360, 1360, 1360, 3568, 3476, 1357, 1887, 3476,
     3583, 1356, 1359, 1361, 1361, 1361, 1361, 3586, 3476, 1357,
     1363, 1363, 1363, 1363, 3591, 3592, 1375, 1375, 1375, 1375,
     3595, 3596, 1356, 1348, 1376, 1376, 1376, 1376, 3597, 1363,
     1357, 1362, 1362, 1362, 1362, 1375, 1387, 1387, 1387, 1387,
     1388, 1388, 1388, 1388, 1391, 1391, 1391, 1391, 1387, 3599,
     1391, 1388, 1392, 1392, 1392, 1392, 1395, 3600, 1362, 1395,
     1397, 1397, 1397, 1397, 3601, 3606, 1388, 1398, 1398, 1398,
     1398, 1402, 1402, 1402, 1402, 1395, 1395, 1395, 1395, 1395,
     1406, 1406, 1406, 1406, 3607, 3616, 1362, 1406, 1362, 3619,

     1404, 1404, 1404, 1404, 1405, 1405, 1405, 1405, 1362, 1362,
     3624, 3625, 1362, 1362, 1362, 2076, 1362, 1404, 2076, 3540,
     3541, 1405, 3540, 3541, 1404, 3628, 3540, 3541, 1405, 1407,
     1407, 1407, 1407, 1409, 1409, 1409, 1409, 1410, 1410, 1410,
     1410, 1412, 1412, 1412, 1412, 2076, 1407, 3629, 1412, 3587,
     1409, 3631, 3587, 1407, 1402, 3632, 3587, 1409, 3636, 3639,
     3642, 1410, 1413, 1413, 1413, 1413, 2076, 3643, 3647, 1413,
     1415, 1415, 1415, 1415, 3651, 3654, 3658, 1415, 1417, 1417,
     1417, 1417, 1418, 1418, 1418, 1418, 1418, 3669, 3683, 1418,
     1419, 1419, 1419, 1419, 3684, 3689, 4007, 1422, 3589, 1409,

     1422, 3589, 1417, 4018, 4007, 3589, 1418, 1424, 1424, 1424,
     1424, 4018, 2409, 2408, 1419, 2406, 1422, 1422, 1422, 1422,
     1422, 1429, 1429, 1429, 1429, 1437, 1437, 1437, 1437, 1461,
     1461, 1461, 1461, 1472, 1472, 1472, 1472, 2401, 1563, 1429,
     2400, 1563, 1563, 1437, 1476, 1476, 1476, 1476, 1486, 1486,
     1486, 1486, 1487, 1487, 1487, 1487, 1563, 1488, 1488, 1488,
     1488, 2399, 2398, 1418, 1488, 1486, 2396, 2395, 1563, 1487,
     1488, 1489, 1489, 1489, 1489, 1490, 1490, 1490, 1490, 1491,
     1491, 1491, 1491, 2393, 1492, 1492, 1492, 1492, 1489, 1563,
     1472, 1493, 1493, 1493, 1493, 2390, 2389, 2384, 1493, 1494,

     1494, 1494, 1494, 1506, 1506, 1506, 1506, 1518, 1518, 1518,
     1518, 4020, 1523, 1523, 1523, 1523, 2382, 4019, 1506, 4020,
     1524, 1524, 1524, 1524, 4019, 4023, 1490, 2381, 2380, 2379,
     1491, 2377, 4019, 4023, 1491, 1492, 1523, 1524, 1526, 1526,
     1526, 1526, 1527, 1527, 1527, 1527, 1560, 1560, 1560, 1560,
     2376, 2373, 1562, 4025, 1494, 1562, 1562, 1568, 1568, 1568,
     1568, 4025, 2368, 4027, 1568, 1562, 1527, 1569, 1569, 1569,
     1569, 4027, 4024, 4030, 1569, 1570, 1570, 1570, 1570, 4024,
     2271, 4030, 1562, 2271, 2365, 2360, 1518, 4024, 1570, 1571,
     1571, 1571, 1571, 1573, 1573, 1573, 1573, 2359, 1576, 1576,

     1576, 1576, 1571, 1562, 2356, 1576, 1573, 1576, 2355, 4026,
     2271, 1576, 1577, 1577, 1577, 1577, 4026, 2354, 2353, 1577,
     2351, 1577, 2350, 4028, 4026, 1577, 1578, 1578, 1578, 1578,
     4028, 2271, 2349, 1578, 2347, 1578, 2346, 2345, 4028, 1578,
     1579, 1579, 1579, 1579, 1580, 1580, 1580, 1580, 1581, 1581,
     1581, 1581, 1584, 1584, 1584, 1584, 2344, 1585, 1585, 1585,
     1585, 4032, 2342, 1584, 1585, 1587, 1587, 1587, 1587, 2341,
     1585, 1589, 1589, 1589, 1589, 4045, 1584, 4032, 1589, 1590,
     1590, 1590, 1590, 4045, 4047, 4032, 1590, 2338, 4046, 1587,
     1579, 2337, 4047, 2282, 1580, 4046, 4052, 4064, 1581, 1592,

     1592, 1592, 1592, 4046, 4052, 4064, 1592, 1594, 1594, 1594,
     1594, 1595, 1595, 1595, 1595, 1595, 2281, 4037, 1595, 1596,
     1596, 1596, 1596, 2274, 1597, 1597, 1597, 1597, 2268, 2265,
     2256, 1594, 2253, 4037, 4067, 1595, 1597, 1598, 1598, 1598,
     1598, 4037, 4067, 1596, 1599, 1599, 1599, 1599, 1598, 1606,
     1606, 1606, 1606, 2252, 2250, 1599, 1608, 1608, 1608, 1608,
     1609, 1609, 1609, 1609, 1629, 1629, 1629, 1629, 2249, 1599,
     1634, 1634, 1634, 1634, 1637, 1637, 1637, 1637, 1609, 1640,
     1640, 1640, 1640, 1641, 2248, 4069, 1641, 1644, 1644, 1644,
     1644, 2247, 1595, 4069, 1599, 1650, 1650, 1650, 1650, 4038,

     2246, 2245, 1641, 1641, 1641, 1641, 1641, 1652, 1652, 1652,
     1652, 1656, 1656, 1656, 1656, 4038, 4071, 4073, 1652, 1657,
     1657, 1657, 1657, 4038, 4071, 4073, 1656, 1658, 1658, 1658,
     1658, 2244, 1652, 1670, 1670, 1670, 1670, 1671, 1671, 1671,
     1671, 1698, 1698, 1698, 1698, 4076, 1670, 4078, 1698, 1699,
     1699, 1699, 1699, 4076, 2243, 4078, 1699, 1652, 1700, 1700,
     1700, 1700, 1702, 1702, 1702, 1702, 1703, 1703, 1703, 1703,
     1700, 4081, 4084, 1700, 1702, 2242, 2241, 1702, 1703, 4081,
     4084, 1703, 1704, 1704, 1704, 1704, 1652, 1708, 1708, 1708,
     1708, 1698, 1706, 1706, 1706, 1706, 2239, 2238, 4048, 1699,

     1711, 1711, 1711, 1711, 1706, 4048, 4087, 1706, 1709, 1709,
     1709, 1709, 4089, 4048, 4087, 1709, 1710, 1710, 1710, 1710,
     4089, 2237, 2236, 1710, 1712, 1712, 1712, 1712, 1713, 1713,
     1713, 1713, 2235, 2234, 2233, 1712, 2232, 2231, 2230, 1713,
     1715, 1715, 1715, 1715, 1721, 1721, 1721, 1721, 2229, 4065,
     4074, 1715, 1723, 1723, 1723, 1723, 4065, 4074, 4091, 1723,
     1724, 1724, 1724, 1724, 4065, 4074, 4091, 1724, 1721, 1726,
     1726, 1726, 1726, 2228, 2227, 2226, 1726, 1728, 1728, 1728,
     1728, 1729, 1729, 1729, 1729, 1729, 2225, 2224, 1729, 1730,
     1730, 1730, 1730, 1778, 1778, 1778, 1778, 1779, 1779, 1779,

     1779, 1728, 2223, 2222, 4079, 1729, 1778, 1783, 1783, 1783,
     1783, 4079, 4093, 1730, 1784, 1784, 1784, 1784, 1783, 4079,
     4093, 2221, 1783, 4082, 2220, 1784, 2219, 2218, 2217, 1784,
     4082, 2216, 1783, 1783, 1785, 1785, 1785, 1785, 4082, 1784,
     1784, 1788, 1788, 1788, 1788, 1785, 2214, 2213, 1788, 1785,
     1786, 1786, 1786, 1786, 1787, 1787, 1787, 1787, 1785, 1785,
     1785, 4106, 1729, 1789, 1789, 1789, 1789, 1786, 2212, 4106,
     1789, 1787, 1791, 1791, 1791, 1791, 1791, 4090, 4092, 1791,
     1792, 1792, 1792, 1792, 4090, 4092, 1793, 1793, 1793, 1793,
     2209, 1792, 4090, 4092, 4108, 1792, 1791, 1793, 1794, 1794,

     1794, 1794, 4108, 2208, 2205, 1792, 1792, 2204, 2203, 1794,
     1795, 1795, 1795, 1795, 2202, 1801, 1801, 1801, 1801, 1801,
     2275, 1795, 1801, 2275, 1803, 1803, 1803, 1803, 4120, 4128,
     1804, 1804, 1804, 1804, 1795, 1803, 4120, 4128, 2201, 1801,
     2200, 1804, 1812, 1812, 1812, 1812, 1812, 2198, 1803, 1812,
     2275, 2194, 2189, 1791, 1804, 1813, 1813, 1813, 1813, 1814,
     1814, 1814, 1814, 2188, 2180, 4129, 1812, 1815, 1815, 1815,
     1815, 2275, 1813, 4094, 1815, 2172, 1814, 2167, 2166, 1813,
     4094, 4129, 2165, 1814, 1816, 1816, 1816, 1816, 4094, 4129,
     2277, 1816, 2164, 2277, 2163, 1804, 1801, 1803, 1817, 1817,

     1817, 1817, 1820, 1820, 1820, 1820, 1830, 2161, 2160, 1820,
     1836, 1836, 1836, 1836, 2157, 1830, 1830, 1830, 1830, 2154,
     2277, 2153, 1817, 1812, 1868, 1868, 1868, 1868, 1814, 1835,
     1835, 1835, 1835, 2152, 1836, 1835, 1837, 1837, 1837, 1837,
     1837, 2277, 4107, 1837, 1869, 1869, 1869, 1869, 4131, 4107,
     1868, 2148, 2147, 1835, 2146, 1870, 4131, 4107, 1870, 1835,
     1837, 1876, 1876, 1876, 1876, 4109, 4109, 2140, 1876, 2139,
     1869, 2137, 4109, 1835, 1870, 1870, 1870, 1870, 1870, 1835,
     4109, 2134, 4122, 1835, 1835, 1876, 1835, 1835, 1835, 4122,
     2133, 4133, 1835, 1835, 1835, 1835, 1835, 4122, 1835, 4133,

     1835, 1835, 1835, 1835, 1835, 1874, 1874, 1874, 1874, 1975,
     1975, 1975, 1975, 2132, 1874, 4136, 1874, 1837, 1874, 1875,
     1875, 1875, 1875, 4136, 2131, 2130, 1875, 2129, 1875, 2127,
     2126, 4134, 1875, 1877, 1877, 1877, 1877, 1878, 1878, 1878,
     1878, 1889, 2125, 1875, 1889, 1877, 1877, 4134, 1878, 1879,
     1879, 1879, 1879, 2124, 1889, 4134, 1879, 1877, 1874, 2122,
     2120, 1879, 1880, 1880, 1880, 1880, 1892, 1892, 1892, 1892,
     1892, 1889, 1875, 1892, 1880, 1880, 1895, 1895, 1895, 1895,
     1898, 1898, 1898, 1898, 2119, 2118, 1880, 1895, 1880, 2114,
     1892, 1898, 1889, 1899, 1899, 1899, 1899, 1898, 1900, 1900,

     1900, 1900, 2112, 2110, 1899, 1901, 1901, 1901, 1901, 1900,
     1899, 1910, 1910, 1910, 1910, 1900, 1901, 1902, 1902, 1902,
     1902, 2108, 1901, 2106, 1903, 1903, 1903, 1903, 1902, 1904,
     1904, 1904, 1904, 2104, 1902, 1903, 1907, 1907, 1907, 1907,
     1904, 1903, 1905, 1905, 1905, 1905, 1904, 1892, 1899, 1908,
     1908, 1908, 1908, 1905, 4130, 1909, 1909, 1909, 1909, 1905,
     1907, 4130, 1907, 1954, 1954, 1954, 1954, 1900, 1907, 4130,
     1910, 2102, 4139, 1908, 4143, 1908, 4132, 2100, 1901, 1909,
     4139, 1909, 4143, 4132, 2099, 1904, 2097, 1903, 2093, 1954,
     1902, 4132, 1903, 1909, 1908, 1912, 1912, 1912, 1912, 1913,

     1913, 1913, 1913, 1914, 1914, 1914, 1914, 2091, 1915, 1915,
     1915, 1915, 1905, 1916, 1916, 1916, 1916, 2080, 4157, 1912,
     4166, 1912, 4188, 1913, 2079, 1913, 4157, 1914, 4166, 1914,
     4188, 2078, 1915, 2075, 1915, 2071, 2069, 1916, 2068, 1916,
     1917, 1917, 1917, 1917, 1918, 1918, 1918, 1918, 2067, 2066,
     1919, 1919, 1919, 1919, 1920, 1920, 1920, 1920, 1921, 1921,
     1921, 1921, 2065, 4193, 1917, 2064, 1917, 2061, 1918, 1912,
     1918, 4193, 1913, 1915, 1919, 1914, 1919, 2060, 1920, 2059,
     1920, 2058, 1921, 2057, 1921, 1916, 1922, 1922, 1922, 1922,
     1923, 1923, 1923, 1923, 2056, 1924, 1924, 1924, 1924, 1978,

     1978, 1978, 1978, 1917, 1925, 1925, 1925, 1925, 4135, 4195,
     1922, 2055, 1922, 1918, 1923, 4135, 1923, 4195, 1919, 1924,
     1920, 1924, 2054, 4135, 2053, 1921, 2052, 2051, 1925, 2050,
     1925, 2049, 1926, 1926, 1926, 1926, 1927, 1927, 1927, 1927,
     1928, 1928, 1928, 1928, 2048, 1922, 1929, 1929, 1929, 1929,
     1989, 1989, 1989, 1989, 1924, 1923, 1926, 4200, 1926, 4213,
     1927, 4254, 1927, 1925, 1928, 4200, 1928, 4213, 2045, 4254,
     1929, 2044, 1929, 1930, 1930, 1930, 1930, 2043, 1931, 1931,
     1931, 1931, 1932, 1932, 1932, 1932, 1933, 1933, 1933, 1933,
     4282, 1926, 1934, 1934, 1934, 1934, 4137, 1930, 4282, 1930,

     4168, 1927, 1931, 4137, 1931, 2039, 1932, 4168, 1932, 1929,
     1933, 4137, 1933, 1928, 1957, 4168, 1934, 1957, 1934, 1935,
     1935, 1935, 1935, 1936, 1936, 1936, 1936, 4173, 1937, 1937,
     1937, 1937, 1930, 4286, 4173, 1931, 1938, 1938, 1938, 1938,
     1957, 4286, 4173, 1935, 1957, 1935, 2038, 1936, 1933, 1936,
     2032, 4296, 1937, 1932, 1937, 1939, 1939, 1939, 1939, 4296,
     1938, 2025, 1938, 4300, 4170, 1957, 1934, 1940, 1940, 1940,
     1940, 4300, 2024, 2023, 1935, 1941, 1941, 1941, 1941, 1939,
     4170, 1939, 1936, 2022, 1942, 1942, 1942, 1942, 4170, 2021,
     2020, 1940, 4320, 1940, 4321, 1943, 1943, 1943, 1943, 1941,

     4320, 1941, 4321, 1937, 2019, 1938, 2018, 2015, 1942, 1938,
     1942, 1944, 1944, 1944, 1944, 1945, 1945, 1945, 1945, 1943,
     1939, 1943, 1946, 1946, 1946, 1946, 1947, 1947, 1947, 1947,
     1948, 1948, 1948, 1948, 2010, 1944, 2008, 1944, 2001, 1945,
     4174, 1945, 1983, 1983, 1983, 1983, 1946, 4174, 1946, 1941,
     1947, 1942, 1947, 4328, 1948, 4174, 1948, 1955, 1955, 1955,
     1955, 4328, 1949, 1949, 1949, 1949, 1983, 2000, 1943, 1950,
     1950, 1950, 1950, 1993, 1951, 1951, 1951, 1951, 1991, 1987,
     1984, 1946, 1982, 1955, 1945, 1944, 1949, 1958, 1949, 1959,
     1958, 1981, 1959, 1950, 1947, 1950, 1960, 1948, 1951, 1960,

     1951, 1956, 1956, 1956, 1956, 1956, 4362, 1980, 1956, 1960,
     4393, 4171, 4417, 1958, 4362, 1959, 4434, 1958, 4393, 1959,
     4417, 1979, 1960, 1977, 4434, 1956, 1960, 4171, 1976, 1951,
     1985, 1985, 1985, 1985, 1974, 4171, 1949, 1969, 1958, 1968,
     1959, 1985, 1950, 1988, 1988, 1988, 1988, 1960, 1990, 1988,
     1994, 1990, 1995, 1995, 1995, 1995, 1985, 1967, 1966, 1994,
     1994, 1994, 1994, 1997, 1997, 1997, 1997, 1990, 1990, 1990,
     1990, 1990, 2002, 2002, 2002, 2002, 1965, 1964, 1963, 2002,
     4439, 1962, 1956, 2003, 2003, 2003, 2003, 1961, 4439, 4180,
     2003, 2004, 2004, 2004, 2004, 2005, 2005, 2005, 2005, 2007,

     2007, 2007, 2007, 2007, 1953, 4180, 2007, 4175, 2004, 1952,
     4454, 1911, 2005, 4180, 4175, 2004, 2011, 4181, 4454, 2005,
     1897, 1894, 4175, 2007, 1893, 2011, 2011, 2011, 2011, 2028,
     2028, 2028, 2028, 4181, 1882, 4491, 2028, 2029, 2029, 2029,
     2029, 4181, 2028, 4491, 2029, 2031, 2031, 2031, 2031, 1881,
     2029, 1872, 1871, 4194, 2005, 1867, 2033, 2033, 2033, 2033,
     4194, 1866, 2031, 2033, 2034, 2034, 2034, 2034, 4194, 1865,
     1864, 2034, 2035, 2035, 2035, 2035, 2041, 2041, 2041, 2041,
     2007, 2042, 2042, 2042, 2042, 2072, 2074, 2077, 1863, 2074,
     2077, 2041, 1861, 1860, 2072, 2072, 2072, 2072, 2082, 2082,

     2082, 2082, 1859, 1857, 1856, 2082, 1855, 2083, 2083, 2083,
     2083, 2082, 2074, 2077, 2083, 1854, 2074, 2077, 1853, 1852,
     2083, 2084, 2084, 2084, 2084, 2085, 2085, 2085, 2085, 2088,
     2088, 2088, 2088, 2088, 2084, 2094, 2088, 2074, 2077, 2089,
     2089, 2089, 2089, 1849, 2094, 2094, 2094, 2094, 2103, 2085,
     2089, 2116, 2107, 2088, 2116, 1848, 2111, 2103, 2103, 2103,
     2103, 2107, 2107, 2107, 2107, 2111, 2111, 2111, 2111, 2115,
     2116, 2116, 2116, 2116, 2116, 2123, 1847, 1845, 2115, 2115,
     2115, 2115, 1844, 1843, 2123, 2123, 2123, 2123, 2141, 2141,
     2141, 2141, 2142, 2142, 2142, 2142, 2143, 2143, 2143, 2143,

     2141, 1842, 1841, 2141, 2144, 2144, 2144, 2144, 1839, 1829,
     2088, 2145, 2145, 2145, 2145, 2150, 2150, 2150, 2150, 2150,
     1827, 1826, 2150, 2175, 2175, 2175, 2175, 1825, 4182, 2176,
     2176, 2176, 2176, 1824, 2175, 4182, 1823, 4182, 2175, 2150,
     2176, 1822, 1821, 4182, 2176, 4202, 1819, 2175, 2175, 2175,
     1810, 1805, 4202, 2176, 2176, 2176, 2178, 2178, 2178, 2178,
     4202, 2192, 2192, 2192, 2192, 1802, 1800, 2178, 2192, 2195,
     2195, 2195, 2195, 2207, 2199, 2199, 2199, 2199, 1782, 1775,
     2178, 2199, 2207, 2207, 2207, 2207, 1766, 2258, 2258, 2258,
     2258, 1765, 1763, 2195, 2258, 1762, 2150, 2159, 2159, 2159,

     2159, 2159, 2159, 2159, 2159, 2159, 2159, 2159, 2159, 2159,
     2159, 2159, 2159, 2159, 2159, 2159, 2159, 2159, 2159, 2159,
     2159, 2159, 2159, 2159, 2159, 2159, 2159, 2159, 2159, 2159,
     2159, 2159, 2159, 2159, 2159, 2159, 2159, 2159, 2159, 2159,
     2159, 2159, 2159, 2159, 2159, 2159, 2159, 2159, 2159, 2159,
     2159, 2159, 2159, 2159, 2159, 2159, 2159, 2159, 2159, 2159,
     2159, 2159, 2159, 2159, 2159, 2159, 2159, 2159, 2159, 2159,
     2159, 2159, 2159, 2159, 2159, 2159, 2159, 2159, 2159, 2159,
     2159, 2184, 2184, 2184, 2184, 2185, 2185, 2185, 2185, 1761,
     1760, 4225, 2184, 1759, 1757, 1756, 2185, 2191, 2191, 2191,

     2191, 2191, 1755, 1754, 2191, 2184, 1748, 4225, 1745, 2185,
     2193, 2193, 2193, 2193, 2193, 4225, 1744, 2193, 1743, 1740,
     1739, 2191, 2196, 2196, 2196, 2196, 2197, 2197, 2197, 2197,
     2211, 2211, 2211, 2211, 2193, 2257, 2257, 2257, 2257, 2196,
     2259, 2259, 2259, 2259, 2185, 1738, 2196, 2259, 1737, 1734,
     2197, 1733, 2184, 1722, 2211, 2254, 2254, 2254, 2254, 2257,
     1720, 2257, 2254, 1719, 2254, 1707, 1701, 1697, 2254, 2343,
     2343, 2343, 2343, 2255, 2255, 2255, 2255, 1693, 2191, 2254,
     2255, 4203, 2255, 1687, 1683, 1682, 2255, 2196, 4203, 1681,
     1680, 2193, 2210, 2210, 2210, 2210, 4203, 2255, 2210, 2260,

     2260, 2260, 2260, 2261, 2261, 2261, 2261, 1679, 2254, 1678,
     1676, 2260, 1675, 1668, 2261, 1667, 2210, 2263, 2263, 2263,
     2263, 1649, 2210, 2260, 2263, 2260, 2255, 1647, 4304, 2263,
     4212, 2264, 2264, 2264, 2264, 1639, 2210, 4212, 2264, 1636,
     1633, 1628, 2210, 2264, 4304, 4212, 2210, 2210, 1618, 2210,
     2210, 2210, 4304, 1617, 1616, 2210, 2210, 2210, 2210, 2210,
     1607, 2210, 1603, 2210, 2210, 2210, 2210, 2210, 2266, 2293,
     2293, 2293, 2293, 2266, 2352, 2352, 2352, 2352, 1588, 1586,
     2266, 2266, 2266, 2266, 2266, 2267, 2267, 2267, 2267, 1583,
     1582, 1559, 2267, 2293, 2267, 2293, 1554, 4343, 2267, 2269,

     2269, 2269, 2269, 2284, 2284, 2284, 2284, 1553, 2293, 2267,
     1551, 2269, 4222, 4343, 2284, 2285, 2285, 2285, 2285, 4222,
     2284, 4343, 1546, 2269, 1545, 1541, 2285, 4222, 2286, 2286,
     2286, 2286, 2285, 2287, 2287, 2287, 2287, 1540, 2267, 2286,
     2288, 2288, 2288, 2288, 2287, 2286, 2357, 2357, 2357, 2357,
     2287, 2288, 2289, 2289, 2289, 2289, 1539, 2288, 1538, 2290,
     2290, 2290, 2290, 2289, 2291, 2291, 2291, 2291, 1536, 2289,
     2290, 2292, 2292, 2292, 2292, 2291, 2290, 2363, 2363, 2363,
     2363, 2291, 2292, 2294, 2294, 2294, 2294, 2285, 2292, 1535,
     1534, 1533, 2287, 2286, 2295, 2295, 2295, 2295, 2296, 2296,

     2296, 2296, 1525, 2288, 1503, 1502, 1501, 2294, 1500, 2294,
     2297, 2297, 2297, 2297, 2298, 2298, 2298, 2298, 2295, 1499,
     2295, 1498, 2296, 1495, 2296, 2294, 1484, 2289, 1482, 2291,
     1481, 2295, 2290, 1480, 2297, 1474, 2297, 1473, 2298, 1471,
     2298, 2299, 2299, 2299, 2299, 2292, 2300, 2300, 2300, 2300,
     2301, 2301, 2301, 2301, 2296, 1470, 4230, 1451, 2302, 2302,
     2302, 2302, 1447, 4230, 1445, 2299, 1444, 2299, 4233, 1435,
     2300, 4230, 2300, 1427, 2301, 4233, 2301, 2304, 2304, 2304,
     2304, 2297, 2302, 4233, 2302, 1423, 2298, 2305, 2305, 2305,
     2305, 1411, 2306, 2306, 2306, 2306, 2299, 2361, 2361, 2361,

     2361, 2304, 1408, 2304, 2362, 2362, 2362, 2362, 2361, 1403,
     2362, 2305, 1400, 2305, 1396, 1386, 2306, 2301, 2306, 2300,
     1385, 2302, 2303, 2303, 2303, 2303, 2303, 2303, 2303, 2303,
     2303, 2303, 2303, 2303, 2303, 2303, 2303, 2303, 2303, 2303,
     2303, 2303, 4367, 2307, 2307, 2307, 2307, 2303, 1384, 2303,
     2303, 2303, 2303, 2303, 1383, 1382, 2304, 1381, 4367, 1380,
     2305, 2306, 2308, 2308, 2308, 2308, 4367, 2307, 1379, 2307,
     1378, 1371, 2367, 2303, 2303, 2303, 2303, 2348, 2348, 2348,
     2348, 2367, 2367, 2367, 2367, 1369, 2308, 1368, 2308, 2309,
     2309, 2309, 2309, 2310, 2310, 2310, 2310, 2311, 2311, 2311,

     2311, 2348, 2303, 2303, 2303, 2303, 2307, 4235, 2312, 2312,
     2312, 2312, 1367, 2309, 4235, 2309, 1366, 2310, 1365, 2310,
     1364, 2311, 4235, 2311, 2313, 2313, 2313, 2313, 2314, 2314,
     2314, 2314, 2312, 2308, 2312, 2315, 2315, 2315, 2315, 2316,
     2316, 2316, 2316, 2317, 2317, 2317, 2317, 1341, 2313, 1339,
     2313, 4241, 2314, 4242, 2314, 4243, 2309, 1338, 4241, 2315,
     4242, 2315, 4243, 2316, 2310, 2316, 4241, 2317, 4242, 2317,
     4243, 2311, 2318, 2318, 2318, 2318, 2312, 4377, 2319, 2319,
     2319, 2319, 2320, 2320, 2320, 2320, 2321, 2321, 2321, 2321,
     4253, 2313, 1302, 4377, 2316, 1300, 2318, 4253, 2318, 2314,

     1289, 4377, 2319, 2315, 2319, 4253, 2320, 1288, 2320, 1280,
     2321, 2317, 2321, 1269, 2322, 2322, 2322, 2322, 2323, 2323,
     2323, 2323, 2324, 2324, 2324, 2324, 2325, 2325, 2325, 2325,
     2386, 2386, 2386, 2386, 2319, 1268, 4260, 2318, 2322, 1262,
     2322, 2321, 2323, 4260, 2323, 1261, 2324, 2386, 2324, 1259,
     2325, 4260, 2325, 1257, 2320, 2326, 2326, 2326, 2326, 1255,
     2327, 2327, 2327, 2327, 2328, 2328, 2328, 2328, 2329, 2329,
     2329, 2329, 1254, 2322, 1253, 4484, 1251, 2323, 1249, 2326,
     4274, 2326, 4281, 2325, 2327, 2324, 2327, 4274, 2328, 4281,
     2328, 4484, 2329, 1248, 2329, 4274, 1247, 4281, 2325, 4484,

     2330, 2330, 2330, 2330, 2331, 2331, 2331, 2331, 2332, 2332,
     2332, 2332, 1246, 1244, 1235, 2327, 4261, 4261, 2326, 2333,
     2333, 2333, 2333, 4261, 2330, 2329, 2330, 2328, 2331, 1234,
     2331, 4261, 2332, 1233, 2332, 2334, 2334, 2334, 2334, 2370,
     2370, 2370, 2370, 2333, 1231, 2333, 2335, 2335, 2335, 2335,
     2336, 2336, 2336, 2336, 1229, 1228, 2370, 4485, 1227, 2334,
     1226, 2334, 2331, 2370, 1224, 2330, 2371, 2371, 2371, 2371,
     2335, 2331, 2335, 4485, 2336, 2332, 2336, 1201, 1195, 1193,
     2333, 4485, 1191, 2371, 2372, 2372, 2372, 2372, 2375, 1190,
     2371, 1179, 1168, 1164, 2334, 1138, 1134, 2375, 2375, 2375,

     2375, 2372, 2388, 2388, 2388, 2388, 2413, 4284, 2372, 2391,
     2391, 2391, 2391, 1119, 4284, 2413, 2413, 2413, 2413, 1117,
     2335, 1095, 4284, 2336, 2414, 2414, 2414, 2414, 2415, 2415,
     2415, 2415, 2420, 2416, 2416, 2416, 2416, 2414, 2427, 4285,
     1094, 2420, 2420, 2420, 2420, 1093, 4285, 2427, 2427, 2427,
     2427, 2430, 2415, 1091, 4285, 2433, 2372, 2416, 1078, 2436,
     2430, 2430, 2430, 2430, 2433, 2433, 2433, 2433, 2436, 2436,
     2436, 2436, 2442, 2480, 2480, 2480, 2480, 1077, 1076, 1067,
     2480, 2442, 2442, 2442, 2442, 2452, 2452, 1055, 1044, 1033,
     2452, 1017, 1007, 2452, 2452, 2481, 2481, 2481, 2481,  988,

      944,  938, 2481, 2452,  937, 2452, 2464, 2464, 2464, 2464,
     2464, 2464, 2464, 2464, 2464, 2464, 2464, 2464, 2464, 2464,
     2464, 2464, 2464, 2464, 2464, 2464, 2464, 2464, 2464, 2464,
     2464, 2464, 2464, 2464, 2464, 2464, 2464, 2464, 2464, 2464,
     2464, 2464, 2464, 2464, 2464, 2464, 2464, 2464, 2464, 2464,
     2464, 2464, 2464, 2464, 2464, 2464, 2464, 2464, 2464, 2464,
     2464, 2464, 2464, 2464, 2464, 2464, 2464, 2464, 2464, 2464,
     2464, 2464, 2464, 2464, 2464, 2464, 2464, 2464, 2464, 2464,
     2464, 2464, 2464, 2464, 2464, 2464, 2464, 2464, 2464, 2464,
     2475, 2475,  936,  913,  905, 2475,  897,  889, 2475, 2475,

     2477, 2477, 2477, 2477, 2478, 2478, 2478, 2478, 2475,  880,
     2475, 2477,  870,  864,  859, 2478, 2483, 2483, 2483, 2483,
     2486, 2486, 2486, 2486, 2477,  846,  840, 4288, 2478, 2485,
     2485, 2485, 2485, 2485, 4288,  829, 2485,  818, 4283,  790,
     2483,  789, 4288,  788, 2486, 4283, 2487, 2487, 2487, 2487,
      787,  784, 4283, 2485, 4287, 2477, 2498, 2498, 2498, 2498,
     4283, 4287, 2478, 2487, 2513, 2513, 2513, 2513, 4287,  780,
     2487, 2543, 2543, 2543, 2543,  770, 4287,  769, 2543,  768,
     2498,  767, 2544, 2544, 2544, 2544, 2628, 2628, 2628, 2628,
      756, 2548, 2548, 2548, 2548, 2543, 2545, 2545, 2545, 2545,

      755,  753,  752, 2548,  751, 2487, 2544,  750,  749,  718,
     2485, 2497, 2497, 2497, 2497, 2548, 2551, 2497,  693,  687,
     2545, 2551, 2545,  685, 2549, 2549, 2549, 2549, 2551, 2551,
     2551, 2551, 2551,  684,  661, 2497, 2549, 2637, 2637, 2637,
     2637, 2497,  654, 2513, 2552,  639,  638,  595, 2549, 2552,
     2549, 2632, 2632, 2632, 2632, 2497, 2552, 2552, 2552, 2552,
     2552, 2497, 2632,  583, 4299, 2497, 2497,  572, 2497, 2497,
     2497, 4299,  556,  555, 2497, 2497, 2497, 2497, 2497, 4299,
     2497,  553, 2497, 2497, 2497, 2497, 2497, 2558, 2558, 2558,
     2558, 2559, 2559, 2559, 2559, 4483,  546, 4493, 2558, 4494,

      532, 4483, 2559, 4493, 2558, 4494,  531,  529, 2559, 2560,
     2560, 2560, 2560, 2561, 2561, 2561, 2561, 4483,  515, 4493,
     2560, 4494,  506, 2632, 2561, 4483, 2560, 4493,  504, 4494,
     2561, 2562, 2562, 2562, 2562, 2563, 2563, 2563, 2563,  503,
      502,  501, 2562, 4297, 4297,  500, 2563,  499, 2562,  447,
     4297,  415, 2563, 2564, 2564, 2564, 2564,  411, 4297, 2567,
     2567, 2567, 2567, 2559, 2564,  407,  406,  381, 2560,  379,
     2564, 2565, 2565, 2565, 2565, 2566, 2566, 2566, 2566,  377,
      368,  364, 2565, 2567, 2561, 2567, 2566,  330, 2565,  319,
     2563,  301, 2566,  299, 2567, 2648, 2648, 2648, 2648, 2562,

     2568, 2568, 2568, 2568, 2569, 2569, 2569, 2569, 2634, 2634,
     2634, 2634, 2564, 2570, 2570, 2570, 2570,  284, 4311, 2634,
      261, 2564,    0,    0, 2568, 4311, 2568, 4329, 2569, 4329,
     2569,    0,    0, 4311, 2565,    0, 4329, 2570, 2566, 2570,
        0,    0,    0, 2568, 4329, 2569, 2571, 2571, 2571, 2571,
     2572, 2572, 2572, 2572,    0, 2573, 2573, 2573, 2573, 2574,
     2574, 2574, 2574, 2575, 2575, 2575, 2575,    0,    0,    0,
     2571,    0, 2571, 4330, 2572,    0, 2572,    0, 2570, 2573,
     4330, 2573, 4330, 2574,    0, 2574,    0, 2575, 4330, 2575,
     2576, 2576, 2576, 2576, 2578, 2578, 2578, 2578,    0,    0,

        0, 2571, 2581, 2581, 2581, 2581, 2582, 2582, 2582, 2582,
     2584, 2584, 2584, 2584, 2576,    0, 2576,    0, 2578,    0,
     2578,    0, 2575,    0,    0,    0, 2581, 2573, 2581, 2572,
     2582,    0, 2582,    0, 2584,    0, 2584,    0, 2585, 2585,
     2585, 2585, 2586, 2586, 2586, 2586, 2587, 2587, 2587, 2587,
     2588, 2588, 2588, 2588,    0,    0,    0, 2576, 2589, 2589,
     2589, 2589, 2585, 2582, 2585,    0, 2586,    0, 2586,    0,
     2587,    0, 2587,    0, 2588,    0, 2588,    0, 2582,    0,
        0,    0, 2589,    0, 2589,    0, 2590, 2590, 2590, 2590,
     2591, 2591, 2591, 2591, 2592, 2592, 2592, 2592,    0, 2586,

     2593, 2593, 2593, 2593, 2594, 2594, 2594, 2594, 2588,    0,
     2590, 2585, 2590, 2587, 2591,    0, 2591,    0, 2592,    0,
     2592, 2589,    0,    0, 2593,    0, 2593,    0, 2594,    0,
     2594,    0, 2595, 2595, 2595, 2595,    0, 2596, 2596, 2596,
     2596,    0,    0,    0, 2590, 2597, 2597, 2597, 2597, 2636,
     2636, 2636, 2636, 2592,    0, 2636, 2595, 2591, 2595,    0,
     2593, 2596,    0, 2596,    0, 4322,    0, 2593,    0, 2597,
     4322, 2597, 4322, 2594, 2598, 2598, 2598, 2598,    0,    0,
     4322, 2599, 2599, 2599, 2599, 2600, 2600, 2600, 2600, 2601,
     2601, 2601, 2601,    0,    0, 2596,    0,    0, 2598, 4342,

     2598,    0,    0, 2595, 2597, 2599, 4342, 2599,    0, 2600,
        0, 2600,    0, 2601, 4342, 2601, 2602, 2602, 2602, 2602,
     2603, 2603, 2603, 2603,    0, 2606, 2606, 2606, 2606, 2607,
     2607, 2607, 2607, 2608, 2608, 2608, 2608,    0,    0, 2598,
     2602, 4348, 2602,    0, 2603,    0, 2603,    0, 4348, 2606,
     2599, 2606,    0, 2607,    0, 2607, 4348, 2608, 2600, 2608,
     2601, 2609, 2609, 2609, 2609, 2610, 2610, 2610, 2610, 2611,
     2611, 2611, 2611, 2602,    0,    0,    0, 2603, 2612, 2612,
     2612, 2612,    0,    0,    0, 2609,    0, 2609,    0, 2610,
     2608, 2610,    0, 2611, 2607, 2611, 2606, 2613, 2613, 2613,

     2613,    0, 2612,    0, 2612, 2614, 2614, 2614, 2614,    0,
        0, 2615, 2615, 2615, 2615, 2616, 2616, 2616, 2616,    0,
     2610, 2613,    0, 2613, 2617, 2617, 2617, 2617, 2611, 2614,
        0, 2614,    0, 2612, 2609, 2615,    0, 2615,    0, 2616,
        0, 2616, 2643, 2643, 2643, 2643,    0,    0, 2617,    0,
     2617, 2649, 2649, 2649, 2649, 2674, 2674, 2674, 2674, 2643,
     4357,    0, 2674,    0,    0,    0, 2643, 4357, 2674,    0,
     2616, 2728, 2728, 2728, 2728, 4357, 2613, 2729, 2729, 2729,
     2729,    0, 2728,    0, 2615,    0,    0, 2617, 2729, 2731,
     2731, 2731, 2731, 2731,    0, 2728, 2731, 2736, 2736, 2736,

     2736, 2729, 2732, 2732, 2732, 2732, 2739, 2739, 2739, 2739,
        0, 2643,    0, 2731, 2649, 2750, 2750, 2750, 2750, 2732,
     2752, 2752, 2752, 2752,    0,    0, 2732,    0, 2728,    0,
     2739, 2754, 2754, 2754, 2754, 2755, 2755, 2755, 2755, 2777,
     2777, 2777, 2777, 2783, 2783, 2783, 2783,    0, 4360,    0,
     2783, 2784, 2784, 2784, 2784, 4360, 2729,    0, 2784,    0,
     2784,    0,    0, 4360, 2784,    0,    0,    0, 2732,    0,
     2731, 2738, 2738, 2738, 2738, 2784,    0, 2738, 2786, 2786,
     2786, 2786, 2789, 2789, 2789, 2789,    0,    0, 2754, 2790,
     2790, 2790, 2790, 2789, 2750, 2738,    0,    0,    0, 2789,

     2790, 2738, 2786, 2754, 2784,    0, 2790, 2803, 2803, 2803,
     2803, 2850, 2850, 2850, 2850, 2738,    0, 4374, 2777,    0,
        0, 2738,    0,    0, 4374, 2738, 2738,    0, 2738, 2738,
     2738, 2803, 4374, 2803, 2738, 2738, 2738, 2738, 2738,    0,
     2738,    0, 2738, 2738, 2738, 2738, 2738, 2791, 2791, 2791,
     2791, 2792, 2792, 2792, 2792, 2790,    0,    0, 2791,    0,
        0,    0, 2792,    0, 2791,    0,    0,    0, 2792, 2793,
     2793, 2793, 2793, 2794, 2794, 2794, 2794,    0,    0,    0,
     2793,    0,    0,    0, 2794,    0, 2793,    0,    0,    0,
     2794, 2795, 2795, 2795, 2795, 2796, 2796, 2796, 2796,    0,

        0,    0, 2795,    0, 4389, 4389, 2796, 2791, 2795,    0,
        0, 4389, 2796,    0, 2797, 2797, 2797, 2797, 2792, 4389,
     2798, 2798, 2798, 2798,    0, 2797, 2857, 2857, 2857, 2857,
     2794, 2797, 2799, 2799, 2799, 2799,    0, 2800, 2800, 2800,
     2800,    0, 2793, 4385, 2798,    0, 2798, 4390, 2795,    0,
     4385,    0, 2796, 2798, 4390,    0, 2799, 4385, 2799,    0,
        0, 2800, 4390, 2800,    0, 4385,    0, 2799, 2800, 2801,
     2801, 2801, 2801, 2802, 2802, 2802, 2802, 2805, 2805, 2805,
     2805, 2806, 2806, 2806, 2806, 2797,    0, 2807, 2807, 2807,
     2807,    0,    0, 2801,    0, 2801,    0, 2802, 2807, 2802,

        0, 2805,    0, 2805,    0, 2806,    0, 2806,    0,    0,
        0, 2807,    0, 2807,    0, 2808, 2808, 2808, 2808, 2811,
     2811, 2811, 2811,    0, 2812, 2812, 2812, 2812,    0,    0,
     2802, 2806, 2801, 2813, 2813, 2813, 2813, 4395, 2806, 2808,
     2806, 2808,    0, 2811, 4395, 2811,    0,    0, 2812, 2805,
     2812,    0, 4395, 2806,    0, 2806,    0, 2813,    0, 2813,
     2814, 2814, 2814, 2814,    0, 2814, 2815, 2815, 2815, 2815,
        0, 2816, 2816, 2816, 2816, 2817, 2817, 2817, 2817, 2818,
     2818, 2818, 2818,    0, 2814,    0, 2814, 2812, 2808,    0,
     2815,    0, 2815,    0,    0, 2816, 2813, 2816,    0, 2817,

        0, 2817,    0, 2818,    0, 2818, 2819, 2819, 2819, 2819,
        0, 2820, 2820, 2820, 2820, 2821, 2821, 2821, 2821, 2822,
     2822, 2822, 2822, 2823, 2823, 2823, 2823,    0, 2816,    0,
     2819, 4398, 2819, 4421, 2817, 2820, 4398, 2820, 4398, 2821,
     4421, 2821,    0, 2822, 2818, 2822, 4398, 2823, 4421, 2823,
     2824, 2824, 2824, 2824, 2825, 2825, 2825, 2825, 2826, 2826,
     2826, 2826, 2859, 2859, 2859, 2859, 2820,    0, 4430,    0,
     2821,    0,    0, 2859, 2824, 4430, 2824,    0, 2825,    0,
     2825,    0, 2826, 4430, 2826, 2827, 2827, 2827, 2827, 2828,
     2828, 2828, 2828, 4453, 2829, 2829, 2829, 2829,    0, 4467,

     4453, 2823, 2830, 2830, 2830, 2830, 4467,    0, 4453, 2827,
     4405, 2827, 4405, 2828, 4467, 2828,    0, 2826, 2829, 4405,
     2829,    0, 2824,    0,    0,    0, 2830, 4405, 2830, 2831,
     2831, 2831, 2831, 2834, 2834, 2834, 2834,    0,    0, 4478,
     2827,    0, 2835, 2835, 2835, 2835, 4478,    0, 2828, 2860,
     2860, 2860, 2860, 2831, 4478, 2831,    0, 2834,    0, 2834,
     2836, 2836, 2836, 2836,    0,    0, 2835, 2829, 2835, 2837,
     2837, 2837, 2837, 2831,    0, 2830, 2838, 2838, 2838, 2838,
     2839, 2839, 2839, 2839, 2836,    0, 2836, 2840, 2840, 2840,
     2840,    0, 2834, 2837,    0, 2837, 2841, 2841, 2841, 2841,

     2838, 2831, 2838,    0, 2839,    0, 2839, 2843, 2843, 2843,
     2843, 2840,    0, 2840, 2835, 2844, 2844, 2844, 2844,    0,
     2841,    0, 2841, 4486,    0,    0, 2845, 2845, 2845, 2845,
     4486, 2843,    0, 2843, 2846, 2846, 2846, 2846, 4486, 2844,
     2839, 2844, 2847, 2847, 2847, 2847,    0,    0, 2837, 2838,
     2845,    0, 2845, 2840, 2854, 2854, 2854, 2854, 2846,    0,
     2846, 2863, 2863, 2863, 2863, 2854, 2847,    0, 2847,    0,
        0,    0, 2844, 2861, 2861, 2861, 2861, 2865, 2865, 2865,
     2865,    0,    0, 2865, 2861,    0,    0, 2844, 2866, 2866,
     2866, 2866, 2868, 2868, 2868, 2868,    0,    0,    0, 2846,

     2870, 2870, 2870, 2870, 2845,    0,    0, 2847,    0, 2868,
     2925, 2925, 2925, 2925,    0,    0, 2868, 2926, 2926, 2926,
     2926, 2925, 2929, 2929, 2929, 2929, 2854,    0, 2926, 2931,
     2931, 2931, 2931,    0, 2925, 2933, 2933, 2933, 2933, 2929,
        0, 2926, 2934, 2934, 2934, 2934, 2929, 2868, 2935, 2935,
     2935, 2935, 2936, 2936, 2936, 2936, 2948, 2948, 2948, 2948,
     2950, 2950, 2950, 2950,    0, 2870, 2952, 2952, 2952, 2952,
     2955, 2955, 2955, 2955,    0,    0, 2936, 2957, 2957, 2957,
     2957, 2929,    0, 2925, 2960, 2960, 2960, 2960, 2963, 2963,
     2963, 2963, 2969, 2969, 2969, 2969, 2926, 2971, 2971, 2971,

     2971, 2972, 2972, 2972, 2972,    0,    0,    0, 2960,    0,
     2950, 2975, 2975, 2975, 2975,    0, 2969, 2950, 4488, 2950,
     2982, 2982, 2982, 2982,    0, 4488,    0, 2983, 2983, 2983,
     2983, 2982, 2950, 4488, 2950,    0, 2969, 2982, 2983, 2984,
     2984, 2984, 2984,    0, 2983,    0, 2985, 2985, 2985, 2985,
     2984, 2986, 2986, 2986, 2986,    0, 2984, 2985, 2987, 2987,
     2987, 2987, 2986, 2985, 2969,    0,    0,    0, 2986, 2987,
     2988, 2988, 2988, 2988,    0, 2987,    0,    0,    0, 2982,
     2972, 2988, 2983, 2990, 2990, 2990, 2990, 2988,    0, 2989,
     2989, 2989, 2989,    0, 2984, 2991, 2991, 2991, 2991,    0,

     2989, 2992, 2992, 2992, 2992, 2985, 2989, 2990,    0, 2990,
     2993, 2993, 2993, 2993, 3015, 3015, 3015, 3015,    0, 2991,
        0, 2991, 4489,    0, 2986, 2992, 2987, 2992,    0, 4489,
     2990,    0, 4495,    0, 2993,    0, 2993, 4489, 3015, 4495,
     2991, 2992, 2994, 2994, 2994, 2994,    0, 4495, 2989, 2995,
     2995, 2995, 2995, 2998, 2998, 2998, 2998, 2999, 2999, 2999,
     2999,    0, 2999,    0, 2998,    0, 2994, 2999, 2994, 3000,
     3000, 3000, 3000, 2995,    0, 2995,    0, 2998,    0, 2998,
        0,    0, 2993, 3003, 3003, 3003, 3003, 3004, 3004, 3004,
     3004,    0,    0, 3000,    0, 3000, 3005, 3005, 3005, 3005,

        0, 3005,    0, 3008, 3008, 3008, 3008, 3003,    0, 3003,
        0, 3004,    0, 3004,    0, 2994, 3007, 3007, 3007, 3007,
     3005,    0, 3005, 3011, 3011, 3011, 3011, 3008, 3000, 3008,
        0,    0,    0, 3010, 3010, 3010, 3010,    0,    0,    0,
     3007, 4496, 3007, 3014, 3014, 3014, 3014, 3011, 4496, 3011,
        0, 3003, 3013, 3013, 3013, 3013, 4496, 3010,    0, 3010,
     3004, 3016, 3016, 3016, 3016,    0,    0, 3014,    0, 3014,
        0,    0,    0, 3007,    0,    0, 3013,    0, 3013, 3043,
     3043, 3043, 3043,    0,    0, 3016,    0, 3016, 3007,    0,
     3007, 3009, 3009, 3009, 3009, 3009, 3009, 3009, 3009, 3009,

     3009, 3009, 3009, 3009, 3009, 3009, 3009, 3009, 3009, 3009,
     3009, 3010, 3012, 3012, 3012, 3012, 3009, 3013, 3009, 3009,
     3009, 3009, 3009, 3017, 3017, 3017, 3017, 3018, 3018, 3018,
     3018, 3019, 3019, 3019, 3019,    0, 3012,    0, 3012,    0,
        0,    0, 3009, 3009, 3009, 3009, 3009, 3017,    0, 3017,
        0, 3018,    0, 3018,    0, 3019,    0, 3019, 3020, 3020,
     3020, 3020, 3021, 3021, 3021, 3021,    0,    0,    0, 3012,
        0, 3009, 3009, 3009, 3009, 3022, 3022, 3022, 3022,    0,
        0,    0, 3020,    0, 3020,    0, 3021,    0, 3021,    0,
     3023, 3023, 3023, 3023,    0, 3024, 3024, 3024, 3024, 3022,

        0, 3022, 3025, 3025, 3025, 3025, 3021, 3026, 3026, 3026,
     3026,    0,    0,    0, 3023, 3020, 3023,    0,    0, 3024,
        0, 3024, 3027, 3027, 3027, 3027, 3025, 3047, 3047, 3047,
     3047, 3026,    0, 3026, 3021,    0,    0, 4386, 3022, 3024,
     3031, 3031, 3031, 3031, 4386,    0, 3027,    0, 3027, 3023,
        0, 4386,    0, 3022, 3032, 3032, 3032, 3032,    0, 4386,
        0, 3026,    0,    0, 3031,    0, 3031, 3024, 3033, 3033,
     3033, 3033, 3035, 3035, 3035, 3035,    0,    0, 3032,    0,
     3032, 3036, 3036, 3036, 3036,    0,    0, 3027, 3037, 3037,
     3037, 3037, 3033,    0, 3033,    0, 3035,    0, 3035, 3040,

     3040, 3040, 3040,    0,    0, 3036,    0, 3036, 3041, 3041,
     3041, 3041, 3037,    0, 3037, 3042, 3042, 3042, 3042, 3046,
     3046, 3046, 3046, 3040,    0, 3040, 3048, 3048, 3048, 3048,
     3046, 3035, 3041,    0, 3041, 3052, 3052, 3052, 3052, 3042,
        0, 3042, 3054, 3054, 3054, 3054, 3052, 3037, 3055, 3055,
     3055, 3055, 3057, 3057, 3057, 3057,    0,    0, 3057, 3058,
     3058, 3058, 3058, 3060, 3060, 3060, 3060,    0, 3040, 3061,
     3061, 3061, 3061,    0, 3042, 3107, 3107, 3107, 3107,    0,
     3060, 3108, 3108, 3108, 3108,    0,    0, 3060, 3109, 3109,
     3109, 3109, 3107, 3111, 3111, 3111, 3111,    0,    0, 3107,

     3112, 3112, 3112, 3112,    0, 3113, 3113, 3113, 3113, 3120,
     3120, 3120, 3120, 3125, 3125, 3125, 3125,    0,    0,    0,
     3060, 3129, 3129, 3129, 3129,    0,    0,    0, 3061, 3113,
     3131, 3131, 3131, 3131, 3134, 3134, 3134, 3134, 3135, 3135,
     3135, 3135, 3107, 3136, 3136, 3136, 3136, 3137, 3137, 3137,
     3137, 3138, 3138, 3138, 3138,    0,    0,    0, 3134, 3139,
     3139, 3139, 3139, 3141, 3141, 3141, 3141, 3144, 3144, 3144,
     3144, 3137, 3145, 3145, 3145, 3145, 3148, 3148, 3148, 3148,
     3149, 3149, 3149, 3149,    0,    0,    0, 3141,    0,    0,
        0, 3144, 3150, 3150, 3150, 3150, 3151, 3151, 3151, 3151,

     3148, 3154, 3154, 3154, 3154,    0,    0, 3141,    0,    0,
        0, 3144, 3157, 3157, 3157, 3157, 3158, 3158, 3158, 3158,
        0,    0,    0, 3157,    0,    0,    0, 3158,    0, 3157,
        0,    0,    0, 3158,    0, 3141,    0,    0,    0, 3144,
     3159, 3159, 3159, 3159, 3160, 3160, 3160, 3160,    0,    0,
        0, 3159,    0,    0,    0, 3160,    0, 3159,    0,    0,
        0, 3160,    0, 3161, 3161, 3161, 3161, 3162, 3162, 3162,
     3162,    0,    0, 3158, 3161,    0,    0,    0, 3162, 3157,
     3161,    0,    0,    0, 3162, 3163, 3163, 3163, 3163, 3164,
     3164, 3164, 3164,    0,    0,    0, 3163,    0,    0,    0,

     3164, 3165, 3165, 3165, 3165, 3159, 3164, 3166, 3166, 3166,
     3166, 3167, 3167, 3167, 3167, 3168, 3168, 3168, 3168,    0,
        0,    0, 3161,    0,    0, 3165,    0, 3165,    0,    0,
        0, 3166, 3162, 3166,    0, 3167,    0, 3167,    0, 3168,
        0, 3168, 3169, 3169, 3169, 3169,    0, 3164, 3170, 3170,
     3170, 3170,    0,    0, 3166,    0,    0, 3167,    0, 3172,
     3172, 3172, 3172,    0, 3172,    0, 3169,    0, 3169, 3172,
        0,    0, 3170,    0, 3170,    0,    0, 3168, 3174, 3174,
     3174, 3174,    0, 3177, 3177, 3177, 3177, 3178, 3178, 3178,
     3178, 3183, 3183, 3183, 3183, 3185, 3185, 3185, 3185,    0,

        0,    0, 3174,    0, 3174,    0,    0, 3177,    0, 3177,
        0, 3178,    0, 3178,    0, 3183,    0, 3183,    0, 3185,
        0, 3185, 3186, 3186, 3186, 3186,    0, 3187, 3187, 3187,
     3187, 3188, 3188, 3188, 3188, 3189, 3189, 3189, 3189,    0,
     3190, 3190, 3190, 3190,    0,    0, 3186,    0, 3186, 3174,
     3177, 3187,    0, 3187,    0, 3188,    0, 3188, 3191, 3191,
     3191, 3191,    0, 3185, 3190,    0, 3190, 3192, 3192, 3192,
     3192, 3193, 3193, 3193, 3193, 3194, 3194, 3194, 3194,    0,
        0,    0, 3191,    0, 3191,    0, 3187, 3195, 3195, 3195,
     3195, 3192,    0, 3192,    0, 3193,    0, 3193,    0, 3194,

        0, 3194, 3196, 3196, 3196, 3196,    0, 3197, 3197, 3197,
     3197, 3195, 3198, 3198, 3198, 3198,    0,    0,    0, 3194,
     3199, 3199, 3199, 3199,    0,    0, 3196,    0, 3196,    0,
     3193, 3197,    0, 3197,    0,    0, 3198,    0, 3198, 3200,
     3200, 3200, 3200,    0, 3199,    0, 3199, 3194, 3201, 3201,
     3201, 3201, 3202, 3202, 3202, 3202, 3196, 3203, 3203, 3203,
     3203,    0,    0, 3200,    0, 3200, 3206, 3206, 3206, 3206,
        0, 3198, 3197,    0,    0,    0, 3202,    0, 3202,    0,
        0, 3203,    0, 3203, 3207, 3207, 3207, 3207,    0,    0,
     3206,    0, 3206, 3208, 3208, 3208, 3208, 3200, 3202,    0,

     3209, 3209, 3209, 3209, 3210, 3210, 3210, 3210, 3207,    0,
     3207, 3213, 3213, 3213, 3213,    0,    0, 3208, 3214, 3214,
     3214, 3214,    0,    0, 3209, 3203, 3209,    0, 3210,    0,
     3210,    0,    0,    0, 3206, 3213,    0, 3213, 3215, 3215,
     3215, 3215, 3214,    0, 3214, 3219, 3219, 3219, 3219,    0,
     3209, 3220, 3220, 3220, 3220,    0,    0, 3209,    0, 3209,
     3221, 3221, 3221, 3221,    0, 3222, 3222, 3222, 3222,    0,
     3213, 3222, 3209,    0, 3209, 3209, 3223, 3223, 3223, 3223,
     3225, 3225, 3225, 3225, 3241, 3241, 3241, 3241, 3261, 3261,
     3261, 3261, 3262, 3262, 3262, 3262,    0, 3225, 3263, 3263,

     3263, 3263,    0, 3215, 3225, 3261, 3264, 3264, 3264, 3264,
        0,    0, 3261, 3265, 3265, 3265, 3265, 3269, 3269, 3269,
     3269, 3272, 3272, 3272, 3272, 3276, 3276, 3276, 3276, 3277,
     3277, 3277, 3277, 3280, 3280, 3280, 3280, 3265,    0, 3225,
     3281, 3281, 3281, 3281, 3283, 3283, 3283, 3283, 3284, 3284,
     3284, 3284, 3285, 3285, 3285, 3285, 3286, 3286, 3286, 3286,
        0, 3261, 3288, 3288, 3288, 3288,    0,    0, 3283, 3289,
     3289, 3289, 3289,    0,    0,    0, 3285, 3293, 3293, 3293,
     3293, 3297, 3297, 3297, 3297,    0, 3288, 3298, 3298, 3298,
     3298, 3299, 3299, 3299, 3299, 3300, 3300, 3300, 3300, 3302,

     3302, 3302, 3302,    0,    0, 3297, 3288, 3303, 3303, 3303,
     3303, 3304, 3304, 3304, 3304,    0,    0,    0, 3303,    0,
        0,    0, 3304,    0, 3303,    0,    0,    0, 3304, 3305,
     3305, 3305, 3305,    0, 3288,    0, 3306, 3306, 3306, 3306,
     3305, 3299, 3307, 3307, 3307, 3307, 3305, 3306, 3299,    0,
     3299,    0,    0, 3307,    0, 3310, 3310, 3310, 3310, 3307,
        0,    0,    0, 3299,    0, 3299, 3299,    0,    0,    0,
     3304, 3308, 3308, 3308, 3308, 3309, 3309, 3309, 3309, 3310,
     3303, 3310, 3308,    0,    0,    0, 3309,    0, 3308,    0,
        0,    0, 3309, 3311, 3311, 3311, 3311,    0,    0,    0,

     3307,    0,    0,    0, 3310, 3312, 3312, 3312, 3312, 3313,
     3313, 3313, 3313, 3316, 3316, 3316, 3316, 3311,    0, 3311,
     3317, 3317, 3317, 3317, 3318, 3318, 3318, 3318,    0, 3312,
        0, 3312,    0, 3313,    0, 3313,    0, 3316,    0, 3316,
     3324, 3324, 3324, 3324, 3317,    0, 3317, 3325, 3325, 3325,
     3325,    0, 3311, 3326, 3326, 3326, 3326, 3327, 3327, 3327,
     3327,    0,    0,    0, 3324,    0, 3324,    0,    0, 3313,
        0, 3325,    0, 3325,    0,    0,    0, 3326,    0, 3326,
        0, 3327,    0, 3327, 3328, 3328, 3328, 3328, 3330, 3330,
     3330, 3330,    0, 3338, 3338, 3338, 3338, 3341, 3341, 3341,

     3341,    0,    0, 3318,    0,    0,    0, 3324, 3328, 3329,
     3329, 3329, 3329, 3329, 3329, 3329, 3329, 3329, 3329, 3329,
     3329, 3329, 3329, 3329, 3329, 3329, 3329, 3329, 3329, 3331,
     3331, 3331, 3331,    0, 3329, 3329, 3329, 3329, 3329, 3329,
     3329, 3332, 3332, 3332, 3332, 3333, 3333, 3333, 3333, 3349,
     3349, 3349, 3349, 3331,    0, 3331, 3334, 3334, 3334, 3334,
     3329, 3329, 3329, 3329,    0, 3332,    0, 3332,    0, 3333,
        0, 3333, 3338,    0,    0, 3331, 3335, 3335, 3335, 3335,
     3334,    0, 3334,    0, 3336, 3336, 3336, 3336,    0, 3329,
     3329, 3329, 3329,    0,    0, 3337, 3337, 3337, 3337,    0,

     3335,    0, 3335, 3340, 3340, 3340, 3340,    0, 3336, 3332,
     3336, 3344, 3344, 3344, 3344,    0,    0, 3333,    0, 3337,
     3335, 3337,    0,    0, 3336,    0,    0, 3340,    0, 3340,
     3347, 3347, 3347, 3347,    0, 3344,    0, 3344, 3350, 3350,
     3350, 3350, 3351, 3351, 3351, 3351,    0,    0, 3335, 3352,
     3352, 3352, 3352,    0, 3347,    0, 3347, 3353, 3353, 3353,
     3353, 3354, 3354, 3354, 3354,    0,    0,    0, 3337,    0,
     3340, 3355, 3355, 3355, 3355,    0,    0, 3355, 3356, 3356,
     3356, 3356, 3357, 3357, 3357, 3357, 3358, 3358, 3358, 3358,
     3369, 3369, 3369, 3369, 3385, 3385, 3385, 3385, 3386, 3386,

     3386, 3386,    0, 3358, 3387, 3387, 3387, 3387,    0,    0,
     3358, 3385, 3388, 3388, 3388, 3388,    0,    0, 3385, 3391,
     3391, 3391, 3391, 3392, 3392, 3392, 3392, 3394, 3394, 3394,
     3394, 3395, 3395, 3395, 3395,    0, 3388, 3397, 3397, 3397,
     3397, 3399, 3399, 3399, 3399, 3400, 3400, 3400, 3400, 3401,
     3401, 3401, 3401, 3402, 3402, 3402, 3402, 3403, 3403, 3403,
     3403, 3404, 3404, 3404, 3404,    0, 3385, 3405, 3405, 3405,
     3405, 3409, 3409, 3409, 3409, 3410, 3410, 3410, 3410,    0,
        0, 3403, 3413, 3413, 3413, 3413, 3414, 3414, 3414, 3414,
     3415, 3415, 3415, 3415, 3416, 3416, 3416, 3416,    0, 3410,

        0, 3415,    0,    0,    0, 3416,    0, 3415,    0,    0,
        0, 3416, 3417, 3417, 3417, 3417,    0,    0,    0, 3410,
        0,    0,    0, 3417, 3418, 3418, 3418, 3418, 3419, 3419,
     3419, 3419,    0,    0,    0, 3418,    0,    0,    0, 3419,
        0, 3418,    0,    0,    0, 3415,    0, 3410, 3420, 3420,
     3420, 3420, 3421, 3421, 3421, 3421,    0,    0,    0, 3420,
     3422, 3422, 3422, 3422, 3423, 3423, 3423, 3423, 3424, 3424,
     3424, 3424, 3426, 3426, 3426, 3426, 3421,    0, 3421, 3427,
     3427, 3427, 3427,    0, 3422,    0, 3422,    0, 3423,    0,
     3423, 3433, 3433, 3433, 3433,    0, 3426,    0, 3426, 3434,

     3434, 3434, 3434, 3435, 3435, 3435, 3435, 3436, 3436, 3436,
     3436, 3441, 3441, 3441, 3441, 3433,    0, 3433, 3422, 3423,
        0,    0,    0, 3434,    0, 3434,    0, 3435,    0, 3435,
     3442, 3442, 3442, 3442,    0, 3441,    0, 3441, 3444, 3444,
     3444, 3444, 3446, 3446, 3446, 3446,    0, 3424, 3433, 3451,
     3451, 3451, 3451,    0, 3442,    0, 3442,    0, 3427,    0,
     3435,    0, 3444,    0, 3444,    0, 3446,    0,    0,    0,
     3442, 3460, 3460, 3460, 3460, 3435, 3438, 3438, 3438, 3438,
     3438, 3438, 3438, 3438, 3438, 3438, 3438, 3438, 3438, 3438,
     3438, 3438, 3438, 3438, 3438, 3438, 3461, 3461, 3461, 3461,

        0, 3438, 3438, 3438, 3438, 3438, 3438, 3438, 3438, 3438,
     3438, 3438, 3438, 3438, 3438, 3438, 3438, 3438, 3438, 3438,
     3438, 3438, 3438, 3438, 3438, 3438, 3438, 3438, 3438, 3438,
     3438, 3438, 3438, 3438, 3438, 3438, 3438, 3438, 3438, 3438,
     3438, 3438, 3438, 3438, 3438, 3438, 3438, 3438, 3438, 3438,
     3438, 3438, 3438, 3438, 3438, 3438, 3438, 3438, 3438, 3438,
     3443, 3443, 3443, 3443, 3445, 3445, 3445, 3445, 3447, 3447,
     3447, 3447, 3448, 3448, 3448, 3448, 3449, 3449, 3449, 3449,
     3450, 3450, 3450, 3450, 3443,    0, 3443,    0, 3445,    0,
     3445,    0, 3447,    0, 3447,    0, 3448,    0, 3448,    0,

     3449,    0, 3449,    0, 3450,    0, 3450,    0, 3445, 3453,
     3453, 3453, 3453,    0, 3454, 3454, 3454, 3454, 3449,    0,
        0,    0, 3447, 3459, 3459, 3459, 3459,    0,    0, 3459,
        0,    0,    0, 3443,    0,    0, 3445, 3448, 3454,    0,
     3454, 3462, 3462, 3462, 3462, 3483, 3483, 3483, 3483,    0,
        0,    0, 3450, 3484, 3484, 3484, 3484,    0, 3462,    0,
        0,    0, 3483,    0,    0, 3462,    0,    0,    0, 3483,
        0, 3454, 3485, 3485, 3485, 3485, 3487, 3487, 3487, 3487,
     3488, 3488, 3488, 3488, 3489, 3489, 3489, 3489, 3453, 3490,
     3490, 3490, 3490,    0,    0,    0, 3485, 3491, 3491, 3491,

     3491, 3494, 3494, 3494, 3494, 3495, 3495, 3495, 3495, 3496,
     3496, 3496, 3496, 3497, 3497, 3497, 3497, 3500, 3500, 3500,
     3500, 3501, 3501, 3501, 3501, 3502, 3502, 3502, 3502, 3507,
     3507, 3507, 3507, 3508, 3508, 3508, 3508,    0,    0,    0,
     3507, 3500,    0,    0, 3508, 3501, 3507, 3509, 3509, 3509,
     3509, 3510, 3510, 3510, 3510,    0,    0,    0, 3509, 3511,
     3511, 3511, 3511,    0,    0, 3501, 3496,    0, 3515, 3515,
     3515, 3515,    0,    0,    0, 3510,    0, 3510,    0,    0,
        0, 3496, 3519, 3519, 3519, 3519, 3520, 3520, 3520, 3520,
        0,    0, 3515, 3501, 3515, 3521, 3521, 3521, 3521,    0,

        0,    0, 3507,    0, 3522, 3522, 3522, 3522, 3510, 3519,
        0,    0,    0, 3520, 3523, 3523, 3523, 3523,    0, 3521,
        0, 3521, 3524, 3524, 3524, 3524,    0, 3515, 3522,    0,
     3522, 3525, 3525, 3525, 3525,    0,    0, 3521, 3523,    0,
     3523, 3526, 3526, 3526, 3526,    0, 3524, 3527, 3527, 3527,
     3527, 3528, 3528, 3528, 3528, 3529, 3529, 3529, 3529, 3530,
     3530, 3530, 3530,    0,    0, 3526,    0, 3526,    0,    0,
        0, 3527,    0, 3527,    0, 3528, 3522, 3528,    0, 3529,
        0, 3529, 3532, 3532, 3532, 3532,    0, 3526, 3533, 3533,
     3533, 3533,    0, 3536, 3536, 3536, 3536,    0, 3528, 3536,

     3537, 3537, 3537, 3537,    0,    0, 3532,    0, 3532, 3548,
     3548, 3548, 3548,    0,    0, 3527, 3549, 3549, 3549, 3549,
     3550, 3550, 3550, 3550, 3552, 3552, 3552, 3552, 3553, 3553,
     3553, 3553,    0, 3548, 3557, 3557, 3557, 3557,    0,    0,
        0, 3532,    0,    0, 3550, 3558, 3558, 3558, 3558, 3562,
     3562, 3562, 3562, 3563, 3563, 3563, 3563,    0, 3557, 3564,
     3564, 3564, 3564,    0, 3563,    0,    0, 3533,    0,    0,
     3563,    0,    0, 3562, 3565, 3565, 3565, 3565, 3569, 3569,
     3569, 3569,    0, 3564,    0, 3564, 3570, 3570, 3570, 3570,
        0, 3572, 3572, 3572, 3572, 3573, 3573, 3573, 3573, 3574,

     3574, 3574, 3574,    0,    0, 3569, 3575, 3575, 3575, 3575,
        0,    0,    0, 3570,    0, 3572, 3563, 3572, 3564, 3573,
        0, 3573,    0, 3576, 3576, 3576, 3576,    0,    0,    0,
     3575,    0, 3575, 3577, 3577, 3577, 3577,    0, 3572, 3578,
     3578, 3578, 3578,    0,    0,    0, 3575, 3576,    0, 3576,
     3579, 3579, 3579, 3579,    0,    0,    0, 3577,    0, 3577,
        0,    0,    0, 3578,    0, 3578, 3580, 3580, 3580, 3580,
     3582, 3582, 3582, 3582, 3579, 3584, 3584, 3584, 3584, 3577,
        0, 3584, 3585, 3585, 3585, 3585, 3593, 3593, 3593, 3593,
     3594, 3594, 3594, 3594,    0,    0, 3576, 3598, 3598, 3598,

     3598, 3602, 3602, 3602, 3602, 3603, 3603, 3603, 3603, 3604,
     3604, 3604, 3604,    0, 3594, 3605, 3605, 3605, 3605,    0,
     3604, 3598,    0,    0,    0, 3602, 3604, 3608, 3608, 3608,
     3608, 3609, 3609, 3609, 3609, 3610, 3610, 3610, 3610, 3611,
     3611, 3611, 3611, 3612, 3612, 3612, 3612,    0,    0, 3582,
        0, 3608,    0, 3608,    0, 3609,    0, 3609,    0, 3610,
        0,    0,    0, 3611,    0, 3611,    0, 3612,    0, 3612,
        0,    0,    0, 3608,    0,    0,    0, 3604,    0,    0,
        0, 3611, 3613, 3613, 3613, 3613, 3614, 3614, 3614, 3614,
     3617, 3617, 3617, 3617,    0,    0, 3617, 3618, 3618, 3618,

     3618, 3622, 3622, 3622, 3622, 3623, 3623, 3623, 3623, 3626,
     3626, 3626, 3626,    0,    0, 3612, 3627, 3627, 3627, 3627,
     3630, 3630, 3630, 3630, 3633, 3633, 3633, 3633,    0, 3623,
        0, 3630,    0, 3626,    0,    0,    0, 3630, 3634, 3634,
     3634, 3634, 3635, 3635, 3635, 3635, 3637, 3637, 3637, 3637,
        0,    0, 3637, 3638, 3638, 3638, 3638, 3640, 3640, 3640,
     3640,    0, 3634,    0, 3634,    0, 3635,    0, 3635, 3641,
     3641, 3641, 3641, 3644, 3644, 3644, 3644, 3645, 3645, 3645,
     3645, 3646, 3646, 3646, 3646, 3634,    0, 3630, 3645, 3648,
     3648, 3648, 3648, 3641, 3645,    0,    0, 3644, 3649, 3649,

     3649, 3649, 3650, 3650, 3650, 3650, 3652, 3652, 3652, 3652,
        0,    0, 3652, 3648,    0, 3648, 3653, 3653, 3653, 3653,
        0,    0, 3649,    0, 3649,    0, 3650, 3655, 3655, 3655,
     3655, 3656, 3656, 3656, 3656, 3648, 3657, 3657, 3657, 3657,
     3659, 3659, 3659, 3659, 3660, 3660, 3660, 3660, 3661, 3661,
     3661, 3661,    0,    0,    0, 3656,    0,    0,    0, 3661,
     3646,    0,    0,    0, 3659, 3662, 3662, 3662, 3662, 3664,
     3664, 3664, 3664, 3665, 3665, 3665, 3665, 3666, 3666, 3666,
     3666, 3667, 3667, 3667, 3667,    0,    0, 3667, 3668, 3668,
     3668, 3668, 3670, 3670, 3670, 3670, 3671, 3671, 3671, 3671,

     3672, 3672, 3672, 3672, 3666, 3673, 3673, 3673, 3673, 3675,
     3675, 3675, 3675, 3676, 3676, 3676, 3676,    0, 3676,    0,
     3671,    0,    0, 3676, 3677, 3677, 3677, 3677,    0,    0,
     3677, 3678, 3678, 3678, 3678,    0, 3675, 3680, 3680, 3680,
     3680, 3681, 3681, 3681, 3681,    0,    0,    0, 3664, 3682,
     3682, 3682, 3682,    0, 3682, 3685, 3685, 3685, 3685, 3682,
        0, 3685,    0,    0,    0, 3681, 3686, 3686, 3686, 3686,
     3687, 3687, 3687, 3687, 3688, 3688, 3688, 3688, 3690, 3690,
     3690, 3690, 3676,    0, 3690, 3691, 3691, 3691, 3691, 3692,
     3692, 3692, 3692, 3693, 3693, 3693, 3693,    0, 3688, 3694,

     3694, 3694, 3694,    0, 3694, 3695, 3695, 3695, 3695, 3694,
        0, 3695, 3696, 3696, 3696, 3696,    0, 3693, 3682, 3697,
     3697, 3697, 3697, 3698, 3698, 3698, 3698, 3694, 3699, 3699,
     3699, 3699, 3700, 3700, 3700, 3700, 3702, 3702, 3702, 3702,
        0,    0, 3702, 3703, 3703, 3703, 3703, 3698, 3704, 3704,
     3704, 3704, 3705, 3705, 3705, 3705, 3699,    0,    0,    0,
     3700, 3706, 3706, 3706, 3706,    0,    0, 3706, 3707, 3707,
     3707, 3707, 3708, 3708, 3708, 3708, 3705, 3709, 3709, 3709,
     3709, 3710, 3710, 3710, 3710,    0,    0, 3710, 3711, 3711,
     3711, 3711, 3712, 3712, 3712, 3712, 3713, 3713, 3713, 3713,

        0, 3709, 3714, 3714, 3714, 3714,    0,    0, 3714, 3715,
     3715, 3715, 3715, 3716, 3716, 3716, 3716,    0,    0,    0,
     3713, 3717, 3717, 3717, 3717, 3718, 3718, 3718, 3718,    0,
        0, 3718, 3719, 3719, 3719, 3719, 3720, 3720, 3720, 3720,
     3721, 3721, 3721, 3721,    0, 3717, 3722, 3722, 3722, 3722,
        0,    0, 3722, 3723, 3723, 3723, 3723, 3724, 3724, 3724,
     3724,    0,    0,    0, 3721, 3725, 3725, 3725, 3725, 3726,
     3726, 3726, 3726,    0,    0, 3726, 3727, 3727, 3727, 3727,
     3728, 3728, 3728, 3728, 3729, 3729, 3729, 3729,    0, 3725,
     3730, 3730, 3730, 3730,    0,    0, 3730, 3731, 3731, 3731,

     3731, 3732, 3732, 3732, 3732,    0,    0,    0, 3729, 3733,
     3733, 3733, 3733, 3734, 3734, 3734, 3734,    0,    0, 3734,
     3735, 3735, 3735, 3735, 3736, 3736, 3736, 3736, 3737, 3737,
     3737, 3737,    0, 3733, 3738, 3738, 3738, 3738,    0,    0,
     3738, 3739, 3739, 3739, 3739, 3740, 3740, 3740, 3740,    0,
        0,    0, 3737, 3741, 3741, 3741, 3741, 3742, 3742, 3742,
     3742,    0,    0, 3742, 3743, 3743, 3743, 3743, 3744, 3744,
     3744, 3744, 3745, 3745, 3745, 3745,    0, 3741, 3746, 3746,
     3746, 3746,    0,    0, 3746, 3747, 3747, 3747, 3747, 3748,
     3748, 3748, 3748,    0,    0,    0, 3745, 3749, 3749, 3749,

     3749, 3750, 3750, 3750, 3750,    0,    0, 3750, 3751, 3751,
     3751, 3751, 3752, 3752, 3752, 3752, 3753, 3753, 3753, 3753,
        0, 3749, 3754, 3754, 3754, 3754,    0,    0, 3754, 3755,
     3755, 3755, 3755, 3756, 3756, 3756, 3756,    0,    0,    0,
     3753, 3757, 3757, 3757, 3757, 3758, 3758, 3758, 3758,    0,
        0, 3758, 3759, 3759, 3759, 3759, 3760, 3760, 3760, 3760,
     3761, 3761, 3761, 3761,    0, 3757, 3762, 3762, 3762, 3762,
        0,    0, 3762, 3763, 3763, 3763, 3763, 3764, 3764, 3764,
     3764,    0,    0,    0, 3761, 3765, 3765, 3765, 3765, 3766,
     3766, 3766, 3766,    0,    0, 3766, 3767, 3767, 3767, 3767,

     3768, 3768, 3768, 3768, 3769, 3769, 3769, 3769,    0, 3765,
     3770, 3770, 3770, 3770,    0,    0, 3770, 3771, 3771, 3771,
     3771, 3772, 3772, 3772, 3772,    0,    0,    0, 3769, 3773,
     3773, 3773, 3773, 3774, 3774, 3774, 3774,    0,    0, 3774,
     3775, 3775, 3775, 3775, 3776, 3776, 3776, 3776, 3777, 3777,
     3777, 3777,    0, 3773, 3778, 3778, 3778, 3778,    0,    0,
     3778, 3779, 3779, 3779, 3779, 3780, 3780, 3780, 3780,    0,
        0,    0, 3777, 3781, 3781, 3781, 3781, 3782, 3782, 3782,
     3782,    0,    0, 3782, 3783, 3783, 3783, 3783, 3784, 3784,
     3784, 3784, 3785, 3785, 3785, 3785,    0, 3781, 3786, 3786,

     3786, 3786,    0,    0, 3786, 3787, 3787, 3787, 3787, 3788,
     3788, 3788, 3788,    0,    0,    0, 3785, 3789, 3789, 3789,
     3789, 3790, 3790, 3790, 3790,    0,    0, 3790, 3791, 3791,
     3791, 3791, 3792, 3792, 3792, 3792, 3793, 3793, 3793, 3793,
        0, 3789, 3794, 3794, 3794, 3794,    0,    0, 3794, 3795,
     3795, 3795, 3795, 3796, 3796, 3796, 3796,    0,    0,    0,
     3793, 3797, 3797, 3797, 3797, 3798, 3798, 3798, 3798,    0,
        0, 3798, 3799, 3799, 3799, 3799, 3800, 3800, 3800, 3800,
     3801, 3801, 3801, 3801,    0, 3797, 3802, 3802, 3802, 3802,
        0,    0, 3802, 3803, 3803, 3803, 3803, 3804, 3804, 3804,

     3804,    0,    0,    0, 3801, 3805, 3805, 3805, 3805, 3806,
     3806, 3806, 3806,    0,    0, 3806, 3807, 3807, 3807, 3807,
     3808, 3808, 3808, 3808, 3809, 3809, 3809, 3809,    0, 3805,
     3810, 3810, 3810, 3810,    0,    0, 3810, 3811, 3811, 3811,
     3811, 3812, 3812, 3812, 3812,    0,    0,    0, 3809, 3813,
     3813, 3813, 3813, 3814, 3814, 3814, 3814,    0,    0, 3814,
     3815, 3815, 3815, 3815, 3816, 3816, 3816, 3816, 3817, 3817,
     3817, 3817,    0, 3813, 3818, 3818, 3818, 3818,    0,    0,
     3818, 3819, 3819, 3819, 3819, 3820, 3820, 3820, 3820,    0,
        0,    0, 3817, 3821, 3821, 3821, 3821, 3822, 3822, 3822,

     3822,    0,    0, 3822, 3823, 3823, 3823, 3823, 3824, 3824,
     3824, 3824, 3825, 3825, 3825, 3825,    0, 3821, 3826, 3826,
     3826, 3826,    0,    0, 3826, 3827, 3827, 3827, 3827, 3828,
     3828, 3828, 3828,    0,    0,    0, 3825, 3829, 3829, 3829,
     3829, 3830, 3830, 3830, 3830,    0,    0, 3830, 3831, 3831,
     3831, 3831, 3832, 3832, 3832, 3832, 3833, 3833, 3833, 3833,
        0, 3829, 3834, 3834, 3834, 3834,    0,    0, 3834, 3835,
     3835, 3835, 3835, 3836, 3836, 3836, 3836,    0,    0,    0,
     3833, 3837, 3837, 3837, 3837, 3838, 3838, 3838, 3838,    0,
        0, 3838, 3839, 3839, 3839, 3839, 3840, 3840, 3840, 3840,

     3841, 3841, 3841, 3841,    0, 3837, 3842, 3842, 3842, 3842,
        0,    0, 3842, 3843, 3843, 3843, 3843, 3844, 3844, 3844,
     3844,    0,    0,    0, 3841, 3845, 3845, 3845, 3845, 3846,
     3846, 3846, 3846,    0,    0, 3846, 3847, 3847, 3847, 3847,
     3848, 3848, 3848, 3848, 3849, 3849, 3849, 3849,    0, 3845,
     3850, 3850, 3850, 3850,    0,    0, 3850, 3851, 3851, 3851,
     3851, 3852, 3852, 3852, 3852,    0,    0,    0, 3849, 3853,
     3853, 3853, 3853, 3854, 3854, 3854, 3854,    0,    0, 3854,
     3855, 3855, 3855, 3855, 3856, 3856, 3856, 3856, 3857, 3857,
     3857, 3857,    0, 3853, 3858, 3858, 3858, 3858,    0,    0,

     3858, 3859, 3859, 3859, 3859, 3860, 3860, 3860, 3860,    0,
        0,    0, 3857, 3861, 3861, 3861, 3861, 3862, 3862, 3862,
     3862,    0,    0, 3862, 3863, 3863, 3863, 3863, 3864, 3864,
     3864, 3864, 3865, 3865, 3865, 3865,    0, 3861, 3866, 3866,
     3866, 3866,    0,    0, 3866, 3867, 3867, 3867, 3867, 3868,
     3868, 3868, 3868,    0,    0,    0, 3865, 3869, 3869, 3869,
     3869, 3870, 3870, 3870, 3870,    0,    0, 3870, 3871, 3871,
     3871, 3871, 3872, 3872, 3872, 3872, 3873, 3873, 3873, 3873,
        0, 3869, 3874, 3874, 3874, 3874,    0,    0, 3874, 3875,
     3875, 3875, 3875, 3876, 3876, 3876, 3876,    0,    0,    0,

     3873, 3877, 3877, 3877, 3877, 3878, 3878, 3878, 3878,    0,
        0, 3878, 3879, 3879, 3879, 3879, 3880, 3880, 3880, 3880,
     3881, 3881, 3881, 3881,    0, 3877, 3882, 3882, 3882, 3882,
        0,    0, 3882, 3883, 3883, 3883, 3883, 3884, 3884, 3884,
     3884,    0,    0,    0, 3881, 3885, 3885, 3885, 3885, 3886,
     3886, 3886, 3886,    0,    0, 3886, 3887, 3887, 3887, 3887,
     3888, 3888, 3888, 3888, 3889, 3889, 3889, 3889,    0, 3885,
     3890, 3890, 3890, 3890,    0,    0, 3890, 3891, 3891, 3891,
     3891, 3892, 3892, 3892, 3892,    0,    0,    0, 3889, 3893,
     3893, 3893, 3893, 3894, 3894, 3894, 3894,    0,    0, 3894,

     3895, 3895, 3895, 3895, 3896, 3896, 3896, 3896, 3897, 3897,
     3897, 3897,    0, 3893, 3898, 3898, 3898, 3898,    0,    0,
     3898, 3899, 3899, 3899, 3899, 3900, 3900, 3900, 3900,    0,
        0,    0, 3897, 3901, 3901, 3901, 3901, 3902, 3902, 3902,
     3902,    0,    0, 3902, 3903, 3903, 3903, 3903, 3904, 3904,
     3904, 3904, 3905, 3905, 3905, 3905,    0, 3901, 3906, 3906,
     3906, 3906,    0,    0, 3906, 3907, 3907, 3907, 3907, 3908,
     3908, 3908, 3908,    0,    0,    0, 3905, 3909, 3909, 3909,
     3909, 3910, 3910, 3910, 3910,    0,    0, 3910, 3911, 3911,
     3911, 3911, 3912, 3912, 3912, 3912, 3913, 3913, 3913, 3913,

        0, 3909, 3914, 3914, 3914, 3914,    0,    0, 3914, 3915,
     3915, 3915, 3915, 3916, 3916, 3916, 3916,    0,    0,    0,
     3913, 3917, 3917, 3917, 3917, 3918, 3918, 3918, 3918,    0,
        0, 3918, 3919, 3919, 3919, 3919, 3920, 3920, 3920, 3920,
     3921, 3921, 3921, 3921,    0, 3917, 3922, 3922, 3922, 3922,
        0,    0, 3922, 3923, 3923, 3923, 3923, 3924, 3924, 3924,
     3924,    0,    0,    0, 3921, 3925, 3925, 3925, 3925, 3926,
     3926, 3926, 3926,    0,    0, 3926, 3927, 3927, 3927, 3927,
     3928, 3928, 3928, 3928, 3929, 3929, 3929, 3929,    0, 3925,
     3930, 3930, 3930, 3930,    0,    0, 3930, 3931, 3931, 3931,

     3931, 3932, 3932, 3932, 3932,    0,    0,    0, 3929, 3933,
     3933, 3933, 3933, 3934, 3934, 3934, 3934,    0,    0, 3934,
     3935, 3935, 3935, 3935, 3936, 3936, 3936, 3936, 3937, 3937,
     3937, 3937,    0, 3933, 3938, 3938, 3938, 3938,    0,    0,
     3938, 3940, 3940, 3940, 3940, 3941, 3941, 3941, 3941,    0,
        0, 3941, 3937, 3943, 3943, 3943, 3943, 3943, 3943, 3943,
     3943, 3943, 3943, 3943, 3943, 3943, 3943, 3943, 3943, 3943,
     3943, 3943, 3943, 3943, 3943, 3943, 3943, 3943, 3943, 3943,
     3943, 3943, 3943, 3943, 3943, 3944, 3944, 3944, 3944, 3944,
     3944, 3944, 3944, 3944, 3944, 3944, 3944, 3944, 3944, 3944,

     3944, 3944, 3944, 3944, 3944, 3944, 3944, 3944, 3944, 3944,
     3944, 3944, 3944, 3944, 3944, 3944, 3944, 3945, 3945, 3945,
     3945, 3945, 3945, 3945, 3945, 3945, 3945, 3945, 3945, 3945,
     3945, 3945, 3945, 3945, 3945, 3945, 3945, 3945, 3945, 3945,
     3945, 3945, 3945, 3945, 3945, 3945, 3945, 3945, 3945, 3946,
     3946, 3946, 3946, 3946, 3946, 3946, 3946, 3946, 3946, 3946,
     3946, 3946, 3946, 3946, 3946, 3946, 3946, 3946, 3946, 3946,
     3946, 3946, 3946, 3946, 3946, 3946, 3946, 3946, 3946, 3946,
     3946, 3947, 3947, 3947, 3947, 3947, 3947, 3947, 3947, 3947,
     3947, 3947, 3947, 3947, 3947, 3947, 3947, 3947, 3947, 3947,

     3947, 3947, 3947, 3947, 3947, 3947, 3947, 3947, 3947, 3947,
     3947, 3947, 3947, 3948, 3948, 3948, 3948, 3948, 3948, 3948,
     3948, 3948, 3948, 3948, 3948, 3948, 3948, 3948, 3948, 3948,
     3948, 3948, 3948, 3948, 3948, 3948, 3948, 3948, 3948, 3948,
     3948, 3948, 3948, 3948, 3948, 3949, 3949, 3949, 3949, 3949,
     3949, 3949, 3949, 3949, 3949, 3949, 3949, 3949, 3949, 3949,
     3949, 3949, 3949, 3949, 3949, 3949, 3949, 3949, 3949, 3949,
     3949, 3949, 3949, 3949, 3949, 3949, 3949, 3950, 3950, 3950,
     3950, 3950, 3950, 3950, 3950, 3950, 3950, 3950, 3950, 3950,
     3950, 3950, 3950, 3950, 3950, 3950, 3950, 3950, 3950, 3950,

     3950, 3950, 3950, 3950, 3950, 3950, 3950, 3950, 3950, 3951,
     3951, 3951, 3951, 3951, 3951, 3951, 3951, 3951, 3951, 3951,
     3951, 3951, 3951, 3951, 3951, 3951, 3951, 3951, 3951, 3951,
     3951, 3951, 3951, 3951, 3951, 3951, 3951, 3951, 3951, 3951,
     3951, 3952, 3952, 3952, 3952, 3952, 3952, 3952, 3952, 3952,
     3952, 3952, 3952, 3952, 3952, 3952, 3952, 3952, 3952, 3952,
     3952, 3952, 3952, 3952, 3952, 3952, 3952, 3952, 3952, 3952,
     3952, 3952, 3952, 3953, 3953, 3953, 3953, 3953, 3953, 3953,
     3953, 3953, 3953, 3953, 3953, 3953, 3953, 3953, 3953, 3953,
     3953, 3953, 3953, 3953, 3953, 3953, 3953, 3953, 3953, 3953,

     3953, 3953, 3953, 3953, 3953, 3954, 3954, 3954, 3954, 3954,
     3954, 3954, 3954, 3954, 3954, 3954, 3954, 3954, 3954, 3954,
     3954, 3954, 3954, 3954, 3954, 3954, 3954, 3954, 3954, 3954,
     3954, 3954, 3954, 3954, 3954, 3954, 3954, 3955, 3955, 3955,
     3955, 3955, 3955, 3955, 3955, 3955, 3955, 3955, 3955, 3955,
     3955, 3955, 3955, 3955, 3955, 3955, 3955, 3955, 3955, 3955,
     3955, 3955, 3955, 3955, 3955, 3955, 3955, 3955, 3955, 3956,
     3956, 3956, 3956, 3956, 3956, 3956, 3956, 3956, 3956, 3956,
     3956, 3956, 3956, 3956, 3956, 3956, 3956, 3956, 3956, 3956,
     3956, 3956, 3956, 3956, 3956, 3956, 3956, 3956, 3956, 3956,

     3956, 3957, 3957, 3957, 3957, 3957, 3957, 3957, 3957, 3957,
     3957, 3957, 3957, 3957, 3957, 3957, 3957, 3957, 3957, 3957,
     3957, 3957, 3957, 3957, 3957, 3957, 3957, 3957, 3957, 3957,
     3957, 3957, 3957, 3958, 3958, 3958, 3958, 3958, 3958, 3958,
     3958, 3958, 3958, 3958, 3958, 3958, 3958, 3958, 3958, 3958,
     3958, 3958, 3958, 3958, 3958, 3958, 3958, 3958, 3958, 3958,
     3958, 3958, 3958, 3958, 3958, 3959, 3959, 3959, 3959, 3959,
     3959, 3959, 3959, 3959, 3959, 3959, 3959, 3959, 3959, 3959,
     3959, 3959, 3959, 3959, 3959, 3959, 3959, 3959, 3959, 3959,
     3959, 3959, 3959, 3959, 3959, 3959, 3959, 3960, 3960, 3960,

     3960, 3960, 3960, 3960, 3960, 3960, 3960, 3960, 3960, 3960,
     3960, 3960, 3960, 3960, 3960, 3960, 3960, 3960, 3960, 3960,
     3960, 3960, 3960, 3960, 3960, 3960, 3960, 3960, 3960, 3961,
     3961, 3961, 3961, 3961, 3961, 3961, 3961, 3961, 3961, 3961,
     3961, 3961, 3961, 3961, 3961, 3961, 3961, 3961, 3961, 3961,
     3961, 3961, 3961, 3961, 3961, 3961, 3961, 3961, 3961, 3961,
     3961, 3962, 3962, 3962, 3962, 3962, 3962, 3962, 3962, 3962,
     3962, 3962, 3962, 3962, 3962, 3962, 3962, 3962, 3962, 3962,
     3962, 3962, 3962, 3962, 3962, 3962, 3962, 3962, 3962, 3962,
     3962, 3962, 3962, 3963, 3963, 3963, 3963, 3963, 3963, 3963,

     3963, 3963, 3963, 3963, 3963, 3963, 3963, 3963, 3963, 3963,
     3963, 3963, 3963, 3963, 3963, 3963, 3963, 3963, 3963, 3963,
     3963, 3963, 3963, 3963, 3963, 3964, 3964, 3964, 3964, 3964,
     3964, 3964, 3964, 3964, 3964, 3964, 3964, 3964, 3964, 3964,
     3964, 3964, 3964, 3964, 3964, 3964, 3964, 3964, 3964, 3964,
     3964, 3964, 3964, 3964, 3964, 3964, 3964, 3965, 3965, 3965,
     3965, 3965, 3965, 3965, 3965, 3965, 3965, 3965, 3965, 3965,
     3965, 3965, 3965, 3965, 3965, 3965, 3965, 3965, 3965, 3965,
     3965, 3965, 3965, 3965, 3965, 3965, 3965, 3965, 3965, 3966,
     3966, 3966, 3966, 3966, 3966, 3966, 3966, 3966, 3966, 3966,

     3966, 3966, 3966, 3966, 3966, 3966, 3966, 3966, 3966, 3966,
     3966, 3966, 3966, 3966, 3966, 3966, 3966, 3966, 3966, 3966,
     3966, 3967, 3967, 3967, 3967, 3967, 3967, 3967, 3967, 3967,
     3967, 3967, 3967, 3967, 3967, 3967, 3967, 3967, 3967, 3967,
     3967, 3967, 3967, 3967, 3967, 3967, 3967, 3967, 3967, 3967,
     3967, 3967, 3967, 3968, 3968, 3968, 3968, 3968, 3968, 3968,
     3968, 3968, 3968, 3968, 3968, 3968, 3968, 3968, 3968, 3968,
     3968, 3968, 3968, 3968, 3968, 3968, 3968, 3968, 3968, 3968,
     3968, 3968, 3968, 3968, 3968, 3969, 3969, 3969, 3969, 3969,
     3969, 3969, 3969, 3969, 3969, 3969, 3969, 3969, 3969, 3969,

     3969, 3969, 3969, 3969, 3969, 3969, 3969, 3969, 3969, 3969,
     3969, 3969, 3969, 3969, 3969, 3969, 3969, 3970, 3970, 3970,
     3970, 3970, 3970, 3970, 3970, 3970, 3970, 3970, 3970, 3970,
     3970, 3970, 3970, 3970, 3970, 3970, 3970, 3970, 3970, 3970,
     3970, 3970, 3970, 3970, 3970, 3970, 3970, 3970, 3970, 3971,
     3971, 3971, 3971, 3971, 3971, 3971, 3971, 3971, 3971, 3971,
     3971, 3971, 3971, 3971, 3971, 3971, 3971, 3971, 3971, 3971,
     3971, 3971, 3971, 3971, 3971, 3971, 3971, 3971, 3971, 3971,
     3971, 3972, 3972, 3972, 3972, 3972, 3972, 3972, 3972, 3972,
     3972, 3972, 3972, 3972, 3972, 3972, 3972, 3972, 3972, 3972,

     3972, 3972, 3972, 3972, 3972, 3972, 3972, 3972, 3972, 3972,
     3972, 3972, 3972, 3973, 3973, 3973, 3973, 3973, 3973, 3973,
     3973, 3973, 3973, 3973, 3973, 3973, 3973, 3973, 3973, 3973,
     3973, 3973, 3973, 3973, 3973, 3973, 3973, 3973, 3973, 3973,
     3973, 3973, 3973, 3973, 3973, 3974, 3974, 3974, 3974, 3974,
     3974, 3974, 3974, 3974, 3974, 3974, 3974, 3974, 3974, 3974,
     3974, 3974, 3974, 3974, 3974, 3974, 3974, 3974, 3974, 3974,
     3974, 3974, 3974, 3974, 3974, 3974, 3974, 3975, 3975, 3975,
     3975, 3975, 3975, 3975, 3975, 3975, 3975, 3975, 3975, 3975,
     3975, 3975, 3975, 3975, 3975, 3975, 3975, 3975, 3975, 3975,

     3975, 3975, 3975, 3975, 3975, 3975, 3975, 3975, 3975, 3976,
     3976, 3976, 3976, 3976, 3976, 3976, 3976, 3976, 3976, 3976,
     3976, 3976, 3976, 3976, 3976, 3976, 3976, 3976, 3976, 3976,
     3976, 3976, 3976, 3976, 3976, 3976, 3976, 3976, 3976, 3976,
     3976, 3977, 3977, 3977, 3977, 3977, 3977, 3977, 3977, 3977,
     3977, 3977, 3977, 3977, 3977, 3977, 3977, 3977, 3977, 3977,
     3977, 3977, 3977, 3977, 3977, 3977, 3977, 3977, 3977, 3977,
     3977, 3977, 3977, 3978, 3978, 3978, 3978, 3978, 3978, 3978,
     3978, 3978, 3978, 3978, 3978, 3978, 3978, 3978, 3978, 3978,
     3978, 3978, 3978, 3978, 3978, 3978, 3978, 3978, 3978, 3978,

     3978, 3978, 3978, 3978, 3978, 3979, 3979, 3979, 3979, 3979,
     3979, 3979, 3979, 3979, 3979, 3979, 3979, 3979, 3979, 3979,
     3979, 3979, 3979, 3979, 3979, 3979, 3979, 3979, 3979, 3979,
     3979, 3979, 3979, 3979, 3979, 3979, 3979, 3980, 3980, 3980,
     3980, 3980, 3980, 3980, 3980, 3980, 3980, 3980, 3980, 3980,
     3980, 3980, 3980, 3980, 3980, 3980, 3980, 3980, 3980, 3980,
     3980, 3980, 3980, 3980, 3980, 3980, 3980, 3980, 3980, 3981,
     3981, 3981, 3981, 3981, 3981, 3981, 3981, 3981, 3981, 3981,
     3981, 3981, 3981, 3981, 3981, 3981, 3981, 3981, 3981, 3981,
     3981, 3981, 3981, 3981, 3981, 3981, 3981, 3981, 3981, 3981,

     3981, 3982, 3982, 3982, 3982, 3982, 3982, 3982, 3982, 3982,
     3982, 3982, 3982, 3982, 3982, 3982, 3982, 3982, 3982, 3982,
     3982, 3982, 3982, 3982, 3982, 3982, 3982, 3982, 3982, 3982,
     3982, 3982, 3982, 3983, 3983, 3983, 3983, 3983, 3983, 3983,
     3983, 3983, 3983, 3983, 3983, 3983, 3983, 3983, 3983, 3983,
     3983, 3983, 3983, 3983, 3983, 3983, 3983, 3983, 3983, 3983,
     3983, 3983, 3983, 3983, 3983, 3984, 3984, 3984, 3984, 3984,
     3984, 3984, 3984, 3984, 3984, 3984, 3984, 3984, 3984, 3984,
     3984, 3984, 3984, 3984, 3984, 3984, 3984, 3984, 3984, 3984,
     3984, 3984, 3984, 3984, 3984, 3984, 3984, 3985, 3985, 3985,

     3985, 3985, 3985, 3985, 3985, 3985, 3985, 3985, 3985, 3985,
     3985, 3985, 3985, 3985, 3985, 3985, 3985, 3985, 3985, 3985,
     3985, 3985, 3985, 3985, 3985, 3985, 3985, 3985, 3985, 3986,
     3986, 3986, 3986, 3986, 3986, 3986, 3986, 3986, 3986, 3986,
     3986, 3986, 3986, 3986, 3986, 3986, 3986, 3986, 3986, 3986,
     3986, 3986, 3986, 3986, 3986, 3986, 3986, 3986, 3986, 3986,
     3986, 3987, 3987, 3987, 3987, 3987, 3987, 3987, 3987, 3987,
     3987, 3987, 3987, 3987, 3987, 3987, 3987, 3987, 3987, 3987,
     3987, 3987, 3987, 3987, 3987, 3987, 3987, 3987, 3987, 3987,
     3987, 3987, 3987, 3988, 3988, 3988, 3988, 3988, 3988, 3988,

     3988, 3988, 3988, 3988, 3988, 3988, 3988, 3988, 3988, 3988,
     3988, 3988, 3988, 3988, 3988, 3988, 3988, 3988, 3988, 3988,
     3988, 3988, 3988, 3988, 3988, 3989, 3989, 3989, 3989, 3989,
     3989, 3989, 3989, 3989, 3989, 3989, 3989, 3989, 3989, 3989,
     3989, 3989, 3989, 3989, 3989, 3989, 3989, 3989, 3989, 3989,
     3989, 3989, 3989, 3989, 3989, 3989, 3989, 3990, 3990, 3990,
     3990, 3990, 3990, 3990, 3990, 3990, 3990, 3990, 3990, 3990,
     3990, 3990, 3990, 3990, 3990, 3990, 3990, 3990, 3990, 3990,
     3990, 3990, 3990, 3990, 3990, 3990, 3990, 3990, 3990, 3991,
     3991, 3991, 3991, 3991, 3991, 3991, 3991, 3991, 3991, 3991,

     3991, 3991, 3991, 3991, 3991, 3991, 3991, 3991, 3991, 3991,
     3991, 3991, 3991, 3991, 3991, 3991, 3991, 3991, 3991, 3991,
     3991, 3992, 3992, 3992, 3992, 3992, 3992, 3992, 3992, 3992,
     3992, 3992, 3992, 3992, 3992, 3992, 3992, 3992, 3992, 3992,
     3992, 3992, 3992, 3992, 3992, 3992, 3992, 3992, 3992, 3992,
     3992, 3992, 3992, 3993, 3993, 3993, 3993, 3993, 3993, 3993,
     3993, 3993, 3993, 3993, 3993, 3993, 3993, 3993, 3993, 3993,
     3993, 3993, 3993, 3993, 3993, 3993, 3993, 3993, 3993, 3993,
     3993, 3993, 3993, 3993, 3993, 3994, 3994, 3994, 3994, 3994,
     3994, 3994, 3994, 3994, 3994, 3994, 3994, 3994, 3994, 3994,

     3994, 3994, 3994, 3994, 3994, 3994, 3994, 3994, 3994, 3994,
     3994, 3994, 3994, 3994, 3994, 3994, 3994, 3995, 3995, 3995,
     3995, 3995, 3995, 3995, 3995, 3995, 3995, 3995, 3995, 3995,
     3995, 3995, 3995, 3995, 3995, 3995, 3995, 3995, 3995, 3995,
     3995, 3995, 3995, 3995, 3995, 3995, 3995, 3995, 3995, 3996,
     3996, 3996, 3996, 3996, 3996, 3996, 3996, 3996, 3996, 3996,
     3996, 3996, 3996, 3996, 3996, 3996, 3996, 3996, 3996, 3996,
     3996, 3996, 3996, 3996, 3996, 3996, 3996, 3996, 3996, 3996,
     3996, 3997, 3997, 3997, 3997, 3997, 3997, 3997, 3997, 3997,
     3997, 3997, 3997, 3997, 3997, 3997, 3997, 3997, 3997, 3997,

     3997, 3997, 3997, 3997, 3997, 3997, 3997, 3997, 3997, 3997,
     3997, 3997, 3997, 3998, 3998, 3998, 3998, 3998, 3998, 3998,
     3998, 3998, 3998, 3998, 3998, 3998, 3998, 3998, 3998, 3998,
     3998, 3998, 3998, 3998, 3998, 3998, 3998, 3998, 3998, 3998,
     3998, 3998, 3998, 3998, 3998, 3999, 3999, 3999, 3999, 3999,
     3999, 3999, 3999, 3999, 3999, 3999, 3999, 3999, 3999, 3999,
     3999, 3999, 3999, 3999, 3999, 3999, 3999, 3999, 3999, 3999,
     3999, 3999, 3999, 3999, 3999, 3999, 3999, 4000, 4000, 4000,
     4000, 4000, 4000, 4000, 4000, 4000, 4000, 4000, 4000, 4000,
     4000, 4000, 4000, 4000, 4000, 4000, 4000, 4000, 4000, 4000,

     4000, 4000, 4000, 4000, 4000, 4000, 4000, 4000, 4000, 4001,
     4001, 4001, 4001, 4001, 4001, 4001, 4001, 4001, 4001, 4001,
     4001, 4001, 4001, 4001, 4001, 4001, 4001, 4001, 4001, 4001,
     4001, 4001, 4001, 4001, 4001, 4001, 4001, 4001, 4001, 4001,
     4001, 4002, 4002, 4002, 4002, 4002, 4002, 4002, 4002, 4002,
     4002, 4002, 4002, 4002, 4002, 4002, 4002, 4002, 4002, 4002,
     4002, 4002, 4002, 4002, 4002, 4002, 4002, 4002, 4002, 4002,
     4002, 4002, 4002, 4003, 4003, 4003, 4003, 4003, 4003, 4003,
     4003, 4003, 4003, 4003, 4003, 4003, 4003, 4003, 4003, 4003,
     4003, 4003, 4003, 4003, 4003, 4003, 4003, 4003, 4003, 4003,

     4003, 4003, 4003, 4003, 4003, 4004, 4004, 4004, 4004, 4004,
     4004, 4004, 4004, 4004, 4004, 4004, 4004, 4004, 4004, 4004,
     4004, 4004, 4004, 4004, 4004, 4004, 4004, 4004, 4004, 4004,
     4004, 4004, 4004, 4004, 4004, 4004, 4004, 4005, 4005, 4005,
     4005, 4005, 4005, 4005, 4005, 4005, 4005, 4005, 4005, 4005,
     4005, 4005, 4005, 4005, 4005, 4005, 4005, 4005, 4005, 4005,
     4005, 4005, 4005, 4005, 4005, 4005, 4005, 4005, 4005, 4006,
     4006, 4006, 4006, 4006, 4006, 4006, 4006, 4006, 4006, 4006,
     4006, 4006, 4006, 4006, 4006, 4006, 4006, 4006, 4006, 4006,
     4006, 4006, 4006, 4006, 4006, 4006, 4006, 4006, 4006, 4006,

     4006, 4008,    0,    0,    0,    0,    0,    0,    0,    0,
     4008,    0,    0,    0,    0,    0, 4008,    0,    0,    0,
        0,    0,    0, 4008,    0,    0,    0,    0,    0,    0,
        0, 4008, 4009, 4009, 4009,    0,    0,    0, 4009,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0, 4009,    0,    0,    0,    0,    0,
        0,    0, 4009, 4010, 4010, 4010, 4010,    0,    0, 4010,
        0,    0,    0,    0,    0,    0,    0,    0,    0, 4010,
        0,    0,    0,    0,    0, 4010,    0,    0,    0,    0,
        0,    0, 4010, 4010, 4011, 4011, 4011,    0,    0,    0,

     4011,    0,    0,    0,    0,    0,    0, 4011,    0,    0,
        0,    0,    0,    0,    0,    0, 4011,    0,    0,    0,
        0,    0,    0, 4011, 4011, 4012, 4012, 4012,    0,    0,
        0,    0,    0,    0, 4012,    0,    0, 4012, 4012,    0,
     4012, 4012, 4012, 4012,    0,    0,    0, 4012,    0,    0,
        0,    0,    0,    0,    0, 4012, 4013, 4013, 4013,    0,
        0,    0, 4013,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0, 4013,    0,
        0,    0,    0,    0,    0,    0, 4013, 4014, 4014, 4014,
     4014, 4014, 4014, 4014, 4014, 4014, 4014, 4014, 4014, 4014,

        0, 4014, 4014, 4014, 4014, 4014, 4014, 4014, 4014, 4014,
     4014, 4014, 4014, 4014, 4014,    0, 4014, 4014, 4014, 4015,
     4015, 4015,    0,    0,    0, 4015,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0, 4015,    0,    0,    0,    0,    0,    0,    0, 4015,
     4016, 4016, 4016, 4016,    0,    0, 4016,    0,    0,    0,
        0,    0,    0,    0,    0,    0, 4016,    0,    0,    0,
        0,    0, 4016,    0,    0,    0,    0,    0,    0, 4016,
     4016, 4017, 4017, 4017,    0,    0,    0,    0,    0,    0,
     4017,    0,    0,    0,    0,    0, 4017, 4017,    0,    0,

        0,    0,    0, 4017,    0,    0,    0,    0,    0,    0,
        0, 4017, 4021,    0,    0,    0, 4021,    0, 4021,    0,
        0, 4021,    0,    0,    0, 4021,    0,    0,    0,    0,
        0,    0,    0, 4021, 4022, 4022,    0, 4022, 4022, 4022,
     4022, 4022, 4022, 4022, 4022, 4022, 4022, 4022, 4022, 4022,
     4022, 4022, 4022, 4022, 4022, 4022, 4022, 4022, 4022, 4022,
     4022, 4022, 4022, 4022, 4022, 4022, 4029, 4029, 4029,    0,
        0,    0, 4029,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0, 4029,    0,
        0,    0,    0, 4029,    0,    0, 4029, 4031, 4031, 4031,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
     4031,    0, 4031, 4031,    0,    0,    0,    0,    0, 4031,
        0, 4031,    0,    0,    0,    0,    0, 4031, 4033, 4033,
        0, 4033, 4033, 4033, 4033, 4033, 4033,    0, 4033, 4033,
     4033, 4033, 4033, 4033, 4033, 4033, 4033, 4033, 4033, 4033,
     4033, 4033, 4033, 4033, 4033, 4033, 4033, 4033, 4033, 4033,
     4034, 4034, 4034,    0,    0,    0, 4034,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0, 4034,    0,    0,    0,    0,    0,    0,    0,
     4034, 4035, 4035, 4035, 4035,    0,    0, 4035,    0,    0,

        0,    0,    0,    0,    0,    0,    0, 4035,    0,    0,
        0,    0,    0, 4035,    0,    0,    0,    0,    0,    0,
     4035, 4035, 4036, 4036, 4036,    0,    0,    0, 4036, 4036,
        0,    0,    0, 4036,    0,    0,    0,    0, 4036,    0,
        0,    0,    0,    0, 4036,    0,    0,    0, 4036,    0,
        0,    0, 4036, 4039, 4039, 4039,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0, 4039, 4039,
        0, 4039,    0,    0,    0, 4039,    0,    0,    0,    0,
        0,    0,    0, 4039, 4040, 4040, 4040, 4040, 4040, 4040,
     4040, 4040, 4040, 4040, 4040, 4040, 4040, 4040, 4040, 4040,

     4040, 4040, 4040, 4040, 4040, 4040, 4040, 4040, 4040, 4040,
     4040, 4040, 4040, 4040, 4040, 4040, 4041, 4041,    0, 4041,
     4041, 4041, 4041, 4041, 4041, 4041, 4041, 4041, 4041, 4041,
     4041, 4041, 4041, 4041, 4041,    0, 4041, 4041, 4041, 4041,
     4041, 4041, 4041, 4041, 4041, 4041, 4041, 4041, 4042, 4042,
     4042,    0,    0,    0, 4042,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
     4042,    0,    0,    0,    0,    0,    0,    0, 4042, 4043,
     4043, 4043, 4043,    0,    0, 4043,    0,    0,    0,    0,
        0,    0,    0,    0,    0, 4043,    0,    0,    0,    0,

        0, 4043,    0,    0,    0,    0,    0,    0, 4043, 4043,
     4044, 4044, 4044,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0, 4044, 4044,    0, 4044,    0,
        0,    0, 4044,    0,    0,    0,    0,    0,    0,    0,
     4044, 4049, 4049,    0,    0, 4049,    0,    0, 4049, 4049,
        0, 4049, 4049, 4049, 4049, 4049,    0, 4049, 4049, 4049,
        0, 4049, 4049,    0, 4049, 4049, 4049, 4049, 4049,    0,
        0, 4049, 4049, 4050, 4050,    0, 4050, 4050, 4050, 4050,
     4050, 4050, 4050, 4050, 4050, 4050, 4050, 4050, 4050, 4050,
     4050, 4050, 4050, 4050, 4050, 4050, 4050, 4050, 4050, 4050,

     4050, 4050, 4050, 4050, 4050, 4051, 4051,    0, 4051, 4051,
     4051, 4051, 4051, 4051,    0, 4051, 4051, 4051, 4051, 4051,
     4051, 4051, 4051, 4051, 4051, 4051, 4051, 4051, 4051, 4051,
     4051, 4051, 4051, 4051, 4051, 4051, 4051, 4053, 4053, 4053,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
     4053,    0, 4053, 4053,    0,    0,    0,    0,    0, 4053,
        0,    0,    0,    0,    0,    0,    0, 4053, 4054, 4054,
     4054,    0,    0,    0, 4054,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
     4054,    0,    0,    0,    0,    0,    0,    0, 4054, 4055,

     4055, 4055, 4055,    0,    0, 4055,    0,    0,    0,    0,
        0,    0,    0,    0,    0, 4055,    0,    0,    0,    0,
        0, 4055,    0,    0,    0,    0,    0,    0, 4055, 4055,
     4056, 4056, 4056,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0, 4056, 4056,    0,    0,    0,
        0,    0, 4056,    0,    0,    0,    0,    0,    0,    0,
     4056, 4057, 4057,    0, 4057, 4057,    0,    0, 4057, 4057,
        0, 4057, 4057, 4057, 4057, 4057,    0, 4057, 4057, 4057,
        0, 4057, 4057,    0, 4057, 4057,    0, 4057, 4057,    0,
        0, 4057, 4057, 4058, 4058,    0, 4058, 4058, 4058, 4058,

     4058, 4058,    0, 4058, 4058, 4058, 4058, 4058, 4058, 4058,
     4058, 4058, 4058, 4058, 4058, 4058, 4058, 4058, 4058, 4058,
     4058, 4058, 4058, 4058, 4058, 4059, 4059,    0, 4059, 4059,
     4059, 4059, 4059, 4059, 4059, 4059, 4059, 4059, 4059, 4059,
     4059, 4059, 4059, 4059, 4059, 4059, 4059, 4059, 4059, 4059,
     4059, 4059, 4059, 4059, 4059, 4059, 4059, 4060, 4060,    0,
     4060, 4060, 4060, 4060, 4060, 4060, 4060, 4060, 4060,    0,
     4060, 4060, 4060, 4060, 4060, 4060, 4060, 4060, 4060, 4060,
     4060, 4060, 4060, 4060, 4060, 4060, 4060, 4060, 4060, 4061,
     4061, 4061, 4061, 4061, 4061, 4061, 4061, 4061, 4061, 4061,

     4061, 4061, 4061, 4061, 4061, 4061, 4061, 4061, 4061, 4061,
     4061, 4061, 4061, 4061, 4061, 4061, 4061, 4061, 4061, 4061,
     4061, 4062, 4062,    0, 4062, 4062,    0, 4062, 4062, 4062,
     4062, 4062, 4062, 4062, 4062, 4062, 4062, 4062, 4062, 4062,
     4062, 4062, 4062, 4062, 4062,    0, 4062,    0, 4062, 4062,
     4062, 4062, 4062, 4063, 4063,    0, 4063, 4063, 4063, 4063,
     4063, 4063, 4063, 4063, 4063, 4063, 4063, 4063, 4063, 4063,
     4063, 4063, 4063, 4063, 4063, 4063, 4063, 4063, 4063, 4063,
     4063, 4063, 4063, 4063, 4063, 4066,    0,    0,    0, 4066,
     4066, 4066, 4066, 4066, 4066, 4066, 4066,    0, 4066,    0,

        0, 4066, 4066, 4066, 4066, 4066, 4066, 4066, 4066, 4066,
     4066, 4066, 4066, 4066, 4066, 4066, 4066, 4068,    0, 4068,
        0,    0,    0,    0,    0,    0, 4068,    0, 4068,    0,
        0,    0,    0,    0, 4068, 4070, 4070, 4070,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0, 4070,    0,
     4070,    0,    0,    0,    0,    0,    0, 4070,    0,    0,
        0,    0,    0,    0,    0, 4070, 4072, 4072, 4072,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0, 4072,    0,    0,    0,    0,    0,    0, 4072,    0,
     4072,    0,    0,    0,    0,    0, 4072, 4075, 4075,    0,

     4075, 4075, 4075, 4075, 4075, 4075, 4075, 4075, 4075, 4075,
     4075, 4075, 4075, 4075, 4075, 4075, 4075, 4075, 4075, 4075,
     4075, 4075, 4075, 4075, 4075, 4075, 4075, 4075, 4075, 4077,
        0,    0,    0, 4077,    0,    0,    0,    0,    0,    0,
     4077,    0,    0,    0,    0,    0,    0, 4077,    0,    0,
        0,    0,    0,    0,    0, 4077, 4080, 4080,    0, 4080,
     4080,    0, 4080, 4080, 4080, 4080, 4080, 4080, 4080, 4080,
     4080, 4080, 4080, 4080, 4080, 4080, 4080, 4080, 4080, 4080,
     4080, 4080, 4080, 4080, 4080, 4080, 4080, 4080, 4083, 4083,
     4083, 4083, 4083, 4083, 4083, 4083, 4083, 4083, 4083,    0,

     4083, 4083, 4083, 4083, 4083, 4083, 4083, 4083, 4083, 4083,
     4083, 4083, 4083, 4083, 4083, 4083, 4083, 4083, 4083, 4083,
     4085, 4085, 4085,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0, 4085, 4085,    0,    0,    0,
        0,    0, 4085,    0,    0,    0,    0,    0,    0,    0,
     4085, 4086, 4086, 4086, 4086, 4086, 4086, 4086, 4086, 4086,
     4086, 4086,    0, 4086, 4086, 4086, 4086, 4086, 4086, 4086,
     4086, 4086, 4086, 4086, 4086, 4086, 4086, 4086, 4086, 4086,
     4086, 4086, 4086, 4088, 4088,    0, 4088,    0,    0,    0,
     4088,    0,    0,    0,    0,    0,    0,    0, 4088, 4095,

     4095,    0, 4095, 4095, 4095, 4095, 4095, 4095,    0, 4095,
     4095, 4095, 4095, 4095, 4095, 4095, 4095, 4095, 4095, 4095,
     4095, 4095, 4095, 4095, 4095, 4095, 4095, 4095, 4095, 4095,
     4095, 4096, 4096, 4096,    0,    0,    0, 4096,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0, 4096,    0,    0,    0,    0,    0,    0,
        0, 4096, 4097, 4097, 4097,    0,    0,    0,    0,    0,
        0,    0,    0, 4097,    0,    0,    0, 4097,    0,    0,
        0,    0,    0,    0, 4097,    0,    0,    0,    0,    0,
        0,    0, 4097, 4098, 4098, 4098,    0,    0,    0, 4098,

     4098,    0,    0,    0, 4098,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0, 4098,    0,    0,    0,    0,
        0,    0,    0, 4098, 4099, 4099, 4099,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0, 4099,
        0,    0,    0,    0,    0,    0, 4099, 4099,    0,    0,
        0,    0,    0,    0, 4099, 4100, 4100, 4100,    0,    0,
        0, 4100,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0, 4100,    0,    0,
        0,    0,    0,    0,    0, 4100, 4101, 4101, 4101, 4101,
        0,    0, 4101,    0,    0,    0,    0,    0,    0,    0,

        0,    0, 4101,    0,    0,    0,    0,    0, 4101,    0,
        0,    0,    0,    0,    0, 4101, 4101, 4102, 4102, 4102,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0, 4102, 4102,    0,    0,    0,    0,    0, 4102,
        0,    0,    0,    0,    0,    0,    0, 4102, 4103, 4103,
        0, 4103, 4103, 4103, 4103, 4103, 4103, 4103, 4103, 4103,
     4103, 4103, 4103, 4103, 4103, 4103, 4103, 4103, 4103, 4103,
     4103, 4103, 4103, 4103, 4103, 4103, 4103, 4103, 4103, 4103,
     4104,    0,    0,    0, 4104,    0,    0, 4104, 4104,    0,
        0,    0, 4104, 4104, 4104,    0, 4104, 4104, 4104, 4104,

     4104, 4104, 4104, 4104, 4104, 4104, 4104, 4104, 4104, 4104,
     4104, 4104, 4105, 4105,    0, 4105, 4105, 4105, 4105, 4105,
     4105,    0, 4105, 4105, 4105, 4105, 4105, 4105, 4105, 4105,
     4105, 4105, 4105, 4105, 4105, 4105, 4105, 4105, 4105, 4105,
     4105, 4105, 4105, 4105, 4110, 4110,    0, 4110, 4110, 4110,
     4110, 4110, 4110, 4110, 4110, 4110, 4110, 4110, 4110, 4110,
     4110, 4110, 4110, 4110, 4110, 4110, 4110, 4110, 4110, 4110,
     4110, 4110, 4110, 4110, 4110, 4110, 4111, 4111,    0, 4111,
     4111, 4111, 4111, 4111, 4111, 4111, 4111, 4111, 4111, 4111,
     4111, 4111, 4111, 4111, 4111, 4111, 4111, 4111, 4111, 4111,

     4111, 4111, 4111, 4111, 4111, 4111, 4111, 4111, 4112, 4112,
        0, 4112, 4112,    0, 4112, 4112, 4112,    0,    0,    0,
     4112, 4112, 4112, 4112, 4112, 4112, 4112, 4112, 4112, 4112,
     4112, 4112, 4112, 4112, 4112, 4112, 4112, 4112, 4112, 4112,
     4113, 4113,    0, 4113, 4113, 4113, 4113, 4113, 4113,    0,
     4113, 4113, 4113, 4113, 4113, 4113, 4113, 4113, 4113, 4113,
     4113, 4113, 4113, 4113, 4113, 4113, 4113, 4113, 4113, 4113,
     4113, 4113, 4114, 4114,    0, 4114, 4114,    0, 4114, 4114,
     4114,    0, 4114, 4114, 4114, 4114, 4114,    0, 4114, 4114,
     4114, 4114, 4114, 4114, 4114, 4114, 4114, 4114, 4114, 4114,

        0,    0, 4114, 4114, 4115, 4115,    0, 4115, 4115, 4115,
     4115, 4115, 4115,    0, 4115, 4115, 4115, 4115, 4115, 4115,
     4115, 4115, 4115, 4115, 4115, 4115, 4115, 4115, 4115, 4115,
     4115, 4115, 4115, 4115, 4115, 4115, 4116, 4116,    0, 4116,
     4116,    0, 4116, 4116, 4116,    0,    0,    0, 4116, 4116,
     4116,    0, 4116, 4116, 4116, 4116, 4116, 4116, 4116, 4116,
     4116, 4116, 4116, 4116, 4116, 4116, 4116, 4116, 4117, 4117,
        0, 4117, 4117, 4117, 4117, 4117, 4117,    0, 4117, 4117,
     4117, 4117, 4117, 4117, 4117, 4117, 4117, 4117, 4117, 4117,
     4117, 4117, 4117, 4117, 4117, 4117, 4117, 4117, 4117, 4117,

     4118, 4118,    0, 4118, 4118,    0, 4118, 4118, 4118,    0,
     4118, 4118, 4118, 4118, 4118,    0, 4118, 4118, 4118, 4118,
     4118, 4118, 4118, 4118, 4118, 4118, 4118, 4118,    0,    0,
     4118, 4118, 4119, 4119,    0, 4119, 4119, 4119, 4119, 4119,
     4119,    0, 4119, 4119, 4119, 4119, 4119, 4119, 4119, 4119,
     4119, 4119, 4119, 4119, 4119, 4119, 4119, 4119, 4119, 4119,
     4119, 4119, 4119, 4119, 4121, 4121,    0, 4121, 4121, 4121,
     4121, 4121, 4121,    0, 4121, 4121, 4121, 4121, 4121, 4121,
     4121, 4121, 4121, 4121, 4121, 4121, 4121, 4121, 4121, 4121,
     4121, 4121, 4121, 4121, 4121, 4121, 4123, 4123,    0, 4123,

     4123,    0, 4123, 4123, 4123,    0, 4123, 4123, 4123, 4123,
     4123, 4123, 4123, 4123, 4123, 4123, 4123, 4123, 4123, 4123,
     4123,    0, 4123, 4123, 4123, 4123, 4123, 4123, 4124, 4124,
        0, 4124, 4124, 4124, 4124, 4124, 4124, 4124, 4124, 4124,
     4124, 4124, 4124, 4124, 4124, 4124, 4124, 4124, 4124, 4124,
     4124, 4124, 4124, 4124, 4124, 4124, 4124, 4124, 4124, 4124,
     4125, 4125,    0, 4125, 4125,    0, 4125, 4125, 4125,    0,
        0,    0, 4125, 4125, 4125,    0, 4125, 4125, 4125, 4125,
     4125, 4125, 4125, 4125, 4125, 4125, 4125, 4125, 4125, 4125,
     4125, 4125, 4126, 4126,    0, 4126, 4126, 4126, 4126, 4126,

     4126, 4126, 4126, 4126,    0, 4126, 4126, 4126, 4126, 4126,
     4126, 4126, 4126, 4126,    0, 4126, 4126,    0, 4126, 4126,
     4126, 4126, 4126, 4126, 4127, 4127,    0, 4127, 4127, 4127,
     4127, 4127, 4127, 4127, 4127, 4127, 4127, 4127, 4127, 4127,
     4127, 4127, 4127, 4127, 4127, 4127,    0, 4127, 4127,    0,
     4127, 4127, 4127, 4127, 4127, 4127, 4138, 4138, 4138,    0,
        0,    0, 4138,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0, 4138, 4138,
        0,    0,    0,    0,    0,    0, 4138, 4140, 4140, 4140,
        0,    0,    0,    0,    0,    0,    0, 4140,    0, 4140,

        0,    0, 4140,    0,    0,    0,    0,    0,    0, 4140,
        0,    0,    0,    0,    0,    0,    0, 4140, 4141, 4141,
     4141, 4141, 4141, 4141, 4141, 4141, 4141, 4141, 4141, 4141,
     4141, 4141, 4141, 4141, 4141, 4141, 4141, 4141, 4141, 4141,
     4141, 4141, 4141, 4141, 4141, 4141, 4141, 4141, 4141, 4141,
     4142, 4142, 4142,    0,    0,    0, 4142,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0, 4142,    0,    0,    0,    0,    0,    0,    0,
     4142, 4144, 4144, 4144,    0,    0,    0,    0,    0,    0,
     4144,    0,    0,    0,    0,    0, 4144,    0,    0,    0,

        0,    0,    0, 4144,    0,    0,    0,    0,    0,    0,
        0, 4144, 4145,    0,    0,    0,    0,    0, 4145, 4145,
        0,    0,    0, 4145,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0, 4145,    0,    0,    0,    0,    0,
        0,    0, 4145, 4146, 4146, 4146,    0,    0,    0, 4146,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0, 4146,    0,    0,    0,    0,
        0,    0,    0, 4146, 4147, 4147, 4147, 4147,    0,    0,
     4147,    0,    0,    0,    0,    0,    0,    0,    0,    0,
     4147,    0,    0,    0,    0,    0, 4147,    0,    0,    0,

        0,    0,    0, 4147, 4147, 4148, 4148, 4148,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
     4148, 4148,    0,    0,    0,    0,    0, 4148,    0,    0,
        0,    0,    0,    0,    0, 4148, 4149, 4149, 4149, 4149,
     4149, 4149, 4149, 4149, 4149, 4149, 4149, 4149, 4149, 4149,
     4149, 4149, 4149, 4149, 4149, 4149, 4149, 4149, 4149, 4149,
     4149, 4149, 4149, 4149, 4149, 4149, 4149, 4149, 4150, 4150,
        0, 4150, 4150, 4150, 4150, 4150, 4150, 4150, 4150, 4150,
        0, 4150, 4150,    0, 4150, 4150, 4150, 4150, 4150, 4150,
        0, 4150, 4150,    0, 4150, 4150, 4150, 4150, 4150, 4150,

     4151, 4151, 4151, 4151, 4151, 4151, 4151, 4151, 4151, 4151,
     4151, 4151, 4151, 4151, 4151, 4151,    0, 4151, 4151, 4151,
     4151, 4151, 4151,    0, 4151, 4151, 4151, 4151, 4151, 4151,
     4151, 4151, 4152, 4152,    0, 4152, 4152, 4152, 4152,    0,
     4152, 4152, 4152, 4152,    0, 4152, 4152,    0, 4152, 4152,
     4152,    0, 4152, 4152,    0, 4152, 4152,    0,    0, 4152,
     4152, 4152, 4152, 4152, 4153,    0,    0,    0,    0,    0,
        0,    0,    0, 4153,    0,    0,    0,    0,    0, 4153,
        0,    0,    0,    0,    0,    0, 4153,    0,    0,    0,
        0,    0,    0,    0, 4153, 4154, 4154, 4154,    0,    0,

        0, 4154,    0,    0,    0,    0,    0,    0, 4154,    0,
        0,    0,    0,    0,    0,    0,    0, 4154,    0,    0,
        0,    0,    0,    0, 4154, 4154, 4155, 4155, 4155,    0,
        0,    0, 4155,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0, 4155,    0,
        0,    0,    0,    0,    0,    0, 4155, 4156, 4156, 4156,
        0,    0,    0,    0,    0,    0, 4156,    0,    0, 4156,
        0,    0, 4156,    0, 4156, 4156,    0,    0,    0, 4156,
        0,    0,    0,    0,    0,    0,    0, 4156, 4158, 4158,
     4158,    0,    0,    0,    0,    0,    0, 4158,    0,    0,

     4158, 4158,    0, 4158, 4158, 4158, 4158,    0,    0,    0,
     4158,    0,    0,    0,    0,    0,    0,    0, 4158, 4159,
     4159, 4159,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0, 4159,    0, 4159,    0,    0,    0,    0,    0,
        0, 4159,    0,    0,    0,    0,    0,    0,    0, 4159,
     4160, 4160, 4160,    0,    0,    0, 4160,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0, 4160,    0,    0,    0,    0,    0,    0,    0,
     4160, 4161, 4161, 4161,    0,    0,    0, 4161,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0, 4161,    0,    0,    0,    0,    0,    0,
        0, 4161, 4162, 4162, 4162,    0,    0,    0,    0,    0,
        0, 4162,    0,    0, 4162,    0,    0, 4162,    0, 4162,
     4162,    0,    0,    0, 4162,    0,    0,    0,    0,    0,
        0,    0, 4162, 4163, 4163, 4163, 4163, 4163, 4163, 4163,
     4163, 4163, 4163, 4163, 4163, 4163,    0, 4163, 4163, 4163,
     4163, 4163, 4163, 4163, 4163, 4163, 4163, 4163, 4163, 4163,
     4163,    0, 4163, 4163, 4163, 4164, 4164, 4164,    0,    0,
        0, 4164,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0, 4164,    0,    0,

        0,    0,    0,    0,    0, 4164, 4165, 4165, 4165,    0,
        0,    0,    0,    0,    0, 4165,    0,    0,    0,    0,
        0, 4165,    0,    0,    0,    0,    0,    0, 4165,    0,
        0,    0,    0,    0,    0,    0, 4165, 4167, 4167, 4167,
        0,    0,    0,    0,    0,    0, 4167,    0,    0,    0,
        0,    0, 4167, 4167,    0,    0,    0,    0,    0, 4167,
        0,    0,    0,    0,    0,    0,    0, 4167, 4169,    0,
        0,    0, 4169,    0, 4169,    0,    0, 4169,    0,    0,
        0, 4169,    0,    0,    0,    0,    0,    0,    0, 4169,
     4172, 4172,    0, 4172, 4172, 4172, 4172, 4172, 4172, 4172,

     4172, 4172, 4172, 4172, 4172, 4172, 4172, 4172, 4172, 4172,
     4172, 4172, 4172, 4172, 4172, 4172, 4172, 4172, 4172, 4172,
     4172, 4172, 4176, 4176, 4176,    0,    0,    0, 4176,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0, 4176,    0,    0,    0,    0, 4176,
        0,    0, 4176, 4177, 4177, 4177,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0, 4177,    0, 4177, 4177,
        0,    0,    0,    0,    0, 4177,    0,    0,    0,    0,
        0,    0,    0, 4177, 4178, 4178, 4178,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0, 4178,    0, 4178,

     4178,    0,    0,    0,    0,    0, 4178,    0, 4178,    0,
        0,    0,    0,    0, 4178, 4179, 4179, 4179,    0,    0,
        0, 4179,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0, 4179,    0,    0,
        0,    0,    0,    0,    0, 4179, 4183, 4183,    0, 4183,
     4183, 4183, 4183, 4183, 4183, 4183, 4183, 4183, 4183, 4183,
     4183, 4183, 4183, 4183, 4183, 4183, 4183, 4183, 4183, 4183,
     4183,    0, 4183, 4183, 4183, 4183, 4183, 4183, 4184, 4184,
        0, 4184, 4184, 4184, 4184, 4184, 4184, 4184, 4184, 4184,
     4184, 4184, 4184, 4184, 4184, 4184, 4184, 4184, 4184, 4184,

     4184, 4184, 4184, 4184, 4184, 4184, 4184, 4184, 4184, 4184,
     4185, 4185, 4185, 4185, 4185, 4185, 4185, 4185, 4185, 4185,
     4185, 4185, 4185, 4185, 4185, 4185, 4185, 4185, 4185, 4185,
     4185, 4185, 4185, 4185, 4185, 4185, 4185, 4185, 4185, 4185,
     4185, 4185, 4186, 4186, 4186,    0,    0,    0, 4186,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0, 4186,    0,    0,    0,    0,    0,
        0,    0, 4186, 4187, 4187, 4187,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0, 4187,    0,
        0, 4187,    0,    0,    0, 4187,    0,    0,    0,    0,

        0,    0,    0, 4187, 4189, 4189, 4189,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0, 4189,
     4189,    0, 4189,    0,    0,    0, 4189,    0,    0,    0,
        0,    0,    0,    0, 4189, 4190, 4190,    0, 4190, 4190,
     4190, 4190, 4190, 4190, 4190, 4190, 4190, 4190, 4190, 4190,
     4190, 4190, 4190, 4190, 4190, 4190, 4190, 4190, 4190, 4190,
     4190, 4190, 4190, 4190, 4190, 4190, 4190, 4191, 4191, 4191,
        0,    0,    0, 4191, 4191,    0,    0,    0, 4191,    0,
        0,    0,    0, 4191,    0,    0,    0,    0,    0, 4191,
        0,    0,    0, 4191,    0,    0,    0, 4191, 4192, 4192,

     4192,    0,    0,    0,    0,    0,    0,    0, 4192, 4192,
        0,    0,    0, 4192, 4192,    0, 4192,    0,    0,    0,
     4192,    0,    0,    0,    0,    0,    0,    0, 4192, 4196,
     4196, 4196,    0,    0,    0,    0,    0,    0, 4196,    0,
        0,    0, 4196,    0, 4196,    0,    0,    0,    0,    0,
        0, 4196,    0,    0,    0,    0,    0,    0,    0, 4196,
     4197, 4197,    0, 4197, 4197, 4197, 4197, 4197, 4197, 4197,
     4197, 4197, 4197, 4197, 4197, 4197, 4197, 4197, 4197,    0,
     4197, 4197, 4197, 4197, 4197, 4197, 4197, 4197, 4197, 4197,
     4197, 4197, 4198, 4198, 4198,    0,    0,    0, 4198,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0, 4198,    0,    0,    0,    0,    0,
        0,    0, 4198, 4199, 4199, 4199,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0, 4199,    0,
        0, 4199,    0,    0,    0, 4199,    0,    0,    0,    0,
        0,    0,    0, 4199, 4201, 4201, 4201,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0, 4201,
     4201,    0, 4201,    0,    0,    0, 4201,    0,    0,    0,
        0,    0,    0,    0, 4201, 4204, 4204,    0,    0, 4204,
        0,    0, 4204, 4204,    0, 4204, 4204, 4204, 4204, 4204,

        0, 4204, 4204, 4204,    0, 4204, 4204,    0, 4204, 4204,
     4204, 4204, 4204,    0,    0, 4204, 4204, 4205, 4205,    0,
     4205, 4205, 4205, 4205, 4205, 4205, 4205, 4205, 4205, 4205,
     4205, 4205, 4205, 4205, 4205, 4205, 4205, 4205, 4205, 4205,
     4205, 4205, 4205, 4205, 4205, 4205, 4205, 4205, 4205, 4206,
     4206,    0, 4206, 4206, 4206, 4206, 4206, 4206, 4206, 4206,
     4206, 4206, 4206, 4206, 4206, 4206, 4206, 4206, 4206, 4206,
     4206, 4206, 4206, 4206,    0, 4206, 4206, 4206, 4206, 4206,
     4206, 4207, 4207,    0, 4207, 4207, 4207, 4207, 4207, 4207,
     4207, 4207, 4207, 4207, 4207, 4207, 4207, 4207, 4207, 4207,

     4207, 4207, 4207, 4207, 4207, 4207, 4207, 4207, 4207, 4207,
     4207, 4207, 4207, 4208, 4208,    0, 4208, 4208, 4208, 4208,
     4208, 4208, 4208, 4208, 4208, 4208, 4208, 4208, 4208, 4208,
     4208, 4208, 4208, 4208, 4208, 4208, 4208, 4208, 4208, 4208,
     4208, 4208, 4208, 4208, 4208, 4209, 4209, 4209,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0, 4209,    0,
     4209, 4209,    0,    0,    0,    0,    0, 4209,    0,    0,
        0,    0,    0,    0,    0, 4209, 4210, 4210, 4210,    0,
        0,    0, 4210,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0, 4210,    0,

        0,    0,    0,    0,    0,    0, 4210, 4211, 4211, 4211,
        0,    0,    0, 4211,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0, 4211,
        0,    0,    0,    0,    0,    0,    0, 4211, 4214, 4214,
     4214,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0, 4214, 4214,    0,    0,    0,    0,    0,
     4214,    0,    0,    0,    0,    0,    0,    0, 4214, 4215,
     4215,    0, 4215, 4215,    0,    0, 4215, 4215,    0, 4215,
     4215, 4215, 4215, 4215,    0, 4215, 4215, 4215,    0, 4215,
     4215,    0, 4215, 4215,    0, 4215, 4215,    0,    0, 4215,

     4215, 4216, 4216,    0, 4216, 4216, 4216, 4216, 4216, 4216,
     4216, 4216, 4216, 4216, 4216, 4216, 4216, 4216, 4216, 4216,
     4216, 4216, 4216, 4216, 4216, 4216,    0, 4216, 4216, 4216,
     4216, 4216, 4216, 4217, 4217,    0, 4217, 4217, 4217, 4217,
     4217, 4217, 4217, 4217, 4217, 4217, 4217, 4217, 4217, 4217,
     4217, 4217, 4217, 4217, 4217, 4217, 4217, 4217, 4217, 4217,
     4217, 4217, 4217, 4217, 4217, 4218, 4218,    0, 4218, 4218,
     4218, 4218, 4218, 4218, 4218, 4218, 4218,    0, 4218, 4218,
     4218, 4218, 4218, 4218, 4218, 4218, 4218, 4218, 4218, 4218,
     4218, 4218, 4218, 4218, 4218, 4218, 4218, 4219, 4219, 4219,

     4219, 4219, 4219, 4219, 4219, 4219, 4219, 4219, 4219, 4219,
     4219, 4219, 4219, 4219, 4219, 4219, 4219, 4219, 4219, 4219,
     4219, 4219, 4219, 4219, 4219, 4219, 4219, 4219, 4219, 4220,
     4220,    0, 4220, 4220,    0, 4220, 4220, 4220, 4220, 4220,
     4220, 4220, 4220, 4220, 4220, 4220, 4220, 4220, 4220, 4220,
     4220, 4220, 4220,    0, 4220,    0, 4220, 4220, 4220, 4220,
     4220, 4221, 4221,    0, 4221, 4221, 4221, 4221, 4221, 4221,
     4221, 4221, 4221, 4221, 4221, 4221, 4221, 4221, 4221, 4221,
     4221, 4221, 4221, 4221, 4221, 4221, 4221, 4221, 4221, 4221,
     4221, 4221, 4221, 4223,    0,    0,    0, 4223, 4223, 4223,

     4223, 4223, 4223, 4223, 4223,    0, 4223,    0,    0, 4223,
     4223, 4223, 4223, 4223, 4223, 4223, 4223, 4223, 4223, 4223,
     4223, 4223, 4223, 4223, 4223, 4224,    0, 4224,    0,    0,
        0,    0,    0,    0, 4224,    0, 4224,    0,    0,    0,
        0,    0, 4224, 4226, 4226, 4226,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0, 4226,    0, 4226,    0,
        0,    0,    0,    0,    0, 4226,    0,    0,    0,    0,
        0,    0,    0, 4226, 4227, 4227, 4227,    0,    0,    0,
     4227,    0,    0,    0,    0, 4227,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0, 4227,    0,    0,    0,

        0,    0,    0,    0, 4227, 4228, 4228, 4228,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
     4228,    0,    0,    0,    0,    0,    0, 4228,    0, 4228,
        0,    0,    0,    0,    0, 4228, 4229, 4229, 4229,    0,
        0,    0, 4229,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0, 4229,    0,
        0,    0,    0,    0,    0,    0, 4229, 4231, 4231,    0,
     4231, 4231, 4231, 4231, 4231, 4231, 4231, 4231, 4231, 4231,
     4231, 4231, 4231, 4231, 4231, 4231, 4231, 4231, 4231, 4231,
     4231, 4231, 4231, 4231, 4231, 4231, 4231, 4231, 4231, 4232,

        0,    0,    0, 4232,    0,    0,    0,    0,    0,    0,
     4232,    0,    0,    0,    0,    0,    0, 4232,    0,    0,
        0,    0,    0,    0,    0, 4232, 4234, 4234,    0, 4234,
     4234,    0, 4234, 4234, 4234, 4234, 4234, 4234, 4234, 4234,
     4234, 4234, 4234, 4234, 4234, 4234, 4234, 4234, 4234, 4234,
     4234, 4234, 4234, 4234, 4234, 4234, 4234, 4234, 4236, 4236,
     4236, 4236, 4236, 4236, 4236, 4236, 4236, 4236, 4236,    0,
     4236, 4236, 4236, 4236, 4236, 4236, 4236, 4236, 4236, 4236,
     4236, 4236, 4236, 4236, 4236, 4236, 4236, 4236, 4236, 4236,
     4237, 4237, 4237,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0, 4237, 4237,    0,    0,    0,
        0,    0, 4237,    0,    0,    0,    0,    0,    0,    0,
     4237, 4238, 4238, 4238, 4238, 4238, 4238, 4238, 4238, 4238,
     4238, 4238,    0, 4238, 4238, 4238, 4238, 4238, 4238, 4238,
     4238, 4238, 4238, 4238, 4238, 4238, 4238, 4238, 4238, 4238,
     4238, 4238, 4238, 4239, 4239,    0, 4239,    0,    0,    0,
     4239,    0,    0,    0,    0,    0,    0,    0, 4239, 4240,
        0,    0,    0,    0,    0,    0, 4240,    0,    0,    0,
     4240, 4240,    0,    0, 4240, 4240,    0,    0,    0, 4240,
        0, 4240, 4244, 4244,    0, 4244, 4244, 4244, 4244, 4244,

     4244, 4244, 4244, 4244, 4244, 4244, 4244, 4244, 4244, 4244,
     4244, 4244, 4244, 4244, 4244, 4244, 4244,    0, 4244, 4244,
     4244, 4244, 4244, 4244, 4245, 4245,    0, 4245, 4245, 4245,
     4245, 4245, 4245, 4245, 4245, 4245, 4245, 4245, 4245, 4245,
     4245, 4245, 4245, 4245, 4245, 4245, 4245, 4245, 4245, 4245,
     4245, 4245, 4245, 4245, 4245, 4245, 4246, 4246, 4246,    0,
        0,    0, 4246,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0, 4246,    0,
        0,    0,    0,    0,    0,    0, 4246, 4247, 4247, 4247,
        0,    0,    0,    0,    0,    0,    0,    0, 4247,    0,

        0,    0, 4247,    0,    0,    0,    0,    0,    0, 4247,
        0,    0,    0,    0,    0,    0,    0, 4247, 4248, 4248,
     4248,    0,    0,    0, 4248, 4248,    0,    0,    0, 4248,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
     4248,    0,    0,    0,    0,    0,    0,    0, 4248, 4249,
     4249, 4249,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0, 4249,    0,    0,    0,    0,    0,
        0, 4249, 4249,    0,    0,    0,    0,    0,    0, 4249,
     4250, 4250,    0, 4250, 4250, 4250, 4250, 4250, 4250, 4250,
     4250, 4250, 4250, 4250, 4250, 4250, 4250, 4250, 4250, 4250,

     4250, 4250, 4250, 4250, 4250, 4250, 4250, 4250, 4250, 4250,
     4250, 4250, 4251, 4251, 4251,    0,    0,    0, 4251,    0,
        0,    0,    0, 4251,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0, 4251,    0,    0,    0,    0,    0,
        0,    0, 4251, 4252, 4252, 4252,    0,    0,    0, 4252,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0, 4252,    0,    0,    0,    0,
        0,    0,    0, 4252, 4255, 4255, 4255,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0, 4255,
     4255,    0,    0,    0,    0,    0, 4255,    0,    0,    0,

        0,    0,    0,    0, 4255, 4256, 4256,    0, 4256, 4256,
     4256, 4256, 4256, 4256, 4256, 4256, 4256, 4256, 4256, 4256,
     4256, 4256, 4256, 4256, 4256, 4256, 4256, 4256, 4256, 4256,
     4256, 4256, 4256, 4256, 4256, 4256, 4256, 4257,    0,    0,
        0, 4257,    0,    0, 4257, 4257,    0,    0,    0, 4257,
     4257, 4257,    0, 4257, 4257, 4257, 4257, 4257, 4257, 4257,
     4257, 4257, 4257, 4257, 4257, 4257, 4257, 4257, 4257, 4258,
     4258,    0, 4258, 4258, 4258, 4258, 4258, 4258, 4258, 4258,
     4258, 4258, 4258, 4258, 4258, 4258, 4258, 4258, 4258, 4258,
     4258, 4258, 4258, 4258,    0, 4258, 4258, 4258, 4258, 4258,

     4258, 4259, 4259,    0, 4259, 4259, 4259, 4259, 4259, 4259,
     4259, 4259, 4259, 4259, 4259, 4259, 4259, 4259, 4259, 4259,
     4259, 4259, 4259, 4259, 4259, 4259, 4259, 4259, 4259, 4259,
     4259, 4259, 4259, 4262, 4262,    0, 4262, 4262,    0, 4262,
     4262, 4262,    0,    0,    0, 4262, 4262, 4262, 4262, 4262,
     4262, 4262, 4262, 4262, 4262, 4262, 4262, 4262, 4262, 4262,
     4262, 4262, 4262, 4262, 4262, 4263, 4263,    0, 4263, 4263,
     4263, 4263, 4263, 4263, 4263, 4263, 4263, 4263, 4263, 4263,
     4263, 4263, 4263, 4263, 4263, 4263, 4263, 4263, 4263, 4263,
        0, 4263, 4263, 4263, 4263, 4263, 4263, 4264, 4264,    0,

     4264, 4264, 4264, 4264, 4264, 4264, 4264, 4264, 4264, 4264,
     4264, 4264, 4264, 4264, 4264, 4264, 4264, 4264, 4264, 4264,
     4264, 4264, 4264, 4264, 4264, 4264, 4264, 4264, 4264, 4265,
     4265,    0, 4265, 4265,    0, 4265, 4265, 4265,    0, 4265,
     4265, 4265, 4265, 4265,    0, 4265, 4265, 4265, 4265, 4265,
     4265, 4265, 4265, 4265, 4265, 4265, 4265,    0,    0, 4265,
     4265, 4266, 4266,    0, 4266, 4266, 4266, 4266, 4266, 4266,
     4266, 4266, 4266, 4266, 4266, 4266, 4266, 4266, 4266, 4266,
     4266, 4266, 4266, 4266, 4266, 4266,    0, 4266, 4266, 4266,
     4266, 4266, 4266, 4267, 4267,    0, 4267, 4267, 4267, 4267,

     4267, 4267, 4267, 4267, 4267, 4267, 4267, 4267, 4267, 4267,
     4267, 4267, 4267, 4267, 4267, 4267, 4267, 4267, 4267, 4267,
     4267, 4267, 4267, 4267, 4267, 4268, 4268,    0, 4268, 4268,
        0, 4268, 4268, 4268,    0,    0,    0, 4268, 4268, 4268,
        0, 4268, 4268, 4268, 4268, 4268, 4268, 4268, 4268, 4268,
     4268, 4268, 4268, 4268, 4268, 4268, 4268, 4269, 4269,    0,
     4269, 4269, 4269, 4269, 4269, 4269, 4269, 4269, 4269, 4269,
     4269, 4269, 4269, 4269, 4269, 4269, 4269, 4269, 4269, 4269,
     4269, 4269,    0, 4269, 4269, 4269, 4269, 4269, 4269, 4270,
     4270,    0, 4270, 4270, 4270, 4270, 4270, 4270, 4270, 4270,

     4270, 4270, 4270, 4270, 4270, 4270, 4270, 4270, 4270, 4270,
     4270, 4270, 4270, 4270, 4270, 4270, 4270, 4270, 4270, 4270,
     4270, 4271, 4271,    0, 4271, 4271,    0, 4271, 4271, 4271,
        0, 4271, 4271, 4271, 4271, 4271,    0, 4271, 4271, 4271,
     4271, 4271, 4271, 4271, 4271, 4271, 4271, 4271, 4271,    0,
        0, 4271, 4271, 4272, 4272,    0, 4272, 4272, 4272, 4272,
     4272, 4272, 4272, 4272, 4272, 4272, 4272, 4272, 4272, 4272,
     4272, 4272, 4272, 4272, 4272, 4272, 4272, 4272,    0, 4272,
     4272, 4272, 4272, 4272, 4272, 4273, 4273,    0, 4273, 4273,
     4273, 4273, 4273, 4273, 4273, 4273, 4273, 4273, 4273, 4273,

     4273, 4273, 4273, 4273, 4273, 4273, 4273, 4273, 4273, 4273,
     4273, 4273, 4273, 4273, 4273, 4273, 4273, 4275, 4275,    0,
     4275, 4275, 4275, 4275, 4275, 4275, 4275, 4275, 4275, 4275,
     4275, 4275, 4275, 4275, 4275, 4275, 4275, 4275, 4275, 4275,
     4275, 4275,    0, 4275, 4275, 4275, 4275, 4275, 4275, 4276,
     4276,    0, 4276, 4276, 4276, 4276, 4276, 4276, 4276, 4276,
     4276, 4276, 4276, 4276, 4276, 4276, 4276, 4276, 4276, 4276,
     4276, 4276, 4276, 4276, 4276, 4276, 4276, 4276, 4276, 4276,
     4276, 4277, 4277,    0, 4277, 4277,    0, 4277, 4277, 4277,
        0, 4277, 4277, 4277, 4277, 4277, 4277, 4277, 4277, 4277,

     4277, 4277, 4277, 4277, 4277, 4277,    0, 4277, 4277, 4277,
     4277, 4277, 4277, 4278, 4278,    0, 4278, 4278,    0, 4278,
     4278, 4278,    0,    0,    0, 4278, 4278, 4278,    0, 4278,
     4278, 4278, 4278, 4278, 4278, 4278, 4278, 4278, 4278, 4278,
     4278, 4278, 4278, 4278, 4278, 4279, 4279,    0, 4279, 4279,
     4279, 4279, 4279, 4279, 4279, 4279, 4279,    0, 4279, 4279,
     4279, 4279, 4279, 4279, 4279, 4279, 4279,    0, 4279, 4279,
        0, 4279, 4279, 4279, 4279, 4279, 4279, 4280, 4280,    0,
     4280, 4280, 4280, 4280, 4280, 4280, 4280, 4280, 4280, 4280,
     4280, 4280, 4280, 4280, 4280, 4280, 4280, 4280, 4280,    0,

     4280, 4280,    0, 4280, 4280, 4280, 4280, 4280, 4280, 4289,
     4289, 4289,    0,    0,    0, 4289,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0, 4289, 4289,    0,    0,    0,    0,    0,    0, 4289,
     4290, 4290, 4290,    0,    0,    0,    0,    0,    0,    0,
     4290,    0, 4290,    0,    0, 4290,    0,    0,    0,    0,
        0,    0, 4290,    0,    0,    0,    0,    0,    0,    0,
     4290, 4291, 4291, 4291, 4291, 4291, 4291, 4291, 4291, 4291,
     4291, 4291, 4291, 4291, 4291, 4291, 4291, 4291, 4291, 4291,
     4291, 4291, 4291, 4291, 4291, 4291, 4291, 4291, 4291, 4291,

     4291, 4291, 4291, 4292, 4292, 4292,    0,    0,    0,    0,
        0,    0,    0, 4292,    0, 4292,    0,    0, 4292,    0,
        0,    0,    0,    0,    0, 4292,    0,    0,    0,    0,
        0,    0,    0, 4292, 4293, 4293, 4293,    0,    0,    0,
     4293,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0, 4293,    0,    0,    0,
        0,    0,    0,    0, 4293, 4294, 4294, 4294,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
     4294,    0,    0,    0,    0,    0,    0, 4294,    0,    0,
        0,    0,    0,    0,    0, 4294, 4295, 4295, 4295,    0,

        0,    0,    0,    0,    0, 4295,    0,    0,    0,    0,
        0, 4295,    0,    0,    0,    0,    0,    0, 4295,    0,
        0,    0,    0,    0,    0,    0, 4295, 4298, 4298, 4298,
        0,    0,    0, 4298,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0, 4298,
        0,    0,    0,    0,    0,    0,    0, 4298, 4301, 4301,
     4301,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0, 4301, 4301,    0,    0,    0,    0,    0,
     4301,    0,    0,    0,    0,    0,    0,    0, 4301, 4302,
     4302, 4302, 4302, 4302, 4302, 4302, 4302, 4302, 4302, 4302,

     4302, 4302, 4302, 4302, 4302, 4302, 4302, 4302, 4302, 4302,
     4302, 4302, 4302, 4302, 4302, 4302, 4302, 4302, 4302, 4302,
     4302, 4303, 4303,    0, 4303, 4303, 4303, 4303, 4303, 4303,
     4303, 4303, 4303,    0, 4303, 4303,    0, 4303, 4303, 4303,
     4303, 4303, 4303,    0, 4303, 4303,    0, 4303, 4303, 4303,
     4303, 4303, 4303, 4305, 4305, 4305, 4305, 4305, 4305, 4305,
     4305, 4305, 4305, 4305, 4305, 4305, 4305, 4305,    0,    0,
     4305, 4305, 4305, 4305, 4305, 4305,    0, 4305, 4305, 4305,
     4305, 4305, 4305, 4305, 4305, 4306, 4306,    0, 4306, 4306,
     4306, 4306,    0, 4306, 4306, 4306, 4306,    0, 4306, 4306,

        0, 4306, 4306, 4306,    0, 4306, 4306,    0, 4306, 4306,
        0,    0, 4306, 4306, 4306, 4306, 4306, 4307, 4307, 4307,
        0,    0,    0,    0,    0,    0, 4307,    0,    0, 4307,
        0,    0, 4307,    0, 4307, 4307,    0,    0,    0, 4307,
        0,    0,    0,    0,    0,    0,    0, 4307, 4308, 4308,
     4308,    0,    0,    0,    0,    0,    0, 4308,    0,    0,
     4308,    0,    0, 4308, 4308, 4308, 4308,    0,    0,    0,
     4308,    0,    0,    0,    0,    0,    0,    0, 4308, 4309,
     4309, 4309,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0, 4309,    0, 4309,    0,    0,    0,    0,    0,

        0, 4309,    0,    0,    0,    0,    0,    0,    0, 4309,
     4310, 4310, 4310,    0,    0,    0, 4310,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0, 4310,    0,    0,    0,    0,    0,    0,    0,
     4310, 4312, 4312, 4312, 4312,    0,    0, 4312,    0,    0,
        0,    0,    0,    0,    0,    0,    0, 4312,    0,    0,
        0,    0,    0, 4312,    0,    0,    0,    0,    0,    0,
     4312, 4312, 4313, 4313, 4313,    0,    0,    0,    0,    0,
        0, 4313,    0,    0, 4313,    0,    0, 4313,    0, 4313,
     4313,    0,    0,    0, 4313,    0,    0,    0,    0,    0,

        0,    0, 4313, 4314, 4314, 4314,    0,    0,    0,    0,
        0,    0, 4314,    0,    0,    0,    0,    0, 4314,    0,
        0,    0,    0,    0,    0, 4314,    0,    0,    0,    0,
        0,    0,    0, 4314, 4315, 4315, 4315,    0,    0,    0,
        0,    0,    0, 4315,    0,    0,    0,    0,    0, 4315,
     4315,    0,    0,    0,    0,    0, 4315,    0,    0,    0,
        0,    0,    0,    0, 4315, 4316, 4316, 4316, 4316, 4316,
     4316, 4316, 4316, 4316, 4316, 4316, 4316,    0, 4316, 4316,
        0, 4316, 4316, 4316, 4316, 4316, 4316, 4316, 4316, 4316,
     4316, 4316, 4316, 4316, 4316, 4316, 4316, 4317, 4317, 4317,

     4317, 4317, 4317, 4317, 4317, 4317, 4317, 4317, 4317, 4317,
     4317, 4317,    0, 4317, 4317, 4317, 4317, 4317, 4317, 4317,
     4317, 4317, 4317, 4317, 4317, 4317, 4317, 4317, 4317, 4318,
     4318, 4318, 4318,    0,    0, 4318,    0,    0,    0,    0,
        0,    0,    0,    0,    0, 4318,    0,    0,    0,    0,
        0, 4318,    0,    0,    0,    0,    0,    0, 4318, 4318,
     4319, 4319, 4319,    0,    0,    0,    0,    0,    0, 4319,
        0,    0,    0,    0,    0, 4319, 4319,    0,    0,    0,
        0,    0, 4319,    0,    0,    0,    0,    0,    0,    0,
     4319, 4323,    0,    0,    0, 4323,    0, 4323,    0,    0,

     4323,    0,    0,    0, 4323,    0,    0,    0,    0,    0,
        0,    0, 4323, 4324, 4324, 4324, 4324,    0,    0, 4324,
        0,    0,    0,    0,    0,    0,    0,    0,    0, 4324,
        0,    0,    0,    0,    0, 4324,    0,    0,    0,    0,
        0,    0, 4324, 4324, 4325, 4325, 4325,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0, 4325,    0, 4325,
     4325,    0,    0,    0,    0,    0, 4325,    0,    0,    0,
        0,    0,    0,    0, 4325, 4326, 4326, 4326,    0,    0,
        0, 4326,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0, 4326,    0,    0,

        0,    0,    0,    0,    0, 4326, 4327, 4327, 4327,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0, 4327, 4327,    0,    0,    0,    0,    0, 4327,    0,
        0,    0,    0,    0,    0,    0, 4327, 4331, 4331,    0,
     4331, 4331, 4331, 4331, 4331, 4331, 4331, 4331, 4331, 4331,
     4331, 4331, 4331, 4331, 4331, 4331, 4331, 4331, 4331, 4331,
     4331, 4331,    0, 4331, 4331, 4331, 4331, 4331, 4331, 4332,
     4332, 4332, 4332,    0,    0, 4332,    0,    0,    0,    0,
        0,    0,    0,    0,    0, 4332,    0,    0,    0,    0,
        0, 4332,    0,    0,    0,    0,    0,    0, 4332, 4332,

     4333, 4333, 4333,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0, 4333,    0,    0, 4333,    0,
        0,    0, 4333,    0,    0,    0,    0,    0,    0,    0,
     4333, 4334, 4334,    0, 4334, 4334, 4334, 4334, 4334, 4334,
     4334, 4334, 4334, 4334, 4334, 4334, 4334, 4334, 4334, 4334,
     4334, 4334, 4334, 4334, 4334, 4334, 4334, 4334, 4334, 4334,
     4334, 4334, 4334, 4335, 4335, 4335,    0,    0,    0, 4335,
     4335,    0,    0,    0, 4335,    0,    0,    0,    0, 4335,
        0,    0,    0,    0,    0, 4335,    0,    0,    0, 4335,
        0,    0,    0, 4335, 4336, 4336, 4336,    0,    0,    0,

     4336,    0,    0,    0,    0,    0,    0,    0,    0,    0,
     4336,    0,    0,    0,    0,    0, 4336,    0,    0,    0,
        0,    0,    0,    0, 4336, 4337, 4337, 4337,    0,    0,
        0, 4337,    0,    0,    0, 4337,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0, 4337,    0,    0,
        0,    0,    0,    0,    0, 4337, 4338, 4338, 4338,    0,
        0,    0,    0,    0,    0,    0, 4338, 4338,    0,    0,
        0, 4338, 4338,    0, 4338,    0,    0,    0, 4338,    0,
        0,    0,    0,    0,    0,    0, 4338, 4339,    0,    0,
        0,    0,    0,    0, 4339,    0,    0,    0, 4339, 4339,

        0,    0, 4339, 4339,    0,    0,    0, 4339,    0, 4339,
     4340, 4340, 4340, 4340, 4340, 4340, 4340, 4340, 4340, 4340,
     4340, 4340,    0, 4340, 4340,    0, 4340, 4340, 4340, 4340,
     4340, 4340, 4340, 4340, 4340, 4340, 4340, 4340, 4340, 4340,
     4340, 4340, 4341, 4341, 4341, 4341, 4341, 4341, 4341, 4341,
     4341, 4341, 4341, 4341, 4341, 4341, 4341,    0, 4341, 4341,
     4341, 4341, 4341, 4341, 4341, 4341, 4341, 4341, 4341, 4341,
     4341, 4341, 4341, 4341, 4344, 4344, 4344,    0,    0,    0,
        0,    0,    0, 4344,    0,    0,    0, 4344,    0, 4344,
        0,    0,    0,    0,    0,    0, 4344,    0,    0,    0,

        0,    0,    0,    0, 4344, 4345, 4345, 4345,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
     4345, 4345,    0, 4345,    0,    0,    0, 4345,    0,    0,
        0,    0,    0,    0,    0, 4345, 4346, 4346, 4346,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0, 4346,    0,    0, 4346,    0,    0,    0, 4346,    0,
        0,    0,    0,    0,    0,    0, 4346, 4347, 4347, 4347,
     4347,    0,    0, 4347,    0,    0,    0,    0,    0,    0,
        0,    0,    0, 4347,    0,    0,    0,    0,    0, 4347,
        0,    0,    0,    0,    0,    0, 4347, 4347, 4349, 4349,

     4349, 4349, 4349, 4349, 4349, 4349, 4349, 4349, 4349, 4349,
     4349, 4349, 4349, 4349, 4349, 4349, 4349, 4349, 4349, 4349,
     4349, 4349, 4349, 4349, 4349, 4349, 4349, 4349, 4349, 4349,
     4350, 4350, 4350, 4350, 4350,    0, 4350, 4350, 4350,    0,
     4350, 4350, 4350, 4350, 4350,    0, 4350, 4350, 4350,    0,
     4350, 4350,    0, 4350, 4350, 4350, 4350, 4350,    0,    0,
     4350, 4350, 4351, 4351,    0, 4351, 4351, 4351, 4351, 4351,
     4351, 4351, 4351, 4351, 4351, 4351, 4351, 4351, 4351, 4351,
     4351, 4351, 4351, 4351, 4351, 4351, 4351, 4351, 4351, 4351,
     4351, 4351, 4351, 4351, 4352, 4352,    0, 4352, 4352, 4352,

     4352, 4352, 4352, 4352, 4352, 4352, 4352, 4352, 4352, 4352,
     4352, 4352, 4352, 4352, 4352, 4352, 4352, 4352, 4352,    0,
     4352, 4352, 4352, 4352, 4352, 4352, 4353, 4353,    0, 4353,
     4353, 4353, 4353, 4353, 4353, 4353, 4353, 4353, 4353, 4353,
     4353, 4353, 4353, 4353, 4353, 4353, 4353, 4353, 4353, 4353,
     4353, 4353, 4353, 4353, 4353, 4353, 4353, 4353, 4354, 4354,
     4354,    0,    0,    0, 4354,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
     4354,    0,    0,    0,    0,    0,    0,    0, 4354, 4355,
     4355, 4355,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0, 4355,    0, 4355, 4355,    0,    0,    0,    0,
        0, 4355,    0,    0,    0,    0,    0,    0,    0, 4355,
     4356, 4356, 4356,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0, 4356,    0, 4356, 4356,    0,    0,    0,
        0,    0, 4356,    0,    0,    0,    0,    0,    0,    0,
     4356, 4358, 4358, 4358, 4358,    0,    0, 4358,    0,    0,
        0,    0,    0,    0,    0,    0,    0, 4358,    0,    0,
        0,    0,    0, 4358,    0,    0,    0,    0,    0,    0,
     4358, 4358, 4359, 4359,    0, 4359, 4359, 4359, 4359, 4359,
     4359, 4359, 4359, 4359, 4359, 4359, 4359, 4359, 4359, 4359,

     4359, 4359, 4359, 4359, 4359, 4359, 4359,    0, 4359, 4359,
     4359, 4359, 4359, 4359, 4361,    0,    0,    0, 4361, 4361,
     4361, 4361, 4361, 4361, 4361, 4361,    0, 4361,    0,    0,
     4361, 4361, 4361, 4361, 4361, 4361, 4361, 4361, 4361, 4361,
     4361, 4361, 4361, 4361, 4361, 4361, 4363,    0, 4363,    0,
        0,    0,    0,    0,    0, 4363,    0, 4363,    0,    0,
        0,    0,    0, 4363, 4364, 4364, 4364,    0,    0,    0,
     4364,    0,    0,    0,    0, 4364,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0, 4364,    0,    0,    0,
        0,    0,    0,    0, 4364, 4365, 4365, 4365,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0, 4365,    0,
     4365,    0,    0,    0,    0,    0,    0, 4365,    0,    0,
        0,    0,    0,    0,    0, 4365, 4366, 4366, 4366,    0,
        0,    0, 4366,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0, 4366,    0,
        0,    0,    0,    0,    0,    0, 4366, 4368,    0,    0,
        0,    0,    0,    0, 4368,    0,    0,    0, 4368, 4368,
        0,    0, 4368, 4368,    0,    0,    0, 4368,    0, 4368,
     4369, 4369,    0, 4369,    0,    0,    0, 4369,    0,    0,
        0,    0,    0,    0,    0, 4369, 4370, 4370,    0, 4370,

     4370, 4370, 4370, 4370, 4370, 4370, 4370, 4370, 4370, 4370,
     4370, 4370, 4370, 4370, 4370, 4370, 4370, 4370, 4370, 4370,
     4370,    0, 4370, 4370, 4370, 4370, 4370, 4370, 4371, 4371,
        0, 4371, 4371, 4371, 4371, 4371, 4371, 4371, 4371, 4371,
     4371, 4371, 4371, 4371, 4371, 4371, 4371, 4371, 4371, 4371,
     4371, 4371, 4371, 4371, 4371, 4371, 4371, 4371, 4371, 4371,
     4372, 4372, 4372,    0,    0,    0, 4372,    0,    0,    0,
        0, 4372,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0, 4372,    0,    0,    0,    0,    0,    0,    0,
     4372, 4373, 4373, 4373,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0, 4373, 4373,    0,    0,
        0,    0,    0, 4373,    0,    0,    0,    0,    0,    0,
        0, 4373, 4375, 4375, 4375, 4375,    0,    0, 4375,    0,
        0,    0,    0,    0,    0,    0,    0,    0, 4375,    0,
        0,    0,    0,    0, 4375,    0,    0,    0,    0,    0,
        0, 4375, 4375, 4376, 4376,    0, 4376, 4376, 4376, 4376,
     4376, 4376, 4376, 4376, 4376, 4376, 4376, 4376, 4376, 4376,
     4376, 4376, 4376, 4376, 4376, 4376, 4376, 4376,    0, 4376,
     4376, 4376, 4376, 4376, 4376, 4378, 4378,    0, 4378, 4378,
     4378, 4378, 4378, 4378, 4378, 4378, 4378, 4378, 4378, 4378,

     4378, 4378, 4378, 4378, 4378, 4378, 4378, 4378, 4378, 4378,
        0, 4378, 4378, 4378, 4378, 4378, 4378, 4379, 4379,    0,
     4379, 4379, 4379, 4379, 4379, 4379, 4379, 4379, 4379, 4379,
     4379, 4379, 4379, 4379, 4379, 4379, 4379, 4379, 4379, 4379,
     4379, 4379,    0, 4379, 4379, 4379, 4379, 4379, 4379, 4380,
     4380,    0, 4380, 4380, 4380, 4380, 4380, 4380, 4380, 4380,
     4380, 4380, 4380, 4380, 4380, 4380, 4380, 4380, 4380, 4380,
     4380, 4380, 4380, 4380,    0, 4380, 4380, 4380, 4380, 4380,
     4380, 4381, 4381,    0, 4381, 4381, 4381, 4381, 4381, 4381,
     4381, 4381, 4381, 4381, 4381, 4381, 4381, 4381, 4381, 4381,

     4381, 4381, 4381, 4381, 4381, 4381,    0, 4381, 4381, 4381,
     4381, 4381, 4381, 4382, 4382,    0, 4382, 4382,    0, 4382,
     4382, 4382,    0, 4382, 4382, 4382, 4382, 4382,    0, 4382,
     4382, 4382, 4382, 4382, 4382, 4382, 4382, 4382, 4382, 4382,
     4382,    0,    0, 4382, 4382, 4383, 4383,    0, 4383, 4383,
     4383, 4383, 4383, 4383, 4383, 4383, 4383, 4383, 4383, 4383,
     4383, 4383, 4383, 4383, 4383, 4383, 4383, 4383, 4383, 4383,
        0, 4383, 4383, 4383, 4383, 4383, 4383, 4384, 4384, 4384,
     4384, 4384, 4384, 4384, 4384, 4384, 4384, 4384, 4384, 4384,
     4384, 4384, 4384,    0, 4384, 4384, 4384, 4384, 4384, 4384,

        0, 4384, 4384, 4384, 4384, 4384, 4384, 4384, 4384, 4387,
     4387, 4387,    0,    0,    0,    0,    0,    0,    0, 4387,
        0, 4387,    0,    0, 4387,    0,    0,    0,    0,    0,
        0, 4387,    0,    0,    0,    0,    0,    0,    0, 4387,
     4388, 4388, 4388,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0, 4388,    0,    0,    0,    0,
        0,    0, 4388,    0,    0,    0,    0,    0,    0,    0,
     4388, 4391, 4391, 4391, 4391,    0,    0, 4391,    0,    0,
        0,    0,    0,    0,    0,    0,    0, 4391,    0,    0,
        0,    0,    0, 4391,    0,    0,    0,    0,    0,    0,

     4391, 4391, 4392, 4392,    0, 4392, 4392, 4392, 4392, 4392,
     4392, 4392, 4392, 4392,    0, 4392, 4392,    0, 4392, 4392,
     4392, 4392, 4392, 4392,    0, 4392, 4392,    0, 4392, 4392,
     4392, 4392, 4392, 4392, 4394, 4394, 4394,    0,    0,    0,
        0,    0,    0, 4394,    0,    0, 4394,    0,    0, 4394,
     4394, 4394, 4394,    0,    0,    0, 4394,    0,    0,    0,
        0,    0,    0,    0, 4394, 4396, 4396, 4396,    0,    0,
        0,    0,    0,    0, 4396,    0,    0,    0,    0,    0,
     4396, 4396,    0,    0,    0,    0,    0, 4396,    0,    0,
        0,    0,    0,    0,    0, 4396, 4397, 4397, 4397,    0,

        0,    0,    0,    0,    0, 4397,    0,    0,    0,    0,
        0, 4397, 4397,    0,    0,    0,    0,    0, 4397,    0,
        0,    0,    0,    0,    0,    0, 4397, 4399,    0,    0,
        0, 4399,    0, 4399,    0,    0, 4399,    0,    0,    0,
     4399,    0,    0,    0,    0,    0,    0,    0, 4399, 4400,
     4400, 4400, 4400,    0,    0, 4400,    0,    0,    0,    0,
        0,    0,    0,    0,    0, 4400,    0,    0,    0,    0,
        0, 4400,    0,    0,    0,    0,    0,    0, 4400, 4400,
     4401, 4401, 4401,    0,    0,    0, 4401,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0, 4401,    0,    0,    0,    0,    0,    0,    0,
     4401, 4402, 4402, 4402,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0, 4402, 4402,    0,    0,
        0,    0,    0, 4402,    0,    0,    0,    0,    0,    0,
        0, 4402, 4403, 4403, 4403,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0, 4403,    0, 4403, 4403,    0,
        0,    0,    0,    0, 4403,    0,    0,    0,    0,    0,
        0,    0, 4403, 4404, 4404, 4404,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0, 4404, 4404,
        0,    0,    0,    0,    0, 4404,    0,    0,    0,    0,

        0,    0,    0, 4404, 4406, 4406, 4406,    0,    0,    0,
     4406,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0, 4406,    0,    0,    0,
        0,    0,    0,    0, 4406, 4407, 4407,    0, 4407, 4407,
     4407, 4407, 4407, 4407, 4407, 4407, 4407, 4407, 4407, 4407,
     4407, 4407, 4407, 4407, 4407, 4407, 4407, 4407, 4407, 4407,
        0, 4407, 4407, 4407, 4407, 4407, 4407, 4408, 4408, 4408,
        0,    0,    0, 4408, 4408,    0,    0,    0, 4408,    0,
        0,    0,    0, 4408,    0,    0,    0,    0,    0, 4408,
        0,    0,    0, 4408,    0,    0,    0, 4408, 4409, 4409,

     4409,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0, 4409, 4409,    0, 4409,    0,    0,    0,
     4409,    0,    0,    0,    0,    0,    0,    0, 4409, 4410,
     4410, 4410,    0,    0,    0, 4410,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0, 4410,    0,    0,    0,    0,    0,    0,    0, 4410,
     4411, 4411, 4411,    0,    0,    0,    0,    0,    0,    0,
     4411,    0,    0,    0,    0, 4411, 4411,    0, 4411,    0,
        0,    0, 4411,    0,    0,    0,    0,    0,    0,    0,
     4411, 4412, 4412, 4412,    0,    0,    0, 4412,    0,    0,

        0, 4412,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0, 4412,    0,    0,    0,    0,    0,    0,
        0, 4412, 4413,    0,    0,    0, 4413,    0,    0,    0,
        0, 4413,    0,    0,    0,    0,    0,    0, 4413,    0,
        0,    0,    0,    0,    0,    0, 4413, 4414,    0,    0,
        0,    0,    0,    0, 4414,    0,    0,    0, 4414, 4414,
        0,    0, 4414, 4414,    0,    0,    0, 4414,    0, 4414,
     4415, 4415, 4415, 4415, 4415, 4415, 4415, 4415, 4415, 4415,
     4415, 4415, 4415, 4415, 4415, 4415, 4415, 4415, 4415, 4415,
     4415, 4415, 4415, 4415, 4415, 4415, 4415, 4415, 4415, 4415,

     4415, 4415, 4416, 4416,    0, 4416, 4416, 4416, 4416, 4416,
     4416, 4416, 4416, 4416, 4416, 4416, 4416, 4416, 4416, 4416,
     4416, 4416, 4416, 4416, 4416, 4416, 4416, 4416, 4416, 4416,
     4416, 4416, 4416, 4416, 4418, 4418, 4418,    0,    0,    0,
        0,    0,    0, 4418,    0,    0,    0, 4418,    0, 4418,
        0,    0,    0,    0,    0,    0, 4418,    0,    0,    0,
        0,    0,    0,    0, 4418, 4419, 4419, 4419,    0,    0,
        0,    0,    0,    0, 4419,    0,    0,    0, 4419,    0,
     4419,    0,    0,    0,    0,    0,    0, 4419,    0,    0,
        0,    0,    0,    0,    0, 4419, 4420, 4420, 4420,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0, 4420, 4420,    0, 4420,    0,    0,    0, 4420,    0,
        0,    0,    0,    0,    0,    0, 4420, 4422, 4422, 4422,
     4422, 4422, 4422, 4422, 4422, 4422, 4422, 4422, 4422, 4422,
     4422, 4422, 4422, 4422, 4422, 4422, 4422, 4422, 4422, 4422,
     4422, 4422, 4422, 4422, 4422, 4422, 4422, 4422, 4422, 4423,
     4423, 4423, 4423, 4423,    0, 4423, 4423, 4423,    0, 4423,
     4423, 4423, 4423, 4423,    0, 4423, 4423, 4423,    0, 4423,
     4423,    0, 4423, 4423, 4423, 4423, 4423,    0,    0, 4423,
     4423, 4424, 4424,    0, 4424, 4424, 4424, 4424, 4424, 4424,

     4424, 4424, 4424, 4424, 4424, 4424, 4424, 4424, 4424, 4424,
     4424, 4424, 4424, 4424, 4424, 4424, 4424, 4424, 4424, 4424,
     4424, 4424, 4424, 4425, 4425,    0, 4425, 4425, 4425, 4425,
     4425, 4425, 4425, 4425, 4425, 4425, 4425, 4425, 4425, 4425,
     4425, 4425, 4425, 4425, 4425, 4425, 4425, 4425,    0, 4425,
     4425, 4425, 4425, 4425, 4425, 4426, 4426, 4426, 4426, 4426,
     4426, 4426, 4426, 4426, 4426, 4426, 4426, 4426, 4426, 4426,
     4426,    0, 4426, 4426, 4426, 4426, 4426, 4426,    0, 4426,
     4426, 4426, 4426, 4426, 4426, 4426, 4426, 4427, 4427, 4427,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

     4427,    0, 4427, 4427,    0,    0,    0,    0,    0, 4427,
        0,    0,    0,    0,    0,    0,    0, 4427, 4428, 4428,
     4428,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0, 4428,    0, 4428, 4428,    0,    0,    0,    0,    0,
     4428,    0,    0,    0,    0,    0,    0,    0, 4428, 4429,
     4429,    0, 4429, 4429, 4429, 4429, 4429, 4429, 4429, 4429,
     4429, 4429, 4429, 4429, 4429, 4429, 4429, 4429, 4429, 4429,
     4429, 4429, 4429, 4429,    0, 4429, 4429, 4429, 4429, 4429,
     4429, 4431,    0,    0,    0, 4431, 4431, 4431, 4431, 4431,
     4431, 4431, 4431,    0, 4431,    0,    0, 4431, 4431, 4431,

     4431, 4431, 4431, 4431, 4431, 4431, 4431, 4431, 4431, 4431,
     4431, 4431, 4431, 4432,    0, 4432,    0,    0,    0,    0,
        0,    0, 4432,    0, 4432,    0,    0,    0,    0,    0,
     4432, 4433, 4433, 4433,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0, 4433,    0, 4433,    0,    0,    0,
        0,    0,    0, 4433,    0,    0,    0,    0,    0,    0,
        0, 4433, 4435, 4435,    0, 4435,    0,    0,    0, 4435,
        0,    0,    0,    0,    0,    0,    0, 4435, 4436, 4436,
        0, 4436, 4436, 4436, 4436, 4436, 4436, 4436, 4436, 4436,
     4436, 4436, 4436, 4436, 4436, 4436, 4436, 4436, 4436, 4436,

     4436, 4436, 4436,    0, 4436, 4436, 4436, 4436, 4436, 4436,
     4437, 4437, 4437,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0, 4437, 4437,    0,    0,    0,
        0,    0, 4437,    0,    0,    0,    0,    0,    0,    0,
     4437, 4438, 4438,    0, 4438, 4438, 4438, 4438, 4438, 4438,
     4438, 4438, 4438, 4438, 4438, 4438, 4438, 4438, 4438, 4438,
     4438, 4438, 4438, 4438, 4438, 4438,    0, 4438, 4438, 4438,
     4438, 4438, 4438, 4440, 4440,    0, 4440, 4440, 4440, 4440,
     4440, 4440, 4440, 4440, 4440, 4440, 4440, 4440, 4440, 4440,
     4440, 4440, 4440, 4440, 4440, 4440, 4440, 4440,    0, 4440,

     4440, 4440, 4440, 4440, 4440, 4441, 4441,    0, 4441, 4441,
     4441, 4441, 4441, 4441, 4441, 4441, 4441, 4441, 4441, 4441,
     4441, 4441, 4441, 4441, 4441, 4441, 4441, 4441, 4441, 4441,
        0, 4441, 4441, 4441, 4441, 4441, 4441, 4442, 4442,    0,
     4442, 4442, 4442, 4442, 4442, 4442, 4442, 4442, 4442, 4442,
     4442, 4442, 4442, 4442, 4442, 4442, 4442, 4442, 4442, 4442,
     4442, 4442,    0, 4442, 4442, 4442, 4442, 4442, 4442, 4443,
     4443,    0, 4443, 4443, 4443, 4443, 4443, 4443, 4443, 4443,
     4443, 4443, 4443, 4443, 4443, 4443, 4443, 4443, 4443, 4443,
     4443, 4443, 4443, 4443,    0, 4443, 4443, 4443, 4443, 4443,

     4443, 4444, 4444,    0, 4444, 4444, 4444, 4444, 4444, 4444,
        0, 4444, 4444, 4444, 4444, 4444,    0, 4444, 4444, 4444,
     4444, 4444, 4444, 4444, 4444, 4444, 4444, 4444, 4444,    0,
        0, 4444, 4444, 4445, 4445,    0, 4445, 4445, 4445, 4445,
     4445, 4445, 4445, 4445, 4445, 4445, 4445, 4445, 4445, 4445,
     4445, 4445, 4445, 4445, 4445, 4445, 4445, 4445,    0, 4445,
     4445, 4445, 4445, 4445, 4445, 4446, 4446, 4446, 4446, 4446,
     4446, 4446, 4446, 4446, 4446, 4446, 4446, 4446, 4446, 4446,
     4446,    0, 4446, 4446, 4446, 4446, 4446, 4446,    0, 4446,
     4446, 4446, 4446, 4446, 4446, 4446, 4446, 4447,    0,    0,

        0,    0,    0, 4447, 4447,    0,    0,    0, 4447,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0, 4447,
        0,    0,    0,    0,    0,    0,    0, 4447, 4448, 4448,
        0, 4448, 4448, 4448, 4448, 4448, 4448, 4448, 4448, 4448,
        0, 4448, 4448,    0, 4448, 4448, 4448, 4448, 4448, 4448,
        0, 4448, 4448,    0, 4448, 4448, 4448, 4448, 4448, 4448,
     4449, 4449, 4449, 4449, 4449, 4449, 4449, 4449, 4449, 4449,
     4449, 4449, 4449, 4449, 4449, 4449,    0, 4449, 4449, 4449,
     4449, 4449, 4449,    0, 4449, 4449, 4449, 4449, 4449, 4449,
     4449, 4449, 4450, 4450, 4450,    0,    0,    0,    0,    0,

        0, 4450,    0,    0,    0,    0,    0, 4450, 4450,    0,
        0,    0,    0,    0, 4450,    0,    0,    0,    0,    0,
        0,    0, 4450, 4451,    0,    0,    0, 4451,    0, 4451,
        0,    0, 4451,    0,    0,    0, 4451,    0,    0,    0,
        0,    0,    0,    0, 4451, 4452, 4452, 4452,    0,    0,
        0, 4452,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0, 4452,    0,    0,
        0,    0,    0,    0,    0, 4452, 4455, 4455, 4455,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0, 4455, 4455,    0,    0,    0,    0,    0, 4455,    0,

        0,    0,    0,    0,    0,    0, 4455, 4456, 4456, 4456,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
     4456,    0, 4456, 4456,    0,    0,    0,    0,    0, 4456,
        0,    0,    0,    0,    0,    0,    0, 4456, 4457, 4457,
     4457,    0,    0,    0, 4457,    0,    0,    0,    0,    0,
        0,    0,    0,    0, 4457,    0,    0,    0,    0,    0,
     4457,    0,    0,    0,    0,    0,    0,    0, 4457, 4458,
     4458, 4458,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0, 4458, 4458,    0, 4458,    0,    0,
        0, 4458,    0,    0,    0,    0,    0,    0,    0, 4458,

     4459,    0,    0,    0,    0,    0,    0, 4459,    0,    0,
        0, 4459, 4459,    0,    0, 4459, 4459,    0,    0,    0,
     4459,    0, 4459, 4460, 4460, 4460,    0,    0,    0,    0,
        0,    0,    0, 4460,    0,    0,    0,    0, 4460, 4460,
        0, 4460,    0,    0,    0, 4460,    0,    0,    0,    0,
        0,    0,    0, 4460, 4461,    0,    0,    0, 4461,    0,
        0,    0,    0, 4461,    0,    0,    0,    0,    0,    0,
     4461,    0,    0,    0,    0,    0,    0,    0, 4461, 4462,
     4462, 4462, 4462, 4462, 4462, 4462, 4462, 4462, 4462, 4462,
     4462, 4462, 4462, 4462, 4462, 4462, 4462, 4462, 4462, 4462,

     4462, 4462, 4462, 4462, 4462, 4462, 4462, 4462, 4462, 4462,
     4462, 4463, 4463,    0, 4463, 4463, 4463, 4463, 4463, 4463,
     4463, 4463, 4463, 4463, 4463, 4463, 4463, 4463, 4463, 4463,
     4463, 4463, 4463, 4463, 4463, 4463, 4463, 4463, 4463, 4463,
     4463, 4463, 4463, 4464, 4464, 4464,    0,    0,    0,    0,
        0,    0, 4464,    0,    0,    0, 4464,    0, 4464,    0,
        0,    0,    0,    0,    0, 4464,    0,    0,    0,    0,
        0,    0,    0, 4464, 4465, 4465, 4465,    0,    0,    0,
        0,    0,    0, 4465,    0,    0,    0, 4465,    0, 4465,
        0,    0,    0,    0,    0,    0, 4465,    0,    0,    0,

        0,    0,    0,    0, 4465, 4466, 4466, 4466,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
     4466, 4466,    0, 4466,    0,    0,    0, 4466,    0,    0,
        0,    0,    0,    0,    0, 4466, 4468, 4468, 4468, 4468,
     4468,    0, 4468, 4468, 4468,    0, 4468, 4468, 4468, 4468,
     4468,    0, 4468, 4468, 4468,    0, 4468, 4468,    0, 4468,
     4468, 4468, 4468, 4468,    0,    0, 4468, 4468, 4469, 4469,
        0, 4469, 4469, 4469, 4469, 4469, 4469, 4469, 4469, 4469,
     4469, 4469, 4469, 4469, 4469, 4469, 4469, 4469, 4469, 4469,
     4469, 4469, 4469, 4469, 4469, 4469, 4469, 4469, 4469, 4469,

     4470, 4470, 4470,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0, 4470,    0, 4470, 4470,    0,    0,    0,
        0,    0, 4470,    0,    0,    0,    0,    0,    0,    0,
     4470, 4471, 4471, 4471,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0, 4471,    0,    0,    0,
        0,    0,    0, 4471,    0,    0,    0,    0,    0,    0,
        0, 4471, 4472,    0,    0,    0, 4472, 4472, 4472, 4472,
     4472, 4472, 4472, 4472,    0, 4472,    0,    0, 4472, 4472,
     4472, 4472, 4472, 4472, 4472, 4472, 4472, 4472, 4472, 4472,
     4472, 4472, 4472, 4472, 4473, 4473,    0, 4473,    0,    0,

        0, 4473,    0,    0,    0,    0,    0,    0,    0, 4473,
     4474, 4474, 4474,    0,    0,    0, 4474,    0,    0,    0,
        0, 4474,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0, 4474,    0,    0,    0,    0,    0,    0,    0,
     4474, 4475, 4475,    0, 4475, 4475,    0, 4475, 4475, 4475,
     4475, 4475, 4475, 4475, 4475, 4475, 4475, 4475, 4475, 4475,
     4475, 4475, 4475, 4475, 4475, 4475, 4475, 4475, 4475, 4475,
     4475, 4475, 4475, 4476, 4476,    0, 4476, 4476, 4476, 4476,
     4476, 4476, 4476, 4476, 4476,    0, 4476, 4476,    0, 4476,
     4476, 4476, 4476, 4476, 4476,    0, 4476, 4476,    0, 4476,

     4476, 4476, 4476, 4476, 4476, 4477, 4477, 4477,    0,    0,
        0,    0,    0,    0, 4477,    0,    0,    0,    0,    0,
     4477, 4477,    0,    0,    0,    0,    0, 4477,    0,    0,
        0,    0,    0,    0,    0, 4477, 4479, 4479, 4479, 4479,
        0,    0, 4479,    0,    0,    0,    0,    0,    0,    0,
        0,    0, 4479,    0,    0,    0,    0,    0, 4479,    0,
        0,    0,    0,    0,    0, 4479, 4479, 4480, 4480, 4480,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
     4480,    0, 4480, 4480,    0,    0,    0,    0,    0, 4480,
        0,    0,    0,    0,    0,    0,    0, 4480, 4481, 4481,

     4481,    0,    0,    0, 4481,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
     4481,    0,    0,    0,    0,    0,    0,    0, 4481, 4482,
        0,    0,    0,    0,    0,    0, 4482,    0,    0,    0,
     4482, 4482,    0,    0, 4482, 4482,    0,    0,    0, 4482,
        0, 4482, 4487, 4487, 4487, 4487, 4487, 4487, 4487, 4487,
     4487, 4487, 4487, 4487, 4487, 4487, 4487, 4487,    0, 4487,
     4487, 4487, 4487, 4487, 4487,    0, 4487, 4487, 4487, 4487,
     4487, 4487, 4487, 4487, 4490, 4490, 4490, 4490, 4490, 4490,
     4490, 4490, 4490, 4490, 4490, 4490, 4490, 4490, 4490, 4490,

        0, 4490, 4490, 4490, 4490, 4490, 4490,    0, 4490, 4490,
     4490, 4490, 4490, 4490, 4490, 4490, 4492, 4492, 4492,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0, 4492,    0,    0,    0, 4492,    0,    0, 4492,    0,
        0,    0,    0,    0,    0,    0, 4492, 3942, 3942, 3942,
     3942, 3942, 3942, 3942, 3942, 3942, 3942, 3942, 3942, 3942,
     3942, 3942, 3942, 3942, 3942, 3942, 3942, 3942, 3942, 3942,
     3942, 3942, 3942, 3942, 3942, 3942, 3942, 3942, 3942, 3942,
     3942, 3942, 3942, 3942, 3942, 3942, 3942, 3942, 3942, 3942,
     3942, 3942, 3942, 3942, 3942, 3942, 3942, 3942, 3942, 3942,

     3942, 3942, 3942, 3942, 3942, 3942, 3942, 3942, 3942, 3942,
     3942, 3942, 3942, 3942, 3942, 3942, 3942, 3942, 3942, 3942,
     3942, 3942, 3942, 3942, 3942, 3942, 3942, 3942, 3942, 3942,
     3942, 3942
    } ;

extern int scanYY_flex_debug;
int scanYY_flex_debug = 0;

static yy_state_type *yy_state_buf=0, *yy_state_ptr=0;
static char *yy_full_match;
static int yy_lp;
static int yy_looking_for_trail_begin = 0;
static int yy_full_lp;
static int *yy_full_state;
#define YY_TRAILING_MASK 0x2000
#define YY_TRAILING_HEAD_MASK 0x4000
#define REJECT \
{ \
*yy_cp = (yy_hold_char); /* undo effects of setting up scanYYtext */ \
yy_cp = (yy_full_match); /* restore poss. backed-over text */ \
(yy_lp) = (yy_full_lp); /* restore orig. accepting pos. */ \
(yy_state_ptr) = (yy_full_state); /* restore orig. state */ \
yy_current_state = *(yy_state_ptr); /* restore curr. state */ \
++(yy_lp); \
goto find_rule; \
}

#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *scanYYtext;
#line 1 "scanner.l"
/*****************************************************************************
 *
 * $Id: scanner.l,v 1.80 2001/03/19 19:27:41 root Exp $
 *
 * Copyright (C) 1997-2012 by Dimitri van Heesch.
 *
 * Permission to use, copy, modify, and distribute this software and its
 * documentation under the terms of the GNU General Public License is hereby 
 * granted. No representations are made about the suitability of this software 
 * for any purpose. It is provided "as is" without express or implied warranty.
 * See the GNU General Public License for more details.
 *
 * Documents produced by Doxygen are derivative works derived from the
 * input used in their production; they are not affected by this license.
 *
 */
#line 19 "scanner.l"

/*
 *	includes
 */
#include <stdio.h>
#include <stdlib.h>
#include <assert.h>
#include <ctype.h>

#include "qtbc.h"
#include <qarray.h>
#include <qstack.h>
#include <qregexp.h>
#include <unistd.h>
#include <qfile.h>
  
#include "scanner.h"
#include "entry.h"
#include "message.h"
#include "config.h"
#include "doxygen.h"
#include "util.h"
#include "defargs.h"
#include "language.h"
#include "commentscan.h"
#include "code.h"
#include "arguments.h"

#define YY_NEVER_INTERACTIVE 1

/* -----------------------------------------------------------------
 *
 *	statics
 */
static ParserInterface *g_thisParser;
static const char *     inputString;
static int		inputPosition;
static QFile            inputFile;
static int		lastContext;
static int		lastCContext;
static int              lastDocContext;
static int              lastCPPContext;
static int              lastSkipSharpContext;
static int              lastSkipRoundContext;
static int              lastStringContext;
static int              lastCurlyContext;
static int              lastRoundContext;
static int              lastSquareContext;
static int              lastInitializerContext;
static int              lastClassTemplSpecContext;
static int              lastPreLineCtrlContext;
static int              lastSkipVerbStringContext;
static int              lastCommentInArgContext;
static int              lastCSConstraint;
static int              lastHereDocContext;
static int              lastDefineContext;
static Protection	protection;
static Protection	baseProt;
static int		sharpCount   = 0 ;
static int		roundCount   = 0 ;
static int		curlyCount   = 0 ;
static int		squareCount  = 0 ;
static int              padCount     = 0 ;
static QCString         slString;
static Entry*		current_root = 0 ;
static Entry*		global_root  = 0 ;
static Entry*		current      = 0 ;
static Entry*		previous     = 0 ;
static Entry*		tempEntry    = 0 ;
static Entry*		firstTypedefEntry = 0 ;
static Entry*		memspecEntry = 0 ;
static int		yyLineNr     = 1 ;
static int              anonCount    = 0 ;        
static int              anonNSCount  = 0 ;        
static QCString		yyFileName;
static MethodTypes 	mtype;
static bool    		gstat;
static bool             removeSlashes;
static Specifier 	virt;
static Specifier 	baseVirt;
static QCString         msType,msName,msArgs;
static bool             isTypedef;
static int              tmpDocType;
static QCString         sectionLabel;
static QCString		sectionTitle;
static QCString         funcPtrType;
static QCString         templateStr;
static QCString         aliasName;
static QCString         baseName;
static QCString*        specName;
static QCString         formulaText;
static QCString         formulaEnd;
static bool             useOverrideCommands = FALSE;

static SrcLangExt       language;
static bool             insideIDL   = FALSE;		//!< processing IDL code?
static bool             insideJava  = FALSE;		//!< processing Java code?
static bool             insideCS    = FALSE;		//!< processing C# code?
static bool             insideD     = FALSE;		//!< processing D code?
static bool             insidePHP   = FALSE;		//!< processing PHP code?
static bool             insideObjC  = FALSE;            //!< processing Objective C code?
static bool             insideCli   = FALSE;            //!< processing C++/CLI code?
static bool             insideJS    = FALSE;            //!< processing JavaScript code?

static bool             insideCppQuote = FALSE;
static bool             insideProtocolList = FALSE;

static int              argRoundCount;
static int              argSharpCount;
static int              currentArgumentContext;
static int              lastCopyArgStringContext;
static int              lastCopyArgContext;
static QCString         *copyArgString;
static QCString         fullArgString;

static ArgumentList     *currentArgumentList;
static char             lastCopyArgChar;

static QCString         *pCopyQuotedString;
static QCString         *pCopyRoundString;
static QCString         *pCopyCurlyString;

static QGString         *pCopyCurlyGString;
static QGString         *pCopyRoundGString;
static QGString         *pCopyQuotedGString;
static QGString         *pCopyHereDocGString;
static QGString         *pSkipVerbString;
static QStack<Grouping> autoGroupStack;

static bool             insideFormula;
static bool  	        insideTryBlock=FALSE;
static bool             insideCode;
static bool             needsSemi;

//static int              depthIf;
static int  	        initBracketCount;
static QCString         memberGroupRelates;
static QCString         memberGroupInside;
static QCString         xrefItemKey;
static QCString         xrefItemTitle;
static QCString         xrefListTitle;

static QCString         g_skipBlockName;
static QCString         oldStyleArgType;
static QCString         docBackup;
static QCString         briefBackup;
static bool             g_inputFromFile;

static int              docBlockContext;
static QGString         docBlock;
static QCString         docBlockName;
static bool             docBlockInBody;
static bool             docBlockAutoBrief;
static char             docBlockTerm;

static QCString         idlAttr;
static QCString         idlProp;

static bool             g_lexInit = FALSE;
static bool             externC;

static QCString         g_hereDocId;

static int              g_column;

//-----------------------------------------------------------------------------

// forward declarations
//static void handleGroupStartCommand(const char *header);
//static void handleGroupEndCommand();

//-----------------------------------------------------------------------------

static void initParser()
{
  sectionLabel.resize(0);
  sectionTitle.resize(0);
  baseName.resize(0);
  formulaText.resize(0);
  protection = Public;
  baseProt = Public;
  sharpCount = 0;
  roundCount = 0;
  curlyCount = 0;
  mtype = Method;
  gstat = FALSE;
  virt = Normal;
  baseVirt = Normal;
  isTypedef = FALSE;
  autoGroupStack.clear();
  insideTryBlock = FALSE;
  autoGroupStack.setAutoDelete(TRUE);
  insideFormula = FALSE;
  insideCode=FALSE;
  insideCli=Config_getBool("CPP_CLI_SUPPORT");
  previous = 0;
}

static void initEntry()
{
  if (insideJava) 
  {
    protection = (current_root->spec & (Entry::Interface|Entry::Enum)) ?  Public : Package;
  }
  current->protection = protection ;
  current->mtype      = mtype;
  current->virt       = virt;
  current->stat       = gstat;
  current->lang       = language;
  //printf("*** initEntry() language=%d\n",language);
  //if (!autoGroupStack.isEmpty())
  //{
  //  //printf("Appending group %s\n",autoGroupStack.top()->groupname.data());
  //  current->groups->append(new Grouping(*autoGroupStack.top()));
  //}
  initGroupInfo(current);
  isTypedef=FALSE;
}


//-----------------------------------------------------------------------------

///// remove any automatic grouping and add new one (if given)
//static void setCurrentGroup( QCString *newgroup, Grouping::GroupPri_t pri )
//{
//   /* remove auto group name from current entry and discard it */
//   Grouping *g = current->groups->first();
//   int i=0; 
//   while (g)
//   {
//     if (g->pri <= Grouping::GROUPING_AUTO_DEF)
//     {
//       current->groups->remove(i);
//       i--;
//     }
//     g=current->groups->next();
//     i++;
//   }
//
//   /* use new group name instead? */
//   if ( newgroup )
//   {
//      current->groups->append(new Grouping(*newgroup, pri));
//   } 
//}
//
//static int newMemberGroupId()
//{
//  static int curGroupId=0;
//  return curGroupId++;
//}
//
// forward declarations
//static void startGroupInDoc();
//static void endGroup();

//-----------------------------------------------------------------------------

static void lineCount()
{
  static int tabSize = Config_getInt("TAB_SIZE");
  const char *p;
  for (p = scanYYtext ; *p ; ++p )
  {
    if (*p=='\n') 
      yyLineNr++,g_column=0;
    else if (*p=='\t') 
      g_column+=tabSize - (g_column%tabSize);
    else 
      g_column++;
  }
}

static inline int computeIndent(const char *s,int startIndent)
{
  int col=startIndent;
  static int tabSize=Config_getInt("TAB_SIZE");
  const char *p=s;
  char c;
  while ((c=*p++))
  {
    if (c=='\t') col+=tabSize-(col%tabSize);
    else col++;
  }
  return col;
}

static void addType( Entry* current )
{
    uint tl=current->type.length();
    if( tl>0 && !current->name.isEmpty() && current->type.at(tl-1)!='.') 
    {
      current->type += ' ' ;
    }
    current->type += current->name ;
    current->name.resize(0) ;
    tl=current->type.length();
    if( tl>0 && !current->args.isEmpty() && current->type.at(tl-1)!='.') 
    {
      current->type += ' ' ;
    }
    current->type += current->args ;
    current->args.resize(0) ;
    current->argList->clear();
}


static QCString stripQuotes(const char *s)
{
  QCString name;
  if (s==0 || *s==0) return name;
  name=s;
  if (name.at(0)=='"' && name.at(name.length()-1)=='"')
  {
    name=name.mid(1,name.length()-2);
  }
  return name;
}

//-----------------------------------------------------------------

static void startCommentBlock(bool);
static void handleCommentBlock(const QCString &doc,bool brief);
static void handleParametersCommentBlocks(ArgumentList *al);

//-----------------------------------------------------------------

static bool nameIsOperator(QCString &name)
{
  int i=name.find("operator");
  if (i==-1) return FALSE;
  if (i==0 && !isId(name.at(8))) return TRUE; // case operator ::X
  if (i>0 && !isId(name.at(i-1)) && !isId(name.at(i+8))) return TRUE; // case X::operator
  return FALSE; // case TEXToperatorTEXT
}

//-----------------------------------------------------------------------------

static void setContext()
{
  QCString fileName = yyFileName;
  language   = getLanguageFromFileName(fileName);
  insideIDL  = language==SrcLangExt_IDL;
  insideJava = language==SrcLangExt_Java;
  insideCS   = language==SrcLangExt_CSharp; 
  insideD    = language==SrcLangExt_D;
  insidePHP  = language==SrcLangExt_PHP;
  insideObjC = language==SrcLangExt_ObjC;
  insideJS   = language==SrcLangExt_JS;
  if ( insidePHP )
  {
    useOverrideCommands = TRUE;
  }
  //printf("setContext(%s) insideIDL=%d insideJava=%d insideCS=%d "
  //       "insideD=%d insidePHP=%d insideObjC=%d\n",
  //       yyFileName.data(),insideIDL,insideJava,insideCS,insideD,insidePHP,insideObjC
  //	);
}

//-----------------------------------------------------------------------------

static void prependScope()
{
  if (current_root->section & Entry::SCOPE_MASK)
  {
    //printf("--- prependScope %s to %s\n",current_root->name.data(),current->name.data());
    current->name.prepend(current_root->name+"::");
    if (current_root->tArgLists)
    {
      if (current->tArgLists==0)
      {
	current->tArgLists = new QList<ArgumentList>;
	current->tArgLists->setAutoDelete(TRUE);
      }
      //printf("prependScope #=%d #current=%d\n",current_root->tArgLists->count(),current->tArgLists->count());
      QListIterator<ArgumentList> talsi(*current_root->tArgLists);
      ArgumentList *srcAl=0;
      for (talsi.toLast();(srcAl=talsi.current());--talsi)
      {
        ArgumentList *dstAl = new ArgumentList;
	QListIterator<Argument> tali(*srcAl);
        Argument *a;
        for (;(a=tali.current());++tali)
        {
          dstAl->append(new Argument(*a));
        //printf("appending argument %s %s\n",a->type.data(),a->name.data());
        }	  
        current->tArgLists->insert(0,dstAl);	
      }
    }
  }
}

//-----------------------------------------------------------------------------

/*! Returns TRUE iff the current entry could be a K&R style C function */
static bool checkForKnRstyleC()
{
  if (((QCString)yyFileName).right(2).lower()!=".c") return FALSE; // must be a C file
  if (!current->argList) return FALSE; // must have arguments
  ArgumentListIterator ali(*current->argList);
  Argument *a;
  for (ali.toFirst();(a=ali.current());++ali)
  {
    // in K&R style argument do not have a type, but doxygen expects a type
    // so it will think the argument has no name
    if (a->type.isEmpty() || !a->name.isEmpty()) return FALSE;
  }
  return TRUE;
}

//-----------------------------------------------------------------------------

static void splitKnRArg(QCString &oldStyleArgPtr,QCString &oldStyleArgName)
{
  int si = current->args.length();
  if (oldStyleArgType.isEmpty()) // new argument
  {
    static QRegExp re("([^)]*)");
    int bi1 = current->args.findRev(re);
    int bi2 = bi1!=-1 ? current->args.findRev(re,bi1-1) : -1; 
    char c;
    if (bi1!=-1 && bi2!=-1) // found something like "int (*func)(int arg)"
    {
      int s=bi2+1;
      oldStyleArgType = current->args.left(s);
      int i=s;
      while (i<si && ((c=current->args.at(i))=='*' || isspace((uchar)c))) i++;
      oldStyleArgType += current->args.mid(s,i-s);
      s=i;
      while (i<si && isId(current->args.at(i))) i++;
      oldStyleArgName = current->args.mid(s,i-s);
      oldStyleArgType+=current->args.mid(i);
    }
    else if (bi1!=-1) // redundant braces like in "int (*var)"
    {
      int s=bi1;
      oldStyleArgType = current->args.left(s);
      s++;
      int i=s+1;
      while (i<si && ((c=current->args.at(i))=='*' || isspace((uchar)c))) i++;
      oldStyleArgType += current->args.mid(s,i-s);
      s=i;
      while (i<si && isId(current->args.at(i))) i++;
      oldStyleArgName = current->args.mid(s,i-s);
    }
    else // normal "int *var"
    {
      int l=si,i=l-1,j;
      char c;
      // look for start of name in "type *name"
      while (i>=0 && isId(current->args.at(i))) i--;
      j=i+1;
      // look for start of *'s
      while (i>=0 && ((c=current->args.at(i))=='*' || isspace((uchar)c))) i--;
      i++;
      if (i!=l)
      {
	oldStyleArgType=current->args.left(i);
	oldStyleArgPtr=current->args.mid(i,j-i);
	oldStyleArgName=current->args.mid(j).stripWhiteSpace();
      }
      else
      {
	oldStyleArgName=current->args.copy().stripWhiteSpace();
      }
    }
  }
  else // continuation like *arg2 in "int *args,*arg2"
  {
    int l=si,j=0;
    char c;
    while (j<l && ((c=current->args.at(j))=='*' || isspace((uchar)c))) j++;
    if (j>0)
    {
      oldStyleArgPtr=current->args.left(j);
      oldStyleArgName=current->args.mid(j).stripWhiteSpace();
    }
    else
    {
      oldStyleArgName=current->args.copy().stripWhiteSpace();
    }
  }
  //fprintf(stderr,"type=%s ptr=%s name=%s\n",oldStyleArgType.data(),oldStyleArgPtr.data(),oldStyleArgName.data());
}

//-----------------------------------------------------------------------------

/*! Update the argument \a name with additional \a type info. For K&R style
 *  function the type is found \e after the argument list, so this routine
 *  in needed to fix up.
 */
static void addKnRArgInfo(const QCString &type,const QCString &name,
                          const QCString &brief,const QCString &docs)
{
  if (current->argList==0) return;
  ArgumentListIterator ali(*current->argList);
  Argument *a;
  for (ali.toFirst();(a=ali.current());++ali)
  {
    if (a->type==name)
    {
      a->type=type.stripWhiteSpace();
      if (a->type.left(9)=="register ") // strip keyword
      {
	a->type=a->type.mid(9);
      }
      a->name=name.stripWhiteSpace();
      if (!brief.isEmpty() && !docs.isEmpty())
      {
        a->docs=brief+"\n\n"+docs;
      }
      else if (!brief.isEmpty())
      {
        a->docs=brief;
      }
      else
      {
	a->docs=docs;
      }
    }
  }
}

//-----------------------------------------------------------------------------


void fixArgumentListForJavaScript(ArgumentList *al)
{
  if (al==0) return;
  ArgumentListIterator ali(*al);
  Argument *a;
  for (ali.toFirst();(a=ali.current());++ali)
  {
    if (!a->type.isEmpty() && a->name.isEmpty())
    { // a->type is actually the (typeless) parameter name, so move it
      a->name=a->type;
      a->type.resize(0);
    }
  }
}

/* ----------------------------------------------------------------- */
#undef	YY_INPUT
#define	YY_INPUT(buf,result,max_size) result=yyread(buf,max_size);

static int yyread(char *buf,int max_size)
{
    int c=0;
    if (g_inputFromFile)
    {
       c = inputFile.readBlock(buf,max_size);
       if (c==-1) yy_fatal_error("input in flex scanner failed");
    }
    else
    {
      while( c < max_size && inputString[inputPosition] )
      {
	*buf = inputString[inputPosition++] ;
	//printf("%d (%c)\n",*buf,*buf);
	c++; buf++;
      }
    }
    return c;
}

/* start command character */
/* language parsing states */

























































































































/** Prototype scanner states */





/** comment parsing states */



#line 9731 "<stdout>"

#define INITIAL 0
#define Define 1
#define DefineEnd 2
#define CompoundName 3
#define ClassVar 4
#define CSConstraintName 5
#define CSConstraintType 6
#define CSIndexer 7
#define ClassCategory 8
#define ClassTemplSpec 9
#define CliPropertyType 10
#define CliPropertyIndex 11
#define CliOverride 12
#define Bases 13
#define BasesProt 14
#define NextSemi 15
#define BitFields 16
#define FindMembers 17
#define FindMembersPHP 18
#define FindMemberName 19
#define FindFields 20
#define FindFieldArg 21
#define Function 22
#define FuncRound 23
#define ExcpRound 24
#define ExcpList 25
#define FuncQual 26
#define Operator 27
#define Array 28
#define ReadBody 29
#define ReadNSBody 30
#define ReadBodyIntf 31
#define Using 32
#define UsingDirective 33
#define SkipCurly 34
#define SkipCurlyCpp 35
#define SkipCurlyEndDoc 36
#define SkipString 37
#define SkipPHPString 38
#define SkipInits 39
#define SkipCPP 40
#define SkipCPPBlock 41
#define SkipComment 42
#define SkipCxxComment 43
#define SkipCurlyBlock 44
#define SkipRoundBlock 45
#define Sharp 46
#define SkipSharp 47
#define SkipRound 48
#define SkipSquare 49
#define SkipRemainder 50
#define TypedefName 51
#define TryFunctionBlock 52
#define TryFunctionBlockEnd 53
#define Comment 54
#define PackageName 55
#define JavaImport 56
#define PHPUse 57
#define PHPUseAs 58
#define CSAccessorDecl 59
#define CSGeneric 60
#define PreLineCtrl 61
#define DefinePHP 62
#define DefinePHPEnd 63
#define OldStyleArgs 64
#define SkipVerbString 65
#define ObjCMethod 66
#define ObjCReturnType 67
#define ObjCParams 68
#define ObjCParamType 69
#define ObjCProtocolList 70
#define ObjCPropAttr 71
#define ObjCSkipStatement 72
#define QtPropType 73
#define QtPropName 74
#define QtPropAttr 75
#define QtPropRead 76
#define QtPropWrite 77
#define ReadInitializer 78
#define GetCallType 79
#define CppQuote 80
#define EndCppQuote 81
#define MemberSpec 82
#define MemberSpecSkip 83
#define EndTemplate 84
#define FuncPtr 85
#define FuncPtrOperator 86
#define EndFuncPtr 87
#define ReadFuncArgType 88
#define ReadTempArgs 89
#define IDLUnionCase 90
#define NSAliasName 91
#define NSAliasArg 92
#define CopyString 93
#define CopyPHPString 94
#define CopyGString 95
#define CopyPHPGString 96
#define CopyRound 97
#define CopyCurly 98
#define GCopyRound 99
#define GCopyCurly 100
#define SkipUnionSwitch 101
#define Specialization 102
#define FuncPtrInit 103
#define FuncFunc 104
#define FuncFuncEnd 105
#define FuncFuncType 106
#define FuncFuncArray 107
#define CopyArgString 108
#define CopyArgPHPString 109
#define CopyArgRound 110
#define CopyArgSharp 111
#define CopyArgComment 112
#define CopyArgCommentLine 113
#define CopyArgVerbatim 114
#define HereDoc 115
#define HereDocEnd 116
#define CopyHereDoc 117
#define CopyHereDocEnd 118
#define IDLAttribute 119
#define IDLProp 120
#define IDLPropName 121
#define Prototype 122
#define PrototypePtr 123
#define PrototypeQual 124
#define PrototypeExc 125
#define PrototypeSkipLine 126
#define DocLine 127
#define DocBlock 128
#define DocCopyBlock 129

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

static int yy_init_globals (void );

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int scanYYlex_destroy (void );

int scanYYget_debug (void );

void scanYYset_debug (int debug_flag  );

YY_EXTRA_TYPE scanYYget_extra (void );

void scanYYset_extra (YY_EXTRA_TYPE user_defined  );

FILE *scanYYget_in (void );

void scanYYset_in  (FILE * in_str  );

FILE *scanYYget_out (void );

void scanYYset_out  (FILE * out_str  );

yy_size_t scanYYget_leng (void );

char *scanYYget_text (void );

int scanYYget_lineno (void );

void scanYYset_lineno (int line_number  );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int scanYYwrap (void );
#else
extern int scanYYwrap (void );
#endif
#endif

    static void yyunput (int c,char *buf_ptr  );
    
#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT

#ifdef __cplusplus
static int yyinput (void );
#else
static int input (void );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 262144
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO fwrite( scanYYtext, scanYYleng, 1, scanYYout )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		yy_size_t n; \
		for ( n = 0; n < max_size && \
			     (c = getc( scanYYin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( scanYYin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = fread(buf, 1, max_size, scanYYin))==0 && ferror(scanYYin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(scanYYin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int scanYYlex (void);

#define YY_DECL int scanYYlex (void)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after scanYYtext and scanYYleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	if ( scanYYleng > 0 ) \
		YY_CURRENT_BUFFER_LVALUE->yy_at_bol = \
				(scanYYtext[scanYYleng - 1] == '\n'); \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    
#line 751 "scanner.l"


#line 10048 "<stdout>"

	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

        /* Create the reject buffer large enough to save one state per allowed character. */
        if ( ! (yy_state_buf) )
            (yy_state_buf) = (yy_state_type *)scanYYalloc(YY_STATE_BUF_SIZE  );
            if ( ! (yy_state_buf) )
                YY_FATAL_ERROR( "out of dynamic memory in scanYYlex()" );

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! scanYYin )
			scanYYin = stdin;

		if ( ! scanYYout )
			scanYYout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			scanYYensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				scanYY_create_buffer(scanYYin,YY_BUF_SIZE );
		}

		scanYY_load_buffer_state( );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of scanYYtext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
		yy_current_state += YY_AT_BOL();

		(yy_state_ptr) = (yy_state_buf);
		*(yy_state_ptr)++ = yy_current_state;

yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 3943 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			*(yy_state_ptr)++ = yy_current_state;
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 29848 );

yy_find_action:
		yy_current_state = *--(yy_state_ptr);
		(yy_lp) = yy_accept[yy_current_state];
goto find_rule; /* Shut up GCC warning -Wall */
find_rule: /* we branch to this label when backing up */
		for ( ; ; ) /* until we find what rule we matched */
			{
			if ( (yy_lp) && (yy_lp) < yy_accept[yy_current_state + 1] )
				{
				yy_act = yy_acclist[(yy_lp)];
				if ( yy_act & YY_TRAILING_HEAD_MASK ||
				     (yy_looking_for_trail_begin) )
					{
					if ( yy_act == (yy_looking_for_trail_begin) )
						{
						(yy_looking_for_trail_begin) = 0;
						yy_act &= ~YY_TRAILING_HEAD_MASK;
						break;
						}
					}
				else if ( yy_act & YY_TRAILING_MASK )
					{
					(yy_looking_for_trail_begin) = yy_act & ~YY_TRAILING_MASK;
					(yy_looking_for_trail_begin) |= YY_TRAILING_HEAD_MASK;
					(yy_full_match) = yy_cp;
					(yy_full_state) = (yy_state_ptr);
					(yy_full_lp) = (yy_lp);
					}
				else
					{
					(yy_full_match) = yy_cp;
					(yy_full_state) = (yy_state_ptr);
					(yy_full_lp) = (yy_lp);
					break;
					}
				++(yy_lp);
				goto find_rule;
				}
			--yy_cp;
			yy_current_state = *--(yy_state_ptr);
			(yy_lp) = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
case 1:
YY_RULE_SETUP
#line 753 "scanner.l"
{
  					  curlyCount=0;
					  needsSemi = TRUE;
  					  BEGIN(SkipCurlyBlock); 
					}
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 758 "scanner.l"
{
  				 	  roundCount=0;
  					  BEGIN(SkipRoundBlock);
  					}
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 762 "scanner.l"
{
					  ++roundCount;
  					}
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 765 "scanner.l"
{
  					  if (roundCount )
					    --roundCount ;
					  else
					    BEGIN( NextSemi ) ;
  					}
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 771 "scanner.l"
{
  					  ++curlyCount ; 
					}
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 774 "scanner.l"
{ 
  				          if( curlyCount )
					  {
					    --curlyCount ;
					  }
					  else if (needsSemi)
					  {
					    BEGIN( NextSemi );
					  }
					  else
					  {
					    BEGIN( FindMembers );
					  }
					}
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 788 "scanner.l"
{
  					  if (insidePHP)
					  {
					    lastStringContext=NextSemi;
					    BEGIN(SkipPHPString);
					  }
  					}
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 795 "scanner.l"
{ if (insidePHP) REJECT; }
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 796 "scanner.l"
{
  					  lastStringContext=NextSemi;
					  BEGIN(SkipString);
  					}
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 800 "scanner.l"
{ 
  					  unput(*scanYYtext);
  					  BEGIN( FindMembers ); 
					}
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 804 "scanner.l"
{
  					  unput(*scanYYtext);
					  BEGIN( FindMembers );
  					}
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 808 "scanner.l"
{ // PHP code with unsupported extension?
                                          insidePHP = TRUE;
  					}
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 811 "scanner.l"
{ // PHP code start
                                           BEGIN( FindMembers );
					}
	YY_BREAK
case 14:
/* rule 14 can match eol */
YY_RULE_SETUP
#line 814 "scanner.l"
{ // PHP code start
					  lineCount() ;
                                          BEGIN( FindMembers );
					}
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 818 "scanner.l"
{ // Non-PHP code text, ignore
  					}
	YY_BREAK
case 16:
/* rule 16 can match eol */
YY_RULE_SETUP
#line 820 "scanner.l"
{ // Non-PHP code text, ignore
                                          lineCount();
  					}
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 823 "scanner.l"
{ // Non-PHP code text, ignore
				        }
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 825 "scanner.l"
{ // PHP code end
					  if (insidePHP)
					    BEGIN( FindMembersPHP );
					  else
					    REJECT;
                                        }
	YY_BREAK
case 19:
/* rule 19 can match eol */
YY_RULE_SETUP
#line 831 "scanner.l"
{ if (insidePHP)
					    BEGIN( NextSemi );
					  else
					    REJECT;
					}
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 836 "scanner.l"
{ // Mozilla XPIDL lang-specific block
					  if (!insideIDL)
					    REJECT;
					}
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 840 "scanner.l"
{ // Mozilla XPIDL lang-specific block end
					  if (!insideIDL)
					    REJECT;
					}
	YY_BREAK
case 22:
/* rule 22 can match eol */
YY_RULE_SETUP
#line 844 "scanner.l"
{ // IDL or Borland C++ builder property 
  					  current->mtype = mtype = Property;
					  current->protection = protection = Public ;
					  current->type.resize(0); 
					  current->name.resize(0); 
					  current->args.resize(0);
					  current->argList->clear();
					  lineCount() ;
					}
	YY_BREAK
case 23:
/* rule 23 can match eol */
YY_RULE_SETUP
#line 854 "scanner.l"
{ current->mtype = mtype = DCOP;
					  current->protection = protection = Public ;
					  current->type.resize(0); 
					  current->name.resize(0); 
					  current->args.resize(0);
					  current->argList->clear();
					  lineCount() ;
					}
	YY_BREAK
case 24:
/* rule 24 can match eol */
YY_RULE_SETUP
#line 863 "scanner.l"
{ current->mtype = mtype = Signal;
  
					  current->protection = protection = Public ;
					  current->type.resize(0); 
					  current->name.resize(0); 
					  current->args.resize(0);
					  current->argList->clear();
					  lineCount() ;
					}
	YY_BREAK
case 25:
/* rule 25 can match eol */
YY_RULE_SETUP
#line 873 "scanner.l"
{
					  current->protection = protection = Public ;
					  current->mtype = mtype = Slot;
					  current->type.resize(0); 
					  current->name.resize(0); 
					  current->args.resize(0);
					  current->argList->clear();
					  lineCount();
					}
	YY_BREAK
case 26:
/* rule 26 can match eol */
YY_RULE_SETUP
#line 883 "scanner.l"
{
					  current->protection = protection = Protected ;
					  current->mtype = mtype = Slot;
					  current->type.resize(0); 
					  current->name.resize(0); 
					  current->args.resize(0);
					  current->argList->clear();
					  lineCount();
					}
	YY_BREAK
case 27:
/* rule 27 can match eol */
YY_RULE_SETUP
#line 893 "scanner.l"
{
					  current->protection = protection = Private ;
					  current->mtype = mtype = Slot;
					  current->type.resize(0); 
					  current->name.resize(0); 
					  current->args.resize(0);
					  current->argList->clear();
					  lineCount();
					}
	YY_BREAK
case 28:
/* rule 28 can match eol */
YY_RULE_SETUP
#line 902 "scanner.l"
{ 
					  current->protection = protection = Public ;
					  current->mtype = mtype = Method;
					  current->type.resize(0); 
					  current->name.resize(0); 
					  current->args.resize(0);
					  current->argList->clear();
					  lineCount() ;
					}
	YY_BREAK
case 29:
/* rule 29 can match eol */
YY_RULE_SETUP
#line 911 "scanner.l"
{  // for now treat C++/CLI's internal as package...
  					  if (insideCli)
					  {
					    current->protection = protection = Package ;
					    current->mtype = mtype = Method;
					    current->type.resize(0); 
					    current->name.resize(0); 
					    current->args.resize(0);
					    current->argList->clear();
					    lineCount() ;
					  }
					  else
					  {
					    REJECT;
					  }
  					}
	YY_BREAK
case 30:
/* rule 30 can match eol */
YY_RULE_SETUP
#line 927 "scanner.l"
{  
  					  current->protection = protection = Protected ;
					  current->mtype = mtype = Method;
					  current->type.resize(0); 
					  current->name.resize(0); 
					  current->args.resize(0);
					  current->argList->clear();
					  lineCount() ;
					}
	YY_BREAK
case 31:
/* rule 31 can match eol */
YY_RULE_SETUP
#line 936 "scanner.l"
{ 
  					  current->protection = protection = Private ;
					  current->mtype = mtype = Method;
					  current->type.resize(0); 
					  current->name.resize(0); 
					  current->args.resize(0);
					  current->argList->clear();
					  lineCount() ;
					}
	YY_BREAK
case 32:
/* rule 32 can match eol */
YY_RULE_SETUP
#line 945 "scanner.l"
{ 
  					  if (insideCli)
					  {
					    // C++/CLI event
					    lineCount() ;
  					    current->mtype = mtype = Event;
					    current->bodyLine = yyLineNr;
					    curlyCount=0;
					    BEGIN( CliPropertyType );
					  }
					  else if (insideCS)
					  {
					    lineCount() ;
  					    current->mtype = Event;
					    current->bodyLine = yyLineNr;
					  }
					  else
					  {
					    REJECT;
					  }
                                        }
	YY_BREAK
case 33:
/* rule 33 can match eol */
YY_RULE_SETUP
#line 966 "scanner.l"
{
  					   if (insideCli)
					   {
					     // C++/CLI property
					     lineCount() ;
  					     current->mtype = mtype = Property;
					     current->bodyLine = yyLineNr;
					     curlyCount=0;
					     BEGIN( CliPropertyType );
					   }
					   else
					   {
					     REJECT;
					   }
					}
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 981 "scanner.l"
{
  					  addType( current );
  					  current->name = scanYYtext;
  					}
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 985 "scanner.l"
{ // C++/CLI indexed property
  					  current->name += scanYYtext;
					  BEGIN( CliPropertyIndex );
  					}
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 989 "scanner.l"
{
					  curlyCount=0;
					  //printf("event: '%s' '%s'\n",current->type.data(),current->name.data());
  					  BEGIN( CSAccessorDecl );
  					}
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 994 "scanner.l"
{
  					  unput(*scanYYtext);
					  BEGIN( FindMembers );
  					}
	YY_BREAK
case 38:
/* rule 38 can match eol */
YY_RULE_SETUP
#line 998 "scanner.l"
{
                                          lineCount();
  					}
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 1001 "scanner.l"
{
  					}
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 1003 "scanner.l"
{
  					  addType( current );
  					  current->type += scanYYtext;
  					}
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 1007 "scanner.l"
{
                                          BEGIN( CliPropertyType );
  					  current->name+=scanYYtext;
  					}
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 1011 "scanner.l"
{
  					  current->name+=scanYYtext;
  					}
	YY_BREAK
/*
<FindMembers>{B}*"property"{BN}+        { 
                                          if (!current->type.isEmpty())
					  {
					    REJECT;
                                          }
					  else
					  { 
                                            current->mtype = mtype = Property;
                                            lineCount();
					  }
                                        }
  */
case 43:
/* rule 43 can match eol */
YY_RULE_SETUP
#line 1027 "scanner.l"
{
  					  current->protection = protection = Private ;
					  current->mtype = mtype = Method;
					  current->type.resize(0); 
					  current->name.resize(0); 
					  current->args.resize(0);
					  current->argList->clear();
					  lineCount() ;
  					}
	YY_BREAK
case 44:
/* rule 44 can match eol */
YY_RULE_SETUP
#line 1036 "scanner.l"
{
  					  current->protection = protection = Protected ;
					  current->mtype = mtype = Method;
					  current->type.resize(0); 
					  current->name.resize(0); 
					  current->args.resize(0);
					  current->argList->clear();
					  lineCount() ;
  					}
	YY_BREAK
case 45:
/* rule 45 can match eol */
YY_RULE_SETUP
#line 1045 "scanner.l"
{
  					  current->protection = protection = Public ;
					  current->mtype = mtype = Method;
					  current->type.resize(0); 
					  current->name.resize(0); 
					  current->args.resize(0);
					  current->argList->clear();
					  lineCount() ;
  					}
	YY_BREAK
case 46:
/* rule 46 can match eol */
YY_RULE_SETUP
#line 1054 "scanner.l"
{
  					  if (!insideObjC) 
					  {
					    REJECT;
					  }
					  else
					  {
  					    lineCount();
					    current->fileName  = yyFileName;
					    current->startLine = yyLineNr;
					    current->bodyLine  = yyLineNr;
					    current->section = Entry::FUNCTION_SEC;
					    current->protection = protection = Public ;
					    language = current->lang = SrcLangExt_ObjC;
					    insideObjC = TRUE;
					    current->virt = Virtual;
					    current->stat=scanYYtext[0]=='+';
					    current->mtype = mtype = Method;
					    current->type.resize(0); 
					    current->name.resize(0); 
					    current->args.resize(0);
					    current->argList->clear();
					    BEGIN( ObjCMethod );
					  }
  					}
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 1079 "scanner.l"
{ // start of method's return type
  					  BEGIN( ObjCReturnType );
  					}
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 1082 "scanner.l"
{ // found method name
  					  if (current->type.isEmpty())
					  {
					    current->type = "id";
					  }
					  current->name = scanYYtext;
  					}
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 1089 "scanner.l"
{ // start of parameter list
  					  current->name += ':';
  					  Argument *a = new Argument;
					  current->argList->append(a);
  					  BEGIN( ObjCParams );
  					}
	YY_BREAK
case 50:
/* rule 50 can match eol */
YY_RULE_SETUP
#line 1095 "scanner.l"
{ // TODO: check if nested braches are possible.
  					  current->type = scanYYtext;
  					}
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 1098 "scanner.l"
{
  					  BEGIN( ObjCMethod );
  					}
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 1101 "scanner.l"
{ // Keyword of parameter
					  QCString keyw = scanYYtext;
					  keyw=keyw.left(keyw.length()-1); // strip :
					  if (keyw.isEmpty())
					  {
					    current->name += " :";
					  }
					  else
					  {
					    current->name += keyw+":";
					  }
					  if (current->argList->getLast()->type.isEmpty())
					  {
					    current->argList->getLast()->type="id";
					  }
  					  Argument *a = new Argument;
  					  a->attrib=(QCString)"["+keyw+"]";
					  current->argList->append(a);
  					}
	YY_BREAK
case 53:
/* rule 53 can match eol */
YY_RULE_SETUP
#line 1120 "scanner.l"
{ // name of parameter
  					  lineCount();
  					  current->argList->getLast()->name=QCString(scanYYtext).stripWhiteSpace();
  					}
	YY_BREAK
case 54:
/* rule 54 can match eol */
YY_RULE_SETUP
#line 1124 "scanner.l"
{ // name of parameter
  					  lineCount();
					  // do we want the comma as part of the name?
  					  //current->name += ",";
  					  Argument *a = new Argument;
  					  a->attrib="[,]";
  					  a->type="...";
					  current->argList->append(a);
  					}
	YY_BREAK
/*
<ObjCParams>":"				{ 
					  current->name += ':';
					}
   */
case 55:
YY_RULE_SETUP
#line 1138 "scanner.l"
{
  					  BEGIN( ObjCParamType );
  					}
	YY_BREAK
case 56:
/* rule 56 can match eol */
YY_RULE_SETUP
#line 1141 "scanner.l"
{
  					  current->argList->getLast()->type=QCString(scanYYtext).stripWhiteSpace();
  					}
	YY_BREAK
case 57:
*yy_cp = (yy_hold_char); /* undo effects of setting up scanYYtext */
(yy_c_buf_p) = yy_cp = yy_bp + 1;
YY_DO_BEFORE_ACTION; /* set up scanYYtext again */
YY_RULE_SETUP
#line 1144 "scanner.l"
{
  					  BEGIN( ObjCParams );
  					}
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 1147 "scanner.l"
{ // end of method declaration
					  if (current->argList->getLast() && current->argList->getLast()->type.isEmpty())
					  {
					    current->argList->getLast()->type="id";
					  }
  					  current->args = argListToString(current->argList);
					  //printf("argList=%s\n",current->args.data());
  					  unput(';');
  					  BEGIN( Function );
  					}
	YY_BREAK
case 59:
/* rule 59 can match eol */
YY_RULE_SETUP
#line 1157 "scanner.l"
{ // start of a method body
  					  lineCount();
                                          //printf("Type=%s Name=%s args=%s\n",
					  //    current->type.data(),current->name.data(),argListToString(current->argList).data()
					  //    );
					  if (current->argList->getLast() && current->argList->getLast()->type.isEmpty())
					  {
					    current->argList->getLast()->type="id";
					  }
  					  current->args = argListToString(current->argList);
                                          unput('{');
  					  BEGIN( Function );
  					}
	YY_BREAK
case 60:
/* rule 60 can match eol */
YY_RULE_SETUP
#line 1170 "scanner.l"
{
  					  lineCount();
  					}
	YY_BREAK
case 61:
/* rule 61 can match eol */
YY_RULE_SETUP
#line 1173 "scanner.l"
{
  					  if (insideJava) // Java annotation
					  {
  					    lineCount();
					    lastSkipRoundContext = YY_START;
					    roundCount=1;
					    BEGIN( SkipRound );
					  }
					  else if (strncmp(scanYYtext,"@property",9)==0) // ObjC 2.0 property
					  {
  					    current->mtype = mtype = Property;
					    current->spec|=Entry::Readable | Entry::Writable | Entry::Assign;
					    current->protection = Public ;
					    unput('(');
					    BEGIN( ObjCPropAttr );
					  }
					  else
					  {
					    REJECT;
					  }
                                        }
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 1194 "scanner.l"
{ 
                                          current->read = scanYYtext+7;
					}
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 1197 "scanner.l"
{ 
                                          current->write = scanYYtext+7;
					}
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 1200 "scanner.l"
{
					  current->spec&=~Entry::Writable;
  					}
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 1203 "scanner.l"
{ // default
  					}
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 1205 "scanner.l"
{ // default
  					}
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 1207 "scanner.l"
{
					  current->spec&=~Entry::Assign;
					  current->spec|=Entry::Unretained;
                                        }
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 1211 "scanner.l"
{
					  current->spec&=~Entry::Assign;
					  current->spec|=Entry::Retain;
  					}
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 1215 "scanner.l"
{
					  current->spec&=~Entry::Assign;
					  current->spec|=Entry::Copy;
  					}
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 1219 "scanner.l"
{
					  current->spec&=~Entry::Assign;
					  current->spec|=Entry::Weak;
                                        }
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 1223 "scanner.l"
{
					  current->spec&=~Entry::Assign;
					  current->spec|=Entry::Strong;
                                        }
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 1227 "scanner.l"
{
					  current->spec|=Entry::NonAtomic;
  					}
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 1230 "scanner.l"
{
  					  BEGIN(FindMembers);
  					}
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 1233 "scanner.l"
{
  					  if (insideJava) // Java annotation
					  {
					    // skip annotation
					  }
					  else if (strcmp(scanYYtext,"@property")==0) // ObjC 2.0 property
					  {
  					    current->mtype = mtype = Property;
					    current->spec|=Entry::Writable | Entry::Readable;
					    current->protection = Public ;
					  }
					  else if (strcmp(scanYYtext,"@synthesize")==0)
					  {
					    BEGIN( ObjCSkipStatement );
					  }
					  else if (strcmp(scanYYtext,"@dynamic")==0)
					  {
					    BEGIN( ObjCSkipStatement );
					  }
					  else
					  {
					    REJECT;
					  }
  					}
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 1257 "scanner.l"
{
  					  BEGIN(FindMembers);
  					}
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 1260 "scanner.l"
{
  					  isTypedef=FALSE;
					  //printf("Found namespace %s lang=%d\n",scanYYtext,current->lang);
					  current->name = scanYYtext;
					  current->name = substitute(current->name,".","::");
					  current->name = substitute(current->name,"\\","::");
					  current->section = Entry::NAMESPACE_SEC;
					  current->type = "namespace" ;
					  current->fileName  = yyFileName;
					  current->startLine = yyLineNr;
					  current->bodyLine  = yyLineNr;
					  lineCount();
  					}
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 1273 "scanner.l"
{
					  current_root->addSubEntry(current);
                                          current_root = current ;
					  current = new Entry ;
					  initEntry();
  					  BEGIN(FindMembers);
  					}
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 1280 "scanner.l"
{
					  curlyCount=0;
					  BEGIN( ReadNSBody );
  					}
	YY_BREAK
case 79:
/* rule 79 can match eol */
YY_RULE_SETUP
#line 1284 "scanner.l"
{
  					  current->type += " initonly ";
					  if (insideCli) current->spec |= Entry::Initonly;
					  lineCount();
  					}
	YY_BREAK
case 80:
/* rule 80 can match eol */
YY_RULE_SETUP
#line 1289 "scanner.l"
{ current->type += " static ";
  					  current->stat = TRUE;
					  lineCount();
					}
	YY_BREAK
case 81:
/* rule 81 can match eol */
YY_RULE_SETUP
#line 1293 "scanner.l"
{
  					  current->stat = FALSE;
					  current->explicitExternal = TRUE;
					  lineCount();
  					}
	YY_BREAK
case 82:
/* rule 82 can match eol */
YY_RULE_SETUP
#line 1298 "scanner.l"
{ current->type += " virtual ";
					  current->virt = Virtual;
					  lineCount();
					}
	YY_BREAK
case 83:
/* rule 83 can match eol */
YY_RULE_SETUP
#line 1302 "scanner.l"
{ 
                                          if (!insidePHP) 
					  {
					    current->type += " abstract ";
					    current->virt = Pure;
					  }
					  else
					  {
					    current->spec|=Entry::Abstract;
					  }
					  lineCount();
					}
	YY_BREAK
case 84:
/* rule 84 can match eol */
YY_RULE_SETUP
#line 1314 "scanner.l"
{ current->spec|=Entry::Inline;
                                          lineCount(); 
                                        }
	YY_BREAK
case 85:
/* rule 85 can match eol */
YY_RULE_SETUP
#line 1317 "scanner.l"
{ current->spec|=Entry::Mutable;
                                          lineCount(); 
                                        }
	YY_BREAK
case 86:
/* rule 86 can match eol */
YY_RULE_SETUP
#line 1320 "scanner.l"
{ current->spec|=Entry::Explicit;
                                          lineCount(); 
                                        }
	YY_BREAK
case 87:
/* rule 87 can match eol */
YY_RULE_SETUP
#line 1323 "scanner.l"
{ // Objective C 2.0 protocol required section
                                          current->spec=(current->spec & ~Entry::Optional) | Entry::Required;
                                          lineCount(); 
                                        }
	YY_BREAK
case 88:
/* rule 88 can match eol */
YY_RULE_SETUP
#line 1327 "scanner.l"
{  // Objective C 2.0 protocol optional section
                                          current->spec=(current->spec & ~Entry::Required) | Entry::Optional;
                                          lineCount(); 
                                        }
	YY_BREAK
/*
<FindMembers>{B}*"import"{BN}+		{ // IDL import keyword
  					  BEGIN( NextSemi );
  					}
  */
case 89:
/* rule 89 can match eol */
YY_RULE_SETUP
#line 1336 "scanner.l"
{ lineCount(); }
	YY_BREAK
case 90:
/* rule 90 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up scanYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up scanYYtext again */
YY_RULE_SETUP
#line 1337 "scanner.l"
{ 
  					  isTypedef=FALSE;
					  current->section = Entry::NAMESPACE_SEC;
					  current->type = "namespace" ;
					  current->fileName  = yyFileName;
					  current->startLine = yyLineNr;
					  current->bodyLine  = yyLineNr;
					  lineCount();
					  if (insidePHP)
					  {
					    BEGIN( PackageName );
					  }
					  else
					  {
  					    BEGIN( CompoundName ); 
					  }
					}
	YY_BREAK
case 91:
/* rule 91 can match eol */
YY_RULE_SETUP
#line 1354 "scanner.l"
{ 
					  lineCount();
                                          if (insideIDL)
					  {
  					    isTypedef=FALSE;
					    current->section = Entry::NAMESPACE_SEC;
					    current->type = "module" ;
					    current->fileName  = yyFileName;
					    current->startLine = yyLineNr;
					    current->bodyLine  = yyLineNr;
  					    BEGIN( CompoundName ); 
					  }
					  else if (insideD)
					  {
					    lineCount();
					    BEGIN(PackageName);
					  }
					  else
					  {
					    addType( current ) ;
					    current->name = QCString(scanYYtext).stripWhiteSpace();
					  }
					}
	YY_BREAK
case 92:
/* rule 92 can match eol */
YY_RULE_SETUP
#line 1377 "scanner.l"
{ 
					  lineCount();
                                          if (insideIDL)
					  {
  					    isTypedef=FALSE;
					    current->section = Entry::NAMESPACE_SEC;
					    current->type = "library" ;
					    current->fileName  = yyFileName;
					    current->startLine = yyLineNr;
					    current->bodyLine  = yyLineNr;
  					    BEGIN( CompoundName ); 
					  }
					  else
					  {
					    addType( current ) ;
					    current->name = QCString(scanYYtext).stripWhiteSpace();
					  }
					}
	YY_BREAK
case 93:
/* rule 93 can match eol */
YY_RULE_SETUP
#line 1395 "scanner.l"
{ // M$/Corba IDL/Java interface
					  lineCount();
                                          if (insideIDL || insideJava || insideCS || insideD || insidePHP)
					  {
  					    isTypedef=FALSE;
					    current->section = Entry::CLASS_SEC;
                                            current->spec = Entry::Interface;
					    addType( current ) ;
					    current->type += " interface" ;
					    current->fileName  = yyFileName;
					    current->startLine = yyLineNr;
					    current->bodyLine  = yyLineNr;
					    BEGIN( CompoundName );
					  }
					  else
					  {
					    addType( current ) ;
					    current->name = QCString(scanYYtext).stripWhiteSpace();
					  }
  					}
	YY_BREAK
case 94:
/* rule 94 can match eol */
YY_RULE_SETUP
#line 1415 "scanner.l"
{ // Objective-C class implementation
					  lineCount();
  					  isTypedef=FALSE;
					  current->section = Entry::OBJCIMPL_SEC;
					  language = current->lang = SrcLangExt_ObjC;
					  insideObjC = TRUE;
					  current->protection = protection = Public ;
					  addType( current ) ;
					  current->type += " implementation" ;
					  current->fileName  = yyFileName;
					  current->startLine = yyLineNr;
					  current->bodyLine  = yyLineNr;
					  BEGIN( CompoundName );
  					}
	YY_BREAK
case 95:
/* rule 95 can match eol */
YY_RULE_SETUP
#line 1429 "scanner.l"
{ // Objective-C class interface, or Java attribute
					  lineCount();
  					  isTypedef=FALSE;
					  current->section = Entry::CLASS_SEC;
                                          current->spec = Entry::Interface;
					  if (!insideJava)
					  {
					    language = current->lang = SrcLangExt_ObjC;
					    insideObjC = TRUE;
					  }
					  current->protection = protection = Public ;
					  addType( current ) ;
					  current->type += " interface" ;
					  current->fileName  = yyFileName;
					  current->startLine = yyLineNr;
					  current->bodyLine  = yyLineNr;
					  BEGIN( CompoundName );
  					}
	YY_BREAK
case 96:
/* rule 96 can match eol */
YY_RULE_SETUP
#line 1447 "scanner.l"
{ // Objective-C protocol definition
					  lineCount();
  					  isTypedef=FALSE;
					  current->section = Entry::CLASS_SEC;
                                          current->spec = Entry::Protocol;
					  language = current->lang = SrcLangExt_ObjC;
					  insideObjC = TRUE;
					  current->protection = protection = Public ;
					  addType( current ) ;
					  current->type += " protocol" ;
					  current->fileName  = yyFileName;
					  current->startLine = yyLineNr;
					  current->bodyLine  = yyLineNr;
					  BEGIN( CompoundName );
  					}
	YY_BREAK
case 97:
/* rule 97 can match eol */
YY_RULE_SETUP
#line 1462 "scanner.l"
{ // Corba IDL exception
  					  isTypedef=FALSE;
					  current->section = Entry::CLASS_SEC;
                                          current->spec = Entry::Exception;
					  addType( current ) ;
					  current->type += " exception" ;
					  current->fileName  = yyFileName;
					  current->startLine = yyLineNr;
					  current->bodyLine  = yyLineNr;
					  lineCount();
					  BEGIN( CompoundName );
  					}
	YY_BREAK
case 98:
#line 1475 "scanner.l"
case 99:
/* rule 99 can match eol */
#line 1476 "scanner.l"
case 100:
/* rule 100 can match eol */
YY_RULE_SETUP
#line 1476 "scanner.l"
{ 
					  isTypedef=((QCString)scanYYtext).find("typedef")!=-1;
  					  current->section = Entry::CLASS_SEC;
					  addType( current ) ;
					  current->type += " class" ;
					  current->fileName  = yyFileName;
					  current->startLine = yyLineNr;
					  current->bodyLine  = yyLineNr;
					  if (scanYYtext[0]=='@')
					  {
					    language = current->lang = SrcLangExt_ObjC;
					    insideObjC = TRUE;
					  }
					  lineCount() ;
					  if (scanYYtext[scanYYleng-1]=='{') unput('{');
					  if (insidePHP && current->spec&Entry::Abstract)
					  {
					    // convert Abstract to AbstractClass
					    current->spec=(current->spec&~Entry::Abstract)|Entry::AbstractClass;
					  }
					  BEGIN( CompoundName ) ;
					}
	YY_BREAK
case 101:
#line 1499 "scanner.l"
case 102:
/* rule 102 can match eol */
YY_RULE_SETUP
#line 1499 "scanner.l"
{
  					  isTypedef=FALSE;
  					  current->section = Entry::CLASS_SEC;
                                          current->spec = Entry::Value;
					  addType( current ) ;
					  current->type += " value class" ;
					  current->fileName  = yyFileName;
					  current->startLine = yyLineNr;
					  current->bodyLine  = yyLineNr;
					  lineCount() ;
					  if (scanYYtext[scanYYleng-1]=='{') unput('{');
					  BEGIN( CompoundName ) ;
  					}
	YY_BREAK
case 103:
#line 1513 "scanner.l"
case 104:
/* rule 104 can match eol */
YY_RULE_SETUP
#line 1513 "scanner.l"
{
  					  isTypedef=FALSE;
  					  current->section = Entry::CLASS_SEC;
                                          current->spec = Entry::Ref;
					  addType( current ) ;
					  current->type += " ref class" ;
					  current->fileName  = yyFileName;
					  current->startLine = yyLineNr;
					  current->bodyLine  = yyLineNr;
					  lineCount() ;
					  if (scanYYtext[scanYYleng-1]=='{') unput('{');
					  BEGIN( CompoundName ) ;
  					}
	YY_BREAK
case 105:
#line 1527 "scanner.l"
case 106:
/* rule 106 can match eol */
YY_RULE_SETUP
#line 1527 "scanner.l"
{
  					  isTypedef=FALSE;
  					  current->section = Entry::CLASS_SEC;
                                          current->spec = Entry::Interface;
					  addType( current ) ;
					  current->type += " interface class" ;
					  current->fileName  = yyFileName;
					  current->startLine = yyLineNr;
					  current->bodyLine  = yyLineNr;
					  lineCount() ;
					  if (scanYYtext[scanYYleng-1]=='{') unput('{');
					  BEGIN( CompoundName ) ;
  					}
	YY_BREAK
case 107:
/* rule 107 can match eol */
YY_RULE_SETUP
#line 1540 "scanner.l"
{
  					  if (insideIDL)
					  {
					    isTypedef=FALSE;
					    current->section = Entry::CLASS_SEC;
					    addType( current ) ;
					    current->type += " coclass" ;
					    current->fileName  = yyFileName;
					    current->startLine = yyLineNr;
					    current->bodyLine  = yyLineNr;
					    lineCount() ;
					    BEGIN( CompoundName ) ;
					  }
					  else
					  {
  					    addType(current);
					    current->name = scanYYtext;
					    current->name = current->name.stripWhiteSpace();
					    lineCount();
					  }
  					}
	YY_BREAK
case 108:
/* rule 108 can match eol */
#line 1562 "scanner.l"
case 109:
/* rule 109 can match eol */
YY_RULE_SETUP
#line 1562 "scanner.l"
{ 
					  isTypedef=((QCString)scanYYtext).find("typedef")!=-1;
  					  current->section = Entry::CLASS_SEC ;
                                          current->spec    = Entry::Struct;
					  // bug 582676: can be a struct nested in an interface so keep insideObjC state
					  //current->objc    = insideObjC = FALSE;
					  addType( current ) ;
					  current->type += " struct" ;
					  current->fileName  = yyFileName;
					  current->startLine = yyLineNr;
					  current->bodyLine  = yyLineNr;
					  lineCount() ;
					  if (scanYYtext[scanYYleng-1]=='{') unput('{');
					  BEGIN( CompoundName ) ;
					}
	YY_BREAK
case 110:
#line 1578 "scanner.l"
case 111:
/* rule 111 can match eol */
YY_RULE_SETUP
#line 1578 "scanner.l"
{
  					  isTypedef=FALSE;
  					  current->section = Entry::CLASS_SEC;
                                          current->spec    = Entry::Struct | Entry::Value;
					  addType( current ) ;
					  current->type += " value struct" ;
					  current->fileName  = yyFileName;
					  current->startLine = yyLineNr;
					  current->bodyLine  = yyLineNr;
					  lineCount() ;
					  if (scanYYtext[scanYYleng-1]=='{') unput('{');
					  BEGIN( CompoundName ) ;
  					}
	YY_BREAK
case 112:
#line 1592 "scanner.l"
case 113:
/* rule 113 can match eol */
YY_RULE_SETUP
#line 1592 "scanner.l"
{
  					  isTypedef=FALSE;
  					  current->section = Entry::CLASS_SEC;
                                          current->spec    = Entry::Struct | Entry::Ref;
					  addType( current ) ;
					  current->type += " ref struct" ;
					  current->fileName  = yyFileName;
					  current->startLine = yyLineNr;
					  current->bodyLine  = yyLineNr;
					  lineCount() ;
					  if (scanYYtext[scanYYleng-1]=='{') unput('{');
					  BEGIN( CompoundName ) ;
  					}
	YY_BREAK
case 114:
#line 1606 "scanner.l"
case 115:
/* rule 115 can match eol */
YY_RULE_SETUP
#line 1606 "scanner.l"
{
  					  isTypedef=FALSE;
  					  current->section = Entry::CLASS_SEC;
                                          current->spec    = Entry::Struct | Entry::Interface;
					  addType( current ) ;
					  current->type += " interface struct";
					  current->fileName  = yyFileName;
					  current->startLine = yyLineNr;
					  current->bodyLine  = yyLineNr;
					  lineCount() ;
					  if (scanYYtext[scanYYleng-1]=='{') unput('{');
					  BEGIN( CompoundName ) ;
  					}
	YY_BREAK
case 116:
/* rule 116 can match eol */
#line 1620 "scanner.l"
case 117:
/* rule 117 can match eol */
YY_RULE_SETUP
#line 1620 "scanner.l"
{ 
					  isTypedef=((QCString)scanYYtext).find("typedef")!=-1;
  					  current->section = Entry::CLASS_SEC;
                                          current->spec    = Entry::Union;
					  // bug 582676: can be a struct nested in an interface so keep insideObjC state
					  //current->objc    = insideObjC = FALSE;
					  addType( current ) ;
					  current->type += " union" ;
					  current->fileName  = yyFileName;
					  current->startLine = yyLineNr;
					  current->bodyLine  = yyLineNr;
					  lineCount() ;
					  if (scanYYtext[scanYYleng-1]=='{') unput('{');
					  BEGIN( CompoundName ) ;
					}
	YY_BREAK
case 118:
/* rule 118 can match eol */
#line 1636 "scanner.l"
case 119:
/* rule 119 can match eol */
YY_RULE_SETUP
#line 1636 "scanner.l"
{ // for IDL: typedef [something] enum
                                          QCString text=scanYYtext;
					  isTypedef    = text.find("typedef")!=-1;
                                          bool isStrongEnum = text.find("struct")!=-1 || text.find("class")!=-1;
					  if (insideJava)
					  {
					    current->section = Entry::CLASS_SEC;
					    current->spec    = Entry::Enum;
					  }
					  else
					  {
  					    current->section = Entry::ENUM_SEC ;
					  }
					  addType( current ) ;
					  current->type += " enum";
                                          if (isStrongEnum)
                                          {
                                            current->spec |= Entry::Strong;
                                          }
					  current->fileName  = yyFileName;
					  current->startLine = yyLineNr;
					  current->bodyLine  = yyLineNr;
					  lineCount() ;
					  if (scanYYtext[scanYYleng-1]=='{') unput('{');
					  BEGIN( CompoundName ) ;
					}
	YY_BREAK
case 120:
/* rule 120 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up scanYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up scanYYtext again */
YY_RULE_SETUP
#line 1662 "scanner.l"
{  // A::operator()<int>(int arg)
  					  lineCount();
					  current->name += "()";
					  BEGIN( FindMembers );
					}
	YY_BREAK
case 121:
/* rule 121 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up scanYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up scanYYtext again */
YY_RULE_SETUP
#line 1667 "scanner.l"
{
  					  lineCount();
    					  current->name += scanYYtext ;
					  current->name = current->name.simplifyWhiteSpace();
					  BEGIN( FindMembers ) ;
  					}
	YY_BREAK
case 122:
YY_RULE_SETUP
#line 1673 "scanner.l"
{ // can occur when importing members
  					  unput(';');
					  BEGIN( FindMembers ) ;
  					}
	YY_BREAK
case 123:
/* rule 123 can match eol */
YY_RULE_SETUP
#line 1677 "scanner.l"
{ 
    					  lineCount();
    					  current->name += *scanYYtext ;
					}
	YY_BREAK
case 124:
YY_RULE_SETUP
#line 1681 "scanner.l"
{ /* skip guided templ specifiers */ }
	YY_BREAK
case 125:
YY_RULE_SETUP
#line 1682 "scanner.l"
{
					  current->name = current->name.simplifyWhiteSpace();
					  unput(*scanYYtext);
					  BEGIN( FindMembers ) ;
					}
	YY_BREAK
case 126:
/* rule 126 can match eol */
YY_RULE_SETUP
#line 1687 "scanner.l"
{  // generic is a C++/CLI extension
  					  lineCount();
					  if (current->tArgLists==0)
					  {
					    current->tArgLists = new QList<ArgumentList>;
					    current->tArgLists->setAutoDelete(TRUE);
					  }
					  ArgumentList *al = new ArgumentList;
					  //current->spec |= (scanYYtext[0]=='g') ? Entry::Generic : Entry::Template;
					  current->tArgLists->append(al);
					  currentArgumentList = al;
					  templateStr="<";
					  fullArgString = templateStr;
					  copyArgString = &templateStr;
					  currentArgumentContext = FindMembers;
					  BEGIN( ReadTempArgs );
  					}
	YY_BREAK
case 127:
/* rule 127 can match eol */
YY_RULE_SETUP
#line 1704 "scanner.l"
{ // namespace alias
                                          lineCount(); 
  					  BEGIN( NSAliasName );
					}
	YY_BREAK
case 128:
YY_RULE_SETUP
#line 1708 "scanner.l"
{
  					  aliasName = scanYYtext;
					  BEGIN( NSAliasArg );
  					}
	YY_BREAK
case 129:
YY_RULE_SETUP
#line 1712 "scanner.l"
{
  					  //printf("Inserting namespace alias %s::%s->%s\n",current_root->name.data(),aliasName.data(),scanYYtext);
					  //if (current_root->name.isEmpty())
					  //{
                                          // TODO: namespace aliases are now treated as global entities
                                          // while they should be aware of the scope they are in
                                            Doxygen::namespaceAliasDict.insert(aliasName,new QCString(scanYYtext));
					  //}
					  //else
					  //{
                                          //  Doxygen::namespaceAliasDict.insert(current_root->name+"::"+aliasName,
					  //	new QCString(current_root->name+"::"+scanYYtext));
					  //}
  					}
	YY_BREAK
case 130:
YY_RULE_SETUP
#line 1726 "scanner.l"
{
  					  BEGIN( FindMembers );
  					}
	YY_BREAK
case 131:
/* rule 131 can match eol */
YY_RULE_SETUP
#line 1729 "scanner.l"
{
  					  lineCount();
					  aliasName=scanYYtext;
					  BEGIN(PHPUseAs);
					}
	YY_BREAK
case 132:
/* rule 132 can match eol */
YY_RULE_SETUP
#line 1734 "scanner.l"
{
  					  lineCount();
					  current->name=removeRedundantWhiteSpace(substitute(scanYYtext,"\\","::"));
  					  //printf("PHP: adding use relation: %s\n",current->name.data());
                                          current->fileName = yyFileName; 
                                          // add a using declaraton
  					  current->section=Entry::USINGDECL_SEC;
					  current_root->addSubEntry(current);
					  current = new Entry(*current);
                                          // also add it as a using directive
					  current->section=Entry::USINGDIR_SEC;
					  current_root->addSubEntry(current);
					  current = new Entry ;
					  initEntry();
					  aliasName.resize(0);
					}
	YY_BREAK
case 133:
/* rule 133 can match eol */
YY_RULE_SETUP
#line 1750 "scanner.l"
{
  					  lineCount();
  					}
	YY_BREAK
case 134:
YY_RULE_SETUP
#line 1753 "scanner.l"
{
  					  //printf("PHP: adding use as relation: %s->%s\n",scanYYtext,aliasName.data());
                                          Doxygen::namespaceAliasDict.insert(scanYYtext,
					       new QCString(removeRedundantWhiteSpace(
						   substitute(aliasName,"\\","::"))));
					  aliasName.resize(0);
  					}
	YY_BREAK
case 135:
YY_RULE_SETUP
#line 1760 "scanner.l"
{
                                       /*
                                          if (!aliasName.isEmpty())
					  {
					    int i=aliasName.findRev('\\');
					    if (i!=-1)
					    {
					      QCString an = removeRedundantWhiteSpace(
						    substitute(aliasName,"\\","::"));
  					      printf("PHP: adding use relation: %s->%s\n",aliasName.mid(i+1).data(),an.data());
					      Doxygen::namespaceAliasDict.insert(aliasName.mid(i+1),
					  	                        new QCString(an));
					      current->name     = an;
					      current->fileName = yyFileName; 
					      current->section=Entry::USINGDECL_SEC;
					      current_root->addSubEntry(current);
					      current = new Entry ;
					      initEntry();
					    }
					    else if (i==0)
					    {
					    }
					  }
					  */
					  if (*scanYYtext==',')
					  {
					    BEGIN(PHPUse);
					  }
					  else
					  {
  					    BEGIN(FindMembers);
					  }
  					}
	YY_BREAK
case 136:
/* rule 136 can match eol */
YY_RULE_SETUP
#line 1793 "scanner.l"
{ // package import => add as a using directive
  					  lineCount();
  					  QCString scope=scanYYtext;
					  current->name=removeRedundantWhiteSpace(substitute(scope.left(scope.length()-1),".","::"));
                                          current->fileName = yyFileName; 
  					  current->section=Entry::USINGDIR_SEC;
					  current_root->addSubEntry(current);
					  current = new Entry;
					  initEntry();
					  BEGIN(Using);
  					}
	YY_BREAK
case 137:
/* rule 137 can match eol */
YY_RULE_SETUP
#line 1804 "scanner.l"
{ // class import => add as a using declaration
                                          lineCount();
  					  QCString scope=scanYYtext;
					  current->name=removeRedundantWhiteSpace(substitute(scope,".","::"));
					  current->fileName = yyFileName; 
					  if (insideD) 
					  {
					    current->section=Entry::USINGDIR_SEC;
					  }
					  else
					  {
					    //printf("import name = %s -> %s\n",scanYYtext,current->name.data());
					    current->section=Entry::USINGDECL_SEC;
					  }
					  current_root->addSubEntry(current);
					  current = new Entry ;
					  initEntry();
					  BEGIN(Using);
  					}
	YY_BREAK
case 138:
/* rule 138 can match eol */
YY_RULE_SETUP
#line 1823 "scanner.l"
{ 
					  current->startLine=yyLineNr; 
                                          lineCount(); 
                                          BEGIN(Using); 
                                        }
	YY_BREAK
case 139:
/* rule 139 can match eol */
YY_RULE_SETUP
#line 1828 "scanner.l"
{ lineCount(); BEGIN(UsingDirective); }
	YY_BREAK
case 140:
/* rule 140 can match eol */
YY_RULE_SETUP
#line 1829 "scanner.l"
{
                                          lineCount();
  					  current->name=scanYYtext;
                                          current->fileName = yyFileName; 
  					  current->section=Entry::USINGDECL_SEC;
					  current_root->addSubEntry(current);
					  current             = new Entry ;
					  if (insideCS) /* Hack: in C# a using declaration and 
							   directive have the same syntax, so we
							   also add it as a using directive here
							 */
					  {
					    current->name=scanYYtext;
					    current->fileName = yyFileName; 
					    current->startLine = yyLineNr;
					    current->section=Entry::USINGDIR_SEC;
					    current_root->addSubEntry(current);
					    current             = new Entry ;
					  }
					  initEntry();
					  BEGIN(Using);
  					}
	YY_BREAK
case 141:
/* rule 141 can match eol */
YY_RULE_SETUP
#line 1851 "scanner.l"
{ current->name=removeRedundantWhiteSpace(scanYYtext);
                                          current->fileName = yyFileName; 
  					  current->section=Entry::USINGDIR_SEC;
					  current_root->addSubEntry(current);
					  current             = new Entry ;
					  initEntry();
					  BEGIN(Using);
  					}
	YY_BREAK
case 142:
YY_RULE_SETUP
#line 1859 "scanner.l"
{ BEGIN(FindMembers); }
	YY_BREAK
case 143:
/* rule 143 can match eol */
YY_RULE_SETUP
#line 1860 "scanner.l"
{ // guided template decl
					  QCString n=scanYYtext;
					  addType( current );
					  current->name=n.left(n.length()-2);
					}
	YY_BREAK
case 144:
/* rule 144 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up scanYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up scanYYtext again */
YY_RULE_SETUP
#line 1865 "scanner.l"
{ // Note: this could be a return type!
                                          roundCount=0;
  					  sharpCount=0;
					  lineCount();
					  addType( current );
  					  current->name=scanYYtext;
					  current->name=current->name.stripWhiteSpace();
					  //current->scopeSpec.resize(0);
					  // currentTemplateSpec = &current->scopeSpec;
					  if (nameIsOperator(current->name))
					    BEGIN( Operator );
					  else
					    BEGIN( EndTemplate );
					}
	YY_BREAK
case 145:
/* rule 145 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up scanYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up scanYYtext again */
YY_RULE_SETUP
#line 1879 "scanner.l"
{
  					  sharpCount=0;
					  roundCount=0;
					  lineCount();
  					  current->name+=((QCString)scanYYtext).stripWhiteSpace();
					  //current->memberSpec.resize(0);
					  // currentTemplateSpec = &current->memberSpec;
					  if (nameIsOperator(current->name))
					    BEGIN( Operator );
					  else
					    BEGIN( EndTemplate );
  					}
	YY_BREAK
case 146:
YY_RULE_SETUP
#line 1891 "scanner.l"
{
  					  if (!insidePHP) 
					  {
					    REJECT;
					  }
					  else
					  {
                                            lastHereDocContext = YY_START;
					    BEGIN(HereDoc);
					  }
  					}
	YY_BREAK
case 147:
YY_RULE_SETUP
#line 1902 "scanner.l"
{
  					  current->name+=scanYYtext;
  					  // *currentTemplateSpec+=scanYYtext; 
  					}
	YY_BREAK
case 148:
YY_RULE_SETUP
#line 1906 "scanner.l"
{ 
  					  current->name+='<';
  					  // *currentTemplateSpec+='<'; 
					  sharpCount++; 
					}
	YY_BREAK
case 149:
YY_RULE_SETUP
#line 1911 "scanner.l"
{
  					  if (insideJava || insideCS || insideCli || roundCount==0)
					  {
					    unput('>');
					    unput(' ');
					    unput('>');
					  }
					  else
					  {
  					    current->name+=scanYYtext;
					  }
  					  // *currentTemplateSpec+=scanYYtext; 
  					}
	YY_BREAK
case 150:
YY_RULE_SETUP
#line 1924 "scanner.l"
{
  					  current->name+='>';
					  // *currentTemplateSpec+='>';
					  if (--sharpCount<=0)
					  {  
					    //printf("Found %s\n",current->name.data());
					    BEGIN(FindMembers);
					  }
					}
	YY_BREAK
case 151:
/* rule 151 can match eol */
YY_RULE_SETUP
#line 1933 "scanner.l"
{ 
  					  lineCount();
  					  current->name+='>';
					  // *currentTemplateSpec+='>';
					  if (--sharpCount<=0)
					  {
					    current->bodyLine = yyLineNr;
					    current->args = "(";
					    currentArgumentContext = FuncQual;
					    fullArgString = current->args.copy();
					    copyArgString = &current->args;
					    //printf("Found %s\n",current->name.data());
					    BEGIN( ReadFuncArgType ) ;
					  }
					}
	YY_BREAK
case 152:
/* rule 152 can match eol */
YY_RULE_SETUP
#line 1948 "scanner.l"
{ // function pointer returning a template instance
  					  lineCount();
  					  current->name+='>';
					  BEGIN(FindMembers);
  					}
	YY_BREAK
case 153:
/* rule 153 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up scanYYtext */
(yy_c_buf_p) = yy_cp -= 2;
YY_DO_BEFORE_ACTION; /* set up scanYYtext again */
YY_RULE_SETUP
#line 1953 "scanner.l"
{
  					  lineCount();
  					  current->name+='>';
  					  // *currentTemplateSpec+='>';
					  if (--sharpCount<=0)
					  {
					    BEGIN(FindMemberName);
					  }
  					}
	YY_BREAK
case 154:
YY_RULE_SETUP
#line 1962 "scanner.l"
{ current->name+=*scanYYtext;
                                          roundCount++; 
                                        }
	YY_BREAK
case 155:
YY_RULE_SETUP
#line 1965 "scanner.l"
{ current->name+=*scanYYtext;
                                          if (roundCount>0) roundCount--; 
                                        }
	YY_BREAK
case 156:
YY_RULE_SETUP
#line 1968 "scanner.l"
{ 
  					  current->name+=*scanYYtext;
  					  // *currentTemplateSpec+=*scanYYtext; 
					}
	YY_BREAK
case 157:
/* rule 157 can match eol */
YY_RULE_SETUP
#line 1972 "scanner.l"
{
					  if (insidePHP)
					  {
					    current->bodyLine = yyLineNr;
					    BEGIN( DefinePHP );
					  }
					  else
					    REJECT;
					}
	YY_BREAK
case 158:
YY_RULE_SETUP
#line 1981 "scanner.l"
{ // PHP heredoc
  					  g_hereDocId = scanYYtext;
                                          *pCopyHereDocGString += scanYYtext;
					  BEGIN(CopyHereDocEnd);
                                        }
	YY_BREAK
case 159:
*yy_cp = (yy_hold_char); /* undo effects of setting up scanYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up scanYYtext again */
YY_RULE_SETUP
#line 1986 "scanner.l"
{ // PHP nowdoc
  					  g_hereDocId = &scanYYtext[1];
                                          *pCopyHereDocGString += scanYYtext;
					  BEGIN(CopyHereDocEnd);
                                        }
	YY_BREAK
case 160:
YY_RULE_SETUP
#line 1991 "scanner.l"
{ // PHP heredoc
  					  g_hereDocId = scanYYtext;
					  BEGIN(HereDocEnd);
  					}
	YY_BREAK
case 161:
*yy_cp = (yy_hold_char); /* undo effects of setting up scanYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up scanYYtext again */
YY_RULE_SETUP
#line 1995 "scanner.l"
{ // PHP nowdoc
  					  g_hereDocId = &scanYYtext[1];
					  BEGIN(HereDocEnd);
  					}
	YY_BREAK
case 162:
YY_RULE_SETUP
#line 1999 "scanner.l"
{ // id at start of the line could mark the end of the block
  					  if (g_hereDocId==scanYYtext) // it is the end marker
					  {
  					    BEGIN(lastHereDocContext);
					  }
  					}
	YY_BREAK
case 163:
YY_RULE_SETUP
#line 2005 "scanner.l"
{ }
	YY_BREAK
case 164:
YY_RULE_SETUP
#line 2006 "scanner.l"
{ // id at start of the line could mark the end of the block
                                          *pCopyHereDocGString += scanYYtext;
  					  if (g_hereDocId==scanYYtext) // it is the end marker
					  {
  					    BEGIN(lastHereDocContext);
					  }
  					}
	YY_BREAK
case 165:
/* rule 165 can match eol */
YY_RULE_SETUP
#line 2013 "scanner.l"
{ 
                                          *pCopyHereDocGString += scanYYtext;
                                        }
	YY_BREAK
case 166:
YY_RULE_SETUP
#line 2016 "scanner.l"
{ 
                                          *pCopyHereDocGString += scanYYtext;
                                        }
	YY_BREAK
case 167:
YY_RULE_SETUP
#line 2019 "scanner.l"
{ // Qt object macro
  					}
	YY_BREAK
case 168:
YY_RULE_SETUP
#line 2021 "scanner.l"
{ // Qt property declaration
					  current->protection = protection = Public ;
  					  current->mtype = mtype = Property;
					  current->type.resize(0);
  					  BEGIN(QtPropType);
  					}
	YY_BREAK
case 169:
YY_RULE_SETUP
#line 2027 "scanner.l"
{ // start of property arguments
  					}
	YY_BREAK
case 170:
YY_RULE_SETUP
#line 2029 "scanner.l"
{ // end of property arguments
  					  unput(';');
					  BEGIN(FindMembers);
  					}
	YY_BREAK
case 171:
YY_RULE_SETUP
#line 2033 "scanner.l"
{
  				          current->type+=scanYYtext;
  					}
	YY_BREAK
case 172:
YY_RULE_SETUP
#line 2036 "scanner.l"
{
  				          current->type+=scanYYtext;
  					}
	YY_BREAK
case 173:
YY_RULE_SETUP
#line 2039 "scanner.l"
{
  					  current->type+=scanYYtext;
                                          BEGIN(QtPropName);
  					}
	YY_BREAK
case 174:
YY_RULE_SETUP
#line 2043 "scanner.l"
{
  					  current->name=scanYYtext;
  					  BEGIN(QtPropAttr);
  					}
	YY_BREAK
case 175:
YY_RULE_SETUP
#line 2047 "scanner.l"
{
  					  current->spec |= Entry::Readable;
					  BEGIN(QtPropRead);
  					}
	YY_BREAK
case 176:
YY_RULE_SETUP
#line 2051 "scanner.l"
{
  					  current->spec |= Entry::Writable;
					  BEGIN(QtPropWrite);
  					}
	YY_BREAK
case 177:
YY_RULE_SETUP
#line 2055 "scanner.l"
{ // reset method => not supported yet
  					}
	YY_BREAK
case 178:
YY_RULE_SETUP
#line 2057 "scanner.l"
{ // scriptable property => not supported yet
  					}
	YY_BREAK
case 179:
YY_RULE_SETUP
#line 2059 "scanner.l"
{ // designable property => not supported yet
  					}
	YY_BREAK
case 180:
YY_RULE_SETUP
#line 2061 "scanner.l"
{
  					  current->read = scanYYtext;
  					  BEGIN(QtPropAttr);
  					}
	YY_BREAK
case 181:
YY_RULE_SETUP
#line 2065 "scanner.l"
{
  					  current->write = scanYYtext;
					  BEGIN(QtPropAttr);
  					}
	YY_BREAK
case 182:
/* rule 182 can match eol */
YY_RULE_SETUP
#line 2069 "scanner.l"
{
  					  current->name=scanYYtext;
				          BEGIN(FindMembers);
			 	        }
	YY_BREAK
case 183:
/* rule 183 can match eol */
YY_RULE_SETUP
#line 2073 "scanner.l"
{
					  lineCount();
                                          if (insideIDL && scanYYleng==9 && strcmp(scanYYtext,"cpp_quote")==0)
					  {
					    BEGIN(CppQuote);
					  }
					  else if ((insideIDL || insideJava || insideD) && scanYYleng==6 && strcmp(scanYYtext,"import")==0)
					  {
					    if (insideIDL)
					      BEGIN(NextSemi);
					    else // insideJava or insideD
					      BEGIN(JavaImport);
					  }
					  else if (insidePHP && strcmp(scanYYtext,"use")==0)
					  {
					    BEGIN(PHPUse);
					  }
					  else if (insideJava && strcmp(scanYYtext,"package")==0)
					  {
  					    lineCount();
					    BEGIN(PackageName);
					  }
					  else if (insideIDL && strcmp(scanYYtext,"case")==0)
					  {
					    BEGIN(IDLUnionCase);
					  }
					  else if (insideTryBlock && strcmp(scanYYtext,"catch")==0)
					  {
					    insideTryBlock=FALSE;
					    BEGIN(TryFunctionBlock);
					  }
					  else if (insideJS && strcmp(scanYYtext,"var")==0)
					  { // javascript variable
					    current->type="var";
					  }
					  else if (insideJS && strcmp(scanYYtext,"function")==0)
					  { // javascript function
					    current->type="function";
					  }
					  else if (insideCS && strcmp(scanYYtext,"this")==0)
					  {
					    // C# indexer
					    addType( current ) ;
					    current->name="this";
					    BEGIN(CSIndexer);
					  }
					  else
					  {
					    if (YY_START==FindMembers)
					    {
					      addType( current ) ;
					    }
					    bool javaLike = insideJava || insideCS || insideD || insidePHP || insideJS;
					    if (javaLike && strcmp(scanYYtext,"public")==0)
					    {
					      current->protection = Public;
					    }
					    else if (javaLike && strcmp(scanYYtext,"protected")==0)
					    {
					      current->protection = Protected;
					    }
					    else if (javaLike && strcmp(scanYYtext,"internal")==0)
					    {
					      current->protection = Package;
					    }
					    else if (javaLike && strcmp(scanYYtext,"private")==0)
					    {
					      current->protection = Private;
					    }
					    else if (javaLike && strcmp(scanYYtext,"static")==0)
					    {
					      if (YY_START==FindMembers)
					        current->name  = scanYYtext;
					      else
						current->name += scanYYtext;
			 		      current->stat = TRUE;
					    }
					    else
					    {
					      if (YY_START==FindMembers)
					        current->name  = scanYYtext;
					      else
						current->name += scanYYtext;
					      if (current->name.left(7)=="static ")
					      {
						current->stat = TRUE;
						current->name= current->name.mid(7);
					      }
					      else if (current->name.left(7)=="inline ")
					      {
						if (current->type.isEmpty())
						{
						  current->type="inline";
						}
						else
						{
						  current->type+="inline ";
						}
						current->name= current->name.mid(7);
					      }
					      else if (current->name.left(6)=="const ")
					      {
						if (current->type.isEmpty())
						{
						  current->type="const";
						}
						else
						{
						  current->type+="const ";
						}
						current->name=current->name.mid(6);
					      }
					    }
					    QCString tmp=scanYYtext;
					    if (nameIsOperator(tmp))
                                            {
					      BEGIN( Operator );
                                            }
					    else
                                            {
		 			      BEGIN(FindMembers);
                                            }
					  }
					}
	YY_BREAK
case 184:
YY_RULE_SETUP
#line 2197 "scanner.l"
{
					  current->name+=removeRedundantWhiteSpace(scanYYtext);
  					  BEGIN(FindMembers);
  					}
	YY_BREAK
case 185:
YY_RULE_SETUP
#line 2201 "scanner.l"
{ // some number where we did not expect one
  					}
	YY_BREAK
case 186:
YY_RULE_SETUP
#line 2203 "scanner.l"
{
  					  if (insideJava || insideCS || insideD)
					  {
					    current->name+=".";
					  }
  					}
	YY_BREAK
case 187:
YY_RULE_SETUP
#line 2209 "scanner.l"
{
					  current->name+=scanYYtext;
  					}
	YY_BREAK
case 188:
YY_RULE_SETUP
#line 2212 "scanner.l"
{
  					  insideCppQuote=TRUE;
  					  BEGIN(FindMembers);
  					}
	YY_BREAK
case 189:
YY_RULE_SETUP
#line 2216 "scanner.l"

	YY_BREAK
case 190:
YY_RULE_SETUP
#line 2217 "scanner.l"
{ BEGIN(FindMembers); }
	YY_BREAK
case 191:
/* rule 191 can match eol */
YY_RULE_SETUP
#line 2218 "scanner.l"
{ lineCount(); }
	YY_BREAK
case 192:
YY_RULE_SETUP
#line 2219 "scanner.l"

	YY_BREAK
case 193:
/* rule 193 can match eol */
YY_RULE_SETUP
#line 2220 "scanner.l"
{ lineCount(); }
	YY_BREAK
case 194:
YY_RULE_SETUP
#line 2221 "scanner.l"
{ 
					  curlyCount=0;
					  lastCurlyContext = TryFunctionBlockEnd ;
  					  BEGIN( SkipCurly );
					}
	YY_BREAK
case 195:
YY_RULE_SETUP
#line 2226 "scanner.l"

	YY_BREAK
case 196:
/* rule 196 can match eol */
YY_RULE_SETUP
#line 2227 "scanner.l"
{ lineCount(); BEGIN(TryFunctionBlock); // {BN}* added to fix bug 611193
					}
	YY_BREAK
case 197:
/* rule 197 can match eol */
YY_RULE_SETUP
#line 2229 "scanner.l"
{ unput(*scanYYtext); // rule added to fix bug id 601138
  					  BEGIN( FindMembers );
					}
	YY_BREAK
case 198:
YY_RULE_SETUP
#line 2232 "scanner.l"
{ unput(*scanYYtext);
  					  BEGIN( FindMembers );
					}
	YY_BREAK
case 199:
YY_RULE_SETUP
#line 2235 "scanner.l"
{
  					  insideCppQuote=FALSE;
					  BEGIN(FindMembers);
  					}
	YY_BREAK
case 200:
YY_RULE_SETUP
#line 2239 "scanner.l"
{ if (insidePHP)
					    REJECT;
					  lastCPPContext = YY_START;
					  BEGIN( SkipCPP ) ;
					}
	YY_BREAK
case 201:
YY_RULE_SETUP
#line 2244 "scanner.l"
{
  					  if (insidePHP)
					    REJECT;
  					  current->bodyLine = yyLineNr;
                                          lastDefineContext = YY_START;
  					  BEGIN( Define );
  					}
	YY_BREAK
case 202:
*yy_cp = (yy_hold_char); /* undo effects of setting up scanYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up scanYYtext again */
YY_RULE_SETUP
#line 2251 "scanner.l"
{ /* line control directive */
                                          yyLineNr = atoi(&scanYYtext[1]);
					  //printf("setting line number to %d\n",yyLineNr);
					  lastPreLineCtrlContext = YY_START;
					  if (YY_START==ReadBody || 
					      YY_START==ReadNSBody ||
					      YY_START==ReadBodyIntf)
					  {
  					    current->program+=scanYYtext;
					  }
  					  BEGIN( PreLineCtrl );
  					}
	YY_BREAK
case 203:
YY_RULE_SETUP
#line 2263 "scanner.l"
{
				          yyFileName = stripQuotes(scanYYtext);
					  if (lastPreLineCtrlContext==ReadBody || 
					      lastPreLineCtrlContext==ReadNSBody ||
					      lastPreLineCtrlContext==ReadBodyIntf)
					  {
					    current->program+=scanYYtext;
					  }
  					}
	YY_BREAK
case 204:
YY_RULE_SETUP
#line 2272 "scanner.l"
{
					  if (lastPreLineCtrlContext==ReadBody || 
					      lastPreLineCtrlContext==ReadNSBody ||
					      lastPreLineCtrlContext==ReadBodyIntf)
					  {
  					    current->program+=scanYYtext;
					  }
                                        }
	YY_BREAK
case 205:
/* rule 205 can match eol */
YY_RULE_SETUP
#line 2280 "scanner.l"
{
					  if (lastPreLineCtrlContext==ReadBody || 
					      lastPreLineCtrlContext==ReadNSBody ||
					      lastPreLineCtrlContext==ReadBodyIntf)
					  {
  					    current->program+=scanYYtext;
					  }
                                          lineCount();
  					  BEGIN( lastPreLineCtrlContext );
  					}
	YY_BREAK
case 206:
YY_RULE_SETUP
#line 2290 "scanner.l"

	YY_BREAK
case 207:
/* rule 207 can match eol */
YY_RULE_SETUP
#line 2291 "scanner.l"
{ lineCount(); }
	YY_BREAK
case 208:
/* rule 208 can match eol */
YY_RULE_SETUP
#line 2292 "scanner.l"
{ lineCount();
					  BEGIN( lastCPPContext) ;
					}
	YY_BREAK
case 209:
YY_RULE_SETUP
#line 2295 "scanner.l"
{
  					  current->name = scanYYtext;
					  current->name = current->name.left(current->name.length()-1).stripWhiteSpace();
					  current->args = "(";
  					  current->bodyLine = yyLineNr;
					  currentArgumentContext = DefineEnd;
					  fullArgString=current->args.copy();
					  copyArgString=&current->args;
					  BEGIN( ReadFuncArgType ) ;
  					}
	YY_BREAK
/*
<DefineArg>")"				{
  					  //printf("Define with args\n");
  					  current->args += ')';
  					  BEGIN( DefineEnd );
  					}
<DefineArg>.				{
  					  current->args += *scanYYtext;
  					}
  */
case 210:
YY_RULE_SETUP
#line 2315 "scanner.l"
{
  					  //printf("Define `%s' without args\n",scanYYtext);
  					  current->bodyLine = yyLineNr;
  					  current->name = scanYYtext;
					  BEGIN(DefineEnd);
  					}
	YY_BREAK
case 211:
/* rule 211 can match eol */
YY_RULE_SETUP
#line 2321 "scanner.l"
{
  					  //printf("End define: doc=%s docFile=%s docLine=%d\n",current->doc.data(),current->docFile.data(),current->docLine);
                                          lineCount();
					  current->fileName   = yyFileName;
					  current->startLine  = yyLineNr;
					  current->type.resize(0);
  					  current->args       = current->args.simplifyWhiteSpace();
  					  current->name       = current->name.stripWhiteSpace();
					  current->section    = Entry::DEFINE_SEC;
					  current_root->addSubEntry(current);
					  current             = new Entry ;
					  initEntry();
					  BEGIN(lastDefineContext);
  					}
	YY_BREAK
case 212:
YY_RULE_SETUP
#line 2335 "scanner.l"
{
  					  //printf("End define\n");
					  current->fileName   = yyFileName;
					  current->startLine  = yyLineNr;
					  current->type.resize(0);
                                          current->type       = "const";
                                          QCString init = current->initializer.data();
  					  init = init.simplifyWhiteSpace();
  					  init = init.left(init.length()-1);
                                          current->initializer = init;
  					  current->name       = current->name.stripWhiteSpace();
					  current->section    = Entry::VARIABLE_SEC; 
					  current_root->addSubEntry(current);
					  current             = new Entry ;
					  initEntry();
					  BEGIN(FindMembers);
  					}
	YY_BREAK
case 213:
YY_RULE_SETUP
#line 2352 "scanner.l"

	YY_BREAK
case 214:
/* rule 214 can match eol */
YY_RULE_SETUP
#line 2353 "scanner.l"
{
                                          lineCount();
  					}
	YY_BREAK
case 215:
YY_RULE_SETUP
#line 2356 "scanner.l"
{
					  if (insideIDL && insideCppQuote)
					  {
					    BEGIN(EndCppQuote);
					  }
					  else
					  {
					    lastStringContext=DefineEnd;
					    BEGIN(SkipString);
					  }
  					}
	YY_BREAK
case 216:
YY_RULE_SETUP
#line 2367 "scanner.l"

	YY_BREAK
case 217:
/* rule 217 can match eol */
YY_RULE_SETUP
#line 2368 "scanner.l"
{
  					  current->name = scanYYtext;
					  current->name = current->name.stripWhiteSpace();
					  current->name = current->name.left(current->name.length()-1).stripWhiteSpace();
					  current->name = current->name.left(current->name.length()-1);
  					  current->bodyLine = yyLineNr;
  					  lastRoundContext = DefinePHPEnd;
  					  pCopyRoundGString = &current->initializer;
					  roundCount = 0;
  					  BEGIN( GCopyRound );
					}
	YY_BREAK
case 218:
YY_RULE_SETUP
#line 2380 "scanner.l"
{  // ^ and % are C++/CLI extensions
  					  if (insideCli)
					  {
  					    addType( current );
                                            current->name = scanYYtext ; 
					  }
					  else
					  {
					    REJECT;
					  }
  					}
	YY_BREAK
case 219:
YY_RULE_SETUP
#line 2391 "scanner.l"
{ 
                                          current->name += scanYYtext ;  
  					  addType( current );
					}
	YY_BREAK
case 220:
/* rule 220 can match eol */
YY_RULE_SETUP
#line 2395 "scanner.l"
{
  					  lineCount();
					  if (current->bodyLine==-1)
					  {
					    current->bodyLine=yyLineNr;
					  }
					  docBlockContext   = YY_START;
					  docBlockInBody    = FALSE;
					  docBlockAutoBrief = ( scanYYtext[scanYYleng-2]=='*' && Config_getBool("JAVADOC_AUTOBRIEF") ) ||
					                      ( scanYYtext[scanYYleng-2]=='!' && Config_getBool("QT_AUTOBRIEF") );
					  docBlock.resize(0);
					  docBlockTerm = ';';
					  if (scanYYtext[scanYYleng-3]=='/')
					  {
					    startCommentBlock(TRUE);
					    BEGIN( DocLine );
					  }
					  else
					  {
					    startCommentBlock(FALSE);
					    BEGIN( DocBlock );
					  }
  					}
	YY_BREAK
case 221:
/* rule 221 can match eol */
YY_RULE_SETUP
#line 2418 "scanner.l"
{
  					  lineCount();
					  docBlockContext   = YY_START;
					  docBlockInBody    = FALSE;
					  docBlockAutoBrief = ( scanYYtext[scanYYleng-2]=='*' && Config_getBool("JAVADOC_AUTOBRIEF") ) ||
					                      ( scanYYtext[scanYYleng-2]=='!' && Config_getBool("QT_AUTOBRIEF") );
					  docBlock.resize(0);
					  docBlockTerm = ',';
					  if (scanYYtext[scanYYleng-3]=='/')
					  {
					    startCommentBlock(TRUE);
					    BEGIN( DocLine );
					  }
					  else
					  {
					    startCommentBlock(FALSE);
					    BEGIN( DocBlock );
					  }
  					}
	YY_BREAK
case 222:
/* rule 222 can match eol */
YY_RULE_SETUP
#line 2437 "scanner.l"
{
  					  lineCount();
					  if (current->bodyLine==-1)
					  {
					    current->bodyLine=yyLineNr;
					  }
					  docBlockContext   = YY_START;
					  docBlockInBody    = FALSE;
					  docBlockAutoBrief = ( scanYYtext[scanYYleng-2]=='*' && Config_getBool("JAVADOC_AUTOBRIEF") ) ||
					                      ( scanYYtext[scanYYleng-2]=='!' && Config_getBool("QT_AUTOBRIEF") );
					  docBlock.resize(0);
					  docBlockTerm = 0;
					  if (scanYYtext[scanYYleng-3]=='/')
					  {
					    startCommentBlock(TRUE);
					    BEGIN( DocLine );
					  }
					  else
					  {
					    startCommentBlock(FALSE);
					    BEGIN( DocBlock );
					  }
  					}
	YY_BREAK
case 223:
YY_RULE_SETUP
#line 2461 "scanner.l"
{
  					  //handleGroupStartCommand(current->name);
                                          if (previous && previous->section==Entry::GROUPDOC_SEC)
					  {
					    // link open command to the group defined in the previous entry
					    openGroup(previous,yyFileName,yyLineNr);
					  }
					  else
					  {
					    // link open command to the current entry
					    openGroup(current,yyFileName,yyLineNr);
					  }
					  //current = tmp;
					  initEntry();
					  if (scanYYtext[1]=='/')
					  {
					    if (scanYYtext[2]=='!' || scanYYtext[2]=='/')
					    {
					      docBlockContext   = YY_START;
					      docBlockInBody    = FALSE;
					      docBlockAutoBrief = FALSE;
					      docBlock.resize(0);
					      docBlockTerm = 0;
					      startCommentBlock(TRUE);
					      BEGIN(DocLine);
					    }
					    else
					    {
					      lastCContext=YY_START;
					      BEGIN(SkipCxxComment);
					    }
					  }
					  else
					  {
					    if (scanYYtext[2]=='!' || scanYYtext[2]=='*')
					    {
					      docBlockContext   = YY_START;
					      docBlockInBody    = FALSE;
					      docBlock.resize(0);
					      docBlockAutoBrief = ( scanYYtext[scanYYleng-2]=='*' && Config_getBool("JAVADOC_AUTOBRIEF") ) ||
					                          ( scanYYtext[scanYYleng-2]=='!' && Config_getBool("QT_AUTOBRIEF") );
					      docBlockTerm = 0;
					      startCommentBlock(FALSE);
					      BEGIN(DocBlock);
					    }
					    else
					    {
					      lastCContext=YY_START;
					      BEGIN(SkipComment);
					    }
					  }
  					}
	YY_BREAK
case 224:
/* rule 224 can match eol */
YY_RULE_SETUP
#line 2513 "scanner.l"
{
  					  closeGroup(current,yyFileName,yyLineNr);
  					}
	YY_BREAK
case 225:
YY_RULE_SETUP
#line 2516 "scanner.l"
{ // in PHP code this could also be due to "<?="
  					  current->bodyLine = yyLineNr;
					  lastInitializerContext = YY_START;
					  initBracketCount=0;
					  BEGIN(ReadInitializer);
  					}
	YY_BREAK
/* Read initializer rules */
case 226:
YY_RULE_SETUP
#line 2523 "scanner.l"
{
  					  lastRoundContext=YY_START;
  					  pCopyRoundGString=&current->initializer;
					  roundCount=0;
  					  current->initializer+=*scanYYtext; 
  					  BEGIN(GCopyRound);
  					}
	YY_BREAK
case 227:
YY_RULE_SETUP
#line 2530 "scanner.l"
{
  					  lastCurlyContext=YY_START;
  					  pCopyCurlyGString=&current->initializer;
					  curlyCount=0;
  					  current->initializer+=*scanYYtext; 
  					  BEGIN(GCopyCurly);
  					}
	YY_BREAK
case 228:
YY_RULE_SETUP
#line 2537 "scanner.l"
{
  					  //printf(">> initializer `%s' <<\n",current->initializer.data());
                                          if (*scanYYtext==';' && (current_root->spec&Entry::Enum))
					  {
					    current->fileName   = yyFileName;
					    current->startLine  = yyLineNr;
  					    current->args       = current->args.simplifyWhiteSpace();
  					    current->name       = current->name.stripWhiteSpace();
					    current->section    = Entry::VARIABLE_SEC;
					    current_root->addSubEntry(current);
					    current = new Entry;
					    initEntry();
					    BEGIN(FindMembers);
					  }
					  else if (*scanYYtext==';' || (lastInitializerContext==FindFields && initBracketCount==0)) // initBracketCount==0 was added for bug 665778
					  {
  					    unput(*scanYYtext);
  					    BEGIN(lastInitializerContext);
					  }
					  else if (*scanYYtext==',' && initBracketCount==0) // for "int a=0,b=0"
					  {
  					    unput(*scanYYtext);
  					    BEGIN(lastInitializerContext);
					  }
					  else
					  {
  					    current->initializer+=*scanYYtext; 
					  }
  					}
	YY_BREAK
case 229:
YY_RULE_SETUP
#line 2566 "scanner.l"
{
					  if (insideIDL && insideCppQuote)
  					  {
					    BEGIN(EndCppQuote);
					  }
					  else
					  {
                                            lastStringContext=YY_START;
  					    current->initializer=scanYYtext; 
  					    pCopyQuotedGString=&current->initializer;
					    BEGIN(CopyGString);
					  }
					}
	YY_BREAK
case 230:
YY_RULE_SETUP
#line 2579 "scanner.l"
{
  					  current->initializer+=scanYYtext; 
					}
	YY_BREAK
case 231:
YY_RULE_SETUP
#line 2582 "scanner.l"
{
  					  current->initializer+=scanYYtext; 
					}
	YY_BREAK
case 232:
YY_RULE_SETUP
#line 2585 "scanner.l"
{
  					  current->initializer+=scanYYtext; 
  					}
	YY_BREAK
case 233:
YY_RULE_SETUP
#line 2588 "scanner.l"
{
  					  initBracketCount++;
  					  current->initializer+=*scanYYtext; 
  					}
	YY_BREAK
case 234:
YY_RULE_SETUP
#line 2592 "scanner.l"
{
  					  initBracketCount--;
  					  current->initializer+=*scanYYtext; 
  					}
	YY_BREAK
case 235:
YY_RULE_SETUP
#line 2596 "scanner.l"
{	
  					  if (insidePHP)
					  {
					    current->initializer+=scanYYtext; 
                                            pCopyQuotedGString = &current->initializer;
                                            lastStringContext=YY_START;
					    BEGIN(CopyPHPGString);
					  }
					  else
					  {
					    current->initializer+=scanYYtext; 
					  }
  					}
	YY_BREAK
case 236:
YY_RULE_SETUP
#line 2609 "scanner.l"
{ 
                                          if (insidePHP) 
					  {
					    REJECT;
					  }
					  else
					  {  
					    current->initializer+=scanYYtext; 
					  }
                                        } 
	YY_BREAK
case 237:
/* rule 237 can match eol */
YY_RULE_SETUP
#line 2619 "scanner.l"
{
  					  current->initializer+=*scanYYtext;
                                          lineCount();
  					}
	YY_BREAK
case 238:
YY_RULE_SETUP
#line 2623 "scanner.l"
{ 
  					  //printf("insideCS=%d\n",insideCS);
  					  current->initializer+=scanYYtext;
                                          if (!insideCS && !insideObjC) 
					  {
					    REJECT;
					  }
					  else
					  {
					    // C#/ObjC verbatim string
					    lastSkipVerbStringContext=YY_START;
					    pSkipVerbString=&current->initializer;
					    BEGIN(SkipVerbString);
					  }
					}
	YY_BREAK
case 239:
YY_RULE_SETUP
#line 2638 "scanner.l"
{
					  *pSkipVerbString+=scanYYtext;
					}
	YY_BREAK
case 240:
YY_RULE_SETUP
#line 2641 "scanner.l"
{ // quote escape
					  *pSkipVerbString+=scanYYtext;
					}
	YY_BREAK
case 241:
YY_RULE_SETUP
#line 2644 "scanner.l"
{
					  *pSkipVerbString+=*scanYYtext;
					  BEGIN(lastSkipVerbStringContext);
					}
	YY_BREAK
case 242:
/* rule 242 can match eol */
YY_RULE_SETUP
#line 2648 "scanner.l"
{
					  *pSkipVerbString+=*scanYYtext;
                                          lineCount();
  					}
	YY_BREAK
case 243:
YY_RULE_SETUP
#line 2652 "scanner.l"
{
					  *pSkipVerbString+=*scanYYtext;
  					}
	YY_BREAK
case 244:
YY_RULE_SETUP
#line 2655 "scanner.l"
{
					  if (insidePHP)
					    BEGIN( FindMembersPHP );
					  else
					    current->initializer+=scanYYtext;
  					}
	YY_BREAK
case 245:
YY_RULE_SETUP
#line 2661 "scanner.l"
{ 
  					  current->initializer+=*scanYYtext; 
					}
	YY_BREAK
/* generic quoted string copy rules */
case 246:
YY_RULE_SETUP
#line 2666 "scanner.l"
{
  					  *pCopyQuotedString+=scanYYtext;
  					}
	YY_BREAK
case 247:
YY_RULE_SETUP
#line 2669 "scanner.l"
{ 
  					  *pCopyQuotedString+=*scanYYtext;
  					  BEGIN( lastStringContext ); 
					}
	YY_BREAK
case 248:
YY_RULE_SETUP
#line 2673 "scanner.l"
{ 
  					  *pCopyQuotedString+=*scanYYtext;
  					  BEGIN( lastStringContext ); 
					}
	YY_BREAK
case 249:
YY_RULE_SETUP
#line 2677 "scanner.l"
{
  					  *pCopyQuotedString+=scanYYtext;
  					}
	YY_BREAK
case 250:
/* rule 250 can match eol */
YY_RULE_SETUP
#line 2680 "scanner.l"
{
  					  *pCopyQuotedString+=*scanYYtext;
                                          lineCount();
  					}
	YY_BREAK
case 251:
YY_RULE_SETUP
#line 2684 "scanner.l"
{
  					  *pCopyQuotedString+=*scanYYtext;
  					}
	YY_BREAK
/* generic quoted growable string copy rules */
case 252:
YY_RULE_SETUP
#line 2689 "scanner.l"
{
  					  *pCopyQuotedGString+=scanYYtext;
  					}
	YY_BREAK
case 253:
YY_RULE_SETUP
#line 2692 "scanner.l"
{ 
  					  *pCopyQuotedGString+=*scanYYtext;
  					  BEGIN( lastStringContext ); 
					}
	YY_BREAK
case 254:
YY_RULE_SETUP
#line 2696 "scanner.l"
{ 
  					  *pCopyQuotedGString+=*scanYYtext;
  					  BEGIN( lastStringContext ); 
					}
	YY_BREAK
case 255:
YY_RULE_SETUP
#line 2700 "scanner.l"
{
  					  *pCopyQuotedGString+=scanYYtext;
  					}
	YY_BREAK
case 256:
/* rule 256 can match eol */
YY_RULE_SETUP
#line 2703 "scanner.l"
{
  					  *pCopyQuotedGString+=*scanYYtext;
                                          lineCount();
  					}
	YY_BREAK
case 257:
YY_RULE_SETUP
#line 2707 "scanner.l"
{
  					  *pCopyQuotedGString+=*scanYYtext;
  					}
	YY_BREAK
/* generic round bracket list copy rules */
case 258:
YY_RULE_SETUP
#line 2712 "scanner.l"
{
					  *pCopyRoundString+=*scanYYtext;
  					  pCopyQuotedString=pCopyRoundString;
					  lastStringContext=YY_START;
					  BEGIN(CopyString);
					}
	YY_BREAK
case 259:
YY_RULE_SETUP
#line 2718 "scanner.l"
{
  					  *pCopyRoundString+=*scanYYtext;
  					  roundCount++;
  					}
	YY_BREAK
case 260:
YY_RULE_SETUP
#line 2722 "scanner.l"
{
  					  *pCopyRoundString+=*scanYYtext;
					  if (--roundCount<0)
					    BEGIN(lastRoundContext);
  					}
	YY_BREAK
case 261:
/* rule 261 can match eol */
YY_RULE_SETUP
#line 2727 "scanner.l"
{
                                          lineCount();
  					  *pCopyRoundString+=*scanYYtext;
  					}
	YY_BREAK
case 262:
YY_RULE_SETUP
#line 2731 "scanner.l"
{
  					  if (insidePHP)
					  {
					    current->initializer+=scanYYtext; 
                                            pCopyQuotedString = pCopyRoundString;
                                            lastStringContext=YY_START;
					    BEGIN(CopyPHPString);
					  }
					  else
					  {
					    *pCopyRoundString+=scanYYtext;
					  }
  					}
	YY_BREAK
case 263:
YY_RULE_SETUP
#line 2744 "scanner.l"
{ 
                                          if (insidePHP)
					  {
					    REJECT;
					  }
					  else
					  {
                                            *pCopyRoundString+=scanYYtext; 
					  }
                                        }
	YY_BREAK
case 264:
YY_RULE_SETUP
#line 2754 "scanner.l"
{
  					  *pCopyRoundString+=scanYYtext;
  					}
	YY_BREAK
case 265:
YY_RULE_SETUP
#line 2757 "scanner.l"
{
  					  *pCopyRoundString+=*scanYYtext;
  					}
	YY_BREAK
/* generic round bracket list copy rules for growable strings */
case 266:
YY_RULE_SETUP
#line 2762 "scanner.l"
{
					  *pCopyRoundGString+=*scanYYtext;
  					  pCopyQuotedGString=pCopyRoundGString;
					  lastStringContext=YY_START;
					  BEGIN(CopyGString);
					}
	YY_BREAK
case 267:
YY_RULE_SETUP
#line 2768 "scanner.l"
{
  					  *pCopyRoundGString+=*scanYYtext;
  					  roundCount++;
  					}
	YY_BREAK
case 268:
YY_RULE_SETUP
#line 2772 "scanner.l"
{
  					  *pCopyRoundGString+=*scanYYtext;
					  if (--roundCount<0)
					    BEGIN(lastRoundContext);
  					}
	YY_BREAK
case 269:
/* rule 269 can match eol */
YY_RULE_SETUP
#line 2777 "scanner.l"
{
                                          lineCount();
  					  *pCopyRoundGString+=*scanYYtext;
  					}
	YY_BREAK
case 270:
YY_RULE_SETUP
#line 2781 "scanner.l"
{
  					  if (insidePHP)
					  {
					    current->initializer+=scanYYtext; 
                                            pCopyQuotedGString = pCopyRoundGString;
                                            lastStringContext=YY_START;
					    BEGIN(CopyPHPGString);
					  }
					  else
					  {
					    *pCopyRoundGString+=scanYYtext;
					  }
  					}
	YY_BREAK
case 271:
YY_RULE_SETUP
#line 2794 "scanner.l"
{ 
                                          if (insidePHP)
					  {
					    REJECT;
					  }
					  else
					  {
                                            *pCopyRoundGString+=scanYYtext; 
					  }
                                        }
	YY_BREAK
case 272:
YY_RULE_SETUP
#line 2804 "scanner.l"
{
  					  *pCopyRoundGString+=scanYYtext;
  					}
	YY_BREAK
case 273:
YY_RULE_SETUP
#line 2807 "scanner.l"
{
  					  *pCopyRoundGString+=*scanYYtext;
  					}
	YY_BREAK
/* generic curly bracket list copy rules */
case 274:
YY_RULE_SETUP
#line 2812 "scanner.l"
{
					  *pCopyCurlyString+=*scanYYtext;
  					  pCopyQuotedString=pCopyCurlyString;
					  lastStringContext=YY_START;
					  BEGIN(CopyString);
					}
	YY_BREAK
case 275:
YY_RULE_SETUP
#line 2818 "scanner.l"
{
					  *pCopyCurlyString+=*scanYYtext;
  					  if (insidePHP)
					  {
					    pCopyQuotedString=pCopyCurlyString;
					    lastStringContext=YY_START;
					    BEGIN(CopyPHPString);
					  }
					}
	YY_BREAK
case 276:
YY_RULE_SETUP
#line 2827 "scanner.l"
{
  					  *pCopyCurlyString+=*scanYYtext;
					  curlyCount++;
  					}
	YY_BREAK
case 277:
YY_RULE_SETUP
#line 2831 "scanner.l"
{
					  *pCopyCurlyString+=*scanYYtext;
					  if (--curlyCount<0)
					    BEGIN(lastCurlyContext); 
  					}
	YY_BREAK
case 278:
YY_RULE_SETUP
#line 2836 "scanner.l"
{ if (insidePHP) 
                                          { 
					    REJECT; 
					  } 
					  else 
					  {
					    *pCopyCurlyString+=scanYYtext; 
					  }
                                        }
	YY_BREAK
case 279:
YY_RULE_SETUP
#line 2845 "scanner.l"
{
  					  *pCopyCurlyString+=scanYYtext;
  					}
	YY_BREAK
case 280:
YY_RULE_SETUP
#line 2848 "scanner.l"
{ *pCopyCurlyString+=scanYYtext; }
	YY_BREAK
case 281:
/* rule 281 can match eol */
YY_RULE_SETUP
#line 2849 "scanner.l"
{
                                          lineCount();
					  *pCopyCurlyString+=*scanYYtext;
  					}
	YY_BREAK
case 282:
YY_RULE_SETUP
#line 2853 "scanner.l"
{
					  *pCopyCurlyString+=*scanYYtext;
  					}
	YY_BREAK
/* generic curly bracket list copy rules for growable strings */
case 283:
/* rule 283 can match eol */
YY_RULE_SETUP
#line 2858 "scanner.l"
{ // start of included file marker
                                        }
	YY_BREAK
case 284:
/* rule 284 can match eol */
YY_RULE_SETUP
#line 2860 "scanner.l"
{ // end of included file marker
					  QCString line = QCString(scanYYtext);
					  int s = line.find(' ');
					  int e = line.find('"',s);
					  yyLineNr = line.mid(s,e-s).toInt();
					  if (scanYYtext[scanYYleng-1]=='\n')
					  {
					    yyLineNr++;
                                            g_column=0;
					  }
  					}
	YY_BREAK
case 285:
YY_RULE_SETUP
#line 2871 "scanner.l"
{
					  *pCopyCurlyGString+=*scanYYtext;
  					  pCopyQuotedGString=pCopyCurlyGString;
					  lastStringContext=YY_START;
					  BEGIN(CopyGString);
					}
	YY_BREAK
case 286:
YY_RULE_SETUP
#line 2877 "scanner.l"
{
					  *pCopyCurlyGString+=*scanYYtext;
  					  if (insidePHP)
					  {
					    pCopyQuotedGString=pCopyCurlyGString;
					    lastStringContext=YY_START;
					    BEGIN(CopyPHPGString);
					  }
					}
	YY_BREAK
case 287:
YY_RULE_SETUP
#line 2886 "scanner.l"
{
  					  *pCopyCurlyGString+=*scanYYtext;
					  curlyCount++;
  					}
	YY_BREAK
case 288:
YY_RULE_SETUP
#line 2890 "scanner.l"
{
					  *pCopyCurlyGString+=*scanYYtext;
					  if (--curlyCount<0)
					    BEGIN(lastCurlyContext); 
  					}
	YY_BREAK
case 289:
YY_RULE_SETUP
#line 2895 "scanner.l"
{ if (insidePHP) 
                                          { 
					    REJECT; 
					  } 
					  else 
					  {
					    *pCopyCurlyGString+=scanYYtext; 
					  }
                                        }
	YY_BREAK
case 290:
YY_RULE_SETUP
#line 2904 "scanner.l"
{
  					  *pCopyCurlyGString+=scanYYtext;
  					}
	YY_BREAK
case 291:
YY_RULE_SETUP
#line 2907 "scanner.l"
{ *pCopyCurlyGString+=scanYYtext; }
	YY_BREAK
case 292:
/* rule 292 can match eol */
YY_RULE_SETUP
#line 2908 "scanner.l"
{
                                          lineCount();
					  *pCopyCurlyGString+=*scanYYtext;
  					}
	YY_BREAK
case 293:
YY_RULE_SETUP
#line 2912 "scanner.l"
{
					  *pCopyCurlyGString+=*scanYYtext;
  					}
	YY_BREAK
/* ---------------------- */
case 294:
YY_RULE_SETUP
#line 2919 "scanner.l"
{
  					  if (current->type.isEmpty()) // anonymous padding field, e.g. "int :7;"
					  {
					    addType(current);
					    current->name.sprintf("__pad%d__",padCount++);
					  }
  					  BEGIN(BitFields);
					  current->bitfields+=":";
  					}
	YY_BREAK
case 295:
YY_RULE_SETUP
#line 2928 "scanner.l"
{
  					  current->bitfields+=*scanYYtext;
  					}
	YY_BREAK
case 296:
YY_RULE_SETUP
#line 2931 "scanner.l"
{ 
  					  QCString oldType = current->type.copy();
					  if (current->bodyLine==-1)
					  {
					    current->bodyLine = yyLineNr;
					  }
                                          if ( insidePHP && current->type.left(3) == "var" )
                                          {
                                            current->type = current->type.mid(3);
                                          }
					  if (isTypedef && current->type.left(8)!="typedef ")
					  {
					    current->type.prepend("typedef ");
					  }
					  bool needNewCurrent=FALSE;
					  if (!current->name.isEmpty() && current->section!=Entry::ENUM_SEC)
					  {
					    current->type=current->type.simplifyWhiteSpace();
					    current->args=removeRedundantWhiteSpace(current->args);
					    current->name=current->name.stripWhiteSpace();
					    if (current->section==Entry::CLASS_SEC) // remove spec for "struct Bla bla;"
					    {
					    	current->spec = 0;
					    }
					    current->section = Entry::VARIABLE_SEC ;
					    current->fileName = yyFileName;
					    current->startLine = yyLineNr;
					    current_root->addSubEntry( current ) ;
					    needNewCurrent=TRUE;
					  }
					  if ( *scanYYtext == ',')
					  {
					    bool stat = current->stat;
					    if (needNewCurrent)
					    {
					      current = new Entry(*current);
					      initEntry();
					    }
					    current->stat = stat; // the static attribute holds for all variables
					    current->name.resize(0);
					    current->args.resize(0);
					    current->brief.resize(0);
					    current->doc.resize(0);
					    current->initializer.resize(0);
					    current->bitfields.resize(0);
					    int i=oldType.length(); 
					    while (i>0 && (oldType[i-1]=='*' || oldType[i-1]=='&' || oldType[i-1]==' ')) i--;
					    current->type = oldType.left(i);
					  }
					  else
					  {
					    if (needNewCurrent)
					    {
					      current = new Entry ;
					    }
					    else if (current->groups)
					    {
					      current->groups->clear();
					    }
					    initEntry();
					  }
					}
	YY_BREAK
case 297:
YY_RULE_SETUP
#line 2994 "scanner.l"
{ 
  					  if (!insideCS &&  
					      (current->name.isEmpty() || 
					       current->name=="typedef"
					      )
					     ) // IDL function property
 					  {
          				    squareCount=1;
					    lastSquareContext = YY_START;
					    idlAttr.resize(0);
					    idlProp.resize(0);
					    current->mtype = mtype;
					    BEGIN( IDLAttribute );
					  }
                                          else if (insideCS &&
                                                  current->name.isEmpty())
                                          {
                                            squareCount=1;
                                            lastSquareContext = YY_START;
                                            // Skip the C# attribute
                                            // for this member
                                            current->args.resize(0);
                                            BEGIN( SkipSquare );
                                          }
					  else
					  {
  					    current->args += scanYYtext ;
					    squareCount=1;
					    BEGIN( Array ) ;
					  }
					}
	YY_BREAK
case 298:
YY_RULE_SETUP
#line 3025 "scanner.l"
{
  					  // end of IDL function attribute
					  if (--squareCount<=0)
					  {
					    lineCount();
					    if (current->mtype == Property)
					      BEGIN( IDLPropName );
					    else
					      BEGIN( lastSquareContext );
					  }
					}
	YY_BREAK
case 299:
YY_RULE_SETUP
#line 3036 "scanner.l"
{
                                          if (Config_getBool("IDL_PROPERTY_SUPPORT"))
					  {
					    current->mtype = Property;
					  }
					  current->spec |= Entry::Settable;
					}
	YY_BREAK
case 300:
YY_RULE_SETUP
#line 3043 "scanner.l"
{
                                          if (Config_getBool("IDL_PROPERTY_SUPPORT"))
					  {
					    current->mtype = Property;
					  }
					  current->spec |= Entry::Gettable;
					}
	YY_BREAK
case 301:
YY_RULE_SETUP
#line 3050 "scanner.l"
{
					}
	YY_BREAK
case 302:
/* rule 302 can match eol */
YY_RULE_SETUP
#line 3052 "scanner.l"
{
					  // return type (probably HRESULT) - skip it
					}
	YY_BREAK
case 303:
/* rule 303 can match eol */
YY_RULE_SETUP
#line 3055 "scanner.l"
{
  					  current->name = scanYYtext;
					  current->name = current->name.left(current->name.length()-1).stripWhiteSpace();
  					  current->startLine = yyLineNr;
					  BEGIN( IDLProp );
					}
	YY_BREAK
case 304:
/* rule 304 can match eol */
YY_RULE_SETUP
#line 3061 "scanner.l"
{  // attribute of a parameter
					   idlAttr = scanYYtext;
					   idlAttr=idlAttr.stripWhiteSpace();
					}
	YY_BREAK
case 305:
YY_RULE_SETUP
#line 3065 "scanner.l"
{  // property type
					   idlProp = scanYYtext;
					}
	YY_BREAK
case 306:
/* rule 306 can match eol */
YY_RULE_SETUP
#line 3068 "scanner.l"
{  // Rare: Another parameter ([propput] HRESULT Item(int index, [in] Type theRealProperty);)
					  if (!current->args)
					    current->args = "(";
					  else
					    current->args += ", ";
					  current->args += idlAttr;
					  current->args += " ";
					  current->args += idlProp;	// prop was actually type of extra parameter
					  current->args += " ";
					  current->args += scanYYtext;
					  current->args = current->args.left(current->args.length() - 1);	// strip comma
					  idlProp.resize(0);
					  idlAttr.resize(0);
					  BEGIN( IDLProp );
					}
	YY_BREAK
case 307:
/* rule 307 can match eol */
YY_RULE_SETUP
#line 3083 "scanner.l"
{
					  // the parameter name for the property - just skip.
					}
	YY_BREAK
case 308:
YY_RULE_SETUP
#line 3086 "scanner.l"
{
					  current->fileName   = yyFileName;
					  current->type		= idlProp;
  					  current->args       = current->args.simplifyWhiteSpace();
  					  if (current->args)
  					    current->args += ")";
  					  current->name       = current->name.stripWhiteSpace();
					  current->section    = Entry::VARIABLE_SEC;
					  current_root->addSubEntry(current);
					  current             = new Entry;
					  initEntry();
					  BEGIN( FindMembers );
					}
	YY_BREAK
case 309:
YY_RULE_SETUP
#line 3099 "scanner.l"
{ // spaces, *, or other stuff
  					  //idlProp+=scanYYtext;
 					}
	YY_BREAK
case 310:
YY_RULE_SETUP
#line 3102 "scanner.l"
{ current->args += *scanYYtext ;
					  if (--squareCount<=0)
	                                     BEGIN( FindMembers ) ;
					}
	YY_BREAK
case 311:
YY_RULE_SETUP
#line 3106 "scanner.l"
{ current->args += *scanYYtext ;
					  if (--squareCount<=0)
	                                     BEGIN( Function ) ;
					}
	YY_BREAK
case 312:
YY_RULE_SETUP
#line 3110 "scanner.l"
{ current->args += *scanYYtext ;
					  squareCount++;	
					}
	YY_BREAK
case 313:
YY_RULE_SETUP
#line 3113 "scanner.l"
{ current->args += *scanYYtext ; }
	YY_BREAK
case 314:
YY_RULE_SETUP
#line 3114 "scanner.l"
{ squareCount++; }
	YY_BREAK
case 315:
YY_RULE_SETUP
#line 3115 "scanner.l"
{
  					  if (--squareCount<=0)
					    BEGIN( lastSquareContext );
  					}
	YY_BREAK
case 316:
YY_RULE_SETUP
#line 3119 "scanner.l"
{
  					  lastStringContext=YY_START;
  				          BEGIN( SkipString ); 
					}
	YY_BREAK
case 317:
YY_RULE_SETUP
#line 3123 "scanner.l"

	YY_BREAK
case 318:
YY_RULE_SETUP
#line 3124 "scanner.l"
{ addType( current ) ;
					  current->type += scanYYtext ;
					  BEGIN( Sharp ) ;
					}
	YY_BREAK
case 319:
YY_RULE_SETUP
#line 3128 "scanner.l"
{ current->type += *scanYYtext ;
					  if (--sharpCount<=0)
	                                     BEGIN( FindMembers ) ;
					}
	YY_BREAK
case 320:
YY_RULE_SETUP
#line 3132 "scanner.l"
{ current->type += *scanYYtext ;
					  sharpCount++;	
					}
	YY_BREAK
case 321:
/* rule 321 can match eol */
YY_RULE_SETUP
#line 3135 "scanner.l"
{
  					  lineCount();
					}
	YY_BREAK
case 322:
YY_RULE_SETUP
#line 3138 "scanner.l"
{ current->type += *scanYYtext ; }
	YY_BREAK
case 323:
YY_RULE_SETUP
#line 3139 "scanner.l"
{
  					  current->bodyLine = yyLineNr;
  					  current->name     = scanYYtext;
					}
	YY_BREAK
case 324:
YY_RULE_SETUP
#line 3143 "scanner.l"
{
  					  // Java enum initializer
  					  unput('(');
  					  lastInitializerContext = YY_START;
					  initBracketCount=0;
  					  BEGIN(ReadInitializer);
  					}
	YY_BREAK
case 325:
YY_RULE_SETUP
#line 3150 "scanner.l"
{
  					  lastInitializerContext = YY_START;
					  initBracketCount=0;
  					  BEGIN(ReadInitializer);
  					}
	YY_BREAK
case 326:
YY_RULE_SETUP
#line 3155 "scanner.l"
{
  					  if (insideJava)  // last enum field in Java class
					  {
					    if (!current->name.isEmpty())
					    {
					      current->fileName   = yyFileName;
					      current->startLine  = yyLineNr;
					      current->type       = "@"; // enum marker
					      current->args       = current->args.simplifyWhiteSpace();
					      current->name       = current->name.stripWhiteSpace();
					      current->section    = Entry::VARIABLE_SEC;
					      current_root->addSubEntry(current);
					      current             = new Entry ;
					      initEntry();
					    }

					    BEGIN( FindMembers );
					  }
					  else
					  {
					    REJECT;
					  }
  					}
	YY_BREAK
case 327:
/* rule 327 can match eol */
YY_RULE_SETUP
#line 3178 "scanner.l"
{ 
                                          lineCount();
                                        }
	YY_BREAK
case 328:
YY_RULE_SETUP
#line 3181 "scanner.l"

	YY_BREAK
case 329:
YY_RULE_SETUP
#line 3182 "scanner.l"
{
					  //printf("adding `%s' `%s' `%s' to enum `%s' (mGrpId=%d)\n",
					  //     current->type.data(), current->name.data(),
					  //     current->args.data(), current_root->name.data(),current->mGrpId);
  					  if (!current->name.isEmpty())
					  {
					    current->fileName   = yyFileName;
					    current->startLine  = yyLineNr;
					    if (!(current_root->spec&Entry::Enum))
					    {
					      current->type       = "@"; // enum marker
					    }
  					    current->args       = current->args.simplifyWhiteSpace();
  					    current->name       = current->name.stripWhiteSpace();
					    current->section    = Entry::VARIABLE_SEC;
					    // add to the scope of the enum
					    current_root->addSubEntry(current);
					    if (!insideCS && !insideJava &&
                                                !(current_root->spec&Entry::Strong)) 
                                                // for C# and Java 1.5+ enum values always have to be explicitly qualified,
                                                // same for C++11 style enums (enum class Name {})
					    {
					      current             = new Entry(*current);
					      // add to the scope surrounding the enum (copy!)
					      current_root->parent()->addSubEntry(current);
					    }
					    current             = new Entry ;
					    initEntry();
					  }
					  else // probably a redundant , 
					  {
				     	    current->reset();
					    initEntry();
					  }
  					}
	YY_BREAK
case 330:
YY_RULE_SETUP
#line 3217 "scanner.l"
{ // attribute list in IDL
					  squareCount=1;
					  lastSquareContext = YY_START;
					  BEGIN(SkipSquare);
  					}
	YY_BREAK
/*
<FindFieldArg>","			{ unput(*scanYYtext); BEGIN(FindFields); }
  */
case 331:
YY_RULE_SETUP
#line 3225 "scanner.l"
{ current->program += scanYYtext ; }
	YY_BREAK
case 332:
YY_RULE_SETUP
#line 3226 "scanner.l"
{ current->program += scanYYtext ; }
	YY_BREAK
case 333:
YY_RULE_SETUP
#line 3227 "scanner.l"
{ if (!insidePHP) 
					    REJECT;
					  // append PHP comment.
					  current->program += scanYYtext ;
					}
	YY_BREAK
case 334:
YY_RULE_SETUP
#line 3232 "scanner.l"
{ current->program += scanYYtext ; 
                                          pSkipVerbString = &current->program;
                                          lastSkipVerbStringContext=YY_START;
                                          BEGIN( SkipVerbString );
					}
	YY_BREAK
case 335:
YY_RULE_SETUP
#line 3237 "scanner.l"
{ if (insidePHP)
                                          {
                                            current->program += scanYYtext ; 
                                            pCopyHereDocGString = &current->program;
                                            lastHereDocContext=YY_START;
                                            BEGIN( CopyHereDoc );
                                          }
                                          else
                                          {
                                            REJECT;
                                          }
					}
	YY_BREAK
case 336:
YY_RULE_SETUP
#line 3249 "scanner.l"
{ current->program += scanYYtext ; 
                                          pCopyQuotedGString = &current->program;
                                          lastStringContext=YY_START;
                                          BEGIN( CopyGString );
					}
	YY_BREAK
case 337:
YY_RULE_SETUP
#line 3254 "scanner.l"
{ current->program += scanYYtext ;
					  lastContext = YY_START ;
					  BEGIN( Comment ) ;
					}
	YY_BREAK
case 338:
/* rule 338 can match eol */
YY_RULE_SETUP
#line 3258 "scanner.l"
{ current->program += scanYYtext ;
					  ++yyLineNr ;
					  lastContext = YY_START ;
					  BEGIN( Comment ) ;
					}
	YY_BREAK
case 339:
YY_RULE_SETUP
#line 3263 "scanner.l"
{
  					  if (!insidePHP)
					  {
					    current->program += scanYYtext;
					  }
					  else
					  { // begin of single quoted string
					    current->program += scanYYtext;
                                            pCopyQuotedGString = &current->program;
                                            lastStringContext=YY_START;
					    BEGIN(CopyPHPGString);
					  }
  					}
	YY_BREAK
case 340:
YY_RULE_SETUP
#line 3276 "scanner.l"
{ 
                                              if (insidePHP) 
					      {
						REJECT; // for PHP code single quotes 
					                // are used for strings of arbitrary length
					      }
					      else
					      {
                                                current->program += scanYYtext; 
					      }
                                            }
	YY_BREAK
case 341:
YY_RULE_SETUP
#line 3287 "scanner.l"
{ current->program += scanYYtext ;
					  ++curlyCount ;
					}
	YY_BREAK
case 342:
YY_RULE_SETUP
#line 3290 "scanner.l"
{
					  current->program += scanYYtext ;
					  --curlyCount ;
  					}
	YY_BREAK
case 343:
YY_RULE_SETUP
#line 3294 "scanner.l"
{ //err("ReadBody count=%d\n",curlyCount);
  					  if ( curlyCount>0 )
					  {
					    current->program += scanYYtext ;
					    --curlyCount ;
					  }
					  else
					  {
					    current->endBodyLine = yyLineNr;
					    QCString &cn = current->name;
					    QCString rn = current_root->name.copy();
					    //printf("cn=`%s' rn=`%s' isTypedef=%d\n",cn.data(),rn.data(),isTypedef);
					    if (!cn.isEmpty() && !rn.isEmpty())
					    {
					      prependScope();
					    }
					    if (isTypedef && cn.isEmpty())
					    {
					      //printf("Typedef Name\n");
					      BEGIN( TypedefName );
					    }
					    else
					    {
					      if ((current->section == Entry::ENUM_SEC) || (current->spec&Entry::Enum))
					      {
					        current->program+=','; // add field terminator
					      }
					      // add compound definition to the tree
					      current->args=removeRedundantWhiteSpace(current->args);
					                // was: current->args.simplifyWhiteSpace();
  					      current->type = current->type.simplifyWhiteSpace();
  					      current->name = current->name.stripWhiteSpace();
					      //printf("adding `%s' `%s' `%s' brief=%s insideObjC=%d %x\n",current->type.data(),current->name.data(),current->args.data(),current->brief.data(),insideObjC,current->section);
					      if (insideObjC && 
						  ((current->spec&Entry::Interface) || (current->spec==Entry::Category))
						 ) // method definition follows
					      {
				                BEGIN( ReadBodyIntf ) ;
					      }
					      else
					      {
					        current_root->addSubEntry( current ) ;
					        memspecEntry = current;
						current = new Entry(*current);
						if (current->section==Entry::NAMESPACE_SEC || 
						    (current->spec==Entry::Interface) ||
						    insideJava || insidePHP || insideCS || insideD || insideJS
						   )
						{ // namespaces and interfaces and java classes ends with a closing bracket without semicolon
						  current->reset();
						  initEntry();
						  memspecEntry = 0;
						  BEGIN( FindMembers ) ;
						}
						else
						{
						  if (!isTypedef && cn.find('@')==-1) // not typedef or unnamed struct
						  {
						    // enabled the next two lines for bug 623424
						    current->doc.resize(0);
						    current->brief.resize(0);
						  }
						  BEGIN( MemberSpec ) ;
						}
					      }
					    }
					  }
					}
	YY_BREAK
case 344:
/* rule 344 can match eol */
YY_RULE_SETUP
#line 3362 "scanner.l"
{ //err("ReadBody count=%d\n",curlyCount);
					  lineCount();
  					  if ( curlyCount>0 )
					  {
					    current->program += scanYYtext ;
					    --curlyCount ;
					  }
					  else
					  {
					    isTypedef = TRUE;
					    current->endBodyLine = yyLineNr;
					    QCString &cn = current->name;
					    QCString rn = current_root->name.copy();
					    if (!cn.isEmpty() && !rn.isEmpty())
					    {
					      prependScope();
					    }
					    BEGIN( TypedefName );
					  }
					}
	YY_BREAK
case 345:
/* rule 345 can match eol */
YY_RULE_SETUP
#line 3382 "scanner.l"
{ // late "const" or "volatile" keyword
					  lineCount();
  					  current->type.prepend(scanYYtext);
  					}
	YY_BREAK
case 346:
YY_RULE_SETUP
#line 3386 "scanner.l"
{
					  if ((current->section == Entry::ENUM_SEC) || (current->spec&Entry::Enum))
					  {
					    current->program+=","; // add field terminator
					  }
  				          current->name=scanYYtext;
					  prependScope();
  					  current->args = current->args.simplifyWhiteSpace();
  					  current->type = current->type.simplifyWhiteSpace();
					  //printf("Adding compound %s %s %s\n",current->type.data(),current->name.data(),current->args.data());
					  current_root->addSubEntry( current ) ;
					  if (!firstTypedefEntry)
					  {
					    firstTypedefEntry = current;
					  }
					  current = new Entry;
					  initEntry();
					  isTypedef=TRUE; // to undo reset by initEntry()
  					  BEGIN(MemberSpecSkip); 
  					}
	YY_BREAK
case 347:
YY_RULE_SETUP
#line 3406 "scanner.l"
{ /* typedef of anonymous type */
					  current->name.sprintf("@%d",anonCount++);
					  if ((current->section == Entry::ENUM_SEC) || (current->spec&Entry::Enum))
					  {
					    current->program+=','; // add field terminator
					  }
					  // add compound definition to the tree
  					  current->args = current->args.simplifyWhiteSpace();
  					  current->type = current->type.simplifyWhiteSpace();
					  current_root->addSubEntry( current ) ;
					  memspecEntry = current;
					  current = new Entry(*current);
					  initEntry();
					  unput(';');
					  BEGIN( MemberSpec ) ;
  					}
	YY_BREAK
case 348:
/* rule 348 can match eol */
YY_RULE_SETUP
#line 3422 "scanner.l"
{ // the [] part could be improved.
  					  lineCount();
  					  int i=0,l=scanYYleng,j;
					  while (i<l && (!isId(scanYYtext[i]))) i++;
					  msName = QCString(scanYYtext).right(l-i).stripWhiteSpace();
					  j=msName.find("[");
					  if (j!=-1) 
					  {
					    msArgs=msName.right(msName.length()-j);
					    msName=msName.left(j);
					  }
					  msType=QCString(scanYYtext).left(i);

					  // handle *pName in: typedef { ... } name, *pName;
					  if (firstTypedefEntry) 
					  {
					    if (firstTypedefEntry->spec&Entry::Struct)
					    {
					      msType.prepend("struct "+firstTypedefEntry->name);
					    }
					    else if (firstTypedefEntry->spec&Entry::Union)
					    {
					      msType.prepend("union "+firstTypedefEntry->name);
					    }
					    else if (firstTypedefEntry->section==Entry::ENUM_SEC)
					    {
					      msType.prepend("enum "+firstTypedefEntry->name);
					    }
					    else
					    {
					      msType.prepend(firstTypedefEntry->name);
					    }
					  }
					}
	YY_BREAK
case 349:
YY_RULE_SETUP
#line 3456 "scanner.l"
{ // function with struct return type
  					  addType(current);
  					  current->name = msName;
					  current->spec = 0;
  					  unput('(');
					  BEGIN(FindMembers);
  					}
	YY_BREAK
case 350:
YY_RULE_SETUP
#line 3463 "scanner.l"
{
  					  if (msName.isEmpty() && !current->name.isEmpty())
					  { 
					    // see if the compound does not have a name or is inside another
					    // anonymous compound. If so we insert a 
					    // special `anonymous' variable.
					    //Entry *p=current_root;
					    Entry *p=current;
					    while (p)
					    {
					      // only look for class scopes, not namespace scopes
					      if ((p->section & Entry::COMPOUND_MASK) && !p->name.isEmpty())
					      {
						//printf("Trying scope `%s'\n",p->name.data());
						int i=p->name.findRev("::");
						int pi = (i==-1) ? 0 : i+2;
						if (p->name.at(pi)=='@')
						{
						  // anonymous compound inside -> insert dummy variable name
						  //printf("Adding anonymous variable for scope %s\n",p->name.data());
						  msName.sprintf("@%d",anonCount++); 
						  break;
						}
					      }
					      //p=p->parent;
					      if (p==current) p=current_root; else p=p->parent();
					    }
					  }
					  //printf("msName=%s current->name=%s\n",msName.data(),current->name.data());
					  if (!msName.isEmpty() 
					      /*&& msName!=current->name*/) // skip typedef T {} T;, removed due to bug608493
					  {
					    static bool typedefHidesStruct = Config_getBool("TYPEDEF_HIDES_STRUCT");
					    // case 1: typedef struct _S { ... } S_t; 
					    // -> omit typedef and use S_t as the struct name
					    if (typedefHidesStruct && 
						isTypedef && 
						((current->spec&(Entry::Struct|Entry::Union)) ||
						 current->section==Entry::ENUM_SEC )&&
						msType.stripWhiteSpace().isEmpty() && 
						memspecEntry)
					    {
					      memspecEntry->name=msName;
					    }
					    else // case 2: create a typedef field
					    {
					      Entry *varEntry=new Entry;
					      varEntry->lang = language;
					      varEntry->protection = current->protection ;
					      varEntry->mtype = current->mtype;
					      varEntry->virt = current->virt;
					      varEntry->stat = current->stat;
					      varEntry->section = Entry::VARIABLE_SEC;
					      varEntry->name = msName.stripWhiteSpace();
					      varEntry->type = current->type.simplifyWhiteSpace()+" ";
					      varEntry->args = msArgs; 
					      if (isTypedef)
					      {
						varEntry->type.prepend("typedef ");
						//  //printf("current->name = %s %s\n",current->name.data(),msName.data());
					      }
					      if (typedefHidesStruct &&
						  isTypedef &&
						  (current->spec&(Entry::Struct|Entry::Union)) &&
						  memspecEntry
						 ) // case 1: use S_t as type for pS_t in "typedef struct _S {} S_t, *pS_t;"
					      {
						varEntry->type+=memspecEntry->name+msType;
					      }
					      else // case 2: use _S as type for for pS_t
					      {
						varEntry->type+=current->name+msType;
					      }
					      varEntry->fileName = yyFileName;
					      varEntry->startLine = yyLineNr;
					      varEntry->doc = current->doc.copy();
					      varEntry->brief = current->brief.copy();
					      varEntry->mGrpId = current->mGrpId;

					      // deep copy group list
					      QListIterator<Grouping> gli(*current->groups);
					      Grouping *g;
					      for (;(g=gli.current());++gli)
					      {
						varEntry->groups->append(new Grouping(*g));
					      }
					      if (current->sli) // copy special list items
					      {
						QListIterator<ListItemInfo> li(*current->sli);
						ListItemInfo *lii;
						for (li.toFirst();(lii=li.current());++li)
						{
						  varEntry->addSpecialListItem(lii->type,lii->itemId);
						}
					      }

					      //printf("Add: type=`%s',name=`%s',args=`%s' brief=%s doc=%s\n",
					      //      varEntry->type.data(),varEntry->name.data(),
					      //      varEntry->args.data(),varEntry->brief.data(),varEntry->doc.data());
					      current_root->addSubEntry(varEntry);
					    }
					  }
					  if (*scanYYtext==';') // end of a struct/class ...
					  {
					    if (!isTypedef && msName.isEmpty() && memspecEntry && (current->section&Entry::COMPOUND_MASK))
					    { // case where a class/struct has a doc block after it
					      if (!current->doc.isEmpty())
					      {
					        memspecEntry->doc += current->doc;
					      }
					      if (!current->brief.isEmpty())
					      {
					        memspecEntry->brief += current->brief;
					      }
				  	    }
					    msType.resize(0);
					    msName.resize(0);
					    msArgs.resize(0);
					    isTypedef=FALSE;
					    firstTypedefEntry=0;
					    memspecEntry=0;
					    current->reset();
					    initEntry();
					    BEGIN( FindMembers );
					  }
					  else
					  {
					    current->doc.resize(0);
					    current->brief.resize(0);
					  }

  					}
	YY_BREAK
case 351:
YY_RULE_SETUP
#line 3595 "scanner.l"
{ 
  					  lastInitializerContext=YY_START;
					  initBracketCount=0;
  					  BEGIN(ReadInitializer);
  					  /* BEGIN(MemberSpecSkip); */
					}
	YY_BREAK
/*
<MemberSpecSkip>"{"			{
  					  curlyCount=0;
					  lastCurlyContext = MemberSpecSkip;
					  previous = current;
  					  BEGIN(SkipCurly);
  					}
  */
case 352:
YY_RULE_SETUP
#line 3609 "scanner.l"
{ BEGIN(MemberSpec); }
	YY_BREAK
case 353:
YY_RULE_SETUP
#line 3610 "scanner.l"
{ unput(';'); BEGIN(MemberSpec); }
	YY_BREAK
case 354:
/* rule 354 can match eol */
YY_RULE_SETUP
#line 3611 "scanner.l"
{ current->program += scanYYtext ;
					  lineCount() ;
					}
	YY_BREAK
case 355:
/* rule 355 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up scanYYtext */
(yy_c_buf_p) = yy_cp = yy_bp + 4;
YY_DO_BEFORE_ACTION; /* set up scanYYtext again */
YY_RULE_SETUP
#line 3614 "scanner.l"
{ // end of Objective C block
					  current_root->addSubEntry( current ) ;
  					  current=new Entry;
					  initEntry();
					  insideObjC=FALSE;
					  BEGIN( FindMembers ); 
  					}
	YY_BREAK
case 356:
YY_RULE_SETUP
#line 3621 "scanner.l"
{ current->program += scanYYtext ; }
	YY_BREAK
case 357:
/* rule 357 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up scanYYtext */
(yy_c_buf_p) = yy_cp = yy_bp + 1;
YY_DO_BEFORE_ACTION; /* set up scanYYtext again */
#line 3624 "scanner.l"
case 358:
/* rule 358 can match eol */
YY_RULE_SETUP
#line 3624 "scanner.l"
{   /* typedef void (A::*ptr_t)(args...) or int (*func(int))[], the ^ is for Obj-C blocks */
  					  if (insidePHP) // reference parameter
					  {
					    REJECT
					  }
					  else
					  {
					    current->bodyLine = yyLineNr;
					    lineCount();
					    addType(current);
					    funcPtrType=scanYYtext;
					    roundCount=0;
					    //current->type += scanYYtext;
					    BEGIN( FuncPtr );
					  }
  					}
	YY_BREAK
case 359:
/* rule 359 can match eol */
YY_RULE_SETUP
#line 3640 "scanner.l"
{
  					  current->name = scanYYtext;
					  if (nameIsOperator(current->name))
					  {
					    BEGIN( FuncPtrOperator );
					  }
					  else
					  {
					    if (current->name=="const" || current->name=="volatile")
					    {
					      funcPtrType += current->name;
					    }
					    else
					    {
					      BEGIN( EndFuncPtr );
					    }
					  }
  					}
	YY_BREAK
case 360:
YY_RULE_SETUP
#line 3658 "scanner.l"
{
  					  //printf("error: FuncPtr `%c' unexpected at line %d of %s\n",*scanYYtext,yyLineNr,yyFileName);
  					}
	YY_BREAK
case 361:
/* rule 361 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up scanYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up scanYYtext again */
YY_RULE_SETUP
#line 3661 "scanner.l"
{
  					  current->name += scanYYtext;
					  current->name = current->name.simplifyWhiteSpace();
					  lineCount();
  					}
	YY_BREAK
case 362:
/* rule 362 can match eol */
YY_RULE_SETUP
#line 3666 "scanner.l"
{
                                          lineCount();
  					  current->name += *scanYYtext;
  					}
	YY_BREAK
case 363:
YY_RULE_SETUP
#line 3670 "scanner.l"
{
  					  unput(*scanYYtext);
					  BEGIN( EndFuncPtr );
                                        }
	YY_BREAK
case 364:
YY_RULE_SETUP
#line 3674 "scanner.l"
{
  					  current->name += *scanYYtext;
  					}
	YY_BREAK
case 365:
/* rule 365 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up scanYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up scanYYtext again */
YY_RULE_SETUP
#line 3677 "scanner.l"
{ // a variable with extra braces
 					  lineCount();
					  current->type+=funcPtrType.data()+1;
  					  BEGIN(FindMembers);
  					}
	YY_BREAK
case 366:
/* rule 366 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up scanYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up scanYYtext again */
YY_RULE_SETUP
#line 3682 "scanner.l"
{ // a function pointer
  					  lineCount();
					  current->type+=funcPtrType+")";
					  BEGIN(FindMembers);
  					}
	YY_BREAK
case 367:
/* rule 367 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up scanYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up scanYYtext again */
YY_RULE_SETUP
#line 3687 "scanner.l"
{ // an array of variables
  					  lineCount();
					  current->type+=funcPtrType.data();
					  current->args += ")";
					  BEGIN(FindMembers);
  					}
	YY_BREAK
case 368:
YY_RULE_SETUP
#line 3693 "scanner.l"
{ // a function returning a function or 
                                          // a function returning a pointer to an array
  					  current->args += *scanYYtext ;
					  //roundCount=0;
					  //BEGIN( FuncFunc );
					  current->bodyLine = yyLineNr;
					  currentArgumentContext = FuncFuncEnd;
					  fullArgString=current->args.copy();
					  copyArgString=&current->args;
					  BEGIN( ReadFuncArgType ) ;
  					}
	YY_BREAK
case 369:
YY_RULE_SETUP
#line 3704 "scanner.l"
{
  					  funcPtrType+=scanYYtext;
  					}
	YY_BREAK
case 370:
YY_RULE_SETUP
#line 3707 "scanner.l"
{
  					  BEGIN(FindMembers);
  					}
	YY_BREAK
case 371:
YY_RULE_SETUP
#line 3710 "scanner.l"
{
  					  current->args += *scanYYtext ;
  					  ++roundCount;
					}
	YY_BREAK
case 372:
YY_RULE_SETUP
#line 3714 "scanner.l"
{
  					  current->args += *scanYYtext ;
  					  if ( roundCount )
					    --roundCount;
					  else
					  {
					    BEGIN(FuncFuncEnd);
					  }
  					}
	YY_BREAK
case 373:
/* rule 373 can match eol */
YY_RULE_SETUP
#line 3723 "scanner.l"
{
  					  lineCount();
					  current->type+=funcPtrType+")(";
					  BEGIN(FuncFuncType);
  					}
	YY_BREAK
case 374:
/* rule 374 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up scanYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up scanYYtext again */
YY_RULE_SETUP
#line 3728 "scanner.l"
{
  					  lineCount();
					  current->type+=funcPtrType.data()+1;
  					  BEGIN(Function);
  					}
	YY_BREAK
case 375:
/* rule 375 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up scanYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up scanYYtext again */
YY_RULE_SETUP
#line 3733 "scanner.l"
{ // function returning a pointer to an array
                                          lineCount();
					  current->type+=funcPtrType;
					  current->args+=")";
					  BEGIN(FuncFuncArray);
  					}
	YY_BREAK
case 376:
YY_RULE_SETUP
#line 3739 "scanner.l"
{
  					  current->args += *scanYYtext;
  					}
	YY_BREAK
case 377:
YY_RULE_SETUP
#line 3742 "scanner.l"
{
  					  current->type += *scanYYtext;
					  roundCount++;
  					}
	YY_BREAK
case 378:
YY_RULE_SETUP
#line 3746 "scanner.l"
{
  					  current->type += *scanYYtext;
  					  if (roundCount)
					    --roundCount;
					  else
					    BEGIN(Function);
					}
	YY_BREAK
case 379:
/* rule 379 can match eol */
YY_RULE_SETUP
#line 3753 "scanner.l"
{ lineCount() ; current->type += ", " ; }
	YY_BREAK
case 380:
/* rule 380 can match eol */
YY_RULE_SETUP
#line 3754 "scanner.l"
{ lineCount() ; current->type += ' ' ; }
	YY_BREAK
case 381:
YY_RULE_SETUP
#line 3755 "scanner.l"
{
  					  current->type += *scanYYtext;
  					}
	YY_BREAK
case 382:
/* rule 382 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up scanYYtext */
(yy_c_buf_p) = yy_cp = yy_bp + 1;
YY_DO_BEFORE_ACTION; /* set up scanYYtext again */
YY_RULE_SETUP
#line 3758 "scanner.l"
{ // for catching typedef void (__stdcall *f)() like definitions
                                          if (current->type.left(7)=="typedef" && current->bodyLine==-1) 
					    // the bodyLine check is to prevent this guard to be true more than once
					  {
  					    current->bodyLine = yyLineNr;
					    BEGIN( GetCallType );
					  }
					  else if (!current->name.isEmpty()) // normal function
					  {
					    current->args = scanYYtext;
					    current->bodyLine = yyLineNr;
					    currentArgumentContext = FuncQual;
					    fullArgString=current->args.copy();
					    copyArgString=&current->args;
					    BEGIN( ReadFuncArgType ) ;
					    //printf(">>> Read function arguments!\n");
					  }
					}
	YY_BREAK
case 383:
/* rule 383 can match eol */
YY_RULE_SETUP
#line 3776 "scanner.l"
{
  					  lineCount();
  					  addType(current);
					  funcPtrType="(";
					  funcPtrType+=scanYYtext;
					  roundCount=0;
					  BEGIN( FuncPtr );
  					}
	YY_BREAK
case 384:
YY_RULE_SETUP
#line 3784 "scanner.l"
{ 
                                          if (!current->name.isEmpty())
					  {
					    current->args = scanYYtext;
					    current->bodyLine = yyLineNr;
					    currentArgumentContext = FuncQual;
					    fullArgString=current->args.copy();
					    copyArgString=&current->args;
					    BEGIN( ReadFuncArgType ) ;
					    //printf(">>> Read function arguments current->argList->count()=%d\n",current->argList->count());
					  }
					}
	YY_BREAK
/*
<FindMembers>"("{BN}*("void"{BN}*)?")"	{
  					  lineCount();
  					  current->args = "()"; 
  					  BEGIN( FuncQual );
  					}
  */
/*- Function argument reading rules ---------------------------------------*/
case 385:
YY_RULE_SETUP
#line 3806 "scanner.l"
{ *copyArgString+=scanYYtext; 
  					  fullArgString+=scanYYtext;
  					}
	YY_BREAK
case 386:
YY_RULE_SETUP
#line 3809 "scanner.l"
{ *copyArgString+=scanYYtext; 
					  fullArgString+=scanYYtext;
					}
	YY_BREAK
case 387:
YY_RULE_SETUP
#line 3812 "scanner.l"
{ 
  					  *copyArgString+=scanYYtext; 
  					  fullArgString+=scanYYtext;
  					}
	YY_BREAK
case 388:
/* rule 388 can match eol */
YY_RULE_SETUP
#line 3816 "scanner.l"
{
  					  *copyArgString+=" ";
  					  fullArgString+=" ";
  					  lineCount();
  					}
	YY_BREAK
case 389:
YY_RULE_SETUP
#line 3821 "scanner.l"
{
  					  *copyArgString+=*scanYYtext;
  					  fullArgString+=*scanYYtext;
					  lastCopyArgStringContext = YY_START;
  					  BEGIN( CopyArgString );
  					}
	YY_BREAK
case 390:
YY_RULE_SETUP
#line 3827 "scanner.l"
{
  					  *copyArgString+=*scanYYtext;
  					  fullArgString+=*scanYYtext;
  					  argRoundCount=0; 
					  lastCopyArgContext = YY_START;
					  BEGIN( CopyArgRound ); 
  					}
	YY_BREAK
case 391:
YY_RULE_SETUP
#line 3834 "scanner.l"
{ 
  					  *copyArgString+=*scanYYtext;
  					  fullArgString+=*scanYYtext;
					  stringToArgumentList(fullArgString,current->argList);
					  if (insideJS)
					  {
					    fixArgumentListForJavaScript(current->argList);
					  }
                                          handleParametersCommentBlocks(current->argList);

					  /* remember the current documentation block, since
					     we could overwrite it with the documentation of
					     a function argument, which we then have to correct later
					     on
					   */
					  docBackup = current->doc;
					  briefBackup = current->brief;

					  BEGIN( currentArgumentContext );
					}
	YY_BREAK
/* a special comment */
case 392:
YY_RULE_SETUP
#line 3855 "scanner.l"
{ 
                                          if (currentArgumentContext==DefineEnd)
					  {
					    // for defines we interpret a comment
					    // as documentation for the define 
					    int i;for (i=scanYYleng-1;i>=0;i--)
					    {
					      unput(scanYYtext[i]);
					    }
					    stringToArgumentList(fullArgString,current->argList);
                                            handleParametersCommentBlocks(current->argList);
					    BEGIN( currentArgumentContext );
					  }
					  else // not a define
					  {
					    // for functions we interpret a comment
					    // as documentation for the argument
					    fullArgString+=scanYYtext;
					    lastCopyArgChar=0;
					    lastCommentInArgContext=YY_START;
					    if (scanYYtext[1]=='/')
					      BEGIN( CopyArgCommentLine );
					    else
					      BEGIN( CopyArgComment );
					  }
  					}
	YY_BREAK
/* a non-special comment */
case 393:
YY_RULE_SETUP
#line 3882 "scanner.l"
{ /* empty comment */ }
	YY_BREAK
case 394:
YY_RULE_SETUP
#line 3883 "scanner.l"
{
  					  lastCContext = YY_START;
					  BEGIN( SkipComment );
  					}
	YY_BREAK
case 395:
YY_RULE_SETUP
#line 3887 "scanner.l"
{
  					  lastCContext = YY_START;
					  BEGIN( SkipCxxComment );
  					}
	YY_BREAK
/*
<ReadFuncArgType,ReadTempArgs>"'#"	{ if (insidePHP)
                                            REJECT;
  					  *copyArgString+=scanYYtext; 
  					  fullArgString+=scanYYtext; 
					}
<ReadFuncArgType,ReadTempArgs>"#"	{
  					  if (!insidePHP)
  					    REJECT;
  					  lastCContext = YY_START;
					  BEGIN( SkipCxxComment );
  					}
  */
/* `)' followed by a special comment */
case 396:
/* rule 396 can match eol */
YY_RULE_SETUP
#line 3905 "scanner.l"
{
  					  lineCount();
                                          if (currentArgumentContext==DefineEnd)
					  {
					    // for defines we interpret a comment
					    // as documentation for the define 
					    int i;for (i=scanYYleng-1;i>0;i--)
					    {
					      unput(scanYYtext[i]);
					    }
					    *copyArgString+=*scanYYtext;
					    fullArgString+=*scanYYtext;
					    stringToArgumentList(fullArgString,current->argList);
                                            handleParametersCommentBlocks(current->argList);
					    BEGIN( currentArgumentContext );
					  }
					  else
					  {
					    // for functions we interpret a comment
					    // as documentation for the last argument
					    lastCopyArgChar=*scanYYtext;
					    QCString text=&scanYYtext[1];
					    text=text.stripWhiteSpace();
					    lastCommentInArgContext=YY_START;
					    fullArgString+=text;
					    if (text.find("//")!=-1)
					      BEGIN( CopyArgCommentLine );
					    else
					      BEGIN( CopyArgComment );
					  }
  					}
	YY_BREAK
case 397:
/* rule 397 can match eol */
YY_RULE_SETUP
#line 3936 "scanner.l"

	YY_BREAK
case 398:
YY_RULE_SETUP
#line 3937 "scanner.l"
{ fullArgString+=scanYYtext; }
	YY_BREAK
case 399:
YY_RULE_SETUP
#line 3938 "scanner.l"
{ fullArgString+=scanYYtext; 
  					  if (lastCopyArgChar!=0)
					    unput(lastCopyArgChar); 
                                          BEGIN( lastCommentInArgContext ); 
					}
	YY_BREAK
case 400:
/* rule 400 can match eol */
YY_RULE_SETUP
#line 3943 "scanner.l"
{ fullArgString+=scanYYtext;
                                          lineCount();
  					  if (lastCopyArgChar!=0)
					    unput(lastCopyArgChar);
					  BEGIN( lastCommentInArgContext );
  					}
	YY_BREAK
case 401:
/* rule 401 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up scanYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up scanYYtext again */
YY_RULE_SETUP
#line 3949 "scanner.l"
{ // verbatim command (which could contain nested comments!)
				          docBlockName=&scanYYtext[1];
  					  fullArgString+=scanYYtext;
					  BEGIN(CopyArgVerbatim);
  					}
	YY_BREAK
case 402:
YY_RULE_SETUP
#line 3954 "scanner.l"
{
				          docBlockName=&scanYYtext[1];
					  if (docBlockName.at(1)=='[')
					  {
				            docBlockName.at(1)='}';
					  }
					  if (docBlockName.at(1)=='{')
					  {
				            docBlockName.at(1)='}';
					  }
  					  fullArgString+=scanYYtext;
  					  BEGIN(CopyArgVerbatim);
                                        }
	YY_BREAK
case 403:
/* rule 403 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up scanYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up scanYYtext again */
YY_RULE_SETUP
#line 3967 "scanner.l"
{ // end of verbatim block
  					  fullArgString+=scanYYtext;
				          if (scanYYtext[1]=='f') // end of formula
				          {
				            BEGIN(CopyArgCommentLine);
				          }
					  if (&scanYYtext[4]==docBlockName)
					  {
  					    BEGIN(CopyArgCommentLine);
					  }
  					}
	YY_BREAK
case 404:
YY_RULE_SETUP
#line 3978 "scanner.l"
{ fullArgString+=scanYYtext; }
	YY_BREAK
case 405:
YY_RULE_SETUP
#line 3979 "scanner.l"
{ fullArgString+=*scanYYtext; }
	YY_BREAK
case 406:
/* rule 406 can match eol */
YY_RULE_SETUP
#line 3980 "scanner.l"
{ fullArgString+=*scanYYtext; lineCount(); }
	YY_BREAK
case 407:
YY_RULE_SETUP
#line 3981 "scanner.l"
{ fullArgString+=*scanYYtext; }
	YY_BREAK
case 408:
YY_RULE_SETUP
#line 3982 "scanner.l"
{
  					  warn(yyFileName,yyLineNr,
					      "warning: Ignoring %cbrief command inside argument documentation",*scanYYtext
					     );
                                          fullArgString+=' ';
                                        }
	YY_BREAK
case 409:
YY_RULE_SETUP
#line 3988 "scanner.l"
{
					  *copyArgString+=*scanYYtext;
					  fullArgString+=*scanYYtext;
					  argSharpCount=1;
					  BEGIN( CopyArgSharp );
					}
	YY_BREAK
case 410:
YY_RULE_SETUP
#line 3994 "scanner.l"
{
					  *copyArgString+=*scanYYtext;
					  fullArgString+=*scanYYtext;
					  //printf("end template list %s\n",copyArgString->data());
					  stringToArgumentList(fullArgString,currentArgumentList);
					  BEGIN( currentArgumentContext );
					}
	YY_BREAK
case 411:
YY_RULE_SETUP
#line 4001 "scanner.l"
{
  					  argRoundCount++;
					  *copyArgString+=*scanYYtext;
					  fullArgString+=*scanYYtext;
  					}
	YY_BREAK
case 412:
YY_RULE_SETUP
#line 4006 "scanner.l"
{
					  *copyArgString+=*scanYYtext;
					  fullArgString+=*scanYYtext;
					  if (argRoundCount>0) 
					    argRoundCount--;
					  else 
					    BEGIN( lastCopyArgContext );
  					}
	YY_BREAK
case 413:
YY_RULE_SETUP
#line 4014 "scanner.l"
{
  					  argSharpCount++;
					  //printf("argSharpCount++=%d  copy\n",argSharpCount);
					  *copyArgString+=*scanYYtext;
					  fullArgString+=*scanYYtext;
  					}
	YY_BREAK
case 414:
YY_RULE_SETUP
#line 4020 "scanner.l"
{
  					  *copyArgString+=*scanYYtext;
  					  fullArgString+=*scanYYtext;
					  argSharpCount--;
					  if (argSharpCount>0)
					  {
					    //printf("argSharpCount--=%d copy\n",argSharpCount);
					  }
					  else
					  {
					    BEGIN( ReadTempArgs );
					    //printf("end of argSharpCount\n");
					  }
  					}
	YY_BREAK
case 415:
YY_RULE_SETUP
#line 4034 "scanner.l"
{
  					  *copyArgString+=scanYYtext;
  					  fullArgString+=scanYYtext;
  					}
	YY_BREAK
case 416:
YY_RULE_SETUP
#line 4038 "scanner.l"
{
  					  *copyArgString+=*scanYYtext;
  					  fullArgString+=*scanYYtext;
					  BEGIN( lastCopyArgStringContext );
  					}
	YY_BREAK
case 417:
YY_RULE_SETUP
#line 4043 "scanner.l"
{
  					  *copyArgString+=*scanYYtext;
  					  fullArgString+=*scanYYtext;
					  BEGIN( lastCopyArgStringContext );
  					}
	YY_BREAK
case 418:
YY_RULE_SETUP
#line 4048 "scanner.l"
{ 
                                          if (insidePHP)
					  {
					    REJECT;
					  }
					  else
					  {
  					    *copyArgString+=scanYYtext; 
  					    fullArgString+=scanYYtext; 
					  }
					}
	YY_BREAK
case 419:
YY_RULE_SETUP
#line 4059 "scanner.l"
{ 
  					  *copyArgString+=scanYYtext; 
  					  fullArgString+=scanYYtext; 
					  if (insidePHP)
					  {
					    lastCopyArgStringContext=YY_START;
					    BEGIN(CopyArgPHPString);
					  }
  					}
	YY_BREAK
case 420:
/* rule 420 can match eol */
YY_RULE_SETUP
#line 4068 "scanner.l"
{ 
                                          lineCount();
					  *copyArgString+=*scanYYtext; 
					  fullArgString+=*scanYYtext; 
					}
	YY_BREAK
case 421:
YY_RULE_SETUP
#line 4073 "scanner.l"
{ 
  					  *copyArgString+=*scanYYtext; 
  					  fullArgString+=*scanYYtext; 
					}
	YY_BREAK
/*------------------------------------------------------------------------*/
case 422:
YY_RULE_SETUP
#line 4083 "scanner.l"
{ current->args += *scanYYtext ;
					  ++roundCount ;
					}
	YY_BREAK
case 423:
YY_RULE_SETUP
#line 4086 "scanner.l"
{ current->args += *scanYYtext ; 
					  if ( roundCount )
					    --roundCount ;
				          else
					    BEGIN( FuncQual ) ;
					}
	YY_BREAK
/*
<FuncQual>"#"				{ if (insidePHP)
  					    REJECT;
  					  lastCPPContext = YY_START;
  					  BEGIN(SkipCPP);
					}
  */
case 424:
YY_RULE_SETUP
#line 4099 "scanner.l"
{
                                          if ( strcmp(scanYYtext,";")==0 && 
					       insidePHP && 
					       !containsWord(current->type,"function") )
                                          {
                                            current->reset();
                                            initEntry();
                                            BEGIN( FindMembers );
                                          }
                                          else
                                          {
                                            unput(*scanYYtext); BEGIN( Function );
                                          }
                                        }
	YY_BREAK
case 425:
/* rule 425 can match eol */
YY_RULE_SETUP
#line 4113 "scanner.l"
{ // pure virtual member function
                                          lineCount() ; 
                                          current->virt = Pure;
                                          current->args += " override "; 
                                        }
	YY_BREAK
case 426:
/* rule 426 can match eol */
YY_RULE_SETUP
#line 4118 "scanner.l"
{ // overridden virtual member function
                                          lineCount() ; 
                                          current->spec |= Entry::Override;
                                          current->args += " override "; 
                                        }
	YY_BREAK
case 427:
/* rule 427 can match eol */
YY_RULE_SETUP
#line 4123 "scanner.l"
{ // sealed member function
                                          lineCount() ; 
                                          current->spec |= Entry::Sealed;
                                          current->args += " sealed "; 
                                        }
	YY_BREAK
case 428:
/* rule 428 can match eol */
YY_RULE_SETUP
#line 4128 "scanner.l"
{ // new member function
                                          lineCount() ; 
                                          current->spec |= Entry::New;
                                          current->args += " new "; 
                                        }
	YY_BREAK
case 429:
/* rule 429 can match eol */
YY_RULE_SETUP
#line 4133 "scanner.l"
{ // const member function
  					  lineCount() ; 
  					  current->args += " const "; 
					  current->argList->constSpecifier=TRUE;
					}
	YY_BREAK
case 430:
/* rule 430 can match eol */
YY_RULE_SETUP
#line 4138 "scanner.l"
{ // volatile member function
  					  lineCount() ; 
  					  current->args += " volatile "; 
					  current->argList->volatileSpecifier=TRUE;
					}
	YY_BREAK
case 431:
/* rule 431 can match eol */
YY_RULE_SETUP
#line 4143 "scanner.l"
{ // pure virtual member function
  					  lineCount() ; 
					  current->args += " = 0"; 
					  current->virt = Pure; 
					  current->argList->pureSpecifier=TRUE;
					}
	YY_BREAK
case 432:
/* rule 432 can match eol */
YY_RULE_SETUP
#line 4149 "scanner.l"
{ 
  					  lineCount() ; 
					  current->args += ", " ; 
					}
	YY_BREAK
case 433:
/* rule 433 can match eol */
YY_RULE_SETUP
#line 4153 "scanner.l"
{ 
  					  lineCount() ; 
					  current->args += ' ' ; 
					}
	YY_BREAK
case 434:
YY_RULE_SETUP
#line 4157 "scanner.l"
{ if (insidePHP)
  					    REJECT;
  					  lastCPPContext = YY_START;
  					  BEGIN(SkipCPP);
					}	
	YY_BREAK
case 435:
YY_RULE_SETUP
#line 4162 "scanner.l"
{ 
                                          if (insideCli && 
					      (current_root->section&Entry::COMPOUND_MASK) 
					     )
					  {
					    BEGIN(CliOverride);
					  }
					  else
					  {
                                            // typically an initialized function pointer
  					    lastInitializerContext=YY_START;
					    initBracketCount=0;
  					    BEGIN(ReadInitializer);
					  }
  					}
	YY_BREAK
case 436:
YY_RULE_SETUP
#line 4177 "scanner.l"
{
  					}
	YY_BREAK
case 437:
YY_RULE_SETUP
#line 4179 "scanner.l"
{ 
  					  unput(*scanYYtext);
					  BEGIN(FuncQual);
  					}
	YY_BREAK
case 438:
/* rule 438 can match eol */
YY_RULE_SETUP
#line 4183 "scanner.l"
{
                                          lineCount();
  					}
	YY_BREAK
case 439:
YY_RULE_SETUP
#line 4186 "scanner.l"
{
  					}
	YY_BREAK
case 440:
YY_RULE_SETUP
#line 4188 "scanner.l"
{
  					  unput(*scanYYtext);
					  BEGIN(FuncQual);
  					}
	YY_BREAK
case 441:
YY_RULE_SETUP
#line 4192 "scanner.l"
{
                                          current->args += *scanYYtext; 
  					  pCopyQuotedString=&current->args;
					  lastStringContext=FuncPtrInit;
					  BEGIN(CopyString);
					}
	YY_BREAK
case 442:
YY_RULE_SETUP
#line 4198 "scanner.l"
{
                                          current->args += *scanYYtext; 
					  if (insidePHP)
					  {
					    pCopyQuotedString=&current->args;
					    lastStringContext=FuncPtrInit;
					    BEGIN(CopyPHPString);
					  }
					}
	YY_BREAK
case 443:
YY_RULE_SETUP
#line 4207 "scanner.l"
{
                                          if (insidePHP)
					  {
					    REJECT;
					  }
					  else
					  {
                                            current->args += scanYYtext; 
					  }
  					}
	YY_BREAK
case 444:
YY_RULE_SETUP
#line 4217 "scanner.l"
{
                                          current->args += scanYYtext; 
					}
	YY_BREAK
case 445:
YY_RULE_SETUP
#line 4220 "scanner.l"
{
                                          current->args += *scanYYtext; 
  					}
	YY_BREAK
case 446:
/* rule 446 can match eol */
YY_RULE_SETUP
#line 4223 "scanner.l"
{
                                          current->args += *scanYYtext; 
                                          lineCount();
  					}
	YY_BREAK
case 447:
YY_RULE_SETUP
#line 4227 "scanner.l"
{ // typically a K&R style C function
                                          if (insideCS && strcmp(scanYYtext,"where")==0)
					  { 
					    // type contraint for a method
                                            delete current->typeConstr;
                                            current->typeConstr = new ArgumentList;
					    current->typeConstr->append(new Argument);
					    lastCSConstraint = YY_START;
					    BEGIN( CSConstraintName );
					  }
					  else if (checkForKnRstyleC())
					  {
					    //fprintf(stderr,"===> got a K&R style function\n");
                                            current->args = scanYYtext; 
					    oldStyleArgType.resize(0);
					    BEGIN(OldStyleArgs);
					  }
					  else
					  {
                                            current->args += scanYYtext; 
					  }
  					}
	YY_BREAK
case 448:
YY_RULE_SETUP
#line 4249 "scanner.l"
{
  					  QCString oldStyleArgPtr;
  					  QCString oldStyleArgName;
					  splitKnRArg(oldStyleArgPtr,oldStyleArgName);
					  QCString doc,brief;
					  if (current->doc!=docBackup)
					  {
                                            doc=current->doc.copy();
					    current->doc=docBackup;
					  }
					  if (current->brief!=briefBackup)
					  {
                                            brief=current->brief.copy();
					    current->brief=briefBackup;
					  }
					  addKnRArgInfo(oldStyleArgType+oldStyleArgPtr,
					                oldStyleArgName,brief,doc);
					  current->args.resize(0);
					  if (*scanYYtext==';') oldStyleArgType.resize(0);
  					}
	YY_BREAK
case 449:
YY_RULE_SETUP
#line 4269 "scanner.l"
{ current->args += scanYYtext; }
	YY_BREAK
case 450:
YY_RULE_SETUP
#line 4270 "scanner.l"
{
  					  current->args = argListToString(current->argList);
  					  unput('{');
					  BEGIN(FuncQual);
  					}
	YY_BREAK
case 451:
YY_RULE_SETUP
#line 4275 "scanner.l"
{ current->args += *scanYYtext; }
	YY_BREAK
case 452:
YY_RULE_SETUP
#line 4276 "scanner.l"
{ current->args += *scanYYtext; }
	YY_BREAK
case 453:
/* rule 453 can match eol */
#line 4278 "scanner.l"
case 454:
/* rule 454 can match eol */
YY_RULE_SETUP
#line 4278 "scanner.l"
{ /* try-function-block */ 
					  insideTryBlock=TRUE;
					  lineCount();
  					  if (scanYYtext[scanYYleng-1]==':')
					  {
					    unput(':');
					    BEGIN( Function );
					  }
					}
	YY_BREAK
case 455:
/* rule 455 can match eol */
YY_RULE_SETUP
#line 4287 "scanner.l"
{ // C++ style throw clause
  					  current->exception = " throw (" ;
					  roundCount=0;
					  lineCount() ;
					  BEGIN( ExcpRound ) ;
					}
	YY_BREAK
case 456:
/* rule 456 can match eol */
YY_RULE_SETUP
#line 4293 "scanner.l"
{
  					  current->exception = " raises (" ;
					  lineCount() ;
					  roundCount=0;
					  BEGIN( ExcpRound ) ;
  					}
	YY_BREAK
case 457:
/* rule 457 can match eol */
YY_RULE_SETUP
#line 4299 "scanner.l"
{ // Java style throw clause
  					  current->exception = " throws " ;
					  lineCount() ;
					  BEGIN( ExcpList );
  					}
	YY_BREAK
case 458:
YY_RULE_SETUP
#line 4304 "scanner.l"
{ current->exception += *scanYYtext ;
					  ++roundCount ;
					}
	YY_BREAK
case 459:
YY_RULE_SETUP
#line 4307 "scanner.l"
{ current->exception += *scanYYtext ; 
					  if ( roundCount )
					    --roundCount ;
				          else
					    BEGIN( FuncQual ) ;
					}
	YY_BREAK
case 460:
YY_RULE_SETUP
#line 4313 "scanner.l"
{
  					  current->exception += *scanYYtext;
  					}
	YY_BREAK
case 461:
YY_RULE_SETUP
#line 4316 "scanner.l"
{
  					  unput('{'); BEGIN( FuncQual );
  					}
	YY_BREAK
case 462:
YY_RULE_SETUP
#line 4319 "scanner.l"
{
  					  unput(';'); BEGIN( FuncQual );
  					}
	YY_BREAK
case 463:
/* rule 463 can match eol */
YY_RULE_SETUP
#line 4322 "scanner.l"
{
  					  current->exception += ' ';
                                          lineCount();
  					}
	YY_BREAK
case 464:
YY_RULE_SETUP
#line 4326 "scanner.l"
{
  					  current->exception += *scanYYtext;
  					}
	YY_BREAK
case 465:
YY_RULE_SETUP
#line 4329 "scanner.l"
{ current->type += current->name ;
					  current->name  = current->args ;
					  current->args  = scanYYtext ;
					  roundCount=0;
					  BEGIN( FuncRound ) ;
					}
	YY_BREAK
case 466:
YY_RULE_SETUP
#line 4335 "scanner.l"
{
  					  if (!insidePHP) BEGIN(SkipInits);
  					}
	YY_BREAK
case 467:
YY_RULE_SETUP
#line 4338 "scanner.l"
{ 
					  current->name=current->name.simplifyWhiteSpace();
  					  current->type=current->type.simplifyWhiteSpace();
					  current->args=removeRedundantWhiteSpace(current->args);
					                // was: current->args.simplifyWhiteSpace();
					  current->fileName = yyFileName;
					  current->startLine = yyLineNr;
					  static QRegExp re("([^)]*[*&][^)]*)"); // (...*...)
					  if (*scanYYtext!=';' || (current_root->section&Entry::COMPOUND_MASK) )
					  {
					    int tempArg=current->name.find('<');
                                            int ts=current->type.find('<');
                                            int te=current->type.findRev('>');
                                            int ti=current->type.find(re,0);

                                            // bug677315: A<int(void *, char *)> get(); is not a function pointer
                                            bool isFunction = ti==-1 || // not a (...*...) pattern
                                                              (ts!=-1 && ts<te && ts<ti && ti<te); // (...*...) is part of a template argument list
                                                              
                                            //printf("type=%s ts=%d te=%d ti=%d isFunction=%d\n",
                                            //    current->type.data(),ts,te,ti,isFunction);
					    QCString tempName;
					    if (tempArg==-1) tempName=current->name; else tempName=current->name.left(tempArg);
					    if (!current->type.isEmpty() &&
						(!isFunction || current->type.left(8)=="typedef "))
					    {
					      //printf("Scanner.l: found in class variable: `%s' `%s' `%s'\n", current->type.data(),current->name.data(),current->args.data());
					      if (isTypedef && current->type.left(8)!="typedef ")
					      {
						current->type.prepend("typedef ");
					      }
					      current->section = Entry::VARIABLE_SEC ;
					    }
					    else	      
					    {
					      //printf("Scanner.l: found in class function: `%s' `%s' `%s'\n", current->type.data(),current->name.data(),current->args.data());
					      current->section = Entry::FUNCTION_SEC ;
			                      current->proto = *scanYYtext==';';
					    }
					  }
					  else // a global function prototype or function variable
					  {
					    //printf("Scanner.l: prototype? type=`%s' name=`%s' args=`%s'\n",current->type.data(),current->name.data(),current->args.data());
					    if (!current->type.isEmpty() && 
						(current->type.find(re,0)!=-1 || current->type.left(8)=="typedef "))
					    {
					      if (isTypedef && current->type.left(8)!="typedef ")
					      {
						current->type.prepend("typedef ");
					      }
					      //printf("Scanner.l: found function variable!\n");
					      current->section = Entry::VARIABLE_SEC;
					    }
					    else
					    {
					      //printf("Scanner.l: found prototype\n");
					      current->section = Entry::FUNCTION_SEC;
					      current->proto = TRUE;
					    }
					  }
					  //printf("Adding entry `%s'\n",current->name.data());
					  if ( insidePHP)
					  {
					    if (findAndRemoveWord(current->type,"final"))
					    {
					      current->spec |= Entry::Final;
					    }
					    if (findAndRemoveWord(current->type,"abstract"))
					    {
					      current->spec |= Entry::Abstract;
					    }
					  }
					  if ( insidePHP && !containsWord(current->type,"function"))
					  {
					    initEntry();
					    if ( *scanYYtext == '{' )
					    {
					      lastCurlyContext = FindMembers;
					      curlyCount=0;
					      BEGIN( SkipCurly );
					    }
					    else
					    {
					      BEGIN( FindMembers );
					    }
					  }
					  else
					  {
					    if ( insidePHP)
					    {
					      findAndRemoveWord(current->type,"function");
					    }
					    previous = current;
					    current_root->addSubEntry(current);
					    current = new Entry ;
					    initEntry();
					    // Objective C 2.0: Required/Optional section
					    if (previous->spec & (Entry::Optional | Entry::Required))
					    {
					      current->spec |= previous->spec & (Entry::Optional|Entry::Required);
					    }
					    lastCurlyContext = FindMembers;
					    if ( *scanYYtext == ',' )
					    {
					      current->type = previous->type;
					      // we need to strip any trailing * and & (see bugs 623023 and 649103 for test cases)
					      int i=current->type.length(); 
					      while (i>0 && (current->type[i-1]=='*' || current->type[i-1]=='&' || current->type[i-1]==' ')) i--;
					      current->type = current->type.left(i);
					    }
					    if ( *scanYYtext == '{' )
					    {
					      if ( !insidePHP && (current_root->section & Entry::COMPOUND_MASK) )
					      {
						previous->spec |= Entry::Inline;
					      }
					      //addToBody(scanYYtext);
					      curlyCount=0;
					      BEGIN( SkipCurly ) ;
					    }
					    else
					    {
					      if (previous->section!=Entry::VARIABLE_SEC)
						previous->bodyLine=-1; // a function/member declaration
					      BEGIN( FindMembers ) ;
					    }
					  }
                                        }
	YY_BREAK
case 468:
YY_RULE_SETUP
#line 4466 "scanner.l"
{ 
  				          //addToBody(scanYYtext);
  				          //lastCurlyContext = FindMembers;
					  //curlyCount=0;
  					  //BEGIN( SkipCurly ) ; 
  					  unput('{');
					  BEGIN( Function );
					}
	YY_BREAK
case 469:
YY_RULE_SETUP
#line 4474 "scanner.l"
{ 
  				          //addToBody(scanYYtext);
  					  ++curlyCount ; 
					}
	YY_BREAK
case 470:
YY_RULE_SETUP
#line 4478 "scanner.l"
{ 
  				          //addToBody(scanYYtext);
  					  if( curlyCount )
					  {
					    --curlyCount ;
					  }
					  else
					  {
#if 0
					    if (!Config_getBool("HIDE_IN_BODY_DOCS") && 
						!current->doc.isEmpty())
					    {
					      // copy documentation found inside the body
					      // to the previous item
					      if (previous->inbodyLine==-1)
					      {
					        previous->inbodyLine = current->docLine;
					        previous->inbodyFile = current->docFile;
					      }
					      //printf("*** inbodyDocs+=%s\n",current->doc.data());
					      previous->inbodyDocs += current->doc;
					      current->doc.resize(0);
					    }
#endif
					    if (current->sli && previous) // copy special list items
					    {
					      QListIterator<ListItemInfo> li(*current->sli);
					      ListItemInfo *lii;
					      for (li.toFirst();(lii=li.current());++li)
					      {
						previous->addSpecialListItem(lii->type,lii->itemId);
					      }
					      delete current->sli;
					      current->sli = 0;
					    }
					    if (previous) previous->endBodyLine=yyLineNr;
					    BEGIN( lastCurlyContext ) ;
					  }
					}
	YY_BREAK
case 471:
/* rule 471 can match eol */
YY_RULE_SETUP
#line 4517 "scanner.l"
{ 
					  lineCount();
  					  if ( curlyCount )
					  {
					    //addToBody(scanYYtext);
					    --curlyCount ;
					  }
					  else
					  {
					    current->endBodyLine=yyLineNr;

					    tempEntry = current; // temporarily switch to the previous entry
					    current = previous;

					    docBlockContext   = SkipCurlyEndDoc;
					    docBlockInBody    = FALSE;
					    docBlockAutoBrief = ( scanYYtext[scanYYleng-2]=='*' && Config_getBool("JAVADOC_AUTOBRIEF") ) ||
					                        ( scanYYtext[scanYYleng-2]=='!' && Config_getBool("QT_AUTOBRIEF") );
					    docBlock.resize(0);
					    docBlockTerm = '}';
					    if (scanYYtext[scanYYleng-3]=='/')
					    {
					      startCommentBlock(TRUE);
					      BEGIN( DocLine );
					    }
					    else
					    {
					      startCommentBlock(FALSE);
					      BEGIN( DocBlock );
					    }
					  }
					}
	YY_BREAK
case 472:
/* rule 472 can match eol */
YY_RULE_SETUP
#line 4549 "scanner.l"
{ // desc is followed by another one
					  docBlockContext   = SkipCurlyEndDoc;
					  docBlockInBody    = FALSE;
					  docBlockAutoBrief = ( scanYYtext[scanYYleng-2]=='*' && Config_getBool("JAVADOC_AUTOBRIEF") ) ||
					                      ( scanYYtext[scanYYleng-2]=='!' && Config_getBool("QT_AUTOBRIEF") );
					  docBlock.resize(0);
					  docBlockTerm = '}';
					  if (scanYYtext[scanYYleng-3]=='/')
					  {
					    startCommentBlock(TRUE);
					    BEGIN( DocLine );
					  }
					  else
					  {
					    startCommentBlock(FALSE);
					    BEGIN( DocBlock );
					  }
  					}
	YY_BREAK
case 473:
YY_RULE_SETUP
#line 4567 "scanner.l"
{
  				          //addToBody("}");
					  current = tempEntry;
  					  BEGIN( lastCurlyContext );
  					}
	YY_BREAK
case 474:
YY_RULE_SETUP
#line 4572 "scanner.l"
{ 
  				          //addToBody(scanYYtext);
  					  lastStringContext=SkipCurly;
  				          BEGIN( SkipString ); 
					}
	YY_BREAK
case 475:
YY_RULE_SETUP
#line 4577 "scanner.l"
{ 
  				          if (insidePHP)
  				            REJECT;
  				          //addToBody(scanYYtext);
  					  BEGIN( SkipCurlyCpp );
					}
	YY_BREAK
case 476:
/* rule 476 can match eol */
YY_RULE_SETUP
#line 4583 "scanner.l"
{
                                          lineCount();
  				          //addToBody(scanYYtext);
  					}
	YY_BREAK
case 477:
YY_RULE_SETUP
#line 4587 "scanner.l"
{
  					  if (!insidePHP) 
					  {
					    REJECT;
					  }
					  else
					  {
                                            lastHereDocContext = YY_START;
					    BEGIN(HereDoc);
					  }
  					}
	YY_BREAK
case 478:
YY_RULE_SETUP
#line 4598 "scanner.l"
{
                                          lineCount();  // for g_column updates
  				          //addToBody(scanYYtext);
  					}
	YY_BREAK
case 479:
/* rule 479 can match eol */
YY_RULE_SETUP
#line 4602 "scanner.l"
{ 
  				          //addToBody(scanYYtext);
                                          lineCount();
  					  lastCurlyContext = FindMembers;
  					  BEGIN( SkipCurly ); 
					}
	YY_BREAK
case 480:
/* rule 480 can match eol */
YY_RULE_SETUP
#line 4608 "scanner.l"
{ 
  				          //addToBody(scanYYtext);
                                          lineCount();
					}
	YY_BREAK
case 481:
YY_RULE_SETUP
#line 4612 "scanner.l"
{
  				          //addToBody(scanYYtext);
  					  lastCContext = YY_START;
					  BEGIN(SkipComment);
  					}
	YY_BREAK
case 482:
YY_RULE_SETUP
#line 4617 "scanner.l"
{
  				          //addToBody(scanYYtext);
  					  lastCContext = YY_START;
					  BEGIN(SkipCxxComment);
  					}
	YY_BREAK
case 483:
YY_RULE_SETUP
#line 4622 "scanner.l"
{
  					  lastStringContext=YY_START;
  				          BEGIN( SkipString ); 
					}
	YY_BREAK
case 484:
YY_RULE_SETUP
#line 4626 "scanner.l"
{
  					  warn(yyFileName,yyLineNr,
					      "warning: Found ';' while parsing initializer list! "
					      "(doxygen could be confused by a macro call without semicolon)"
					     );
					  BEGIN( FindMembers );
  					}
	YY_BREAK
case 485:
YY_RULE_SETUP
#line 4633 "scanner.l"
{
  				          if (!insidePHP)
  				            REJECT;
  				          //addToBody(scanYYtext);
  					  lastCContext = YY_START;
					  BEGIN(SkipCxxComment);
  					}
	YY_BREAK
case 486:
YY_RULE_SETUP
#line 4640 "scanner.l"
{
  				          if (!insideCS) REJECT;
					  // C# verbatim string
					  lastSkipVerbStringContext=YY_START;
					  pSkipVerbString=&current->initializer;
					  BEGIN(SkipVerbString);
  					}
	YY_BREAK
case 487:
YY_RULE_SETUP
#line 4647 "scanner.l"
{
                                          if (insidePHP) REJECT;
                                        }
	YY_BREAK
case 488:
YY_RULE_SETUP
#line 4650 "scanner.l"
{
  					  if (insidePHP)
					  {
					    lastStringContext=YY_START;
					    BEGIN(SkipPHPString);
					  }
					}
	YY_BREAK
case 489:
YY_RULE_SETUP
#line 4657 "scanner.l"
{ }
	YY_BREAK
case 490:
YY_RULE_SETUP
#line 4658 "scanner.l"
{ }
	YY_BREAK
case 491:
YY_RULE_SETUP
#line 4659 "scanner.l"
{ 
  					  BEGIN( lastStringContext ); 
					}
	YY_BREAK
case 492:
YY_RULE_SETUP
#line 4662 "scanner.l"
{ 
  					  BEGIN( lastStringContext ); 
					}
	YY_BREAK
case 493:
YY_RULE_SETUP
#line 4665 "scanner.l"
{ }
	YY_BREAK
case 494:
/* rule 494 can match eol */
YY_RULE_SETUP
#line 4666 "scanner.l"
{
                                          lineCount();
  					}
	YY_BREAK
case 495:
YY_RULE_SETUP
#line 4669 "scanner.l"
{ }
	YY_BREAK
case 496:
YY_RULE_SETUP
#line 4670 "scanner.l"
{ // for "class : public base {} var;" construct, see bug 608359
  					  unput(':');
					  BEGIN(ClassVar);
  					}
	YY_BREAK
case 497:
YY_RULE_SETUP
#line 4674 "scanner.l"
{ 
					  current->section = Entry::EMPTY_SEC ;
					  current->type.resize(0) ;
					  current->name.resize(0) ;
					  current->args.resize(0) ;
					  current->argList->clear();
					  BEGIN( FindMembers ) ;
					}
	YY_BREAK
case 498:
/* rule 498 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up scanYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up scanYYtext again */
YY_RULE_SETUP
#line 4682 "scanner.l"
{
  					  sharpCount = 0;
  					  current->name = scanYYtext ;
					  if (current->spec & Entry::Protocol)
					  {
					    current->name+="-p";
					  }
					  lineCount();
					  lastClassTemplSpecContext = ClassVar;
					  if (insideObjC) // protocol list
					  {
					    BEGIN( ObjCProtocolList );
					  }
					  else if (insideCS) // C# generic class
					  {
					    current->name+="-g"; 
					    BEGIN( CSGeneric );
					  }
					  else // C++ template specialization
					  {
					    roundCount=0;
					    BEGIN( ClassTemplSpec );
					  }
					}
	YY_BREAK
case 499:
YY_RULE_SETUP
#line 4706 "scanner.l"
{
					  if (current->tArgLists==0)
					  {
					    current->tArgLists = new QList<ArgumentList>;
					    current->tArgLists->setAutoDelete(TRUE);
					  }
					  ArgumentList *al = new ArgumentList;
					  // check bug 612858 before enabling the next line
					  //current->spec |= Entry::Template;
					  current->tArgLists->append(al);
					  currentArgumentList = al;
					  templateStr="<";
					  //current->name += "<";
					  fullArgString = templateStr;
					  //copyArgString = &current->name;
					  copyArgString = &templateStr;
					  currentArgumentContext = ClassVar;
					  BEGIN( ReadTempArgs );
  					}
	YY_BREAK
case 500:
YY_RULE_SETUP
#line 4725 "scanner.l"
{
  					  insideProtocolList=TRUE;
  					  BEGIN( Bases );
  					}
	YY_BREAK
case 501:
/* rule 501 can match eol */
YY_RULE_SETUP
#line 4729 "scanner.l"
{
					  current->name += scanYYtext;
					  lineCount();
  					  if (--sharpCount<=0)
					  {
					    current->name = removeRedundantWhiteSpace(current->name);
					    if (current->spec & Entry::Protocol)
					    { // Objective-C protocol
					      unput('{'); // fake start of body
					      BEGIN( ClassVar );
					    }
					    else
					    {
					      BEGIN( lastClassTemplSpecContext );
					    }
					  }
					}
	YY_BREAK
case 502:
YY_RULE_SETUP
#line 4746 "scanner.l"
{
  					  current->name += scanYYtext;
  					  sharpCount++;
  					}
	YY_BREAK
case 503:
YY_RULE_SETUP
#line 4750 "scanner.l"
{
  					  current->name += scanYYtext;
					}
	YY_BREAK
case 504:
/* rule 504 can match eol */
YY_RULE_SETUP
#line 4753 "scanner.l"
{ // forward declaration
    					  unput(';');
					  current->reset();
					  initEntry();
					  if (isTypedef) // typedef of a class, put typedef keyword back
					  {
					    current->type.prepend("typedef");
					  }
					  BEGIN( FindMembers );
					}
	YY_BREAK
case 505:
/* rule 505 can match eol */
YY_RULE_SETUP
#line 4763 "scanner.l"
{ 
					  current->name = scanYYtext ;
					  lineCount();
					  if (current->spec & Entry::Protocol)
					  {
					    current->name += "-p";
					  }
					  BEGIN( ClassVar );
					}
	YY_BREAK
case 506:
/* rule 506 can match eol */
YY_RULE_SETUP
#line 4772 "scanner.l"
{  // multiple forward declarations on one line
                                           // e.g. @protocol A,B;
					  current->reset();
					  initEntry();
  					}
	YY_BREAK
case 507:
/* rule 507 can match eol */
YY_RULE_SETUP
#line 4777 "scanner.l"
{ 
					  current->name = scanYYtext ;
					  lineCount();
					  if (current->spec & Entry::Protocol)
					  {
					    current->name += "-p";
					  }
					  if ((current->spec & Entry::Protocol) ||
					      current->section == Entry::OBJCIMPL_SEC)
					  {
					    unput('{'); // fake start of body
					  }
					  BEGIN( ClassVar );
					}
	YY_BREAK
case 508:
/* rule 508 can match eol */
YY_RULE_SETUP
#line 4791 "scanner.l"
{ // C# style scope
					  current->name = substitute(scanYYtext,".","::");
					  lineCount();
					  BEGIN( ClassVar );
                                        }
	YY_BREAK
case 509:
/* rule 509 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up scanYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up scanYYtext again */
YY_RULE_SETUP
#line 4796 "scanner.l"
{
  					  if (insideIDL && strncmp(scanYYtext,"switch",6)==0 && !isId(scanYYtext[6]))
					  {
					    // Corba IDL style union
					    roundCount=0;
					    BEGIN(SkipUnionSwitch);
					  }
					  else
					  {
  					    addType(current);
					    current->name = scanYYtext;
					    current->name = current->name.stripWhiteSpace();
					    lineCount();
  					    BEGIN( FindMembers );
					  }
  					}
	YY_BREAK
case 510:
YY_RULE_SETUP
#line 4812 "scanner.l"
{
 					  if (isTypedef)
					  {
					    // multiple types in one typedef
					    unput(',');
					    current->type.prepend("typedef ");
					    BEGIN(FindMembers);
					  }
					  else
					  { 
  					    // Multiple class forward declaration
					  }
  					}
	YY_BREAK
case 511:
/* rule 511 can match eol */
YY_RULE_SETUP
#line 4825 "scanner.l"
{
  					  if (insideCli)
					  {
					    if (scanYYtext[0]=='s') // sealed
					      current->spec |= Entry::SealedClass;
					    else // abstract
					      current->spec |= Entry::AbstractClass;
					    BEGIN( ClassVar ); 
					  }
					  else
					  {
					    REJECT;
					  }
					}
	YY_BREAK
case 512:
YY_RULE_SETUP
#line 4839 "scanner.l"
{
  					  if (insideIDL && strcmp(scanYYtext,"switch")==0)
					  {
					    // Corba IDL style union
					    roundCount=0;
					    BEGIN(SkipUnionSwitch);
					  }
					  else if ((insideJava || insidePHP || insideJS) && (strcmp(scanYYtext,"implements")==0 || strcmp(scanYYtext,"extends")==0))
					  {
  					    current->type.resize(0);
					    baseProt=Public;
                                            baseVirt=Normal;
					    baseName.resize(0);
					    BEGIN( BasesProt ) ;
					  }
					  else if (insideCS && strcmp(scanYYtext,"where")==0) // C# type contraint
					  {
                                            delete current->typeConstr;
                                            current->typeConstr = new ArgumentList;
					    current->typeConstr->append(new Argument);
					    lastCSConstraint = YY_START;
					    BEGIN( CSConstraintName );
					  }
					  else if (insideCli &&  strcmp(scanYYtext,"abstract"))
					  {
					    current->spec|=Entry::Abstract;
					  }
					  else if (insideCli &&  strcmp(scanYYtext,"sealed"))
					  {
					    current->spec|=Entry::Sealed;
					  }
					  else
					  {
					    if (current->section == Entry::ENUM_SEC)
					    { // found "enum a b" -> variable
					      current->section = Entry::VARIABLE_SEC ;
					    }
					    current->type += ' ' ;
					    current->type += current->name ;
					    current->name = scanYYtext ;
					    
					    if (nameIsOperator(current->name))
					    {
				              BEGIN( Operator );
					    }
					  }
  					}
	YY_BREAK
case 513:
YY_RULE_SETUP
#line 4886 "scanner.l"
{
    					  if (insideObjC && *scanYYtext=='(') // class category
					  {
					    current->name+='(';
                                            //if (current->section!=Entry::OBJCIMPL_SEC)
                                            //{
					      current->spec|=Entry::Category;
                                            //}
					    BEGIN( ClassCategory );
					  }
					  else
					  {
                                            // probably a function anyway
                                            unput(*scanYYtext);
					    BEGIN( FindMembers );
					  }
					}
	YY_BREAK
case 514:
YY_RULE_SETUP
#line 4903 "scanner.l"
{ /* empty comment */ }
	YY_BREAK
case 515:
YY_RULE_SETUP
#line 4904 "scanner.l"
{ // special comment
                                          fullArgString.resize(0);
					  lastCopyArgChar='#'; // end marker
					  lastCommentInArgContext=YY_START;
					  if (scanYYtext[1]=='/')
					    BEGIN( CopyArgCommentLine );
					  else
					    BEGIN( CopyArgComment );
					}
	YY_BREAK
case 516:
YY_RULE_SETUP
#line 4913 "scanner.l"
{ // artificially inserted token to signal end of comment block
                                          current->typeConstr->last()->docs = fullArgString;
  					}
	YY_BREAK
case 517:
YY_RULE_SETUP
#line 4916 "scanner.l"
{ // end of type constraint reached
                                          // parse documentation of the constraints
                                          handleParametersCommentBlocks(current->typeConstr);
					  unput('{');
					  BEGIN( lastCSConstraint );
					}
	YY_BREAK
case 518:
YY_RULE_SETUP
#line 4922 "scanner.l"
{
                                          handleParametersCommentBlocks(current->typeConstr);
					  unput(';');
					  BEGIN( lastCSConstraint );
  					}
	YY_BREAK
case 519:
YY_RULE_SETUP
#line 4927 "scanner.l"
{
                                          BEGIN( CSConstraintType );
                                        }
	YY_BREAK
case 520:
YY_RULE_SETUP
#line 4930 "scanner.l"
{
                                          // parameter name
                                          current->typeConstr->last()->name=scanYYtext;
                                        }
	YY_BREAK
case 521:
YY_RULE_SETUP
#line 4934 "scanner.l"
{ // another constraint for a different param
					  current->typeConstr->append(new Argument);
                                          BEGIN( CSConstraintName );
  					}
	YY_BREAK
case 522:
YY_RULE_SETUP
#line 4938 "scanner.l"
{
                                          if (current->typeConstr->last()->type.isEmpty())
                                              // first type constraint for this parameter
                                          {
                                            current->typeConstr->last()->type=scanYYtext;
                                          }
                                          else // new type constraint for same parameter
                                          {
                                            QCString name = current->typeConstr->last()->name;
                                            current->typeConstr->append(new Argument);
                                            current->typeConstr->last()->name=name;
                                            current->typeConstr->last()->type=scanYYtext;
                                          }
                                        }
	YY_BREAK
case 523:
/* rule 523 can match eol */
YY_RULE_SETUP
#line 4952 "scanner.l"
{
                                          lineCount();
					}
	YY_BREAK
case 524:
YY_RULE_SETUP
#line 4955 "scanner.l"
{
					}
	YY_BREAK
case 525:
YY_RULE_SETUP
#line 4957 "scanner.l"
{
					  current->name+=scanYYtext;
					}
	YY_BREAK
case 526:
YY_RULE_SETUP
#line 4960 "scanner.l"
{
					  current->name+=')';
					  if ((current->section & Entry::Protocol) ||
					      current->section == Entry::OBJCIMPL_SEC)
					  {
					    unput('{'); // fake start of body
					  }
					  else // category has no variables so push back an empty body
					  {
					    unput('}');
					    unput('{');
					  }
					  BEGIN( ClassVar );
					}
	YY_BREAK
case 527:
YY_RULE_SETUP
#line 4974 "scanner.l"
{ 
					  if (current->section == Entry::VARIABLE_SEC) // enum a b:2, see bug 313527
					  {
  					    BEGIN(BitFields);
					    current->bitfields+=":";
					  }
					  else
					  {
					    current->type.resize(0);
					    if ((current->spec & Entry::Interface) || 
						(current->spec & Entry::Struct)    || 
						(current->spec & Entry::Ref)       || 
						(current->spec & Entry::Value)     || 
						insidePHP || insideCS || insideD || insideObjC
					       )
					      baseProt=Public;
					    else
					      baseProt=Private;
					    baseVirt=Normal;
					    baseName.resize(0);
					    BEGIN( BasesProt ) ;
					  }
					}
	YY_BREAK
case 528:
YY_RULE_SETUP
#line 4997 "scanner.l"
{
    					  unput(*scanYYtext);
					  if (isTypedef) // typedef of a class, put typedef keyword back
					  {
					    current->type.prepend("typedef");
					  }
					  if ((scanYYtext[0]=='*' || scanYYtext[0]=='&') && 
					      current->section == Entry::ENUM_SEC)
					  { // found "enum a *b" -> variable
					    current->section = Entry::VARIABLE_SEC ;
					  }
					  BEGIN( FindMembers );
    					}
	YY_BREAK
case 529:
/* rule 529 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up scanYYtext */
(yy_c_buf_p) = yy_cp = yy_bp + 3;
YY_DO_BEFORE_ACTION; /* set up scanYYtext again */
YY_RULE_SETUP
#line 5010 "scanner.l"
{
  					  if (!insideObjC)
					  {
					    REJECT;
					  }
					  else
					  {
					    lineCount();
					    current->program+=scanYYtext;
                                            current->fileName = yyFileName ;
					    current->startLine = yyLineNr ;
					    curlyCount=0;
					    BEGIN( ReadBodyIntf );
					  }
  					}
	YY_BREAK
case 530:
/* rule 530 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up scanYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up scanYYtext again */
#line 5026 "scanner.l"
case 531:
/* rule 531 can match eol */
#line 5027 "scanner.l"
case 532:
/* rule 532 can match eol */
#line 5028 "scanner.l"
case 533:
/* rule 533 can match eol */
YY_RULE_SETUP
#line 5028 "scanner.l"
{
  					  if (!insideObjC)
					  {
					    REJECT;
					  }
					  else
					  {
					    lineCount();
					    current->program+=scanYYtext;
                                            current->fileName = yyFileName ;
					    current->startLine = yyLineNr ;
					    curlyCount=0;
					    BEGIN( ReadBodyIntf );
					  }
  					}
	YY_BREAK
case 534:
YY_RULE_SETUP
#line 5043 "scanner.l"
{ 
                                          current->fileName = yyFileName ;
					  current->startLine = yyLineNr ;
					  current->name = removeRedundantWhiteSpace(current->name);
					  if (current->name.isEmpty() && !isTypedef) // anonymous compound
					  {
					    if (current->section==Entry::NAMESPACE_SEC) // allow reopening of anonymous namespaces
					    {
					      if (Config_getBool("EXTRACT_ANON_NSPACES")) // use visible name
					      {
					        current->name="anonymous_namespace{"+stripPath(current->fileName)+"}";
					      }
					      else // use invisible name
					      {
					        current->name.sprintf("@%d",anonNSCount);
					      }
					    }
					    else
					    {
					      current->name.sprintf("@%d",anonCount++);
					    }
					  }
					  curlyCount=0;
					  if (current_root && // not a nested struct inside an @interface section
					      !(current_root->spec & Entry::Interface) &&
					      ((current->spec & (Entry::Interface | Entry::Protocol | Entry::Category) ||
					        current->section==Entry::OBJCIMPL_SEC)
					      ) &&
					      insideObjC
					     )
					  { // ObjC body that ends with @end
					    BEGIN( ReadBodyIntf );
					  }
					  else if (current->section==Entry::NAMESPACE_SEC)
					  { // namespace body
					    BEGIN( ReadNSBody );
					  }
					  else
					  { // class body
					    BEGIN( ReadBody ) ;
					  }
					}
	YY_BREAK
case 535:
/* rule 535 can match eol */
YY_RULE_SETUP
#line 5085 "scanner.l"
{ lineCount(); baseVirt = Virtual; }
	YY_BREAK
case 536:
/* rule 536 can match eol */
YY_RULE_SETUP
#line 5086 "scanner.l"
{ lineCount(); baseProt = Public; }
	YY_BREAK
case 537:
/* rule 537 can match eol */
YY_RULE_SETUP
#line 5087 "scanner.l"
{ lineCount(); baseProt = Protected; }
	YY_BREAK
case 538:
/* rule 538 can match eol */
YY_RULE_SETUP
#line 5088 "scanner.l"
{ lineCount(); baseProt = Package; }
	YY_BREAK
case 539:
/* rule 539 can match eol */
YY_RULE_SETUP
#line 5089 "scanner.l"
{ lineCount(); baseProt = Private; }
	YY_BREAK
case 540:
/* rule 540 can match eol */
YY_RULE_SETUP
#line 5090 "scanner.l"
{ lineCount(); }
	YY_BREAK
case 541:
YY_RULE_SETUP
#line 5091 "scanner.l"
{ unput(*scanYYtext); BEGIN(Bases); }
	YY_BREAK
case 542:
YY_RULE_SETUP
#line 5092 "scanner.l"
{ // PHP namespace token, not sure if interspacing is allowed but it gives problems (see bug 640847)
                                          if (!insidePHP)
					  {
					    REJECT;
					  }
					  else // PHP base class of the form \Ns\Cl or Ns\Cl
					  {
  					    lineCount();
					    QCString bn=scanYYtext;
					    bn = substitute(bn,"\\","::");
					    baseName += bn;
					    current->args += ' ';
					    current->args += scanYYtext;
					  }
                                        }
	YY_BREAK
case 543:
/* rule 543 can match eol */
YY_RULE_SETUP
#line 5107 "scanner.l"
{ 
  					  lineCount();
                                          QCString baseScope = scanYYtext;
                                          if (insideCS && baseScope.stripWhiteSpace()=="where")
					  { 
					    // type contraint for a class
                                            delete current->typeConstr;
                                            current->typeConstr = new ArgumentList;
					    current->typeConstr->append(new Argument);
					    lastCSConstraint = YY_START;
					    BEGIN( CSConstraintName );
					  }
					  else
					  {
  					    baseName+=scanYYtext;
					    current->args += ' ';
					    current->args += scanYYtext;
					  }
					}
	YY_BREAK
case 544:
/* rule 544 can match eol */
YY_RULE_SETUP
#line 5126 "scanner.l"
{ // Java style class
    					  QCString name = substitute(scanYYtext,".","::");
					  baseName += name;
					  current->args += ' ';
					  current->args += name;
    					}
	YY_BREAK
case 545:
/* rule 545 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up scanYYtext */
(yy_c_buf_p) = yy_cp = yy_bp + 1;
YY_DO_BEFORE_ACTION; /* set up scanYYtext again */
YY_RULE_SETUP
#line 5132 "scanner.l"
{
                                          if (!insideObjC) 
					  {
					    REJECT;
					  }
					  else
					  {
                                            lineCount();
					    unput('{');
					  }
					}
	YY_BREAK
case 546:
YY_RULE_SETUP
#line 5143 "scanner.l"
{ // empty ObjC interface
  					  unput('d'); // insert fake body: {}@end
  					  unput('n'); 
  					  unput('e'); 
  					  unput('@'); 
  					  unput('}'); 
  					  unput('{');
					}
	YY_BREAK
case 547:
YY_RULE_SETUP
#line 5151 "scanner.l"
{ current->name += *scanYYtext;
  					  sharpCount=1; 
					  roundCount=0;
					  lastSkipSharpContext = YY_START;
					  specName = &current->name;
					  BEGIN ( Specialization );
					}
	YY_BREAK
case 548:
YY_RULE_SETUP
#line 5158 "scanner.l"
{ 
  					  sharpCount=1; 
					  roundCount=0;
					  lastSkipSharpContext = YY_START;
					  if (insideObjC) // start of protocol list
					  {
					    unput(',');
					  }
					  else // template specialization
					  {
					    //if (insideCS) // generic
					    //{
					    //  baseName+="-g";
					    //}
                                            templateStr = scanYYtext;
					    specName = &templateStr;
					    BEGIN ( Specialization );
					  }
					}
	YY_BREAK
case 549:
YY_RULE_SETUP
#line 5177 "scanner.l"
{ *specName += *scanYYtext;
  					  if (roundCount==0) sharpCount++;
  					}
	YY_BREAK
case 550:
YY_RULE_SETUP
#line 5180 "scanner.l"
{
  					  *specName += *scanYYtext;
  					  if (roundCount==0 && --sharpCount<=0)
					  {
					    if (1 /*!insideCS*/) 
					    {
					      baseName+=*specName;
					    }
					    else
					    {
					      if (current->tArgLists==0)
					      {
						current->tArgLists = new QList<ArgumentList>;
						current->tArgLists->setAutoDelete(TRUE);
					      }
					      ArgumentList *al = new ArgumentList;
					      current->tArgLists->append(al);
					      stringToArgumentList(*specName,al);
					    }
					    BEGIN(lastSkipSharpContext);
					  }
  					}
	YY_BREAK
case 551:
/* rule 551 can match eol */
YY_RULE_SETUP
#line 5202 "scanner.l"
{ lineCount(); *specName +=' '; }
	YY_BREAK
case 552:
YY_RULE_SETUP
#line 5203 "scanner.l"
{ *specName += scanYYtext; }
	YY_BREAK
case 553:
*yy_cp = (yy_hold_char); /* undo effects of setting up scanYYtext */
(yy_c_buf_p) = yy_cp = yy_bp + 2;
YY_DO_BEFORE_ACTION; /* set up scanYYtext again */
YY_RULE_SETUP
#line 5204 "scanner.l"
{ // M$ C++ extension to allow >> to close a template...
  					  unput('>');
  					  unput(' ');
  					  unput('>');
                                        }
	YY_BREAK
case 554:
YY_RULE_SETUP
#line 5209 "scanner.l"
{
                                          if (insideCS) // for C# >> ends a nested template
					  {
					    REJECT;
					  }
					  else // for C++ >> is a bitshift 
					       // operator and > > would end 
					       // a nested template.
					       // We require the bitshift to be enclosed in braces.
					       // See http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2005/n1757.html
					  {
					    if (roundCount>0)
					    {
                                              *specName += scanYYtext; 
					    }
					    else
					    {
  					      unput('>');
  					      unput(' ');
  					      unput('>');
					    }
					  }
                                        }
	YY_BREAK
case 555:
/* rule 555 can match eol */
YY_RULE_SETUP
#line 5232 "scanner.l"
{ lineCount(); }
	YY_BREAK
case 556:
YY_RULE_SETUP
#line 5233 "scanner.l"
{ *specName += *scanYYtext; roundCount++; }
	YY_BREAK
case 557:
YY_RULE_SETUP
#line 5234 "scanner.l"
{ *specName += *scanYYtext; roundCount--; }
	YY_BREAK
case 558:
YY_RULE_SETUP
#line 5235 "scanner.l"
{
  					  *specName += *scanYYtext;
  					}
	YY_BREAK
case 559:
YY_RULE_SETUP
#line 5238 "scanner.l"
{ ++sharpCount; }
	YY_BREAK
case 560:
YY_RULE_SETUP
#line 5239 "scanner.l"
{ if (--sharpCount<=0)
					    BEGIN ( lastSkipSharpContext );
					}
	YY_BREAK
case 561:
YY_RULE_SETUP
#line 5242 "scanner.l"
{ ++roundCount; }
	YY_BREAK
case 562:
YY_RULE_SETUP
#line 5243 "scanner.l"
{ if (--roundCount<=0)
					    BEGIN ( lastSkipRoundContext );
					}
	YY_BREAK
case 563:
YY_RULE_SETUP
#line 5246 "scanner.l"
{
  					  lastStringContext=SkipRound;
					  BEGIN(SkipString);
  					}
	YY_BREAK
case 564:
/* rule 564 can match eol */
YY_RULE_SETUP
#line 5250 "scanner.l"
{ lineCount();
                                          if (insideProtocolList)
					  {
					    baseName+="-p";
					  }
					  else
					  {
                                            current->args += ',' ; 
					  }
					  current->name = removeRedundantWhiteSpace(current->name);
  					  if (!baseName.isEmpty())
					  {
  					    current->extends->append(
					      new BaseInfo(baseName,baseProt,baseVirt)
					    );
					  }
					  if ((current->spec & (Entry::Interface|Entry::Struct)) || 
					      insideJava || insidePHP || insideCS || 
					      insideD || insideObjC)
					  {
					    baseProt=Public;
					  }
					  else
					  {
					    baseProt=Private;
					  }
					  baseVirt=Normal;
					  baseName.resize(0);
                                          if (*scanYYtext=='>')
					  { // end of a ObjC protocol list
  					    insideProtocolList=FALSE;
					    if (scanYYleng==1)
					    {
					      unput('{'); // dummy start body
					    }
					    else
					    {
					      yyless(1);
					    }
					  }
					  else
					  {
					    if (*scanYYtext==',' && insideObjC) // Begin of protocol list
					    {
  					      insideProtocolList=TRUE;
					    }
					    BEGIN(BasesProt);
					  }
					}
	YY_BREAK
case 565:
YY_RULE_SETUP
#line 5299 "scanner.l"
{ current->fileName = yyFileName ;
					  current->startLine = yyLineNr ;
					  current->name = removeRedundantWhiteSpace(current->name);
  					  if (!baseName.isEmpty())
  					    current->extends->append(
					      new BaseInfo(baseName,baseProt,baseVirt)
					    );
					  curlyCount=0;
					  if (insideObjC)
					  {
					    BEGIN( ReadBodyIntf );
					  }
					  else
					  {
					    BEGIN( ReadBody ) ;
					  }
					}
	YY_BREAK
case 566:
YY_RULE_SETUP
#line 5316 "scanner.l"
{
  					  roundCount++;
  					}
	YY_BREAK
case 567:
YY_RULE_SETUP
#line 5319 "scanner.l"
{
  					  if (--roundCount==0)
					  {
					    BEGIN(ClassVar);
					  }
  					}
	YY_BREAK
case 568:
/* rule 568 can match eol */
YY_RULE_SETUP
#line 5325 "scanner.l"
{ lineCount(); }
	YY_BREAK
case 569:
YY_RULE_SETUP
#line 5326 "scanner.l"

	YY_BREAK
case 570:
/* rule 570 can match eol */
YY_RULE_SETUP
#line 5327 "scanner.l"
{ current->program += scanYYtext ;
					  lineCount() ;
					}
	YY_BREAK
case 571:
YY_RULE_SETUP
#line 5330 "scanner.l"
{ current->program += scanYYtext ; } 
	YY_BREAK
case 572:
YY_RULE_SETUP
#line 5331 "scanner.l"
{ current->program += scanYYtext ; }
	YY_BREAK
case 573:
YY_RULE_SETUP
#line 5332 "scanner.l"
{
                                          insideCode=TRUE;
  					  current->program += scanYYtext ;
  					}
	YY_BREAK
case 574:
YY_RULE_SETUP
#line 5336 "scanner.l"
{
                                          insideCode=FALSE;
  					  current->program += scanYYtext ;
  					}
	YY_BREAK
case 575:
YY_RULE_SETUP
#line 5340 "scanner.l"
{ current->program += scanYYtext ; }
	YY_BREAK
case 576:
YY_RULE_SETUP
#line 5341 "scanner.l"
{ current->program += scanYYtext ;
					  if (!insideCode) BEGIN( lastContext ) ;
					}
	YY_BREAK
case 577:
YY_RULE_SETUP
#line 5344 "scanner.l"
{ current->program += *scanYYtext ; }
	YY_BREAK
case 578:
YY_RULE_SETUP
#line 5346 "scanner.l"
{ 
  					  //printf("Start doc block at %d\n",yyLineNr);
					  removeSlashes=(scanYYtext[1]=='/');
					  tmpDocType=-1;
					  if (!current->doc.isEmpty())
					  {
					    current->doc+="\n\n";
					  }
					  else
					  {
					    current->docLine = yyLineNr;
					    current->docFile = yyFileName;
					  }

					  lastDocContext = YY_START;
					  if (current_root->section & Entry::SCOPE_MASK)
                                          {
					    current->inside = current_root->name+"::";
                                          }
					  docBlockContext   = YY_START;
					  docBlockInBody    = YY_START==SkipCurly;
					  docBlockAutoBrief = Config_getBool("QT_AUTOBRIEF");
					  docBlock.resize(0);
					  if (docBlockAutoBrief)
					  {
					    current->briefLine = yyLineNr;
					    current->briefFile = yyFileName;
					  }
					  startCommentBlock(FALSE);
					  BEGIN( DocBlock );
					}
	YY_BREAK
case 579:
/* rule 579 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up scanYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up scanYYtext again */
YY_RULE_SETUP
#line 5377 "scanner.l"
{
  					  removeSlashes=(scanYYtext[1]=='/');
					  lastDocContext = YY_START;

					  //printf("Found comment block at %s:%d\n",yyFileName,yyLineNr);
					  if (current_root->section & Entry::SCOPE_MASK)
                                          {
					    current->inside = current_root->name+"::";
                                          }
					  current->docLine = yyLineNr;
					  current->docFile = yyFileName;
					  docBlockContext = YY_START;
					  docBlockInBody  = YY_START==SkipCurly;
                                          static bool javadocAutoBrief = Config_getBool("JAVADOC_AUTOBRIEF");
					  docBlockAutoBrief = javadocAutoBrief;
					  docBlock.resize(0);

                                          QCString indent;
                                          indent.fill(' ',computeIndent(scanYYtext,g_column));
                                          docBlock+=indent;

					  if (docBlockAutoBrief)
					  {
					    current->briefLine = yyLineNr;
					    current->briefFile = yyFileName;
					  }
					  startCommentBlock(FALSE);
					  BEGIN( DocBlock );
  					}
	YY_BREAK
case 580:
YY_RULE_SETUP
#line 5406 "scanner.l"
{ 
					  tmpDocType=-1;
					  lastDocContext = YY_START;
					  if (current_root->section & Entry::SCOPE_MASK)
                                          {
					    current->inside = current_root->name+"::";
                                          }
					  docBlockContext   = YY_START;
					  docBlockInBody    = YY_START==SkipCurly;
					  docBlockAutoBrief = FALSE;
					  docBlock.resize(0);
					  startCommentBlock(current->brief.isEmpty());
					  BEGIN( DocLine );
					}
	YY_BREAK
case 581:
/* rule 581 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up scanYYtext */
(yy_c_buf_p) = yy_cp = yy_bp + 3;
YY_DO_BEFORE_ACTION; /* set up scanYYtext again */
YY_RULE_SETUP
#line 5420 "scanner.l"
{ 
					  tmpDocType=-1;
					  lastDocContext = YY_START;
					  if (current_root->section & Entry::SCOPE_MASK)
                                          {
					    current->inside = current_root->name+"::";
                                          }
					  docBlockContext   = YY_START;
					  docBlockInBody    = YY_START==SkipCurly;
					  docBlockAutoBrief = FALSE;
					  docBlock.resize(0);
					  startCommentBlock(current->brief.isEmpty());
					  BEGIN( DocLine );
					}
	YY_BREAK
case 582:
/* rule 582 can match eol */
YY_RULE_SETUP
#line 5434 "scanner.l"
{
					  lineCount();
					  externC=TRUE;
					}
	YY_BREAK
case 583:
YY_RULE_SETUP
#line 5438 "scanner.l"
{
                                          if (externC) 
					  {
					    externC=FALSE;
					  }
                                          else if (insideCS &&    
					      !current->name.isEmpty() && 
					      !current->type.isEmpty())
					  {
					    if (containsWord(current->type,"event")) // event
					    {
  					      current->mtype = mtype = Event;
					    }
					    else // property
					    {				
  					      current->mtype = mtype = Property;
					    }
					    current->bodyLine = yyLineNr;
					    curlyCount=0;
					    BEGIN( CSAccessorDecl );
					  }
					  else
					  {
					    if ((insideJava || insideCS || insideD) &&
						current->name.isEmpty()
					       )
					    {
					      // static Java initializer
					      needsSemi = FALSE;
					      if (current->stat)
					      {
						current->name="[static initializer]";
						current->type.resize(0);
					      }
					      else
					      {
						current->name="[instance initializer]";
					      }
                                              unput(*scanYYtext); 
					      BEGIN( Function );
					    }
					    else
					    {
					      needsSemi = TRUE;
					      current->type.resize(0);
					      current->name.resize(0);
					      current->args.resize(0);
					      current->argList->clear();
					      curlyCount=0;
					      BEGIN( SkipCurlyBlock );
					    }
					  }
  					}
	YY_BREAK
case 584:
YY_RULE_SETUP
#line 5491 "scanner.l"
{ curlyCount++; }
	YY_BREAK
case 585:
YY_RULE_SETUP
#line 5492 "scanner.l"
{ 
                                          if (curlyCount) 
                                          {
                                            curlyCount--; 
					  }
					  else
					  {
  					    mtype = Method;
                                            unput(';');
					    BEGIN(FindMembers);
					  }
                                        }
	YY_BREAK
case 586:
YY_RULE_SETUP
#line 5504 "scanner.l"
{ if (curlyCount==0) current->spec |= Entry::Settable;  }
	YY_BREAK
case 587:
YY_RULE_SETUP
#line 5505 "scanner.l"
{ if (curlyCount==0) current->spec |= Entry::Gettable;  }
	YY_BREAK
case 588:
YY_RULE_SETUP
#line 5506 "scanner.l"
{ if (curlyCount==0) current->spec |= Entry::Addable;   }
	YY_BREAK
case 589:
YY_RULE_SETUP
#line 5507 "scanner.l"
{ if (curlyCount==0) current->spec |= Entry::Removable; }
	YY_BREAK
case 590:
YY_RULE_SETUP
#line 5508 "scanner.l"
{ if (curlyCount==0) current->spec |= Entry::Raisable;  }
	YY_BREAK
case 591:
YY_RULE_SETUP
#line 5509 "scanner.l"
{}
	YY_BREAK
case 592:
/* rule 592 can match eol */
YY_RULE_SETUP
#line 5510 "scanner.l"
{ lineCount(); }
	YY_BREAK
/**********************************************************************************/
/******************** Documentation block related rules ***************************/
/**********************************************************************************/
/* ---- Single line comments ------ */
case 593:
/* rule 593 can match eol */
YY_RULE_SETUP
#line 5520 "scanner.l"
{ // continuation of multiline C++-style comment
				           docBlock+=scanYYtext;
          		                   docBlock.resize(docBlock.length() - 3);
                                           lineCount();
                                        }
	YY_BREAK
case 594:
/* rule 594 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up scanYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up scanYYtext again */
YY_RULE_SETUP
#line 5525 "scanner.l"
{ // whole line
  					  docBlock+=scanYYtext;
					  handleCommentBlock(docBlock.data(),current->brief.isEmpty());
					  BEGIN( docBlockContext );
  					}
	YY_BREAK
/* ---- Comments blocks ------ */
case 595:
YY_RULE_SETUP
#line 5533 "scanner.l"
{ // end of comment block
  				          handleCommentBlock(docBlock.data(),FALSE);
					  BEGIN(docBlockContext);
  					}
	YY_BREAK
case 596:
/* rule 596 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up scanYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up scanYYtext again */
YY_RULE_SETUP
#line 5537 "scanner.l"
{ // start of a comment line
                                          QCString indent;
                                          indent.fill(' ',computeIndent(scanYYtext,g_column));
                                          docBlock+=indent;
  					}
	YY_BREAK
case 597:
YY_RULE_SETUP
#line 5542 "scanner.l"
{ // strip embedded C++ comments if at the start of a line
  					}
	YY_BREAK
case 598:
YY_RULE_SETUP
#line 5544 "scanner.l"
{ // slashes in the middle of a comment block
  					  docBlock+=scanYYtext;
  					}
	YY_BREAK
case 599:
YY_RULE_SETUP
#line 5547 "scanner.l"
{ // start of a new comment in the 
                                          // middle of a comment block
  					  docBlock+=scanYYtext;
  					}
	YY_BREAK
case 600:
/* rule 600 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up scanYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up scanYYtext again */
YY_RULE_SETUP
#line 5551 "scanner.l"
{ // escaped command
  					  docBlock+=scanYYtext;
  					}
	YY_BREAK
case 601:
YY_RULE_SETUP
#line 5554 "scanner.l"
{
                                          docBlock+=scanYYtext;
				          docBlockName=&scanYYtext[1];
					  if (docBlockName.at(1)=='{')
					  {
				            docBlockName.at(1)='}';
					  }
  					  BEGIN(DocCopyBlock);
                                        }
	YY_BREAK
case 602:
YY_RULE_SETUP
#line 5563 "scanner.l"
{
                                          docBlock+=scanYYtext;
				          docBlockName="<pre>";
  					  BEGIN(DocCopyBlock);
  					}
	YY_BREAK
case 603:
/* rule 603 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up scanYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up scanYYtext again */
YY_RULE_SETUP
#line 5568 "scanner.l"
{ // verbatim command (which could contain nested comments!)
                                          docBlock+=scanYYtext;
				          docBlockName=&scanYYtext[1];
  					  BEGIN(DocCopyBlock);
  					}
	YY_BREAK
case 604:
YY_RULE_SETUP
#line 5573 "scanner.l"
{
  					  if (insideCS)
					  {
					    docBlock+=scanYYtext;
					    docBlockName="<code>";
					    BEGIN(DocCopyBlock);
					  }
					  else
					  {
					    REJECT;
					  }
  					}
	YY_BREAK
case 605:
YY_RULE_SETUP
#line 5585 "scanner.l"
{ // any character that isn't special
  					  docBlock+=scanYYtext;
  					}
	YY_BREAK
case 606:
/* rule 606 can match eol */
YY_RULE_SETUP
#line 5588 "scanner.l"
{ // newline
                                          lineCount();
					  docBlock+=*scanYYtext;
  					}
	YY_BREAK
case 607:
YY_RULE_SETUP
#line 5592 "scanner.l"
{ // command block
					  docBlock+=*scanYYtext;
  					}
	YY_BREAK
/* ---- Copy verbatim sections ------ */
case 608:
YY_RULE_SETUP
#line 5598 "scanner.l"
{ // end of a <pre> block
  					  docBlock+=scanYYtext;
					  if (docBlockName=="<pre>")
					  {
  					    BEGIN(DocBlock);
					  }
  					}
	YY_BREAK
case 609:
YY_RULE_SETUP
#line 5605 "scanner.l"
{ // end of a <code> block
  					  docBlock+=scanYYtext;
					  if (docBlockName=="<code>")
					  {
  					    BEGIN(DocBlock);
					  }
  					}
	YY_BREAK
case 610:
YY_RULE_SETUP
#line 5612 "scanner.l"
{
  					  docBlock+=scanYYtext;
					  BEGIN(DocBlock);
  					}
	YY_BREAK
case 611:
/* rule 611 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up scanYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up scanYYtext again */
YY_RULE_SETUP
#line 5616 "scanner.l"
{ // end of verbatim block
  					  docBlock+=scanYYtext;
					  if (&scanYYtext[4]==docBlockName)
					  {
  					    BEGIN(DocBlock);
					  }
  					}
	YY_BREAK
case 612:
/* rule 612 can match eol */
YY_RULE_SETUP
#line 5623 "scanner.l"
{ // start of a comment line
  					  if (docBlockName=="verbatim")
					  {
					    REJECT;
					  }
                                          else
                                          {
                                            QCString indent;
                                            indent.fill(' ',computeIndent(scanYYtext,0));
                                            docBlock+=indent;
                                          }
  					}
	YY_BREAK
case 613:
YY_RULE_SETUP
#line 5635 "scanner.l"
{ // any character that is not special
  					  docBlock+=scanYYtext;
  					}
	YY_BREAK
case 614:
YY_RULE_SETUP
#line 5638 "scanner.l"
{
  					  docBlock+=scanYYtext;
					}
	YY_BREAK
case 615:
/* rule 615 can match eol */
YY_RULE_SETUP
#line 5641 "scanner.l"
{ // newline
  					  docBlock+=*scanYYtext;
                                          lineCount();
  					}
	YY_BREAK
case 616:
YY_RULE_SETUP
#line 5645 "scanner.l"
{ // any other character
  					  docBlock+=*scanYYtext;
  					}
	YY_BREAK
case YY_STATE_EOF(DocCopyBlock):
#line 5648 "scanner.l"
{
  					  warn(yyFileName,yyLineNr,
					      "warning: reached end of file while inside a %s block!\n"
					      "The command that should end the block seems to be missing!\n",
					      docBlockName.data());
  					  yyterminate();
  					}
	YY_BREAK
/* ------------- Prototype parser -------------- */
case 617:
YY_RULE_SETUP
#line 5659 "scanner.l"
{
  					  current->name+=scanYYtext;
  					}
	YY_BREAK
case 618:
YY_RULE_SETUP
#line 5662 "scanner.l"
{
  					  current->args+=*scanYYtext;
					  currentArgumentContext = PrototypeQual;
					  fullArgString = current->args.copy();
					  copyArgString = &current->args;
					  BEGIN( ReadFuncArgType ) ;
  					}
	YY_BREAK
case 619:
YY_RULE_SETUP
#line 5669 "scanner.l"
{
  					  current->type+=current->name+scanYYtext;
					  current->name.resize(0);
  					  BEGIN( PrototypePtr );
  					}
	YY_BREAK
case 620:
/* rule 620 can match eol */
YY_RULE_SETUP
#line 5674 "scanner.l"
{
  					  current->name+=scanYYtext;
  					}
	YY_BREAK
case 621:
YY_RULE_SETUP
#line 5677 "scanner.l"
{
  					  current->args+=*scanYYtext;
					  currentArgumentContext = PrototypeQual;
					  fullArgString = current->args.copy();
					  copyArgString = &current->args;
					  BEGIN( ReadFuncArgType ) ;
  					}
	YY_BREAK
case 622:
YY_RULE_SETUP
#line 5684 "scanner.l"
{
  					  current->type+=')';
  					  BEGIN( Prototype );
  					}
	YY_BREAK
case 623:
YY_RULE_SETUP
#line 5688 "scanner.l"
{
  					  current->name+=scanYYtext;
  					}
	YY_BREAK
case 624:
YY_RULE_SETUP
#line 5691 "scanner.l"
{
  					  BEGIN( PrototypeSkipLine);
  					}
	YY_BREAK
case 625:
YY_RULE_SETUP
#line 5694 "scanner.l"
{ 
  					  current->args += " const "; 
					  current->argList->constSpecifier=TRUE;
					}
	YY_BREAK
case 626:
YY_RULE_SETUP
#line 5698 "scanner.l"
{ 
  					  current->args += " volatile "; 
					  current->argList->volatileSpecifier=TRUE;
					}
	YY_BREAK
case 627:
YY_RULE_SETUP
#line 5702 "scanner.l"
{ 
					  current->args += " = 0"; 
					  current->virt = Pure; 
					  current->argList->pureSpecifier=TRUE;
					}
	YY_BREAK
case 628:
YY_RULE_SETUP
#line 5707 "scanner.l"
{
  					  current->exception = "throw(";
					  BEGIN(PrototypeExc);
  					}
	YY_BREAK
case 629:
YY_RULE_SETUP
#line 5711 "scanner.l"
{
  					  current->exception += ')';
					  BEGIN(PrototypeQual);
  					}
	YY_BREAK
case 630:
YY_RULE_SETUP
#line 5715 "scanner.l"
{
  					  current->exception += *scanYYtext;
  					}
	YY_BREAK
case 631:
YY_RULE_SETUP
#line 5718 "scanner.l"
{
  					  current->args += *scanYYtext;
  					}
	YY_BREAK
case 632:
YY_RULE_SETUP
#line 5721 "scanner.l"
{
  					  current->name += *scanYYtext;
  					}
	YY_BREAK
case 633:
YY_RULE_SETUP
#line 5724 "scanner.l"
{
  					}
	YY_BREAK
/* ------------ Generic rules -------------- */
case 634:
/* rule 634 can match eol */
YY_RULE_SETUP
#line 5731 "scanner.l"
{  // line continuation
  					  if (insideCS) 
					  {
					    REJECT;
					  }
					  else 
					  {
                                            lineCount();
					  }
  					}
	YY_BREAK
case 635:
/* rule 635 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up scanYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up scanYYtext again */
YY_RULE_SETUP
#line 5741 "scanner.l"
{ 
					  BEGIN( lastCContext ) ;
					}
	YY_BREAK
case 636:
YY_RULE_SETUP
#line 5744 "scanner.l"

	YY_BREAK
case 637:
/* rule 637 can match eol */
YY_RULE_SETUP
#line 5745 "scanner.l"
{ lineCount(); }
	YY_BREAK
case 638:
YY_RULE_SETUP
#line 5746 "scanner.l"
{
					  if (insideIDL && insideCppQuote)
					  {
					    BEGIN(EndCppQuote);
					  }
					}
	YY_BREAK
case 639:
YY_RULE_SETUP
#line 5752 "scanner.l"
{	
  					  if (!insidePHP)
  					    REJECT;
  					  lastCContext = YY_START ;
					  BEGIN( SkipCxxComment ) ;
					}
	YY_BREAK
case 640:
YY_RULE_SETUP
#line 5758 "scanner.l"
{
  					  if (insidePHP)
					  {
  					    lastStringContext=YY_START;
					    BEGIN(SkipPHPString);
					  }
  					}
	YY_BREAK
case 641:
YY_RULE_SETUP
#line 5765 "scanner.l"
{
  					  if (insidePHP)
					  {
  					    lastStringContext=YY_START;
					    BEGIN(SkipString);
					  }
  					}
	YY_BREAK
case 642:
YY_RULE_SETUP
#line 5772 "scanner.l"

	YY_BREAK
case 643:
YY_RULE_SETUP
#line 5773 "scanner.l"

	YY_BREAK
case 644:
YY_RULE_SETUP
#line 5774 "scanner.l"
{ lastCContext = YY_START ;
					  BEGIN( SkipComment ) ;
					}
	YY_BREAK
case 645:
YY_RULE_SETUP
#line 5777 "scanner.l"
{ BEGIN( lastCContext ) ; }
	YY_BREAK
case 646:
YY_RULE_SETUP
#line 5778 "scanner.l"
{	
  					  lastCContext = YY_START ;
					  BEGIN( SkipCxxComment ) ;
					}
	YY_BREAK
case 647:
YY_RULE_SETUP
#line 5782 "scanner.l"
ECHO;
	YY_BREAK
#line 18015 "<stdout>"
			case YY_STATE_EOF(INITIAL):
			case YY_STATE_EOF(Define):
			case YY_STATE_EOF(DefineEnd):
			case YY_STATE_EOF(CompoundName):
			case YY_STATE_EOF(ClassVar):
			case YY_STATE_EOF(CSConstraintName):
			case YY_STATE_EOF(CSConstraintType):
			case YY_STATE_EOF(CSIndexer):
			case YY_STATE_EOF(ClassCategory):
			case YY_STATE_EOF(ClassTemplSpec):
			case YY_STATE_EOF(CliPropertyType):
			case YY_STATE_EOF(CliPropertyIndex):
			case YY_STATE_EOF(CliOverride):
			case YY_STATE_EOF(Bases):
			case YY_STATE_EOF(BasesProt):
			case YY_STATE_EOF(NextSemi):
			case YY_STATE_EOF(BitFields):
			case YY_STATE_EOF(FindMembers):
			case YY_STATE_EOF(FindMembersPHP):
			case YY_STATE_EOF(FindMemberName):
			case YY_STATE_EOF(FindFields):
			case YY_STATE_EOF(FindFieldArg):
			case YY_STATE_EOF(Function):
			case YY_STATE_EOF(FuncRound):
			case YY_STATE_EOF(ExcpRound):
			case YY_STATE_EOF(ExcpList):
			case YY_STATE_EOF(FuncQual):
			case YY_STATE_EOF(Operator):
			case YY_STATE_EOF(Array):
			case YY_STATE_EOF(ReadBody):
			case YY_STATE_EOF(ReadNSBody):
			case YY_STATE_EOF(ReadBodyIntf):
			case YY_STATE_EOF(Using):
			case YY_STATE_EOF(UsingDirective):
			case YY_STATE_EOF(SkipCurly):
			case YY_STATE_EOF(SkipCurlyCpp):
			case YY_STATE_EOF(SkipCurlyEndDoc):
			case YY_STATE_EOF(SkipString):
			case YY_STATE_EOF(SkipPHPString):
			case YY_STATE_EOF(SkipInits):
			case YY_STATE_EOF(SkipCPP):
			case YY_STATE_EOF(SkipCPPBlock):
			case YY_STATE_EOF(SkipComment):
			case YY_STATE_EOF(SkipCxxComment):
			case YY_STATE_EOF(SkipCurlyBlock):
			case YY_STATE_EOF(SkipRoundBlock):
			case YY_STATE_EOF(Sharp):
			case YY_STATE_EOF(SkipSharp):
			case YY_STATE_EOF(SkipRound):
			case YY_STATE_EOF(SkipSquare):
			case YY_STATE_EOF(SkipRemainder):
			case YY_STATE_EOF(TypedefName):
			case YY_STATE_EOF(TryFunctionBlock):
			case YY_STATE_EOF(TryFunctionBlockEnd):
			case YY_STATE_EOF(Comment):
			case YY_STATE_EOF(PackageName):
			case YY_STATE_EOF(JavaImport):
			case YY_STATE_EOF(PHPUse):
			case YY_STATE_EOF(PHPUseAs):
			case YY_STATE_EOF(CSAccessorDecl):
			case YY_STATE_EOF(CSGeneric):
			case YY_STATE_EOF(PreLineCtrl):
			case YY_STATE_EOF(DefinePHP):
			case YY_STATE_EOF(DefinePHPEnd):
			case YY_STATE_EOF(OldStyleArgs):
			case YY_STATE_EOF(SkipVerbString):
			case YY_STATE_EOF(ObjCMethod):
			case YY_STATE_EOF(ObjCReturnType):
			case YY_STATE_EOF(ObjCParams):
			case YY_STATE_EOF(ObjCParamType):
			case YY_STATE_EOF(ObjCProtocolList):
			case YY_STATE_EOF(ObjCPropAttr):
			case YY_STATE_EOF(ObjCSkipStatement):
			case YY_STATE_EOF(QtPropType):
			case YY_STATE_EOF(QtPropName):
			case YY_STATE_EOF(QtPropAttr):
			case YY_STATE_EOF(QtPropRead):
			case YY_STATE_EOF(QtPropWrite):
			case YY_STATE_EOF(ReadInitializer):
			case YY_STATE_EOF(GetCallType):
			case YY_STATE_EOF(CppQuote):
			case YY_STATE_EOF(EndCppQuote):
			case YY_STATE_EOF(MemberSpec):
			case YY_STATE_EOF(MemberSpecSkip):
			case YY_STATE_EOF(EndTemplate):
			case YY_STATE_EOF(FuncPtr):
			case YY_STATE_EOF(FuncPtrOperator):
			case YY_STATE_EOF(EndFuncPtr):
			case YY_STATE_EOF(ReadFuncArgType):
			case YY_STATE_EOF(ReadTempArgs):
			case YY_STATE_EOF(IDLUnionCase):
			case YY_STATE_EOF(NSAliasName):
			case YY_STATE_EOF(NSAliasArg):
			case YY_STATE_EOF(CopyString):
			case YY_STATE_EOF(CopyPHPString):
			case YY_STATE_EOF(CopyGString):
			case YY_STATE_EOF(CopyPHPGString):
			case YY_STATE_EOF(CopyRound):
			case YY_STATE_EOF(CopyCurly):
			case YY_STATE_EOF(GCopyRound):
			case YY_STATE_EOF(GCopyCurly):
			case YY_STATE_EOF(SkipUnionSwitch):
			case YY_STATE_EOF(Specialization):
			case YY_STATE_EOF(FuncPtrInit):
			case YY_STATE_EOF(FuncFunc):
			case YY_STATE_EOF(FuncFuncEnd):
			case YY_STATE_EOF(FuncFuncType):
			case YY_STATE_EOF(FuncFuncArray):
			case YY_STATE_EOF(CopyArgString):
			case YY_STATE_EOF(CopyArgPHPString):
			case YY_STATE_EOF(CopyArgRound):
			case YY_STATE_EOF(CopyArgSharp):
			case YY_STATE_EOF(CopyArgComment):
			case YY_STATE_EOF(CopyArgCommentLine):
			case YY_STATE_EOF(CopyArgVerbatim):
			case YY_STATE_EOF(HereDoc):
			case YY_STATE_EOF(HereDocEnd):
			case YY_STATE_EOF(CopyHereDoc):
			case YY_STATE_EOF(CopyHereDocEnd):
			case YY_STATE_EOF(IDLAttribute):
			case YY_STATE_EOF(IDLProp):
			case YY_STATE_EOF(IDLPropName):
			case YY_STATE_EOF(Prototype):
			case YY_STATE_EOF(PrototypePtr):
			case YY_STATE_EOF(PrototypeQual):
			case YY_STATE_EOF(PrototypeExc):
			case YY_STATE_EOF(PrototypeSkipLine):
			case YY_STATE_EOF(DocLine):
			case YY_STATE_EOF(DocBlock):
				yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed scanYYin at a new source and called
			 * scanYYlex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = scanYYin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( scanYYwrap( ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * scanYYtext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of scanYYlex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (void)
{
    	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = (yytext_ptr);
	register int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			yy_size_t num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			YY_FATAL_ERROR(
"input buffer overflow, can't enlarge buffer because scanner uses REJECT" );

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			scanYYrestart(scanYYin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yy_size_t) ((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) scanYYrealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (void)
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    
	yy_current_state = (yy_start);
	yy_current_state += YY_AT_BOL();

	(yy_state_ptr) = (yy_state_buf);
	*(yy_state_ptr)++ = yy_current_state;

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 3943 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		*(yy_state_ptr)++ = yy_current_state;
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state )
{
	register int yy_is_jam;
    
	register YY_CHAR yy_c = 1;
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 3943 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 3942);
	if ( ! yy_is_jam )
		*(yy_state_ptr)++ = yy_current_state;

	return yy_is_jam ? 0 : yy_current_state;
}

    static void yyunput (int c, register char * yy_bp )
{
	register char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up scanYYtext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register yy_size_t number_to_move = (yy_n_chars) + 2;
		register char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		register char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (void)
#else
    static int input  (void)
#endif

{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			yy_size_t offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					scanYYrestart(scanYYin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( scanYYwrap( ) )
						return 0;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve scanYYtext */
	(yy_hold_char) = *++(yy_c_buf_p);

	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = (c == '\n');

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void scanYYrestart  (FILE * input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        scanYYensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            scanYY_create_buffer(scanYYin,YY_BUF_SIZE );
	}

	scanYY_init_buffer(YY_CURRENT_BUFFER,input_file );
	scanYY_load_buffer_state( );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void scanYY_switch_to_buffer  (YY_BUFFER_STATE  new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		scanYYpop_buffer_state();
	 *		scanYYpush_buffer_state(new_buffer);
     */
	scanYYensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	scanYY_load_buffer_state( );

	/* We don't actually know whether we did this switch during
	 * EOF (scanYYwrap()) processing, but the only time this flag
	 * is looked at is after scanYYwrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

static void scanYY_load_buffer_state  (void)
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	scanYYin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE scanYY_create_buffer  (FILE * file, int  size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) scanYYalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in scanYY_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) scanYYalloc(b->yy_buf_size + 2  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in scanYY_create_buffer()" );

	b->yy_is_our_buffer = 1;

	scanYY_init_buffer(b,file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with scanYY_create_buffer()
 * 
 */
    void scanYY_delete_buffer (YY_BUFFER_STATE  b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		scanYYfree((void *) b->yy_ch_buf  );

	scanYYfree((void *) b  );
}

#ifndef __cplusplus
extern int isatty (int );
#endif /* __cplusplus */
    
/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a scanYYrestart() or at EOF.
 */
    static void scanYY_init_buffer  (YY_BUFFER_STATE  b, FILE * file )

{
	int oerrno = errno;
    
	scanYY_flush_buffer(b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then scanYY_init_buffer was _probably_
     * called from scanYYrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void scanYY_flush_buffer (YY_BUFFER_STATE  b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		scanYY_load_buffer_state( );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void scanYYpush_buffer_state (YY_BUFFER_STATE new_buffer )
{
    	if (new_buffer == NULL)
		return;

	scanYYensure_buffer_stack();

	/* This block is copied from scanYY_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from scanYY_switch_to_buffer. */
	scanYY_load_buffer_state( );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void scanYYpop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	scanYY_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		scanYY_load_buffer_state( );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void scanYYensure_buffer_stack (void)
{
	yy_size_t num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		(yy_buffer_stack) = (struct yy_buffer_state**)scanYYalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in scanYYensure_buffer_stack()" );
								  
		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)scanYYrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in scanYYensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * 
 * @return the newly allocated buffer state object. 
 */
YY_BUFFER_STATE scanYY_scan_buffer  (char * base, yy_size_t  size )
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) scanYYalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in scanYY_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	scanYY_switch_to_buffer(b  );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to scanYYlex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * 
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       scanYY_scan_bytes() instead.
 */
YY_BUFFER_STATE scanYY_scan_string (yyconst char * yystr )
{
    
	return scanYY_scan_bytes(yystr,strlen(yystr) );
}

/** Setup the input buffer state to scan the given bytes. The next call to scanYYlex() will
 * scan from a @e copy of @a bytes.
 * @param bytes the byte buffer to scan
 * @param len the number of bytes in the buffer pointed to by @a bytes.
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE scanYY_scan_bytes  (yyconst char * yybytes, yy_size_t  _yybytes_len )
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n, i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = _yybytes_len + 2;
	buf = (char *) scanYYalloc(n  );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in scanYY_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = scanYY_scan_buffer(buf,n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in scanYY_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yy_fatal_error (yyconst char* msg )
{
    	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up scanYYtext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		scanYYtext[scanYYleng] = (yy_hold_char); \
		(yy_c_buf_p) = scanYYtext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		scanYYleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the current line number.
 * 
 */
int scanYYget_lineno  (void)
{
        
    return scanYYlineno;
}

/** Get the input stream.
 * 
 */
FILE *scanYYget_in  (void)
{
        return scanYYin;
}

/** Get the output stream.
 * 
 */
FILE *scanYYget_out  (void)
{
        return scanYYout;
}

/** Get the length of the current token.
 * 
 */
yy_size_t scanYYget_leng  (void)
{
        return scanYYleng;
}

/** Get the current token.
 * 
 */

char *scanYYget_text  (void)
{
        return scanYYtext;
}

/** Set the current line number.
 * @param line_number
 * 
 */
void scanYYset_lineno (int  line_number )
{
    
    scanYYlineno = line_number;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param in_str A readable stream.
 * 
 * @see scanYY_switch_to_buffer
 */
void scanYYset_in (FILE *  in_str )
{
        scanYYin = in_str ;
}

void scanYYset_out (FILE *  out_str )
{
        scanYYout = out_str ;
}

int scanYYget_debug  (void)
{
        return scanYY_flex_debug;
}

void scanYYset_debug (int  bdebug )
{
        scanYY_flex_debug = bdebug ;
}

static int yy_init_globals (void)
{
        /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from scanYYlex_destroy(), so don't allocate here.
     */

    (yy_buffer_stack) = 0;
    (yy_buffer_stack_top) = 0;
    (yy_buffer_stack_max) = 0;
    (yy_c_buf_p) = (char *) 0;
    (yy_init) = 0;
    (yy_start) = 0;

    (yy_state_buf) = 0;
    (yy_state_ptr) = 0;
    (yy_full_match) = 0;
    (yy_lp) = 0;

/* Defined in main.c */
#ifdef YY_STDINIT
    scanYYin = stdin;
    scanYYout = stdout;
#else
    scanYYin = (FILE *) 0;
    scanYYout = (FILE *) 0;
#endif

    /* For future reference: Set errno on error, since we are called by
     * scanYYlex_init()
     */
    return 0;
}

/* scanYYlex_destroy is for both reentrant and non-reentrant scanners. */
int scanYYlex_destroy  (void)
{
    
    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		scanYY_delete_buffer(YY_CURRENT_BUFFER  );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		scanYYpop_buffer_state();
	}

	/* Destroy the stack itself. */
	scanYYfree((yy_buffer_stack) );
	(yy_buffer_stack) = NULL;

    scanYYfree ( (yy_state_buf) );
    (yy_state_buf)  = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * scanYYlex() is called, initialization will occur. */
    yy_init_globals( );

    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *scanYYalloc (yy_size_t  size )
{
	return (void *) malloc( size );
}

void *scanYYrealloc  (void * ptr, yy_size_t  size )
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void scanYYfree (void * ptr )
{
	free( (char *) ptr );	/* see scanYYrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 5782 "scanner.l"



//----------------------------------------------------------------------------

static void startCommentBlock(bool brief)
{
  if (brief)
  {
    current->briefFile = yyFileName;
    current->briefLine = yyLineNr;
  }
  else
  {
    current->docFile = yyFileName;
    current->docLine = yyLineNr;
  }
}
  
//----------------------------------------------------------------------------

static void newEntry()
{
  current_root->addSubEntry(current);
  previous = current;
  current = new Entry ;
  initEntry();
}

static void handleCommentBlock(const QCString &doc,bool brief)
{
  static bool hideInBodyDocs = Config_getBool("HIDE_IN_BODY_DOCS");
  int position=0;
  bool needsEntry=FALSE;
  if (docBlockInBody && hideInBodyDocs) return;
  //printf("parseCommentBlock [%s] brief=%d\n",doc.data(),brief);
  int lineNr = brief ? current->briefLine : current->docLine;   // line of block start
  
  // fill in inbodyFile && inbodyLine the first time, see bug 633891
  Entry *docEntry = docBlockInBody && previous ? previous : current;
  if (docBlockInBody && docEntry && docEntry->inbodyLine==-1)
  {
    docEntry->inbodyFile = yyFileName;
    docEntry->inbodyLine = lineNr;
  }

  while (parseCommentBlock(
	g_thisParser,
	docBlockInBody && previous ? previous : current,
	stripIndentation(doc),        // text
	yyFileName, // file
	lineNr,     // line of block start
	docBlockInBody ? FALSE : brief,               // isBrief
	docBlockInBody ? FALSE : docBlockAutoBrief,   // isJavaDocStyle
	docBlockInBody,                               // isInBody
	protection,
        position,
        needsEntry
        )
     ) 
  {
    //printf("parseCommentBlock position=%d [%s]\n",position,doc.data()+position);
    if (needsEntry) 
    {
      QCString docFile = current->docFile;
      newEntry();
      current->docFile = docFile;
      current->docLine = lineNr;
    }
  }
  if (needsEntry)
  {
    newEntry();
  }

  if (docBlockTerm)
  {
    unput(docBlockTerm);
    docBlockTerm=0;
  }
}

static void handleParametersCommentBlocks(ArgumentList *al)
{
  //printf(">>>>>>> handleParametersCommentBlocks()\n");
  ArgumentListIterator ali(*al);
  Argument *a;
  for (ali.toFirst();(a=ali.current());++ali)
  {
    //printf("    Param %s docs=%s\n",a->name.data(),a->docs.data());
    if (!a->docs.isEmpty())
    {
      int position=0;
      bool needsEntry;

      // save context
      QCString orgDoc   = current->doc;
      QCString orgBrief = current->brief;
      int orgDocLine    = current->docLine;
      int orgBriefLine  = current->briefLine;

      current->doc.resize(0);
      current->brief.resize(0);

      //printf("handleParametersCommentBlock [%s]\n",doc.data());
      while (parseCommentBlock(
	     g_thisParser,
	     current,
	     a->docs,            // text
	     yyFileName,         // file
	     current->docLine,   // line of block start
	     FALSE, 
	     FALSE,
	     FALSE,
	     protection,
	     position,
	     needsEntry
	    )
	  ) 
      {
	//printf("handleParametersCommentBlock position=%d [%s]\n",position,doc.data()+position);
	if (needsEntry) newEntry();
      }
      if (needsEntry)
      {
	newEntry();
      }
      a->docs = current->doc;

      // restore context
      current->doc       = orgDoc;
      current->brief     = orgBrief;
      current->docLine   = orgDocLine;
      current->briefLine = orgBriefLine;
    }
  }
}


//----------------------------------------------------------------------------

static void parseCompounds(Entry *rt)
{
  //printf("parseCompounds(%s)\n",rt->name.data());
  g_inputFromFile = FALSE;
  EntryListIterator eli(*rt->children());
  Entry *ce;
  for (;(ce=eli.current());++eli)
  {
    if (!ce->program.isEmpty())
    {
      //printf("-- %s ---------\n%s\n---------------\n",
      //  ce->name.data(),ce->program.data());
      // init scanner state
      padCount=0;
      //depthIf = 0;
      g_column=0;
      inputString = ce->program;
      inputPosition = 0;
      scanYYrestart( scanYYin ) ;
      if (ce->section==Entry::ENUM_SEC || (ce->spec&Entry::Enum))
	BEGIN( FindFields ) ;
      else
	BEGIN( FindMembers ) ;
      current_root = ce ;
      yyFileName = ce->fileName;
      //setContext();
      yyLineNr = ce->startLine ;
      insideObjC = ce->lang==SrcLangExt_ObjC;
      //printf("---> Inner block starts at line %d objC=%d\n",yyLineNr,insideObjC);
      //current->reset();
      if (current) delete current;
      current = new Entry;
      initEntry();
      gstat = FALSE;
      int ni=ce->name.findRev("::"); if (ni==-1) ni=0; else ni+=2;
      // set default protection based on the compound type
      if( ce->section==Entry::CLASS_SEC ) // class
      {

        if (insidePHP || insideD || insideJS)
	{
          current->protection = protection = Public ; 
	}
	else if (insideJava)
	{
          current->protection = protection = (ce->spec & (Entry::Interface|Entry::Enum)) ?  Public : Package;
	}
	else if (ce->spec&(Entry::Interface | Entry::Ref | Entry::Value | Entry::Struct | Entry::Union))
	{
	  if (ce->lang==SrcLangExt_ObjC)
	  {
	    current->protection = protection = Protected ;
	  }
	  else
	  {
	    current->protection = protection = Public ;
	  }
	}
	else 
	{
          current->protection = protection = Private ;
	}
      }
      else if (ce->section == Entry::ENUM_SEC ) // enum
      {
	current->protection = protection = ce->protection;
      }
      else if (!ce->name.isEmpty() && ce->name.at(ni)=='@') // unnamed union or namespace
      {
	if (ce->section == Entry::NAMESPACE_SEC ) // unnamed namespace
	{
          current->stat = gstat = TRUE;
	}
	current->protection = protection = ce->protection;
      }
      else // named struct, union, protocol, category
      {
	current->protection = protection = Public ;
      }
      mtype = Method;
      virt = Normal;
      //printf("name=%s current->stat=%d gstat=%d\n",ce->name.data(),current->stat,gstat);

      //memberGroupId = DOX_NOGROUP;
      //memberGroupRelates.resize(0);
      //memberGroupInside.resize(0);
      groupEnterCompound(yyFileName,yyLineNr,ce->name);
      
      scanYYlex() ;
      g_lexInit=TRUE;
      //forceEndGroup();

      groupLeaveCompound(yyFileName,yyLineNr,ce->name);
      
      delete current; current=0;
      ce->program.resize(0);


      //if (depthIf>0)
      //{
      //	warn(yyFileName,yyLineNr,"Documentation block ended in the middle of a conditional section!");
      //}
    }
    parseCompounds(ce);
  }
}

//----------------------------------------------------------------------------

static void parseMain(const char *fileName,const char *fileBuf,Entry *rt)
{
  initParser();
  //g_inputFromFile = TRUE;

  inputString = fileBuf;
  inputPosition = 0;
  g_inputFromFile = FALSE;
  g_column = 0;

  //anonCount     = 0;  // don't reset per file
  //depthIf       = 0;
  protection    = Public;
  mtype         = Method;
  gstat         = FALSE;
  virt          = Normal;
  current_root  = rt;
  global_root   = rt;
  inputFile.setName(fileName);
  if (inputFile.open(IO_ReadOnly))
  {
    yyLineNr= 1 ; 
    yyFileName = fileName;
    setContext();
    rt->lang = language;
    msg("Parsing file %s...\n",yyFileName.data());

    current_root  = rt ;
    initParser();
    groupEnterFile(yyFileName,yyLineNr);
    current       = new Entry;
    //printf("current=%p current_root=%p\n",current,current_root);
    int sec=guessSection(yyFileName);
    if (sec)
    {
      current->name    = yyFileName;
      current->section = sec;
      current_root->addSubEntry(current);
      current          = new Entry;
    }
    current->reset();
    initEntry();
    scanYYrestart( scanYYin );
    if ( insidePHP )
    {
      BEGIN( FindMembersPHP );
    }
    else
    {
      BEGIN( FindMembers );
    }

    scanYYlex();
    g_lexInit=TRUE;

    if (YY_START==Comment)
    {
      warn(yyFileName,yyLineNr,"warning: File ended in the middle of a comment block! Perhaps a missing \\endcode?");
    }

    //forceEndGroup();
    groupLeaveFile(yyFileName,yyLineNr);

    //if (depthIf>0)
    //{
    //  warn(yyFileName,yyLineNr,"Documentation block ended in the middle of a conditional section!");
    //}

    rt->program.resize(0);
    if (rt->children()->contains(current)==0) 
      // it could be that current is already added as a child to rt, so we
      // only delete it if this is not the case. See bug 635317.
    {
      delete current; current=0;
    }

    parseCompounds(rt);

    inputFile.close();

    anonNSCount++;
  }
}

//----------------------------------------------------------------------------

static void parsePrototype(const QCString &text)
{
  //printf("**** parsePrototype(%s) begin\n",text.data());
  if (text.isEmpty()) 
  {
    warn(yyFileName,yyLineNr,"Empty prototype found!");
    return;
  }

  const char *orgInputString;
  int orgInputPosition;
  YY_BUFFER_STATE orgState;
  bool orgInputFromFile;
  
  // save scanner state
  orgState = YY_CURRENT_BUFFER;
  scanYY_switch_to_buffer(scanYY_create_buffer(scanYYin,YY_BUF_SIZE));
  orgInputString = inputString; 
  orgInputPosition = inputPosition;
  orgInputFromFile = g_inputFromFile;

  // set new string
  inputString = text;
  inputPosition = 0;
  g_column = 0;
  g_inputFromFile = FALSE;
  scanYYrestart( scanYYin );
  BEGIN(Prototype);
  scanYYlex();
  g_lexInit=TRUE;

  current->name = current->name.stripWhiteSpace();
  if (current->section == Entry::MEMBERDOC_SEC && current->args.isEmpty())
    current->section = Entry::VARIABLEDOC_SEC;

  // restore original scanner state
  YY_BUFFER_STATE tmpState = YY_CURRENT_BUFFER;
  scanYY_switch_to_buffer(orgState);
  scanYY_delete_buffer(tmpState);
  inputString = orgInputString; 
  inputPosition = orgInputPosition;
  g_inputFromFile = orgInputFromFile;

  //printf("**** parsePrototype end\n");
}

void scanFreeScanner()
{
#if defined(YY_FLEX_SUBMINOR_VERSION)
  if (g_lexInit)
  {
    scanYYlex_destroy();
  }
#endif
}

//static void handleGroupStartCommand(const char *header)
//{
//  memberGroupHeader=header;
//  startGroupInDoc();
//}
//
//static void handleGroupEndCommand()
//{
//  endGroup();
//  previous=0;
//}

//----------------------------------------------------------------------------

void CLanguageScanner::parseInput(const char *fileName,const char *fileBuf,Entry *root)
{
  g_thisParser = this;
  ::parseMain(fileName,fileBuf,root);
}

void CLanguageScanner::parseCode(CodeOutputInterface & codeOutIntf,
                   const char * scopeName,
                   const QCString & input,
                   bool isExampleBlock,
                   const char * exampleName,
                   FileDef * fileDef,
                   int startLine,
                   int endLine,
                   bool inlineFragment,
		   MemberDef *memberDef,
		   bool showLineNumbers
                  )
{
  ::parseCCode(codeOutIntf,scopeName,input,isExampleBlock,exampleName,
               fileDef,startLine,endLine,inlineFragment,memberDef,
	       showLineNumbers);
}

bool CLanguageScanner::needsPreprocessing(const QCString &extension)
{
  QCString fe=extension.lower();
  return 
   !( fe==".java" || fe==".as"  || fe==".d"    || fe==".php" || 
      fe==".php4" || fe==".inc" || fe==".phtml" 
    );
}

void CLanguageScanner::resetCodeParserState()
{
  ::resetCCodeParserState();
}

void CLanguageScanner::parsePrototype(const char *text)
{
  ::parsePrototype(text);
}

//----------------------------------------------------------------------------

#if !defined(YY_FLEX_SUBMINOR_VERSION) 
//----------------------------------------------------------------------------
extern "C" { // some bogus code to keep the compiler happy
  void scannerYYdummy() { yy_flex_realloc(0,0); } 
}
#endif


