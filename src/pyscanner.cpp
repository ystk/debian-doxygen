
#line 3 "<stdout>"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define yy_create_buffer pyscanYY_create_buffer
#define yy_delete_buffer pyscanYY_delete_buffer
#define yy_flex_debug pyscanYY_flex_debug
#define yy_init_buffer pyscanYY_init_buffer
#define yy_flush_buffer pyscanYY_flush_buffer
#define yy_load_buffer_state pyscanYY_load_buffer_state
#define yy_switch_to_buffer pyscanYY_switch_to_buffer
#define yyin pyscanYYin
#define yyleng pyscanYYleng
#define yylex pyscanYYlex
#define yylineno pyscanYYlineno
#define yyout pyscanYYout
#define yyrestart pyscanYYrestart
#define yytext pyscanYYtext
#define yywrap pyscanYYwrap
#define yyalloc pyscanYYalloc
#define yyrealloc pyscanYYrealloc
#define yyfree pyscanYYfree

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 35
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;
#endif /* ! C99 */

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! FLEXINT_H */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE pyscanYYrestart(pyscanYYin  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#define YY_BUF_SIZE 262144
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

extern yy_size_t pyscanYYleng;

extern FILE *pyscanYYin, *pyscanYYout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    #define YY_LESS_LINENO(n)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up pyscanYYtext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up pyscanYYtext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	yy_size_t yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via pyscanYYrestart()), so that the user can continue scanning by
	 * just pointing pyscanYYin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* Stack of input buffers. */
static size_t yy_buffer_stack_top = 0; /**< index of top of stack. */
static size_t yy_buffer_stack_max = 0; /**< capacity of stack. */
static YY_BUFFER_STATE * yy_buffer_stack = 0; /**< Stack as an array. */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* yy_hold_char holds the character lost when pyscanYYtext is formed. */
static char yy_hold_char;
static yy_size_t yy_n_chars;		/* number of characters read into yy_ch_buf */
yy_size_t pyscanYYleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 0;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow pyscanYYwrap()'s to do buffer switches
 * instead of setting up a fresh pyscanYYin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void pyscanYYrestart (FILE *input_file  );
void pyscanYY_switch_to_buffer (YY_BUFFER_STATE new_buffer  );
YY_BUFFER_STATE pyscanYY_create_buffer (FILE *file,int size  );
void pyscanYY_delete_buffer (YY_BUFFER_STATE b  );
void pyscanYY_flush_buffer (YY_BUFFER_STATE b  );
void pyscanYYpush_buffer_state (YY_BUFFER_STATE new_buffer  );
void pyscanYYpop_buffer_state (void );

static void pyscanYYensure_buffer_stack (void );
static void pyscanYY_load_buffer_state (void );
static void pyscanYY_init_buffer (YY_BUFFER_STATE b,FILE *file  );

#define YY_FLUSH_BUFFER pyscanYY_flush_buffer(YY_CURRENT_BUFFER )

YY_BUFFER_STATE pyscanYY_scan_buffer (char *base,yy_size_t size  );
YY_BUFFER_STATE pyscanYY_scan_string (yyconst char *yy_str  );
YY_BUFFER_STATE pyscanYY_scan_bytes (yyconst char *bytes,yy_size_t len  );

void *pyscanYYalloc (yy_size_t  );
void *pyscanYYrealloc (void *,yy_size_t  );
void pyscanYYfree (void *  );

#define yy_new_buffer pyscanYY_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        pyscanYYensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            pyscanYY_create_buffer(pyscanYYin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        pyscanYYensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            pyscanYY_create_buffer(pyscanYYin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define pyscanYYwrap(n) 1
#define YY_SKIP_YYWRAP

typedef unsigned char YY_CHAR;

FILE *pyscanYYin = (FILE *) 0, *pyscanYYout = (FILE *) 0;

typedef int yy_state_type;

extern int pyscanYYlineno;

int pyscanYYlineno = 1;

extern char *pyscanYYtext;
#define yytext_ptr pyscanYYtext

static yy_state_type yy_get_previous_state (void );
static yy_state_type yy_try_NUL_trans (yy_state_type current_state  );
static int yy_get_next_buffer (void );
static void yy_fatal_error (yyconst char msg[]  );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up pyscanYYtext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	pyscanYYleng = (size_t) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;

#define YY_NUM_RULES 147
#define YY_END_OF_BUFFER 148
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_acclist[744] =
    {   0,
    16477,16477,   95,   95,   24,   24,   29,   29,   33,   33,
      148,  146,  147,  145,  147,   16,  146,  147,   16,  146,
      147,   17,  145,  147,   12,   16,  146,  147,   16,  146,
      147,   11,   16,  146,  147,   14,   16,  146,  147,   14,
       16,  146,  147,   14,   16,  146,  147,   14,   16,  146,
      147,   14,   16,  146,  147,   15,   16,  146,  147,   16,
      146,  147,   14,   16,  146,  147,16393,16394,   14,   16,
      146,  147,16393,16394,   14,   16,  146,  147,16393,16394,
       14,   16,  146,  147,16393,16394,   14,   16,  146,  147,
    16393,16394,   43,  146,  147,   43,  146,  147,   42,  145,

      147,   41,   43,  146,  147,   43,  146,  147,   40,   43,
      146,  147,   43,  146,  147,   43,  146,  147,   43,  146,
      147,  120,  122,  146,  147,  122,  146,  147,  121,  145,
      147,  122,  146,  147,  122,  146,  147,  119,  122,  146,
      147,  125,  127,  146,  147,  126,  145,  147,  127,  146,
      147,  125,  127,  146,  147,  123,  127,  146,  147,  146,
      147,   60,  146,  147,   59,  146,  147,   58,  146,  147,
       67,  146,  147,   61,  146,  147,   67,  146,  147,   64,
      146,  147,   61,   67,  146,  147,   65,  146,  147,   63,
       67,  146,  147,   62,   67,  146,  147,   50,   54,  146,

      147,   54,  146,  147,   53,  145,  147,16428,   49,   54,
      146,  147,   52,   54,  146,  147,   48,   54,  146,  147,
       47,   54,  146,  147,   52,   54,  146,  147,   71,  146,
      147,   72,  145,  147,   68,   71,  146,  147,   70,   71,
      146,  147,   69,   71,  146,  147,   85,  146,  147,   86,
      146,  147,   86,  146,  147,   87,  146,  147,   88,  146,
      147,  146,  147,   89,  145,  147, 8285,  146,  147,  146,
      147,  146,  147,   92,  146,  147,   79,   82,  146,  147,
       82,  146,  147,   80,  145,  147,   78,   82,  146,  147,
       82,  146,  147,   77,   82,  146,  147,   76,   82,  146,

      147,  107,  146,  147,   95,  107,  146,  147,  108,  145,
      147,   99,  107,  146,  147,  105,  107,  146,  147,   98,
      107,  146,  147,  102,  107,  146,  147,   96,  107,  146,
      147,   96,  107,  146,  147,   94,  107,  146,  147,  106,
      107,  146,  147,  106,  107,  146,  147,  106,  107,  146,
      147,  103,  107,  146,  147,  106,  107,  146,  147,  104,
      107,  146,  147,  116,  146,  147,  115,  145,  147,  113,
      146,  147,  114,  145,  147,  111,  113,  146,  147,  109,
      113,  146,  147,  110,  113,  146,  147,  112,  113,  146,
      147,  132,  133,  146,  147,  133,  146,  147,  131,  133,

      146,  147,  133,  146,  147,  138,  139,  146,  147,  137,
      139,  146,  147,  139,  146,  147,  139,  146,  147,  142,
      144,  146,  147,  142,  143,  145,  147,  142,  144,  146,
      147,  142,  144,  146,  147,  144,  146,  147,   25,  146,
      147,   24,   25,  146,  147,   23,  145,  147,   21,   25,
      146,  147,   21,   25,  146,  147,   30,  146,  147,   29,
       30,  146,  147,   28,  145,  147,   26,   30,  146,  147,
       27,   30,  146,  147,   34,  146,  147,   33,   34,  146,
      147,   32,  145,  147,   31,   34,  146,  147,   17,   13,
       14,   14,   14,   14,   14,   15,16393,16394,16393,16394,

    16393,16394,16393,16394,16393,16394,   14,16393,16394,   14,
    16393,16394,   14,16393,16394,   14,16393,16394,   14,16393,
    16394,   39,  120,  119,  125,  124,  125,  123,  123,   60,
       59,   58,   61,   66,   65,   62,   50,16428,   52,   47,
       46,   51,   52,   52,   85,   86,   88,   89,   92,   79,
       81,   76,   75,   95,  105,   96,   96,   96,  106,   99,
       98,  106,  112,  132,  129,  129,  128,  138,  135,  135,
      134,  142,  142,  142,   24,   21,   21,   29,   27,   33,
       31,   18,   13,   19,   14,   14,   14,   14,16393,16394,
    16393,16394,16393,16394,16393,16394,16393,16394,   20, 8202,

     8202, 8202,   14,16393,16394,   14,16393,16394,   14,16393,
    16394,   14,16393,16394,   36,   39,   37,   38,  117,  118,
       66,   45, 8236,   55,   56,   51,   51,   52,   52,   57,
       57,   88,   90,   91,   74,   73,   83,   81,   84,  100,
      101,   97,   96,   96,  130,  136,  140,  141,   21,   21,
       31,   18,   19,   14,    2,   14,   14,16393,16394,16393,
    16394,16393,16394,16393,16394,   14,16393,16394,    1,    2,
       14,16393,16394,   14,16393,16394,   36,   37,  117,  118,
       55,   56,   51,   88,   90,   91,   83,   84,  100,  101,
       97,   96,  140,  141,   21,   21,   31,   14,    6,   14,

    16393,16394,    1,16393,16394,16393,16394,   14,16393,16394,
        5,    6,   14,16393,16394,   97,   21,    4,   14,16393,
    16394,    5,16393,16394,    3,    4,   14,16393,16394,16419,
       21,   22,    8,    3,16393,16394,    7,    8,16419, 8227,
       22,    7, 8201
    } ;

static yyconst flex_int16_t yy_accept[449] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    2,    3,    3,    3,    4,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    6,    7,    8,    9,   10,   11,   12,   14,   16,
       19,   22,   25,   29,   32,   36,   40,   44,   48,   52,
       56,   60,   63,   69,   75,   81,   87,   93,   96,   99,
      102,  106,  109,  113,  116,  119,  122,  126,  129,  132,
      135,  138,  142,  146,  149,  152,  156,  160,  162,  165,
      168,  171,  174,  177,  180,  183,  187,  190,  194,  198,

      202,  205,  209,  213,  217,  221,  225,  229,  232,  235,
      239,  243,  247,  250,  253,  256,  259,  262,  264,  267,
      270,  272,  274,  277,  281,  284,  287,  291,  294,  298,
      302,  305,  309,  312,  316,  320,  324,  328,  332,  336,
      340,  344,  348,  352,  356,  360,  364,  367,  370,  373,
      376,  380,  384,  388,  392,  396,  399,  403,  406,  410,
      414,  417,  420,  424,  428,  432,  436,  439,  442,  446,
      449,  453,  457,  460,  464,  467,  471,  475,  478,  482,
      485,  489,  489,  489,  490,  490,  491,  491,  492,  493,
      494,  495,  496,  497,  497,  499,  501,  503,  505,  507,

      507,  507,  510,  510,  513,  516,  519,  522,  522,  522,
      522,  523,  523,  523,  523,  523,  523,  524,  524,  524,
      525,  526,  526,  527,  528,  529,  530,  530,  531,  532,
      533,  534,  534,  535,  536,  537,  538,  539,  539,  539,
      539,  540,  540,  541,  542,  542,  544,  545,  546,  547,
      547,  548,  548,  549,  549,  549,  550,  551,  551,  551,
      551,  551,  551,  552,  552,  553,  554,  555,  555,  556,
      556,  556,  557,  558,  559,  559,  560,  561,  562,  563,
      564,  565,  565,  566,  567,  568,  569,  569,  570,  571,
      572,  573,  573,  574,  575,  576,  576,  576,  577,  578,

      579,  580,  581,  581,  581,  582,  583,  584,  585,  586,
      587,  588,  589,  591,  593,  595,  597,  599,  600,  601,
      602,  603,  606,  609,  612,  615,  616,  617,  618,  618,
      619,  620,  621,  622,  623,  624,  624,  625,  626,  627,
      627,  629,  631,  632,  633,  634,  635,  636,  637,  637,
      638,  639,  640,  641,  642,  643,  644,  645,  646,  646,
      647,  647,  648,  649,  649,  650,  651,  651,  652,  653,
      654,  655,  656,  657,  658,  660,  662,  664,  666,  666,
      666,  666,  669,  671,  674,  677,  678,  679,  679,  680,
      681,  682,  683,  684,  685,  686,  687,  688,  689,  690,

      691,  691,  692,  693,  694,  695,  696,  697,  698,  699,
      700,  701,  703,  704,  706,  708,  708,  711,  713,  716,
      716,  716,  717,  718,  719,  720,  722,  723,  725,  725,
      727,  730,  731,  733,  734,  735,  737,  737,  739,  739,
      740,  741,  742,  743,  743,  743,  744,  744
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    4,    5,    6,    1,    7,    7,    8,    9,
       10,   11,   12,   13,   12,   14,    7,   15,   16,   16,
       16,   16,   16,   16,   16,   17,   17,   18,    7,    7,
       19,    7,    1,    1,   20,   20,   20,   20,   21,   20,
       22,   22,   22,   23,   22,   24,   22,   22,   22,   22,
       22,   25,   22,   22,   26,   22,   22,   27,   22,   22,
       28,   29,   30,    1,   31,    7,   32,   20,   33,   34,

       35,   36,   22,   22,   37,   23,   22,   38,   39,   22,
       40,   41,   22,   42,   43,   44,   45,   22,   22,   27,
       46,   22,   47,    7,   30,    7,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst flex_int32_t yy_meta[48] =
    {   0,
        1,    2,    3,    1,    4,    5,    1,    4,    1,    1,
        1,    1,    1,    6,    7,    7,    7,    1,    8,    9,
        9,   10,   10,   10,   10,   10,   10,    1,   11,    1,
       10,    9,    9,    9,    9,    9,   10,   10,   10,   10,
       10,   10,   10,   10,   10,   10,    1
    } ;

static yyconst flex_int16_t yy_base[526] =
    {   0,
     1560, 1552,    0,   47,   93,  100, 1551, 1542,  107,  111,
       94,  115,  143,    0,  190,    0,  120,  127,  235,  237,
      250,    0,  297,    0,  344,  352,  356,  363,  371,    0,
     1541, 1536,  418,    0,  463,  464,  470,  471,  477,  478,
      507,    0,  554,    0,  601,    0, 1535, 1673, 1673, 1673,
      105, 1529, 1517,    0, 1503,    0, 1468, 1469, 1461, 1463,
      647, 1495,  118,  648,  468,  649,  650, 1673,  125, 1673,
     1488,    0, 1484, 1456,  136, 1484,    0, 1673, 1673, 1481,
     1454, 1449,    0,  237, 1673,  361, 1440,  486, 1673, 1673,
        0, 1673,  488,    0, 1673, 1673, 1442, 1673,    0,    0,

     1673,  495, 1438,    0, 1434,  652, 1435, 1673, 1673, 1673,
     1673, 1673,    0, 1429, 1673, 1673, 1408,  137, 1673, 1673,
     1404, 1395,  239,    0,  496, 1383, 1375,    0, 1371,  654,
     1673, 1376, 1673, 1372,    0, 1359, 1673,  678,  647, 1673,
        0,  343,  671, 1673,  682, 1673, 1673, 1673, 1673, 1673,
     1673, 1673, 1673,    0,    0, 1357, 1673,  663,    0, 1673,
     1351,  670, 1329, 1328, 1348, 1341,  695, 1673, 1344, 1673,
      475,  695, 1673, 1343, 1673, 1673,    0, 1673, 1342, 1673,
      482,  672,    0, 1332, 1309,    0, 1305,    0, 1261, 1256,
     1247, 1242,  702, 1267,  680,  704,  708,  709,  710,    0,

      712,  713,  715,  718,  728,  738,  739,  716,    0, 1259,
        0, 1254, 1219,  719, 1250,    0,    0, 1250, 1239, 1244,
        0,  742, 1673,  753, 1239, 1238,  743, 1673, 1673,    0,
      760,    0,    0, 1238,    0,    0,  761, 1229, 1223, 1209,
        0, 1201,  766, 1673, 1202,    0,  767,    0, 1205,    0,
     1191,  751, 1673, 1199, 1189,  772,    0,  775,    0, 1190,
     1193, 1189,    0, 1185,  780, 1673, 1187, 1176,    0, 1171,
      772,  776,  780, 1673,    0,    0, 1673, 1673,  771,    0,
        0, 1169, 1673,  782, 1673,    0, 1158, 1673,  799, 1673,
     1135,  802, 1149, 1145, 1150,  806, 1142,  807,  809, 1140,

        0, 1133,  810, 1132,  811, 1129,    0, 1128, 1085, 1125,
     1087, 1084,  796,  814,  815,  817,  820, 1673, 1673,  724,
     1081,  824,  825,  826,  828, 1115,    0, 1107, 1073, 1673,
      969,  968,    0, 1673,  969,  968,  965,  963,    0,    0,
        0,    0, 1673,  952,  958,  957, 1673,  954,  946,  939,
        0,  918,  913,  908,  837, 1673,  332, 1673,  829, 1673,
      835,  905,  881,  876,  827,  857,  853,  860, 1673, 1673,
      805,  840,  833,  764,  847,  854,  861,  862,  838,  729,
      720,  867,  868,  873,  874, 1673, 1673,  732, 1673, 1673,
     1673, 1673,    0,  719, 1673, 1673, 1673, 1673, 1673, 1673,

      879, 1673, 1673, 1673, 1673,  875,  897,  899,  717,  686,
      633,  886,  896,  901,  902,  634,  904,  905,  906,    0,
      867,  911,  916,  657,  503,  912,  917,  930,  456,  933,
      935,  936,  931,  348,  938,  939,  207,  940,  944,  945,
     1673,  951,  949,   80,   58, 1673, 1673,  974,  985,  996,
     1007, 1018, 1029, 1040, 1051, 1062, 1073, 1084, 1095, 1106,
     1111, 1120, 1129, 1139, 1150, 1161, 1166, 1176, 1181, 1191,
     1201, 1211, 1222, 1227, 1232, 1242, 1249, 1259, 1270, 1275,
     1279, 1289, 1299, 1310, 1320, 1331, 1341, 1345, 1354, 1364,
     1374, 1384, 1395, 1406, 1417, 1428, 1438, 1448, 1459, 1470,

     1473, 1478, 1488, 1498, 1508, 1519, 1524, 1527, 1531, 1541,
     1551, 1560, 1569, 1573, 1582, 1591, 1601, 1606, 1616, 1627,
     1633, 1642, 1651, 1653, 1662
    } ;

static yyconst flex_int16_t yy_def[526] =
    {   0,
      448,  448,  447,  447,  449,  449,  448,  448,  450,  450,
      451,  451,  447,   13,  447,   15,  452,  452,  453,  453,
      447,   21,  447,   23,  454,  454,  455,  455,  447,   29,
      456,  456,  447,   33,  457,  457,  458,  458,  459,  459,
      447,   41,  447,   43,  447,   45,  447,  447,  447,  447,
      447,  447,  447,  460,  447,  461,  461,  461,  461,  461,
      462,  460,  463,  463,  463,  463,  463,  447,  447,  447,
      447,  464,  447,  447,  447,  464,  465,  447,  447,  447,
      447,  447,  466,  447,  447,  466,  447,  447,  447,  447,
      467,  447,  447,  468,  447,  447,  447,  447,  469,  470,

      447,  471,  447,  472,  447,  447,  473,  447,  447,  447,
      447,  447,  474,  447,  447,  447,  475,  447,  447,  447,
      447,  447,  447,  476,  447,  477,  447,  478,  447,  447,
      447,  447,  447,  447,  479,  447,  447,  447,  447,  447,
      480,  480,  480,  447,  480,  447,  447,  447,  447,  447,
      447,  447,  447,  481,  482,  447,  447,  483,  484,  447,
      447,  485,  486,  486,  447,  447,  486,  447,  447,  447,
      487,  487,  447,  447,  447,  447,  488,  447,  447,  447,
      489,  447,  460,  447,  447,  490,  447,  461,  461,  461,
      461,  461,  462,  460,  491,  491,  491,  491,  491,  492,

      447,  463,  493,  463,  463,  463,  463,  447,  464,  447,
      494,  447,  447,  447,  464,  495,  465,  447,  447,  447,
      466,  447,  447,  466,  447,  447,  447,  447,  447,  467,
      447,  468,  496,  447,  469,  470,  471,  447,  497,  447,
      472,  447,  447,  447,  498,  499,  500,  474,  447,  501,
      502,  447,  447,  447,  447,  447,  503,  447,  478,  447,
      504,  447,  505,  447,  447,  447,  447,  447,  506,  447,
      447,  447,  447,  447,  507,  508,  447,  447,  508,  509,
      510,  447,  447,  447,  447,  511,  447,  447,  447,  447,
      486,  486,  447,  447,  447,  447,  512,  513,  513,  447,

      514,  447,  447,  515,  516,  447,  517,  447,  518,  518,
      518,  518,  491,  491,  491,  491,  491,  447,  447,  447,
      447,  463,  463,  463,  463,  447,  494,  447,  447,  447,
      447,  447,  496,  447,  447,  497,  447,  447,  519,  520,
      499,  472,  447,  521,  447,  447,  447,  447,  504,  447,
      505,  447,  447,  447,  447,  447,  507,  447,  447,  447,
      447,  447,  447,  512,  522,  513,  515,  523,  447,  447,
      518,  447,  518,  518,  491,  491,  491,  491,  447,  447,
      447,  463,  447,  463,  463,  447,  447,  447,  447,  447,
      447,  447,  519,  521,  447,  447,  447,  447,  447,  447,

      447,  447,  447,  447,  447,  522,  513,  523,  518,  447,
      518,  491,  447,  491,  491,  447,  463,  447,  463,  524,
      447,  447,  513,  447,  518,  491,  447,  491,  447,  447,
      463,  525,  513,  447,  447,  491,  447,  447,  447,  525,
      447,  447,  447,  447,  447,  447,    0,  447,  447,  447,
      447,  447,  447,  447,  447,  447,  447,  447,  447,  447,
      447,  447,  447,  447,  447,  447,  447,  447,  447,  447,
      447,  447,  447,  447,  447,  447,  447,  447,  447,  447,
      447,  447,  447,  447,  447,  447,  447,  447,  447,  447,
      447,  447,  447,  447,  447,  447,  447,  447,  447,  447,

      447,  447,  447,  447,  447,  447,  447,  447,  447,  447,
      447,  447,  447,  447,  447,  447,  447,  447,  447,  447,
      447,  447,  447,  447,  447
    } ;

static yyconst flex_int16_t yy_nxt[1721] =
    {   0,
       50,   51,   52,   50,   53,   54,   50,   55,   50,   50,
       50,   50,   50,   50,   50,   50,   50,   50,   50,   56,
       56,   56,   56,   56,   56,   56,   56,   50,   50,   50,
       56,   56,   57,   58,   56,   59,   60,   56,   56,   56,
       56,   56,   56,   56,   56,   56,   50,   50,   61,   52,
       50,   53,   62,   50,   55,   50,   50,   50,   50,   50,
       50,   50,   50,   50,   50,   50,   63,   63,   63,   63,
       63,   63,   63,   63,   50,   50,   50,   63,   63,   64,
       65,   63,   66,   67,   63,   63,   63,   63,   63,   63,
       63,   63,   63,   50,   69,   70,   84,   71,   72,   85,

       73,   75,   70,  446,   71,   76,  182,   73,   78,   79,
      183,   80,   82,   79,   81,   80,   86,   84,   81,  201,
       87,  101,  102,  445,  103,  104,  208,  105,  106,  102,
      209,  103,  107,  101,  105,   74,  203,  214,  252,  253,
      101,  215,   74,   48,   88,   49,   48,   48,   48,   48,
       48,   89,   48,   48,   48,   48,   48,   48,   48,   48,
       90,   48,   91,   91,   91,   91,   91,   91,   91,   91,
       48,   48,   48,   91,   91,   91,   91,   91,   91,   91,
       91,   91,   91,   91,   91,   91,   91,   91,   91,   48,
       92,   93,   49,   92,   92,   94,   92,   92,   48,   95,

       92,   92,   96,   92,   92,   92,   92,   97,   98,   99,
       99,   99,   99,   99,   99,   99,   99,   92,   92,   92,
       99,   99,   99,   99,   99,   99,   99,   99,   99,   99,
       99,   99,   99,   99,   99,   99,   92,  109,  222,  109,
      256,  253,  223,  110,  111,  110,  111,  112,  444,  112,
       48,   48,   49,   48,   48,   48,   48,   48,   48,   48,
       48,   48,   48,   48,   48,   48,   48,   48,   48,  113,
      113,  113,  113,  113,  113,  113,  113,   48,   48,   48,
      113,  113,  113,  113,  113,  113,  113,  113,  113,  113,
      113,  113,  113,  113,  113,  113,   48,   48,  114,   49,

       48,   48,   48,   48,   48,  115,  115,   48,   48,  115,
       48,   48,   48,   48,  116,   48,  117,  117,  117,  117,
      117,  117,  117,  117,   48,   48,   48,  117,  117,  117,
      117,  117,  117,  117,  117,  117,  117,  117,  117,  117,
      117,  117,  117,   48,   48,  118,  119,  277,  121,  434,
      278,  122,   48,  123,  119,  403,  121,  125,  126,  122,
      127,  128,  224,  129,  130,  126,  225,  127,  128,  403,
      129,  131,  132,  133,  131,  134,  135,  131,  136,  137,
      131,  131,  131,  131,  131,  138,  139,  139,  131,  140,
      141,  141,  141,  141,  141,  142,  143,  141,  144,  131,

      131,  141,  141,  141,  141,  141,  141,  141,  141,  141,
      141,  141,  142,  141,  141,  145,  141,  146,  149,  149,
      150,  149,  151,  149,  149,  149,  152,  153,  149,  149,
      149,  149,  149,  149,  149,  149,  149,  154,  154,  154,
      154,  154,  154,  154,  154,  152,  149,  153,  154,  154,
      154,  154,  154,  154,  154,  154,  154,  154,  154,  154,
      154,  154,  154,  154,  152,   49,   49,  156,  156,  201,
      157,  157,   49,   49,  160,  160,  296,  161,  161,  164,
      164,  165,  165,  303,  166,  166,  203,  227,  297,  231,
      437,  158,  158,  232,  228,  304,  237,  258,  162,  162,

      238,  259,  205,  229,  434,  167,  167,  168,  169,  170,
      168,  168,  168,  168,  168,  168,  168,  168,  168,  168,
      168,  168,  168,  168,  168,  168,  171,  171,  171,  171,
      171,  171,  171,  171,  168,  168,  168,  171,  171,  171,
      171,  171,  171,  172,  171,  171,  171,  171,  171,  171,
      171,  171,  171,  168,  173,  174,  175,  173,  173,  173,
      173,  173,  173,  173,  176,  173,  173,  173,  173,  173,
      173,  173,  173,  177,  177,  177,  177,  177,  177,  177,
      177,  173,  173,  173,  177,  177,  177,  177,  177,  177,
      177,  177,  177,  177,  177,  177,  177,  177,  177,  177,

      173,  178,  179,  180,  178,  178,  178,  178,  178,  178,
      178,  178,  178,  178,  178,  178,  178,  178,  178,  178,
      181,  181,  181,  181,  181,  181,  181,  181,  178,  178,
      178,  181,  181,  181,  181,  181,  181,  181,  181,  181,
      181,  181,  181,  181,  181,  181,  181,  178,  193,  201,
      201,  201,  194,  243,  244,  265,  266,  245,  424,  259,
      271,  273,  273,  273,  284,  285,  203,  203,  203,  274,
      274,  289,  290,  182,  429,  277,  425,  183,  278,  196,
      197,  201,  198,  199,  274,  204,  277,  410,  207,  278,
      206,  271,  272,  272,  273,  279,  296,  447,  203,  291,

      274,  274,  291,  193,  275,  201,  279,  194,  297,  201,
      201,  201,  279,  201,  201,  274,  320,  208,  424,  201,
      214,  209,  203,  279,  215,  379,  203,  203,  203,  201,
      203,  203,  250,  299,  196,  197,  203,  198,  199,  201,
      201,  314,  315,  222,  227,  420,  203,  223,  317,  322,
      316,  228,  252,  253,  224,  321,  203,  203,  225,  416,
      229,  231,  237,  323,  380,  232,  238,  243,  244,  343,
      381,  245,  241,  256,  253,  277,  258,  324,  278,  325,
      259,  265,  266,  359,  285,  259,  355,  355,  355,  271,
      272,  272,  273,  271,  273,  273,  273,  201,  274,  356,

      361,  290,  274,  274,  447,  411,  291,  296,  296,  291,
      296,  303,  303,  356,  203,  201,  201,  274,  201,  297,
      297,  201,  297,  304,  304,  201,  383,  201,  296,  201,
      359,  285,  203,  203,  410,  203,  361,  290,  203,  379,
      297,  372,  203,  203,  203,  375,  203,  409,  201,  366,
      376,  355,  355,  355,  367,  413,  377,  401,  296,  402,
      378,  303,  201,  201,  384,  203,  382,  385,  201,  383,
      297,  401,  203,  304,  418,  201,  296,  364,  380,  203,
      203,  422,  422,  422,  405,  203,  203,  201,  297,  412,
      421,  203,  203,  422,  422,  422,  407,  413,  296,  414,

      303,  415,  427,  201,  203,  430,  418,  201,  404,  417,
      297,  400,  304,  435,  203,  419,  399,  296,  427,  203,
      203,  398,  203,  203,  203,  422,  422,  422,  426,  297,
      203,  201,  442,  402,  430,  203,  438,  439,  423,  435,
      443,  438,  397,  428,  297,  439,  439,  348,  203,  431,
      443,  203,  442,  203,  441,  348,  203,  203,  203,  433,
      396,  395,  441,  441,  297,  250,  392,  203,  391,  335,
      335,  390,  389,  436,   48,   48,   48,   48,   48,   48,
       48,   48,   48,   48,   48,   68,   68,   68,   68,   68,
       68,   68,   68,   68,   68,   68,   77,   77,   77,   77,

       77,   77,   77,   77,   77,   77,   77,   83,   83,   83,
       83,   83,   83,   83,   83,   83,   83,   83,  100,  100,
      100,  100,  100,  100,  100,  100,  100,  100,  100,  108,
      108,  108,  108,  108,  108,  108,  108,  108,  108,  108,
      120,  120,  120,  120,  120,  120,  120,  120,  120,  120,
      120,  124,  124,  124,  124,  124,  124,  124,  124,  124,
      124,  124,  147,  147,  147,  147,  147,  147,  147,  147,
      147,  147,  147,  155,  155,  155,  155,  155,  155,  155,
      155,  155,  155,  155,  159,  159,  159,  159,  159,  159,
      159,  159,  159,  159,  159,  163,  163,  163,  163,  163,

      163,  163,  163,  163,  163,  163,  186,  186,  388,  186,
      387,  186,  186,  186,  186,  186,  186,  188,  386,  188,
      188,  195,  381,  374,  195,  373,  372,  371,  195,  195,
      202,  370,  369,  367,  302,  202,  202,  202,  202,  211,
      211,  300,  211,  364,  211,  211,  211,  211,  211,  211,
      217,  295,  363,  362,  217,  217,  217,  217,  217,  217,
      217,  221,  221,  292,  221,  360,  221,  221,  221,  221,
      221,  221,  230,  358,  230,  230,  233,  233,  354,  233,
      353,  233,  233,  233,  233,  233,  233,  235,  267,  235,
      235,  236,  352,  350,  348,  347,  346,  236,  236,  236,

      236,  236,  239,  345,  250,  239,  249,  340,  338,  239,
      239,  241,  241,  337,  241,  241,  241,  241,  241,  241,
      241,  241,  246,  246,  335,  246,  246,  246,  246,  246,
      246,  246,  246,  248,  334,  248,  248,  251,  251,  234,
      251,  251,  257,  226,  226,  220,  332,  257,  257,  257,
      257,  257,  257,  261,  331,  216,  329,  261,  261,  263,
      263,  328,  263,  326,  263,  263,  263,  263,  263,  263,
      269,  269,  200,  269,  269,  269,  269,  269,  269,  269,
      269,  276,  312,  276,  276,  280,  311,  280,  280,  281,
      281,  310,  309,  281,  281,  281,  281,  281,  281,  283,

      283,  283,  283,  283,  283,  283,  283,  283,  283,  283,
      286,  286,  308,  306,  286,  286,  286,  286,  286,  286,
      288,  288,  288,  288,  288,  288,  288,  288,  288,  288,
      288,  291,  291,  291,  184,  291,  291,  291,  291,  291,
      291,  291,  298,  302,  300,  295,  298,  298,  294,  298,
      298,  301,  293,  301,  301,  305,  292,  292,  287,  305,
      305,  282,  305,  305,  307,  307,  270,  307,  307,  307,
      307,  307,  307,  307,  307,  313,  268,  267,  264,  262,
      313,  313,  313,  313,  318,  318,  318,  318,  260,  318,
      318,  318,  318,  318,  318,  319,  319,  319,  319,  319,

      319,  319,  255,  319,  319,  319,  327,  327,  254,  327,
      327,  327,  327,  327,  327,  327,  327,  330,  330,  330,
      330,  250,  330,  330,  330,  330,  330,  330,  333,  333,
      249,  333,  333,  333,  333,  333,  333,  333,  333,  336,
      247,  242,  240,  234,  336,  226,  336,  336,  339,  339,
      220,  339,  339,  339,  339,  339,  339,  339,  339,  341,
      341,  219,  341,  341,  341,  341,  341,  341,  341,  341,
      342,  342,  342,  342,  342,  342,  342,  342,  342,  342,
      342,  344,  344,  251,  251,  218,  251,  251,  257,  216,
      213,  212,  210,  257,  257,  257,  257,  257,  257,  349,

      200,  192,  191,  190,  349,  189,  349,  349,  351,  351,
      187,  351,  351,  351,  351,  351,  351,  351,  351,  269,
      269,  185,  269,  269,  269,  269,  269,  269,  269,  269,
      357,  184,  357,  276,  447,  276,  276,  280,  148,  280,
      280,  281,  281,  148,   49,  281,  281,  281,  281,  281,
      281,  286,  286,   49,   49,  286,  286,  286,  286,  286,
      286,  365,   49,  447,  447,  447,  447,  447,  365,  365,
      298,  447,  447,  447,  298,  298,  447,  298,  298,  301,
      447,  301,  301,  368,  447,  447,  447,  447,  447,  447,
      368,  368,  305,  447,  447,  447,  305,  305,  447,  305,

      305,  307,  307,  447,  307,  307,  307,  307,  307,  307,
      307,  307,  188,  447,  188,  188,  393,  393,  447,  393,
      393,  393,  393,  393,  393,  393,  393,  343,  343,  343,
      343,  447,  343,  343,  343,  343,  343,  343,  394,  394,
      447,  394,  394,  406,  447,  447,  447,  406,  406,  447,
      406,  406,  408,  447,  447,  447,  408,  408,  447,  408,
      408,  432,  432,  440,  447,  447,  447,  447,  440,  440,
      440,  440,   47,  447,  447,  447,  447,  447,  447,  447,
      447,  447,  447,  447,  447,  447,  447,  447,  447,  447,
      447,  447,  447,  447,  447,  447,  447,  447,  447,  447,

      447,  447,  447,  447,  447,  447,  447,  447,  447,  447,
      447,  447,  447,  447,  447,  447,  447,  447,  447,  447
    } ;

static yyconst flex_int16_t yy_chk[1721] =
    {   0,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    5,    5,   11,    5,    5,   11,

        5,    6,    6,  445,    6,    6,   51,    6,    9,    9,
       51,    9,   10,   10,    9,   10,   12,   12,   10,   63,
       12,   17,   17,  444,   17,   17,   69,   17,   18,   18,
       69,   18,   18,   17,   18,    5,   63,   75,  118,  118,
       18,   75,    6,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       15,   15,   15,   15,   15,   15,   15,   15,   15,   15,

       15,   15,   15,   15,   15,   15,   15,   15,   15,   15,
       15,   15,   15,   15,   15,   15,   15,   15,   15,   15,
       15,   15,   15,   15,   15,   15,   15,   15,   15,   15,
       15,   15,   15,   15,   15,   15,   15,   19,   84,   20,
      123,  123,   84,   19,   19,   20,   20,   19,  437,   20,
       21,   21,   21,   21,   21,   21,   21,   21,   21,   21,
       21,   21,   21,   21,   21,   21,   21,   21,   21,   21,
       21,   21,   21,   21,   21,   21,   21,   21,   21,   21,
       21,   21,   21,   21,   21,   21,   21,   21,   21,   21,
       21,   21,   21,   21,   21,   21,   21,   23,   23,   23,

       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   25,   25,   25,  142,   25,  434,
      142,   25,   26,   26,   26,  357,   26,   27,   27,   26,
       27,   27,   86,   27,   28,   28,   86,   28,   28,  357,
       28,   29,   29,   29,   29,   29,   29,   29,   29,   29,
       29,   29,   29,   29,   29,   29,   29,   29,   29,   29,
       29,   29,   29,   29,   29,   29,   29,   29,   29,   29,

       29,   29,   29,   29,   29,   29,   29,   29,   29,   29,
       29,   29,   29,   29,   29,   29,   29,   29,   33,   33,
       33,   33,   33,   33,   33,   33,   33,   33,   33,   33,
       33,   33,   33,   33,   33,   33,   33,   33,   33,   33,
       33,   33,   33,   33,   33,   33,   33,   33,   33,   33,
       33,   33,   33,   33,   33,   33,   33,   33,   33,   33,
       33,   33,   33,   33,   33,   35,   36,   35,   36,   65,
       35,   36,   37,   38,   37,   38,  171,   37,   38,   39,
       40,   39,   40,  181,   39,   40,   65,   88,  171,   93,
      429,   35,   36,   93,   88,  181,  102,  125,   37,   38,

      102,  125,   65,   88,  425,   39,   40,   41,   41,   41,
       41,   41,   41,   41,   41,   41,   41,   41,   41,   41,
       41,   41,   41,   41,   41,   41,   41,   41,   41,   41,
       41,   41,   41,   41,   41,   41,   41,   41,   41,   41,
       41,   41,   41,   41,   41,   41,   41,   41,   41,   41,
       41,   41,   41,   41,   43,   43,   43,   43,   43,   43,
       43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
       43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
       43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
       43,   43,   43,   43,   43,   43,   43,   43,   43,   43,

       43,   45,   45,   45,   45,   45,   45,   45,   45,   45,
       45,   45,   45,   45,   45,   45,   45,   45,   45,   45,
       45,   45,   45,   45,   45,   45,   45,   45,   45,   45,
       45,   45,   45,   45,   45,   45,   45,   45,   45,   45,
       45,   45,   45,   45,   45,   45,   45,   45,   61,   64,
       66,   67,   61,  106,  106,  130,  130,  106,  424,  130,
      139,  139,  139,  139,  158,  158,   64,   66,   67,  139,
      139,  162,  162,  182,  416,  143,  411,  182,  143,   61,
       61,  195,   61,   61,  139,   64,  145,  410,   67,  145,
       66,  138,  138,  138,  138,  143,  172,  167,  195,  167,

      138,  138,  167,  193,  138,  196,  145,  193,  172,  197,
      198,  199,  143,  201,  202,  138,  203,  208,  409,  204,
      214,  208,  196,  145,  214,  320,  197,  198,  199,  205,
      201,  202,  394,  172,  193,  193,  204,  193,  193,  206,
      207,  196,  197,  222,  227,  388,  205,  222,  199,  204,
      198,  227,  252,  252,  224,  203,  206,  207,  224,  381,
      227,  231,  237,  205,  320,  231,  237,  243,  243,  247,
      380,  243,  247,  256,  256,  279,  258,  206,  279,  207,
      258,  265,  265,  284,  284,  265,  271,  271,  271,  272,
      272,  272,  272,  273,  273,  273,  273,  313,  272,  272,

      289,  289,  273,  273,  292,  374,  292,  296,  298,  292,
      299,  303,  305,  272,  313,  314,  315,  273,  316,  296,
      298,  317,  299,  303,  305,  322,  323,  324,  365,  325,
      359,  359,  314,  315,  373,  316,  361,  361,  317,  379,
      365,  372,  322,  323,  324,  314,  325,  371,  375,  299,
      315,  355,  355,  355,  367,  376,  316,  355,  366,  355,
      317,  368,  377,  378,  324,  375,  322,  325,  382,  383,
      366,  355,  376,  368,  384,  385,  406,  364,  379,  377,
      378,  421,  421,  421,  363,  382,  383,  412,  406,  375,
      401,  384,  385,  401,  401,  401,  366,  413,  407,  377,

      408,  378,  414,  415,  412,  417,  418,  419,  362,  382,
      407,  354,  408,  426,  413,  385,  353,  423,  427,  414,
      415,  352,  417,  418,  419,  422,  422,  422,  412,  423,
      426,  428,  433,  422,  430,  427,  431,  432,  407,  435,
      436,  438,  350,  415,  433,  439,  440,  349,  428,  419,
      443,  430,  442,  431,  432,  348,  435,  436,  438,  423,
      346,  345,  439,  440,  442,  344,  338,  443,  337,  336,
      335,  332,  331,  428,  448,  448,  448,  448,  448,  448,
      448,  448,  448,  448,  448,  449,  449,  449,  449,  449,
      449,  449,  449,  449,  449,  449,  450,  450,  450,  450,

      450,  450,  450,  450,  450,  450,  450,  451,  451,  451,
      451,  451,  451,  451,  451,  451,  451,  451,  452,  452,
      452,  452,  452,  452,  452,  452,  452,  452,  452,  453,
      453,  453,  453,  453,  453,  453,  453,  453,  453,  453,
      454,  454,  454,  454,  454,  454,  454,  454,  454,  454,
      454,  455,  455,  455,  455,  455,  455,  455,  455,  455,
      455,  455,  456,  456,  456,  456,  456,  456,  456,  456,
      456,  456,  456,  457,  457,  457,  457,  457,  457,  457,
      457,  457,  457,  457,  458,  458,  458,  458,  458,  458,
      458,  458,  458,  458,  458,  459,  459,  459,  459,  459,

      459,  459,  459,  459,  459,  459,  460,  460,  329,  460,
      328,  460,  460,  460,  460,  460,  460,  461,  326,  461,
      461,  462,  321,  312,  462,  311,  310,  309,  462,  462,
      463,  308,  306,  304,  302,  463,  463,  463,  463,  464,
      464,  300,  464,  297,  464,  464,  464,  464,  464,  464,
      465,  295,  294,  293,  465,  465,  465,  465,  465,  465,
      465,  466,  466,  291,  466,  287,  466,  466,  466,  466,
      466,  466,  467,  282,  467,  467,  468,  468,  270,  468,
      268,  468,  468,  468,  468,  468,  468,  469,  267,  469,
      469,  470,  264,  262,  261,  260,  255,  470,  470,  470,

      470,  470,  471,  254,  251,  471,  249,  245,  242,  471,
      471,  472,  472,  240,  472,  472,  472,  472,  472,  472,
      472,  472,  473,  473,  239,  473,  473,  473,  473,  473,
      473,  473,  473,  474,  238,  474,  474,  475,  475,  234,
      475,  475,  476,  226,  225,  220,  219,  476,  476,  476,
      476,  476,  476,  477,  218,  215,  213,  477,  477,  478,
      478,  212,  478,  210,  478,  478,  478,  478,  478,  478,
      479,  479,  194,  479,  479,  479,  479,  479,  479,  479,
      479,  480,  192,  480,  480,  481,  191,  481,  481,  482,
      482,  190,  189,  482,  482,  482,  482,  482,  482,  483,

      483,  483,  483,  483,  483,  483,  483,  483,  483,  483,
      484,  484,  187,  185,  484,  484,  484,  484,  484,  484,
      485,  485,  485,  485,  485,  485,  485,  485,  485,  485,
      485,  486,  486,  486,  184,  486,  486,  486,  486,  486,
      486,  486,  487,  179,  174,  169,  487,  487,  166,  487,
      487,  488,  165,  488,  488,  489,  164,  163,  161,  489,
      489,  156,  489,  489,  490,  490,  136,  490,  490,  490,
      490,  490,  490,  490,  490,  491,  134,  132,  129,  127,
      491,  491,  491,  491,  492,  492,  492,  492,  126,  492,
      492,  492,  492,  492,  492,  493,  493,  493,  493,  493,

      493,  493,  122,  493,  493,  493,  494,  494,  121,  494,
      494,  494,  494,  494,  494,  494,  494,  495,  495,  495,
      495,  117,  495,  495,  495,  495,  495,  495,  496,  496,
      114,  496,  496,  496,  496,  496,  496,  496,  496,  497,
      107,  105,  103,   97,  497,   87,  497,  497,  498,  498,
       82,  498,  498,  498,  498,  498,  498,  498,  498,  499,
      499,   81,  499,  499,  499,  499,  499,  499,  499,  499,
      500,  500,  500,  500,  500,  500,  500,  500,  500,  500,
      500,  501,  501,  502,  502,   80,  502,  502,  503,   76,
       74,   73,   71,  503,  503,  503,  503,  503,  503,  504,

       62,   60,   59,   58,  504,   57,  504,  504,  505,  505,
       55,  505,  505,  505,  505,  505,  505,  505,  505,  506,
      506,   53,  506,  506,  506,  506,  506,  506,  506,  506,
      507,   52,  507,  508,   47,  508,  508,  509,   32,  509,
      509,  510,  510,   31,    8,  510,  510,  510,  510,  510,
      510,  511,  511,    7,    2,  511,  511,  511,  511,  511,
      511,  512,    1,    0,    0,    0,    0,    0,  512,  512,
      513,    0,    0,    0,  513,  513,    0,  513,  513,  514,
        0,  514,  514,  515,    0,    0,    0,    0,    0,    0,
      515,  515,  516,    0,    0,    0,  516,  516,    0,  516,

      516,  517,  517,    0,  517,  517,  517,  517,  517,  517,
      517,  517,  518,    0,  518,  518,  519,  519,    0,  519,
      519,  519,  519,  519,  519,  519,  519,  520,  520,  520,
      520,    0,  520,  520,  520,  520,  520,  520,  521,  521,
        0,  521,  521,  522,    0,    0,    0,  522,  522,    0,
      522,  522,  523,    0,    0,    0,  523,  523,    0,  523,
      523,  524,  524,  525,    0,    0,    0,    0,  525,  525,
      525,  525,  447,  447,  447,  447,  447,  447,  447,  447,
      447,  447,  447,  447,  447,  447,  447,  447,  447,  447,
      447,  447,  447,  447,  447,  447,  447,  447,  447,  447,

      447,  447,  447,  447,  447,  447,  447,  447,  447,  447,
      447,  447,  447,  447,  447,  447,  447,  447,  447,  447
    } ;

extern int pyscanYY_flex_debug;
int pyscanYY_flex_debug = 0;

static yy_state_type *yy_state_buf=0, *yy_state_ptr=0;
static char *yy_full_match;
static int yy_lp;
static int yy_looking_for_trail_begin = 0;
static int yy_full_lp;
static int *yy_full_state;
#define YY_TRAILING_MASK 0x2000
#define YY_TRAILING_HEAD_MASK 0x4000
#define REJECT \
{ \
*yy_cp = (yy_hold_char); /* undo effects of setting up pyscanYYtext */ \
yy_cp = (yy_full_match); /* restore poss. backed-over text */ \
(yy_lp) = (yy_full_lp); /* restore orig. accepting pos. */ \
(yy_state_ptr) = (yy_full_state); /* restore orig. state */ \
yy_current_state = *(yy_state_ptr); /* restore curr. state */ \
++(yy_lp); \
goto find_rule; \
}

#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *pyscanYYtext;
#line 1 "pyscanner.l"
/******************************************************************************
 *
 * $Id: pyscanner.l,v 1.9 2001/03/19 19:27:39 root Exp $
 *
 * Copyright (C) 1997-2010 by Dimitri van Heesch.
 *
 * Permission to use, copy, modify, and distribute this software and its
 * documentation under the terms of the GNU General Public License is hereby 
 * granted. No representations are made about the suitability of this software 
 * for any purpose. It is provided "as is" without express or implied warranty.
 * See the GNU General Public License for more details.
 *
 * Documents produced by Doxygen are derivative works derived from the
 * input used in their production; they are not affected by this license.
 *
 */
/*  This code is based on the work done by the MoxyPyDoxy team
 *  (Linda Leong, Mike Rivera, Kim Truong, and Gabriel Estrada)
 *  in Spring 2005 as part of CS 179E: Compiler Design Project
 *  at the University of California, Riverside; the course was
 *  taught by Peter H. Froehlich <phf@acm.org>.
 */
#line 26 "pyscanner.l"

/*
 *	includes
 */
#include <stdio.h>
#include <stdlib.h>
#include <assert.h>
#include <ctype.h>

#include "qtbc.h"
#include <qarray.h>
#include <qstack.h>
#include <qregexp.h>
#include <unistd.h>
#include <qfile.h>
#include <qfileinfo.h>
  
#include "pyscanner.h"
#include "entry.h"
#include "message.h"
#include "config.h"
#include "doxygen.h"
#include "util.h"
#include "defargs.h"
#include "language.h"
#include "commentscan.h"
#include "pycode.h"

#define YY_NEVER_INTERACTIVE 1

/* -----------------------------------------------------------------
 *
 *	statics
 */

  
static ParserInterface *g_thisParser;
static const char *     inputString;
static int		inputPosition;
static QFile            inputFile;

static Protection	protection;

static Entry*		current_root = 0 ;
static Entry*		current      = 0 ;
static Entry*		previous     = 0 ;
static Entry*		bodyEntry    = 0 ;
static int		yyLineNr     = 1 ;
static QCString		yyFileName;
static MethodTypes 	mtype;
static bool    		gstat;
static Specifier 	virt;

static int              docBlockContext;
static QCString         docBlock;
static QCString         docBlockName;
static bool             docBlockInBody;
static bool             docBlockJavaStyle;
static bool             docBrief;
static bool             docBlockSpecial;

static bool             g_doubleQuote;
static bool             g_specialBlock;
static int              g_stringContext;
static QGString *       g_copyString;
static int              g_indent = 0;
static int              g_curIndent = 0;

static QDict<QCString>  g_packageNameCache(257);
static QCString         g_packageScope;

static char             g_atomStart;
static char             g_atomEnd;
static int              g_atomCount;

//static bool             g_insideConstructor;

static QCString         g_moduleScope;
static QCString         g_packageName;

static bool             g_hideClassDocs;

static QCString         g_defVal;
static int              g_braceCount;

static bool             g_lexInit = FALSE;
static bool             g_packageCommentAllowed;

//-----------------------------------------------------------------------------


static void initParser()
{
  protection = Public;
  mtype = Method;
  gstat = FALSE;
  virt = Normal;
  previous = 0;
  g_packageCommentAllowed = TRUE;
  g_packageNameCache.setAutoDelete(TRUE);
}

static void initEntry()
{
  //current->python = TRUE;
  current->protection = protection ;
  current->mtype      = mtype;
  current->virt       = virt;
  current->stat       = gstat;
  current->lang       = SrcLangExt_Python; 
  current->setParent(current_root);
  initGroupInfo(current);
}

static void newEntry()
{
  previous = current;
  current_root->addSubEntry(current);
  current = new Entry ;
  initEntry();
}

static void newVariable()
{
  if (!current->name.isEmpty() && current->name.at(0)=='_') // mark as private
  {
    current->protection=Private;
  }
  if (current_root->section&Entry::COMPOUND_MASK) // mark as class variable
  {
    current->stat = TRUE;
  }
  newEntry();
}

static void newFunction()
{
  if (current->name.left(2)=="__" && current->name.right(2)=="__")
  {
    // special method name, see
    // http://docs.python.org/ref/specialnames.html
    current->protection=Public;
  }
  else if (current->name.at(0)=='_')
  {
    current->protection=Private;
  }
}

static inline int computeIndent(const char *s)
{
  int col=0;
  static int tabSize=Config_getInt("TAB_SIZE");
  const char *p=s;
  char c;
  while ((c=*p++))
  {
    if (c==' ') col++;
    else if (c=='\t') col+=tabSize-(col%tabSize);
    else break;
  }
  return col;
}

static QCString findPackageScopeFromPath(const QCString &path)
{
  QCString *pScope = g_packageNameCache.find(path);
  if (pScope)
  {
    return *pScope;
  }
  QFileInfo pf(path+"/__init__.py"); // found package initialization file
  if (pf.exists())
  {
    int i=path.findRev('/');
    if (i!=-1)
    {
      QCString scope = findPackageScopeFromPath(path.left(i));
      if (!scope.isEmpty())
      {
	scope+="::";
      }
      scope+=path.mid(i+1);
      g_packageNameCache.insert(path,new QCString(scope));
      return scope;
    }
  }
  return "";
}
  
static QCString findPackageScope(const char *fileName)
{
  if (fileName==0) return "";
  QFileInfo fi(fileName);
  return findPackageScopeFromPath(fi.dirPath(TRUE).data());
}

//-----------------------------------------------------------------------------

static void lineCount()
{
  for( const char* c = pyscanYYtext ; *c ; ++c )
    yyLineNr += (*c == '\n') ;
}

#if 0
// Appends the current-name to current-type;
// Destroys current-name.
// Destroys current->args and current->argList
static void addType( Entry* current )
{
    uint tl=current->type.length();
    if ( tl>0 && !current->name.isEmpty() && current->type.at(tl-1)!='.') 
    {
      current->type += ' ' ;
    }
    current->type += current->name ;
    current->name.resize(0) ;
    tl=current->type.length();
    if ( tl>0 && !current->args.isEmpty() && current->type.at(tl-1)!='.') 
    {
      current->type += ' ' ;
    }
    current->type += current->args ;
    current->args.resize(0) ;
    current->argList->clear();
}

static QCString stripQuotes(const char *s)
{
  QCString name;
  if (s==0 || *s==0) return name;
  name=s;
  if (name.at(0)=='"' && name.at(name.length()-1)=='"')
  {
    name=name.mid(1,name.length()-2);
  }
  return name;
}
#endif
//-----------------------------------------------------------------

//-----------------------------------------------------------------
static void startCommentBlock(bool brief)
{
  if (brief)
  {
    current->briefFile = yyFileName;
    current->briefLine = yyLineNr;
  }
  else
  {
    current->docFile = yyFileName;
    current->docLine = yyLineNr;
  }
}

/*
static void appendDocBlock() {
  previous = current;
  current_root->addSubEntry(current);
  current = new Entry;
  initEntry();
}
*/

static void handleCommentBlock(const QCString &doc,bool brief)
{
  //printf("handleCommentBlock(doc=[%s] brief=%d docBlockInBody=%d docBlockJavaStyle=%d\n",
  //    doc.data(),brief,docBlockInBody,docBlockJavaStyle);

  // TODO: Fix me
  docBlockInBody=FALSE;
  
  if (docBlockInBody && previous && !previous->doc.isEmpty())
  {
    previous->doc=previous->doc.stripWhiteSpace()+"\n\n";
  }

  int position = 0;
  bool needsEntry;
  int lineNr = brief ? current->briefLine : current->docLine;
  while (parseCommentBlock(
	g_thisParser,
	(docBlockInBody && previous) ? previous : current,
	doc,     // text
	yyFileName, // file
	lineNr,
	docBlockInBody ? FALSE : brief, 
    docBlockJavaStyle, // javadoc style // or FALSE,
	docBlockInBody,
	protection,
        position,
        needsEntry)
     ) // need to start a new entry
  {
    if (needsEntry)
    {
      newEntry();
    }
  }
  if (needsEntry)
  {
    newEntry();
  }

}

static void endOfDef()
{
  if (bodyEntry)
  {
    bodyEntry->endBodyLine  = yyLineNr;
    bodyEntry = 0;
  }
  newEntry();
  //g_insideConstructor = FALSE;
}

static inline void addToString(const char *s)
{
  if (g_copyString) (*g_copyString)+=s;
}

static void initTriDoubleQuoteBlock()
{
  docBlockContext   = YY_START;
  docBlockInBody    = FALSE;
  docBlockJavaStyle = TRUE;
  docBlockSpecial   = pyscanYYtext[3]=='!';
  docBlock.resize(0);
  g_doubleQuote = TRUE;
  startCommentBlock(FALSE);
}

static void initTriSingleQuoteBlock()
{
  docBlockContext   = YY_START;
  docBlockInBody    = FALSE;
  docBlockJavaStyle = TRUE;
  docBlockSpecial   = pyscanYYtext[3]=='!';
  docBlock.resize(0);
  g_doubleQuote = FALSE;
  startCommentBlock(FALSE);
}

static void initSpecialBlock()
{
  docBlockContext   = YY_START;
  docBlockInBody    = FALSE;
  docBlockJavaStyle = TRUE;
  docBrief = TRUE;
  docBlock.resize(0);
  startCommentBlock(TRUE);
}

//-----------------------------------------------------------------------------
/* ----------------------------------------------------------------- */
#undef	YY_INPUT
#define	YY_INPUT(buf,result,max_size) result=yyread(buf,max_size);

static int yyread(char *buf,int max_size)
{
  int c=0;
  while ( c < max_size && inputString[inputPosition] )
  {
    *buf = inputString[inputPosition++] ;
    //printf("%d (%c)\n",*buf,*buf);
    c++; buf++;
  }
  return c;
}

/* start command character */
/* Main start state */


/* Mid-comment states */
/* %x FuncDoubleComment */
/* %x ClassDoubleComment */



/* Function states */




/* Class states */




/* Variable states */



/* String states */



/* import */



#line 1539 "<stdout>"

#define INITIAL 0
#define Search 1
#define SearchMemVars 2
#define TryClassDocString 3
#define TripleComment 4
#define SpecialComment 5
#define FunctionDec 6
#define FunctionParams 7
#define FunctionBody 8
#define FunctionParamDefVal 9
#define ClassDec 10
#define ClassInheritance 11
#define ClassCaptureIndent 12
#define ClassBody 13
#define VariableDec 14
#define VariableEnd 15
#define VariableAtom 16
#define SingleQuoteString 17
#define DoubleQuoteString 18
#define TripleString 19
#define FromMod 20
#define FromModItem 21
#define Import 22

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

static int yy_init_globals (void );

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int pyscanYYlex_destroy (void );

int pyscanYYget_debug (void );

void pyscanYYset_debug (int debug_flag  );

YY_EXTRA_TYPE pyscanYYget_extra (void );

void pyscanYYset_extra (YY_EXTRA_TYPE user_defined  );

FILE *pyscanYYget_in (void );

void pyscanYYset_in  (FILE * in_str  );

FILE *pyscanYYget_out (void );

void pyscanYYset_out  (FILE * out_str  );

yy_size_t pyscanYYget_leng (void );

char *pyscanYYget_text (void );

int pyscanYYget_lineno (void );

void pyscanYYset_lineno (int line_number  );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int pyscanYYwrap (void );
#else
extern int pyscanYYwrap (void );
#endif
#endif

    static void yyunput (int c,char *buf_ptr  );
    
#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT

#ifdef __cplusplus
static int yyinput (void );
#else
static int input (void );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 262144
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO fwrite( pyscanYYtext, pyscanYYleng, 1, pyscanYYout )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		yy_size_t n; \
		for ( n = 0; n < max_size && \
			     (c = getc( pyscanYYin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( pyscanYYin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = fread(buf, 1, max_size, pyscanYYin))==0 && ferror(pyscanYYin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(pyscanYYin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int pyscanYYlex (void);

#define YY_DECL int pyscanYYlex (void)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after pyscanYYtext and pyscanYYleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	if ( pyscanYYleng > 0 ) \
		YY_CURRENT_BUFFER_LVALUE->yy_at_bol = \
				(pyscanYYtext[pyscanYYleng - 1] == '\n'); \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    
#line 490 "pyscanner.l"


  /* ------------ Function recognition rules -------------- */

#line 1751 "<stdout>"

	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

        /* Create the reject buffer large enough to save one state per allowed character. */
        if ( ! (yy_state_buf) )
            (yy_state_buf) = (yy_state_type *)pyscanYYalloc(YY_STATE_BUF_SIZE  );
            if ( ! (yy_state_buf) )
                YY_FATAL_ERROR( "out of dynamic memory in pyscanYYlex()" );

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! pyscanYYin )
			pyscanYYin = stdin;

		if ( ! pyscanYYout )
			pyscanYYout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			pyscanYYensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				pyscanYY_create_buffer(pyscanYYin,YY_BUF_SIZE );
		}

		pyscanYY_load_buffer_state( );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of pyscanYYtext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
		yy_current_state += YY_AT_BOL();

		(yy_state_ptr) = (yy_state_buf);
		*(yy_state_ptr)++ = yy_current_state;

yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 448 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			*(yy_state_ptr)++ = yy_current_state;
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 1673 );

yy_find_action:
		yy_current_state = *--(yy_state_ptr);
		(yy_lp) = yy_accept[yy_current_state];
goto find_rule; /* Shut up GCC warning -Wall */
find_rule: /* we branch to this label when backing up */
		for ( ; ; ) /* until we find what rule we matched */
			{
			if ( (yy_lp) && (yy_lp) < yy_accept[yy_current_state + 1] )
				{
				yy_act = yy_acclist[(yy_lp)];
				if ( yy_act & YY_TRAILING_HEAD_MASK ||
				     (yy_looking_for_trail_begin) )
					{
					if ( yy_act == (yy_looking_for_trail_begin) )
						{
						(yy_looking_for_trail_begin) = 0;
						yy_act &= ~YY_TRAILING_HEAD_MASK;
						break;
						}
					}
				else if ( yy_act & YY_TRAILING_MASK )
					{
					(yy_looking_for_trail_begin) = yy_act & ~YY_TRAILING_MASK;
					(yy_looking_for_trail_begin) |= YY_TRAILING_HEAD_MASK;
					}
				else
					{
					(yy_full_match) = yy_cp;
					(yy_full_state) = (yy_state_ptr);
					(yy_full_lp) = (yy_lp);
					break;
					}
				++(yy_lp);
				goto find_rule;
				}
			--yy_cp;
			yy_current_state = *--(yy_state_ptr);
			(yy_lp) = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */

case 1:
#line 497 "pyscanner.l"
case 2:
YY_RULE_SETUP
#line 497 "pyscanner.l"
{ // start of a function/method definition
      			  g_indent=computeIndent(pyscanYYtext);
			  current->fileName  = yyFileName;
			  current->startLine = yyLineNr;
			  current->bodyLine  = yyLineNr;
			  current->section = Entry::FUNCTION_SEC;
			  current->protection = protection = Public;
			  current->lang = SrcLangExt_Python;
			  current->virt = Normal;
			  current->stat = FALSE;
			  current->mtype = mtype = Method;
			  current->type.resize(0);
			  current->name.resize(0);
			  current->args.resize(0);
			  current->argList->clear();
			  g_packageCommentAllowed = FALSE;
			  BEGIN( FunctionDec );
                       }
	YY_BREAK
case 3:
#line 517 "pyscanner.l"
case 4:
YY_RULE_SETUP
#line 517 "pyscanner.l"
{  // start of a class definition
      			  g_indent=computeIndent(pyscanYYtext);
			  current->section = Entry::CLASS_SEC;
			  current->argList->clear();
			  current->type += "class" ;
			  current->fileName  = yyFileName;
			  current->bodyLine  = yyLineNr;
			  g_packageCommentAllowed = FALSE;

			  BEGIN( ClassDec ) ;
                       }
	YY_BREAK
case 5:
#line 529 "pyscanner.l"
case 6:
YY_RULE_SETUP
#line 529 "pyscanner.l"
{ // start of an from import
			  g_packageCommentAllowed = FALSE;
                          BEGIN( FromMod );
                       }
	YY_BREAK
case 7:
#line 535 "pyscanner.l"
case 8:
YY_RULE_SETUP
#line 535 "pyscanner.l"
{ // start of an import statement
			  g_packageCommentAllowed = FALSE;
                          BEGIN( Import );
                       }
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 539 "pyscanner.l"
{ // property
      			current->section   = Entry::VARIABLE_SEC;
  			current->mtype     = Property;
			current->name      = QCString(pyscanYYtext).stripWhiteSpace();
			current->fileName  = yyFileName;
			current->startLine = yyLineNr;
			current->bodyLine  = yyLineNr;
			g_packageCommentAllowed = FALSE;
			BEGIN(VariableDec);
       	              }
	YY_BREAK
case 10:
/* rule 10 can match eol */
YY_RULE_SETUP
#line 549 "pyscanner.l"
{ // variable
      			g_indent=computeIndent(pyscanYYtext);
      			current->section   = Entry::VARIABLE_SEC;
			current->name      = QCString(pyscanYYtext).stripWhiteSpace();
			current->fileName  = yyFileName;
			current->startLine = yyLineNr;
			current->bodyLine  = yyLineNr;
			g_packageCommentAllowed = FALSE;
			BEGIN(VariableDec);
      		      }
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 559 "pyscanner.l"
{ // start of a single quoted string
       		        g_stringContext=YY_START;
		        g_copyString=0;
			g_packageCommentAllowed = FALSE;
                        BEGIN( SingleQuoteString );
                      }
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 565 "pyscanner.l"
{ // start of a double quoted string
       	                g_stringContext=YY_START;
			g_copyString=0;
			g_packageCommentAllowed = FALSE;
                        BEGIN( DoubleQuoteString );
                      }
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 572 "pyscanner.l"
{ // normal comment 
			g_packageCommentAllowed = FALSE;
      		      }
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 575 "pyscanner.l"
{ // some other identifier
			g_packageCommentAllowed = FALSE;
		      }
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 578 "pyscanner.l"
{
      			g_curIndent=computeIndent(pyscanYYtext);
                      }
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 581 "pyscanner.l"
{ // any other character...
                        // This is the major default
                        // that should catch everything
                        // else in Body.
                      }
	YY_BREAK
case 17:
/* rule 17 can match eol */
YY_RULE_SETUP
#line 587 "pyscanner.l"
{ // new line
                        lineCount();
                      }
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 591 "pyscanner.l"
{ // start of a comment block
			initTriDoubleQuoteBlock();
			BEGIN(TripleComment);
                      }
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 596 "pyscanner.l"
{ // start of a comment block
			initTriSingleQuoteBlock();
			BEGIN(TripleComment);
                      }
	YY_BREAK
case 20:
/* rule 20 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up pyscanYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up pyscanYYtext again */
YY_RULE_SETUP
#line 601 "pyscanner.l"
{  // start of a special comment
			g_packageCommentAllowed = FALSE;
			initSpecialBlock();
			BEGIN(SpecialComment);
                      }
	YY_BREAK


case 21:
YY_RULE_SETUP
#line 609 "pyscanner.l"
{ // from package import 
                        g_packageName=pyscanYYtext;
		      }
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 612 "pyscanner.l"
{
    			BEGIN(FromModItem);
    		      }
	YY_BREAK
case 23:
/* rule 23 can match eol */
YY_RULE_SETUP
#line 615 "pyscanner.l"
{
                        yyLineNr++;
                        BEGIN(Search);
                      }
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 619 "pyscanner.l"
{
		      }
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 621 "pyscanner.l"
{
                        unput(*pyscanYYtext);
                        BEGIN(Search);
                      }
	YY_BREAK


case 26:
YY_RULE_SETUP
#line 628 "pyscanner.l"
{ // import all
                  QCString item=g_packageName;
		  current->name=removeRedundantWhiteSpace(substitute(item,".","::"));
		  current->fileName = yyFileName; 
		  //printf("Adding using directive: found:%s:%d name=%s\n",yyFileName.data(),yyLineNr,current->name.data());
		  current->section=Entry::USINGDIR_SEC;
		  current_root->addSubEntry(current);
		  current = new Entry ;
		  initEntry();
                  BEGIN(Search);
    		}
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 639 "pyscanner.l"
{
                  QCString item=g_packageName+"."+pyscanYYtext;
		  current->name=removeRedundantWhiteSpace(substitute(item,".","::"));
		  current->fileName = yyFileName; 
		  //printf("Adding using declaration: found:%s:%d name=%s\n",yyFileName.data(),yyLineNr,current->name.data());
		  current->section=Entry::USINGDECL_SEC;
		  current_root->addSubEntry(current);
		  current = new Entry ;
		  initEntry();
                  BEGIN(Search);
		}
	YY_BREAK
case 28:
/* rule 28 can match eol */
YY_RULE_SETUP
#line 650 "pyscanner.l"
{
                  yyLineNr++;
                  BEGIN(Search);
                }
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 654 "pyscanner.l"
{
		}
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 656 "pyscanner.l"
{
                  unput(*pyscanYYtext);
                  BEGIN(Search);
                }
	YY_BREAK


case 31:
YY_RULE_SETUP
#line 663 "pyscanner.l"
{
			current->name=removeRedundantWhiteSpace(substitute(pyscanYYtext,".","::"));
			current->fileName = yyFileName; 
			//printf("Adding using declaration: found:%s:%d name=%s\n",yyFileName.data(),yyLineNr,current->name.data());
			current->section=Entry::USINGDECL_SEC;
			current_root->addSubEntry(current);
			current = new Entry ;
			initEntry();
			BEGIN(Search);
                      }
	YY_BREAK
case 32:
/* rule 32 can match eol */
YY_RULE_SETUP
#line 673 "pyscanner.l"
{
                  yyLineNr++;
                  BEGIN(Search);
                }
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 677 "pyscanner.l"
{
		}
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 679 "pyscanner.l"
{
                  unput(*pyscanYYtext);
                  BEGIN(Search);
                }
	YY_BREAK


case 35:
YY_RULE_SETUP
#line 686 "pyscanner.l"
{
                        //printf("Found member variable %s in %s\n",&pyscanYYtext[5],current_root->name.data());
			current->name=&pyscanYYtext[5];
			current->section=Entry::VARIABLE_SEC;
			current->fileName  = yyFileName;
			current->startLine = yyLineNr;
			current->bodyLine  = yyLineNr;
			current->type.resize(0);
			if (current->name.at(0)=='_') // mark as private
			{
			  current->protection=Private;
			}
			else
			{
			  current->protection=Public;
			}
			newEntry();
                      }
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 704 "pyscanner.l"
{ // start of a comment block
			initTriDoubleQuoteBlock();
			BEGIN(TripleComment);
                      }
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 709 "pyscanner.l"
{ // start of a comment block
			initTriSingleQuoteBlock();
			BEGIN(TripleComment);
                      }
	YY_BREAK
case 38:
/* rule 38 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up pyscanYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up pyscanYYtext again */
YY_RULE_SETUP
#line 714 "pyscanner.l"
{  // start of a special comment
			initSpecialBlock();
			BEGIN(SpecialComment);
                      }
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 718 "pyscanner.l"
{ // #
	              }
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 720 "pyscanner.l"
{ // start of a single quoted string
       			g_stringContext=YY_START;
			g_copyString=0;
                        BEGIN( SingleQuoteString );
                      }
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 725 "pyscanner.l"
{ // start of a double quoted string
       			g_stringContext=YY_START;
			g_copyString=0;
                        BEGIN( DoubleQuoteString );
                      }
	YY_BREAK
case 42:
/* rule 42 can match eol */
YY_RULE_SETUP
#line 730 "pyscanner.l"
{ yyLineNr++; }
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 731 "pyscanner.l"
// anything else
	YY_BREAK


case 44:
/* rule 44 can match eol */
YY_RULE_SETUP
#line 735 "pyscanner.l"
{
                        //fprintf(stderr,"indent %d<=%d\n",computeIndent(&pyscanYYtext[1]),g_indent);
                        if (computeIndent(&pyscanYYtext[1])<=g_indent) 
			{
			  int i;
			  for (i=pyscanYYleng-1;i>=0;i--)
			  {
			    unput(pyscanYYtext[i]);
			  }
			  endOfDef();
			  YY_CURRENT_BUFFER->yy_at_bol=TRUE;
                          BEGIN(Search);
			}
			else
			{
                          yyLineNr++;
      		          current->program+=pyscanYYtext;
			}
                      }
	YY_BREAK
case 45:
/* rule 45 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up pyscanYYtext */
(yy_c_buf_p) = yy_cp -= 2;
YY_DO_BEFORE_ACTION; /* set up pyscanYYtext again */
YY_RULE_SETUP
#line 754 "pyscanner.l"
{
                        if (computeIndent(&pyscanYYtext[1])<=g_indent)
			{
			  int i;
			  for (i=pyscanYYleng-1;i>=0;i--)
			  {
			    unput(pyscanYYtext[i]);
			  }
			  endOfDef();
			  YY_CURRENT_BUFFER->yy_at_bol=TRUE;
                          BEGIN(Search);
			}
			else
			{
			  yyLineNr++;
      		          current->program+=pyscanYYtext;
			}
      		      }
	YY_BREAK
case YY_STATE_EOF(FunctionBody):
#line 772 "pyscanner.l"
{
			endOfDef();
			yyterminate();
      		      }
	YY_BREAK
case 46:
/* rule 46 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up pyscanYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up pyscanYYtext again */
YY_RULE_SETUP
#line 776 "pyscanner.l"
{ // skip empty line
      		        current->program+=pyscanYYtext;
      	              }
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 779 "pyscanner.l"
{ // something at indent >0
      		        current->program+=pyscanYYtext;
			g_curIndent = computeIndent(pyscanYYtext);
                        if (g_curIndent<=g_indent) 
			  // jumped out of the function
			{
			  endOfDef();
                          BEGIN(Search);
			}
      		      }
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 789 "pyscanner.l"
{ // start of a single quoted string
      		        current->program+=pyscanYYtext;
       			g_stringContext=YY_START;
		        g_specialBlock = FALSE; 
			g_copyString=&current->program;
                        BEGIN( SingleQuoteString );
                      }
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 796 "pyscanner.l"
{ // start of a double quoted string
      		        current->program+=pyscanYYtext;
       			g_stringContext=YY_START;
		        g_specialBlock = FALSE; 
			g_copyString=&current->program;
                        BEGIN( DoubleQuoteString );
                      }
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 803 "pyscanner.l"
{ // non-special stuff
      		        current->program+=pyscanYYtext;
		        g_specialBlock = FALSE; 
                      }
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 807 "pyscanner.l"
{ // normal comment 
      		        current->program+=pyscanYYtext;
      		      }
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 810 "pyscanner.l"
{ // comment half way
      		        current->program+=pyscanYYtext;
                      }
	YY_BREAK
case 53:
/* rule 53 can match eol */
YY_RULE_SETUP
#line 813 "pyscanner.l"
{ yyLineNr++; 
      		        current->program+=pyscanYYtext;
		      }
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 816 "pyscanner.l"
{ // any character
      		        current->program+=*pyscanYYtext;
		        g_specialBlock = FALSE; 
                      }
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 821 "pyscanner.l"
{ // start of a comment block
			current->program+=pyscanYYtext;
			initTriDoubleQuoteBlock();
			BEGIN(TripleComment);
                      }
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 827 "pyscanner.l"
{ // start of a comment block
			current->program+=pyscanYYtext;
			initTriSingleQuoteBlock();
			BEGIN(TripleComment);
                      }
	YY_BREAK
case 57:
/* rule 57 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up pyscanYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up pyscanYYtext again */
YY_RULE_SETUP
#line 833 "pyscanner.l"
{  // start of a special comment
			initSpecialBlock();
			BEGIN(SpecialComment);
                      }
	YY_BREAK


case 58:
YY_RULE_SETUP
#line 842 "pyscanner.l"
{
			      //found function name
			      if (current->type.isEmpty()) 
			      {
				  current->type = "def";
			      }
			      current->name = pyscanYYtext;
			      current->name = current->name.stripWhiteSpace();
			      newFunction();
                            }
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 852 "pyscanner.l"
{ // function without arguments
			      g_specialBlock = TRUE; // expecting a docstring
			      bodyEntry = current;
                              BEGIN( FunctionBody );
			    }
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 858 "pyscanner.l"
{
			       BEGIN( FunctionParams );
		            }
	YY_BREAK


case 61:
YY_RULE_SETUP
#line 864 "pyscanner.l"
{
                        }
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 867 "pyscanner.l"
{ // Name of parameter
			  lineCount();
			  Argument *a = new Argument;
			  current->argList->append(a);
			  current->argList->getLast()->name = QCString(pyscanYYtext).stripWhiteSpace();
			  current->argList->getLast()->type = "";
                        }
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 874 "pyscanner.l"
{ // default value
                          // TODO: this rule is too simple, need to be able to
                          // match things like =")" as well!
      			  QCString defVal=&pyscanYYtext[1];
			  g_defVal.resize(0);
			  g_braceCount=0;
			  BEGIN(FunctionParamDefVal);
      			}
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 883 "pyscanner.l"
{ // end of parameter list
                        }
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 886 "pyscanner.l"
{
			  g_specialBlock = TRUE; // expecting a docstring
			  bodyEntry = current;
                          BEGIN( FunctionBody );
                        }
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 891 "pyscanner.l"
{ // a comment
			}
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 893 "pyscanner.l"
{ // Default rule inside arguments.
                        }
	YY_BREAK


case 68:
YY_RULE_SETUP
#line 899 "pyscanner.l"
{ // internal opening brace
       			  g_braceCount++;
			  g_defVal+=*pyscanYYtext;
       			}
	YY_BREAK
case 69:
#line 904 "pyscanner.l"
case 70:
YY_RULE_SETUP
#line 904 "pyscanner.l"
{
       			  if (g_braceCount==0)  // end of default argument
			  {
			    if (current->argList->getLast())
			    {
			      current->argList->getLast()->defval=g_defVal.stripWhiteSpace();
			    }
       			    BEGIN(FunctionParams);
			  }
			  else // continue
			  {
			    g_braceCount--;
			    g_defVal+=*pyscanYYtext;
			  }
       			}
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 919 "pyscanner.l"
{
			    g_defVal+=*pyscanYYtext;
       			}
	YY_BREAK
case 72:
/* rule 72 can match eol */
YY_RULE_SETUP
#line 922 "pyscanner.l"
{
       			    g_defVal+=*pyscanYYtext;
			    yyLineNr++;
       			}
	YY_BREAK


case 73:
/* rule 73 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up pyscanYYtext */
(yy_c_buf_p) = yy_cp = yy_bp + 1;
YY_DO_BEFORE_ACTION; /* set up pyscanYYtext again */
YY_RULE_SETUP
#line 930 "pyscanner.l"
{ // new def at indent 0
                        yyLineNr++;
			endOfDef();
			g_hideClassDocs = FALSE;
			YY_CURRENT_BUFFER->yy_at_bol=TRUE;
                        BEGIN(Search);
                      }
	YY_BREAK
case 74:
/* rule 74 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up pyscanYYtext */
(yy_c_buf_p) = yy_cp = yy_bp + 1;
YY_DO_BEFORE_ACTION; /* set up pyscanYYtext again */
YY_RULE_SETUP
#line 937 "pyscanner.l"
{  // start of a special comment at indent 0
                        yyLineNr++;
			endOfDef();
			g_hideClassDocs = FALSE;
			YY_CURRENT_BUFFER->yy_at_bol=TRUE;
                        BEGIN(Search);
                      }
	YY_BREAK
case 75:
/* rule 75 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up pyscanYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up pyscanYYtext again */
YY_RULE_SETUP
#line 944 "pyscanner.l"
{ // skip empty line
      		        current->program+=pyscanYYtext;
      	              }
	YY_BREAK
case YY_STATE_EOF(ClassBody):
#line 947 "pyscanner.l"
{
			endOfDef();
			yyterminate();
      		      }
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 951 "pyscanner.l"
{ // something at indent >0
                        g_curIndent=computeIndent(pyscanYYtext);
			//fprintf(stderr,"g_curIndent=%d g_indent=%d\n",g_curIndent,g_indent);
                        if (g_curIndent<=g_indent) 
			  // jumped out of the class
			{
			  endOfDef();
			  g_indent=g_curIndent;
			  // make sure the next rule matches ^...
			  YY_CURRENT_BUFFER->yy_at_bol=TRUE;
			  g_hideClassDocs = FALSE;
                          BEGIN(Search);
			}
			else
			{
      		          current->program+=pyscanYYtext;
			}
      		      }
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 969 "pyscanner.l"
{ // start of a single quoted string
      		        current->program+=*pyscanYYtext;
       			g_stringContext=YY_START;
		        g_specialBlock = FALSE; 
			g_copyString=&current->program;
                        BEGIN( SingleQuoteString );
                      }
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 976 "pyscanner.l"
{ // start of a double quoted string
      		        current->program+=*pyscanYYtext;
       			g_stringContext=YY_START;
		        g_specialBlock = FALSE; 
			g_copyString=&current->program;
                        BEGIN( DoubleQuoteString );
                      }
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 983 "pyscanner.l"
{ // non-special stuff
      		        current->program+=pyscanYYtext;
		        g_specialBlock = FALSE; 
			g_hideClassDocs = FALSE;
                      }
	YY_BREAK
case 80:
/* rule 80 can match eol */
YY_RULE_SETUP
#line 988 "pyscanner.l"
{ 
      		        current->program+=*pyscanYYtext;
			yyLineNr++; 
		      }
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 992 "pyscanner.l"
{ // normal comment
      		        current->program+=pyscanYYtext;
                      }
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 995 "pyscanner.l"
{ // any character
		        g_specialBlock = FALSE; 
      		        current->program+=*pyscanYYtext;
                      }
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 999 "pyscanner.l"
{ // start of a comment block
      		        if (!g_hideClassDocs) current->program+=pyscanYYtext;
			initTriDoubleQuoteBlock();
			BEGIN(TripleComment);
                      }
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 1005 "pyscanner.l"
{ // start of a comment block
      		        if (!g_hideClassDocs) current->program+=pyscanYYtext;
			initTriSingleQuoteBlock();
			BEGIN(TripleComment);
                      }
	YY_BREAK

case 85:
YY_RULE_SETUP
#line 1012 "pyscanner.l"
{
			  if (current->type.isEmpty()) 
			  {
			      current->type = "class";
			  }

			  current->section = Entry::CLASS_SEC;
			  current->name = pyscanYYtext;

			  // prepend scope in case of nested classes
			  if (current_root->section&Entry::SCOPE_MASK)
			  {
			    //printf("*** Prepending scope %s to class %s\n",current_root->name.data(),current->name.data());
			    current->name.prepend(current_root->name+"::");
			  }
			  
			  current->name = current->name.stripWhiteSpace();
			  current->fileName = yyFileName;        
			  docBlockContext   = YY_START;
			  docBlockInBody    = FALSE;
			  docBlockJavaStyle = FALSE;
			  docBlock.resize(0);

			  BEGIN(ClassInheritance);                 
                        }
	YY_BREAK

case 86:
YY_RULE_SETUP
#line 1039 "pyscanner.l"
{ // syntactic sugar for the list
                       }
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 1042 "pyscanner.l"
{ // begin of the class definition
			 g_specialBlock = TRUE; // expecting a docstring
      			 BEGIN(ClassCaptureIndent);
                       }
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 1047 "pyscanner.l"
{
                         current->extends->append(
					      new BaseInfo(substitute(pyscanYYtext,".","::"),Public,Normal)
					    );
                         //Has base class-do stuff
                       }
	YY_BREAK


case 89:
/* rule 89 can match eol */
YY_RULE_SETUP
#line 1057 "pyscanner.l"
{
                                 // Blankline - ignore, keep looking for indentation.
				 lineCount();
                               }
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 1062 "pyscanner.l"
{ // start of a comment block
				 initTriDoubleQuoteBlock();
			 	 BEGIN(TripleComment);
                      	       }
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 1067 "pyscanner.l"
{ // start of a comment block
			         initTriSingleQuoteBlock();
			         BEGIN(TripleComment);
                               }
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 1072 "pyscanner.l"
{
      				 current->program=pyscanYYtext;
			         current->startLine = yyLineNr;
				 g_curIndent=computeIndent(pyscanYYtext);
				 bodyEntry = current;
				 //fprintf(stderr,"setting indent %d\n",g_curIndent);
				 //printf("current->program=[%s]\n",current->program.data());
				 g_hideClassDocs = TRUE;
			         BEGIN(ClassBody);
                               }
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 1083 "pyscanner.l"
{
				 
				 // Just pushback an empty class, and
				 // resume parsing the body.
                                 newEntry();

				 // printf("Failed to find indent - skipping!");
				 BEGIN( Search );
                               }
	YY_BREAK


case 94:
YY_RULE_SETUP
#line 1096 "pyscanner.l"
{ // the assignment operator
                        //printf("====== VariableDec at line %d\n",yyLineNr);
                      }
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 1099 "pyscanner.l"
{ // spaces
	              }
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 1101 "pyscanner.l"
{ // integer value
			current->type = "int";
			current->initializer = pyscanYYtext;
			BEGIN(VariableEnd);
		      }
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 1106 "pyscanner.l"
{ // floating point value
			current->type = "float";
			current->initializer = pyscanYYtext;
			BEGIN(VariableEnd);
		      }
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 1111 "pyscanner.l"
{ // string
			current->type = "string";
			current->initializer = pyscanYYtext;
			g_copyString=&current->initializer;
       			g_stringContext=VariableEnd;
                        BEGIN( SingleQuoteString );
     		      }
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 1118 "pyscanner.l"
{ // string
			current->type = "string";
			current->initializer = pyscanYYtext;
			g_copyString=&current->initializer;
       			g_stringContext=VariableEnd;
                        BEGIN( DoubleQuoteString );
     		      }
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 1125 "pyscanner.l"
{ // start of a comment block
			current->type = "string";
			current->initializer = pyscanYYtext;
			g_doubleQuote=TRUE;
			g_copyString=&current->initializer;
       			g_stringContext=VariableEnd;
			BEGIN(TripleString);
                      }
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 1134 "pyscanner.l"
{ // start of a comment block
			current->type = "string";
			current->initializer = pyscanYYtext;
			g_doubleQuote=FALSE;
			g_copyString=&current->initializer;
       			g_stringContext=VariableEnd;
			BEGIN(TripleString);
                      }
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 1142 "pyscanner.l"
{ // tuple
                        if (current->mtype!=Property)
			{
			  current->type = "tuple";
			}
      		        current->initializer+=*pyscanYYtext;
                        g_atomStart='(';
			g_atomEnd=')';
			g_atomCount=1;
			BEGIN( VariableAtom );
                      }
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 1153 "pyscanner.l"
{ // list
			current->type = "list";
      		        current->initializer+=*pyscanYYtext;
                        g_atomStart='[';
			g_atomEnd=']';
			g_atomCount=1;
			BEGIN( VariableAtom );
                      }
	YY_BREAK
case 104:
YY_RULE_SETUP
#line 1161 "pyscanner.l"
{ // dictionary
			current->type = "dictionary";
      		        current->initializer+=*pyscanYYtext;
                        g_atomStart='{';
			g_atomEnd='}';
			g_atomCount=1;
			BEGIN( VariableAtom );
                      }
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 1169 "pyscanner.l"
{ // comment
                        BEGIN( VariableEnd ); 
                      }
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 1172 "pyscanner.l"
{
      		        current->initializer+=pyscanYYtext;
	              }
	YY_BREAK
case 107:
YY_RULE_SETUP
#line 1175 "pyscanner.l"
{
      		        current->initializer+=*pyscanYYtext;
                      }
	YY_BREAK
case 108:
/* rule 108 can match eol */
YY_RULE_SETUP
#line 1178 "pyscanner.l"
{
     		        unput('\n');
     			BEGIN( VariableEnd );
     		      }
	YY_BREAK


case 109:
YY_RULE_SETUP
#line 1185 "pyscanner.l"
{
      		        current->initializer+=*pyscanYYtext;
                        if (g_atomStart==*pyscanYYtext)
			{
			  g_atomCount++;
			}
                      }
	YY_BREAK
case 110:
YY_RULE_SETUP
#line 1192 "pyscanner.l"
{
      		        current->initializer+=*pyscanYYtext;
                        if (g_atomEnd==*pyscanYYtext)
			{
			  g_atomCount--;
			}
			if (g_atomCount==0)
			{
			  BEGIN(VariableEnd);
			}
                      }
	YY_BREAK
case 111:
YY_RULE_SETUP
#line 1203 "pyscanner.l"
{
       			g_stringContext=YY_START;
			current->initializer+="\"";
			g_copyString=&current->initializer;
                        BEGIN( DoubleQuoteString );
                      }
	YY_BREAK
case 112:
YY_RULE_SETUP
#line 1209 "pyscanner.l"
{
      		        current->initializer+=pyscanYYtext;
	              }
	YY_BREAK
case 113:
YY_RULE_SETUP
#line 1212 "pyscanner.l"
{
      		        current->initializer+=*pyscanYYtext;
                      }
	YY_BREAK
case 114:
/* rule 114 can match eol */
YY_RULE_SETUP
#line 1215 "pyscanner.l"
{
      		        current->initializer+=*pyscanYYtext;
     			yyLineNr++;
     		      }
	YY_BREAK


case 115:
/* rule 115 can match eol */
YY_RULE_SETUP
#line 1223 "pyscanner.l"
{
                        yyLineNr++;
			newVariable();
                        BEGIN(Search);
                      }
	YY_BREAK
case 116:
YY_RULE_SETUP
#line 1228 "pyscanner.l"
{ 
                        unput(*pyscanYYtext);
			newVariable();
                        BEGIN(Search);
      		      }
	YY_BREAK
case YY_STATE_EOF(VariableEnd):
#line 1233 "pyscanner.l"
{ yyterminate();
                        newEntry();
                      }
	YY_BREAK


case 117:
#line 1240 "pyscanner.l"
case 118:
YY_RULE_SETUP
#line 1240 "pyscanner.l"
{
			  // printf("Expected module block %d special=%d\n",g_expectModuleDocs,g_specialBlock);
			  if (g_doubleQuote==(pyscanYYtext[0]=='"')) 
			  {
			    if (g_specialBlock) // expecting a docstring
			    {
			      QCString actualDoc=docBlock;
			      if (!docBlockSpecial) // legacy unformatted docstring
			      {
			        actualDoc.prepend("\\verbatim ");
			        actualDoc.append("\\endverbatim ");
			      }
			      //printf("-------> current=%p bodyEntry=%p\n",current,bodyEntry);
			      handleCommentBlock(actualDoc, FALSE);
			    }
			    else if (g_packageCommentAllowed) // expecting module docs
			    {
			      QCString actualDoc=docBlock;
			      if (!docBlockSpecial) // legacy unformatted docstring
			      {
			        actualDoc.prepend("\\verbatim ");
			        actualDoc.append("\\endverbatim ");
			      }
			      actualDoc.prepend("\\namespace "+g_moduleScope+"\\_linebr ");
			      handleCommentBlock(actualDoc, FALSE);
			    }
			    if ((docBlockContext==ClassBody && !g_hideClassDocs) ||
				docBlockContext==FunctionBody)
			    {
			      current->program+=docBlock;
			      current->program+=pyscanYYtext;
			    }
                            if (g_hideClassDocs)
                              current->startLine = yyLineNr;
			    g_hideClassDocs=FALSE;
			    BEGIN(docBlockContext);
			  }
                          else 
			  {
                            docBlock += pyscanYYtext;
                          }
			  g_packageCommentAllowed = FALSE;
                        }
	YY_BREAK
case 119:
YY_RULE_SETUP
#line 1285 "pyscanner.l"
{ // leading whitespace
      			  int indent = computeIndent(pyscanYYtext);
			  if (indent>=g_curIndent)
			  { // strip g_curIndent amount of whitespace
			    int i;
			    for (i=0;i<indent-g_curIndent;i++) docBlock+=' ';
			    //fprintf(stderr,"stripping indent %d\n",g_curIndent);
			  }
			  else
			  {
			    //fprintf(stderr,"not stripping: %d<%d\n",indent,g_curIndent);
			    docBlock += pyscanYYtext;
			  }
      			}
	YY_BREAK
case 120:
YY_RULE_SETUP
#line 1299 "pyscanner.l"
{
			  docBlock += pyscanYYtext;
                        }
	YY_BREAK
case 121:
/* rule 121 can match eol */
YY_RULE_SETUP
#line 1302 "pyscanner.l"
{
      			  yyLineNr++;
			  docBlock += pyscanYYtext;
      			}
	YY_BREAK
case 122:
YY_RULE_SETUP
#line 1306 "pyscanner.l"
{
			  docBlock += pyscanYYtext;
      			}
	YY_BREAK


case 123:
YY_RULE_SETUP
#line 1312 "pyscanner.l"
{ // skip leading hashes
      			}
	YY_BREAK
case 124:
/* rule 124 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up pyscanYYtext */
(yy_c_buf_p) = yy_cp = yy_bp + 1;
YY_DO_BEFORE_ACTION; /* set up pyscanYYtext again */
YY_RULE_SETUP
#line 1314 "pyscanner.l"
{ // continuation of the comment on the next line
      			  docBlock+='\n';
			  docBrief = FALSE;
                          startCommentBlock(FALSE);
			  yyLineNr++;
      			}
	YY_BREAK
case 125:
YY_RULE_SETUP
#line 1320 "pyscanner.l"
{ // any other stuff
      			  docBlock+=pyscanYYtext;
      			}
	YY_BREAK
case 126:
/* rule 126 can match eol */
YY_RULE_SETUP
#line 1323 "pyscanner.l"
{ // new line that ends the comment
			  handleCommentBlock(docBlock, docBrief);
      			  yyLineNr++;
			  BEGIN(docBlockContext);
      			}
	YY_BREAK
case 127:
YY_RULE_SETUP
#line 1328 "pyscanner.l"
{ // anything we missed
      			  docBlock+=*pyscanYYtext;
      			}
	YY_BREAK


case 128:
/* rule 128 can match eol */
YY_RULE_SETUP
#line 1334 "pyscanner.l"
{ // line continuation
      			         addToString(pyscanYYtext);
      				 yyLineNr++;
                               }
	YY_BREAK
case 129:
YY_RULE_SETUP
#line 1338 "pyscanner.l"
{ // espaced char
      			         addToString(pyscanYYtext);
                               }
	YY_BREAK
case 130:
YY_RULE_SETUP
#line 1341 "pyscanner.l"
{ // tripple double quotes
      			         addToString(pyscanYYtext);
      			       }
	YY_BREAK
case 131:
YY_RULE_SETUP
#line 1344 "pyscanner.l"
{ // end of the string
      			         addToString(pyscanYYtext);
      		                 BEGIN(g_stringContext);
                               }
	YY_BREAK
case 132:
YY_RULE_SETUP
#line 1348 "pyscanner.l"
{ // normal chars
      			         addToString(pyscanYYtext);
                               }
	YY_BREAK
case 133:
YY_RULE_SETUP
#line 1351 "pyscanner.l"
{ // normal char
      			         addToString(pyscanYYtext);
                               }
	YY_BREAK


case 134:
/* rule 134 can match eol */
YY_RULE_SETUP
#line 1357 "pyscanner.l"
{ // line continuation
      			         addToString(pyscanYYtext);
      				 yyLineNr++;
                               }
	YY_BREAK
case 135:
YY_RULE_SETUP
#line 1361 "pyscanner.l"
{ // espaced char
      			         addToString(pyscanYYtext);
                               }
	YY_BREAK
case 136:
YY_RULE_SETUP
#line 1364 "pyscanner.l"
{ // tripple single quotes
      			         addToString(pyscanYYtext);
      			       }
	YY_BREAK
case 137:
YY_RULE_SETUP
#line 1367 "pyscanner.l"
{ // end of the string
      			         addToString(pyscanYYtext);
      		                 BEGIN(g_stringContext);
                               }
	YY_BREAK
case 138:
YY_RULE_SETUP
#line 1371 "pyscanner.l"
{ // normal chars
      			         addToString(pyscanYYtext);
                               }
	YY_BREAK
case 139:
YY_RULE_SETUP
#line 1374 "pyscanner.l"
{ // normal char
      			         addToString(pyscanYYtext);
                               }
	YY_BREAK


case 140:
#line 1381 "pyscanner.l"
case 141:
YY_RULE_SETUP
#line 1381 "pyscanner.l"
{
                          *g_copyString += pyscanYYtext;
			  if (g_doubleQuote==(pyscanYYtext[0]=='"')) 
			  {
			    BEGIN(g_stringContext);
			  }
                        }
	YY_BREAK
case 142:
/* rule 142 can match eol */
YY_RULE_SETUP
#line 1390 "pyscanner.l"
{
			  lineCount();
                          *g_copyString += pyscanYYtext;
                        }
	YY_BREAK
case 143:
/* rule 143 can match eol */
YY_RULE_SETUP
#line 1394 "pyscanner.l"
{
      			  yyLineNr++;
                          *g_copyString += pyscanYYtext;
      			}
	YY_BREAK
case 144:
YY_RULE_SETUP
#line 1398 "pyscanner.l"
{
                          *g_copyString += *pyscanYYtext;
      			}
	YY_BREAK

/* ------------ End rules -------------- */
/*
<*>({NONEMPTY}|{EXPCHAR}|{BB})           { // This should go one character at a time.
				 // printf("[pyscanner] '%s' [ state %d ]  [line %d] no match\n",
				 //       pyscanYYtext, YY_START, yyLineNr);

                               }
  */
case 145:
/* rule 145 can match eol */
YY_RULE_SETUP
#line 1413 "pyscanner.l"
{
				 //printf("[pyscanner] %d NEWLINE [line %d] no match\n",
				 //       YY_START, yyLineNr);

                                 lineCount();
                               }
	YY_BREAK
case 146:
YY_RULE_SETUP
#line 1420 "pyscanner.l"
{
				 //printf("[pyscanner] '%s' [ state %d ]  [line %d] no match\n",
				 //       pyscanYYtext, YY_START, yyLineNr);

                               }
	YY_BREAK
case 147:
YY_RULE_SETUP
#line 1427 "pyscanner.l"
ECHO;
	YY_BREAK
#line 3370 "<stdout>"
			case YY_STATE_EOF(INITIAL):
			case YY_STATE_EOF(Search):
			case YY_STATE_EOF(SearchMemVars):
			case YY_STATE_EOF(TryClassDocString):
			case YY_STATE_EOF(TripleComment):
			case YY_STATE_EOF(SpecialComment):
			case YY_STATE_EOF(FunctionDec):
			case YY_STATE_EOF(FunctionParams):
			case YY_STATE_EOF(FunctionParamDefVal):
			case YY_STATE_EOF(ClassDec):
			case YY_STATE_EOF(ClassInheritance):
			case YY_STATE_EOF(ClassCaptureIndent):
			case YY_STATE_EOF(VariableDec):
			case YY_STATE_EOF(VariableAtom):
			case YY_STATE_EOF(SingleQuoteString):
			case YY_STATE_EOF(DoubleQuoteString):
			case YY_STATE_EOF(TripleString):
			case YY_STATE_EOF(FromMod):
			case YY_STATE_EOF(FromModItem):
			case YY_STATE_EOF(Import):
				yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed pyscanYYin at a new source and called
			 * pyscanYYlex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = pyscanYYin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( pyscanYYwrap( ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * pyscanYYtext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of pyscanYYlex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (void)
{
    	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = (yytext_ptr);
	register int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			yy_size_t num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			YY_FATAL_ERROR(
"input buffer overflow, can't enlarge buffer because scanner uses REJECT" );

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			pyscanYYrestart(pyscanYYin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yy_size_t) ((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) pyscanYYrealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (void)
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    
	yy_current_state = (yy_start);
	yy_current_state += YY_AT_BOL();

	(yy_state_ptr) = (yy_state_buf);
	*(yy_state_ptr)++ = yy_current_state;

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 448 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		*(yy_state_ptr)++ = yy_current_state;
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state )
{
	register int yy_is_jam;
    
	register YY_CHAR yy_c = 1;
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 448 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 447);
	if ( ! yy_is_jam )
		*(yy_state_ptr)++ = yy_current_state;

	return yy_is_jam ? 0 : yy_current_state;
}

    static void yyunput (int c, register char * yy_bp )
{
	register char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up pyscanYYtext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register yy_size_t number_to_move = (yy_n_chars) + 2;
		register char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		register char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (void)
#else
    static int input  (void)
#endif

{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			yy_size_t offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					pyscanYYrestart(pyscanYYin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( pyscanYYwrap( ) )
						return 0;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve pyscanYYtext */
	(yy_hold_char) = *++(yy_c_buf_p);

	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = (c == '\n');

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void pyscanYYrestart  (FILE * input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        pyscanYYensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            pyscanYY_create_buffer(pyscanYYin,YY_BUF_SIZE );
	}

	pyscanYY_init_buffer(YY_CURRENT_BUFFER,input_file );
	pyscanYY_load_buffer_state( );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void pyscanYY_switch_to_buffer  (YY_BUFFER_STATE  new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		pyscanYYpop_buffer_state();
	 *		pyscanYYpush_buffer_state(new_buffer);
     */
	pyscanYYensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	pyscanYY_load_buffer_state( );

	/* We don't actually know whether we did this switch during
	 * EOF (pyscanYYwrap()) processing, but the only time this flag
	 * is looked at is after pyscanYYwrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

static void pyscanYY_load_buffer_state  (void)
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	pyscanYYin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE pyscanYY_create_buffer  (FILE * file, int  size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) pyscanYYalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in pyscanYY_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) pyscanYYalloc(b->yy_buf_size + 2  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in pyscanYY_create_buffer()" );

	b->yy_is_our_buffer = 1;

	pyscanYY_init_buffer(b,file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with pyscanYY_create_buffer()
 * 
 */
    void pyscanYY_delete_buffer (YY_BUFFER_STATE  b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		pyscanYYfree((void *) b->yy_ch_buf  );

	pyscanYYfree((void *) b  );
}

#ifndef __cplusplus
extern int isatty (int );
#endif /* __cplusplus */
    
/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a pyscanYYrestart() or at EOF.
 */
    static void pyscanYY_init_buffer  (YY_BUFFER_STATE  b, FILE * file )

{
	int oerrno = errno;
    
	pyscanYY_flush_buffer(b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then pyscanYY_init_buffer was _probably_
     * called from pyscanYYrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void pyscanYY_flush_buffer (YY_BUFFER_STATE  b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		pyscanYY_load_buffer_state( );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void pyscanYYpush_buffer_state (YY_BUFFER_STATE new_buffer )
{
    	if (new_buffer == NULL)
		return;

	pyscanYYensure_buffer_stack();

	/* This block is copied from pyscanYY_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from pyscanYY_switch_to_buffer. */
	pyscanYY_load_buffer_state( );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void pyscanYYpop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	pyscanYY_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		pyscanYY_load_buffer_state( );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void pyscanYYensure_buffer_stack (void)
{
	yy_size_t num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		(yy_buffer_stack) = (struct yy_buffer_state**)pyscanYYalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in pyscanYYensure_buffer_stack()" );
								  
		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)pyscanYYrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in pyscanYYensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * 
 * @return the newly allocated buffer state object. 
 */
YY_BUFFER_STATE pyscanYY_scan_buffer  (char * base, yy_size_t  size )
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) pyscanYYalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in pyscanYY_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	pyscanYY_switch_to_buffer(b  );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to pyscanYYlex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * 
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       pyscanYY_scan_bytes() instead.
 */
YY_BUFFER_STATE pyscanYY_scan_string (yyconst char * yystr )
{
    
	return pyscanYY_scan_bytes(yystr,strlen(yystr) );
}

/** Setup the input buffer state to scan the given bytes. The next call to pyscanYYlex() will
 * scan from a @e copy of @a bytes.
 * @param bytes the byte buffer to scan
 * @param len the number of bytes in the buffer pointed to by @a bytes.
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE pyscanYY_scan_bytes  (yyconst char * yybytes, yy_size_t  _yybytes_len )
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n, i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = _yybytes_len + 2;
	buf = (char *) pyscanYYalloc(n  );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in pyscanYY_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = pyscanYY_scan_buffer(buf,n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in pyscanYY_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yy_fatal_error (yyconst char* msg )
{
    	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up pyscanYYtext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		pyscanYYtext[pyscanYYleng] = (yy_hold_char); \
		(yy_c_buf_p) = pyscanYYtext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		pyscanYYleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the current line number.
 * 
 */
int pyscanYYget_lineno  (void)
{
        
    return pyscanYYlineno;
}

/** Get the input stream.
 * 
 */
FILE *pyscanYYget_in  (void)
{
        return pyscanYYin;
}

/** Get the output stream.
 * 
 */
FILE *pyscanYYget_out  (void)
{
        return pyscanYYout;
}

/** Get the length of the current token.
 * 
 */
yy_size_t pyscanYYget_leng  (void)
{
        return pyscanYYleng;
}

/** Get the current token.
 * 
 */

char *pyscanYYget_text  (void)
{
        return pyscanYYtext;
}

/** Set the current line number.
 * @param line_number
 * 
 */
void pyscanYYset_lineno (int  line_number )
{
    
    pyscanYYlineno = line_number;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param in_str A readable stream.
 * 
 * @see pyscanYY_switch_to_buffer
 */
void pyscanYYset_in (FILE *  in_str )
{
        pyscanYYin = in_str ;
}

void pyscanYYset_out (FILE *  out_str )
{
        pyscanYYout = out_str ;
}

int pyscanYYget_debug  (void)
{
        return pyscanYY_flex_debug;
}

void pyscanYYset_debug (int  bdebug )
{
        pyscanYY_flex_debug = bdebug ;
}

static int yy_init_globals (void)
{
        /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from pyscanYYlex_destroy(), so don't allocate here.
     */

    (yy_buffer_stack) = 0;
    (yy_buffer_stack_top) = 0;
    (yy_buffer_stack_max) = 0;
    (yy_c_buf_p) = (char *) 0;
    (yy_init) = 0;
    (yy_start) = 0;

    (yy_state_buf) = 0;
    (yy_state_ptr) = 0;
    (yy_full_match) = 0;
    (yy_lp) = 0;

/* Defined in main.c */
#ifdef YY_STDINIT
    pyscanYYin = stdin;
    pyscanYYout = stdout;
#else
    pyscanYYin = (FILE *) 0;
    pyscanYYout = (FILE *) 0;
#endif

    /* For future reference: Set errno on error, since we are called by
     * pyscanYYlex_init()
     */
    return 0;
}

/* pyscanYYlex_destroy is for both reentrant and non-reentrant scanners. */
int pyscanYYlex_destroy  (void)
{
    
    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		pyscanYY_delete_buffer(YY_CURRENT_BUFFER  );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		pyscanYYpop_buffer_state();
	}

	/* Destroy the stack itself. */
	pyscanYYfree((yy_buffer_stack) );
	(yy_buffer_stack) = NULL;

    pyscanYYfree ( (yy_state_buf) );
    (yy_state_buf)  = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * pyscanYYlex() is called, initialization will occur. */
    yy_init_globals( );

    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *pyscanYYalloc (yy_size_t  size )
{
	return (void *) malloc( size );
}

void *pyscanYYrealloc  (void * ptr, yy_size_t  size )
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void pyscanYYfree (void * ptr )
{
	free( (char *) ptr );	/* see pyscanYYrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 1427 "pyscanner.l"



//----------------------------------------------------------------------------

static void parseCompounds(Entry *rt)
{
  //printf("parseCompounds(%s)\n",rt->name.data());
  EntryListIterator eli(*rt->children());
  Entry *ce;
  for (;(ce=eli.current());++eli)
  {
    if (!ce->program.isEmpty())
    {
      //printf("-- %s ---------\n%s\n---------------\n",
      //  ce->name.data(),ce->program.data());
      // init scanner state
      inputString = ce->program;
      inputPosition = 0;
      pyscanYYrestart( pyscanYYin ) ;
      if (ce->section&Entry::COMPOUND_MASK)
      {
        current_root = ce ;
        BEGIN( Search );
      }
      else if (ce->parent())
      {
        current_root = ce->parent();
	//printf("Searching for member variables in %s parent=%s\n",
	//    ce->name.data(),ce->parent->name.data());
	BEGIN( SearchMemVars );
      }
      yyFileName = ce->fileName;
      yyLineNr = ce->startLine ;
      if (current) delete current;
      current = new Entry;

      groupEnterCompound(yyFileName,yyLineNr,ce->name);
      
      pyscanYYlex() ;
      g_lexInit=TRUE;
      delete current; current=0;
      ce->program.resize(0);

      groupLeaveCompound(yyFileName,yyLineNr,ce->name);

    }
    parseCompounds(ce);
  }
}

//----------------------------------------------------------------------------


static void parseMain(const char *fileName,const char *fileBuf,Entry *rt)
{
  initParser();

  inputString = fileBuf;
  inputPosition = 0;

  protection    = Public;
  mtype         = Method;
  gstat         = FALSE;
  virt          = Normal;
  current_root  = rt;
  g_specialBlock = FALSE;


  inputFile.setName(fileName);
  if (inputFile.open(IO_ReadOnly))
  {
    yyLineNr= 1 ; 
    yyFileName = fileName;
    //setContext();
    msg("Parsing file %s...\n",yyFileName.data());

    QFileInfo fi(fileName);
    g_moduleScope = findPackageScope(fileName);
    QString baseName=fi.baseName();
    if (baseName!="__init__") // package initializer file is not a package itself
    {
      if (!g_moduleScope.isEmpty())
      {
	g_moduleScope+="::";
      }
      g_moduleScope+=baseName;
    }

    current            = new Entry;
    current->name      = g_moduleScope;
    current->section   = Entry::NAMESPACE_SEC;
    current->type      = "namespace";
    current->fileName  = yyFileName;
    current->startLine = yyLineNr;
    current->bodyLine  = yyLineNr;

    rt->addSubEntry(current);

    current_root  = current ;
    initParser();
    current       = new Entry;

    groupEnterFile(yyFileName,yyLineNr);
    
    current->reset();
    pyscanYYrestart( pyscanYYin );
    BEGIN( Search );
    pyscanYYlex();
    g_lexInit=TRUE;

    groupLeaveFile(yyFileName,yyLineNr);

    current_root->program.resize(0);
    delete current; current=0;

    parseCompounds(current_root);

    inputFile.close();
  }
  
}

//----------------------------------------------------------------------------

static void parsePrototype(const QCString &text)
{
  //printf("**** parsePrototype(%s) begin\n",text.data());
  if (text.isEmpty()) 
  {
    warn(yyFileName,yyLineNr,"Empty prototype found!");
    return;
  }

  g_specialBlock = FALSE;
  g_packageCommentAllowed = FALSE;

  const char *orgInputString;
  int orgInputPosition;
  YY_BUFFER_STATE orgState;
  
  // save scanner state
  orgState = YY_CURRENT_BUFFER;
  pyscanYY_switch_to_buffer(pyscanYY_create_buffer(pyscanYYin,YY_BUF_SIZE));
  orgInputString = inputString; 
  orgInputPosition = inputPosition;

  // set new string
  inputString = text;
  inputPosition = 0;
  pyscanYYrestart( pyscanYYin );

  BEGIN( FunctionDec );

  pyscanYYlex();
  g_lexInit=TRUE;

  current->name = current->name.stripWhiteSpace();
  if (current->section == Entry::MEMBERDOC_SEC && current->args.isEmpty())
    current->section = Entry::VARIABLEDOC_SEC;

  // restore original scanner state

  YY_BUFFER_STATE tmpBuf = YY_CURRENT_BUFFER;
  pyscanYY_switch_to_buffer(orgState);
  pyscanYY_delete_buffer(tmpBuf);

  inputString = orgInputString; 
  inputPosition = orgInputPosition;

  //printf("**** parsePrototype end\n");
}

void pyscanFreeScanner()
{
#if defined(YY_FLEX_SUBMINOR_VERSION) 
  if (g_lexInit)
  {
    pyscanYYlex_destroy();
  }
#endif
}

//----------------------------------------------------------------------------

void PythonLanguageScanner::parseInput(const char *fileName,const char *fileBuf,Entry *root)
{
  g_thisParser = this;
  ::parseMain(fileName,fileBuf,root);

  // May print the AST for debugging purposes
  // printAST(global_root);
}

bool PythonLanguageScanner::needsPreprocessing(const QCString &)
{
  return FALSE;
}

void PythonLanguageScanner::parseCode(CodeOutputInterface &codeOutIntf,
    const char *scopeName,
    const QCString &input,
    bool isExampleBlock,
    const char *exampleName,
    FileDef *fileDef,
    int startLine,
    int endLine,
    bool inlineFragment,
    MemberDef *memberDef,
    bool showLineNumbers
    )
{
  ::parsePythonCode(codeOutIntf,scopeName,input,isExampleBlock,exampleName,
                    fileDef,startLine,endLine,inlineFragment,memberDef,
                    showLineNumbers);
}

void PythonLanguageScanner::parsePrototype(const char *text)
{
  ::parsePrototype(text);

}

void PythonLanguageScanner::resetCodeParserState()
{
  ::resetPythonCodeParserState();
}

//----------------------------------------------------------------------------

#if !defined(YY_FLEX_SUBMINOR_VERSION) 
//----------------------------------------------------------------------------
extern "C" { // some bogus code to keep the compiler happy
  void pyscannerYYdummy() { yy_flex_realloc(0,0); } 
}
#endif


