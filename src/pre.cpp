
#line 3 "<stdout>"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define yy_create_buffer preYY_create_buffer
#define yy_delete_buffer preYY_delete_buffer
#define yy_flex_debug preYY_flex_debug
#define yy_init_buffer preYY_init_buffer
#define yy_flush_buffer preYY_flush_buffer
#define yy_load_buffer_state preYY_load_buffer_state
#define yy_switch_to_buffer preYY_switch_to_buffer
#define yyin preYYin
#define yyleng preYYleng
#define yylex preYYlex
#define yylineno preYYlineno
#define yyout preYYout
#define yyrestart preYYrestart
#define yytext preYYtext
#define yywrap preYYwrap
#define yyalloc preYYalloc
#define yyrealloc preYYrealloc
#define yyfree preYYfree

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 35
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;
#endif /* ! C99 */

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! FLEXINT_H */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE preYYrestart(preYYin  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#define YY_BUF_SIZE 262144
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

extern yy_size_t preYYleng;

extern FILE *preYYin, *preYYout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    #define YY_LESS_LINENO(n)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up preYYtext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up preYYtext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	yy_size_t yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via preYYrestart()), so that the user can continue scanning by
	 * just pointing preYYin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* Stack of input buffers. */
static size_t yy_buffer_stack_top = 0; /**< index of top of stack. */
static size_t yy_buffer_stack_max = 0; /**< capacity of stack. */
static YY_BUFFER_STATE * yy_buffer_stack = 0; /**< Stack as an array. */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* yy_hold_char holds the character lost when preYYtext is formed. */
static char yy_hold_char;
static yy_size_t yy_n_chars;		/* number of characters read into yy_ch_buf */
yy_size_t preYYleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 0;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow preYYwrap()'s to do buffer switches
 * instead of setting up a fresh preYYin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void preYYrestart (FILE *input_file  );
void preYY_switch_to_buffer (YY_BUFFER_STATE new_buffer  );
YY_BUFFER_STATE preYY_create_buffer (FILE *file,int size  );
void preYY_delete_buffer (YY_BUFFER_STATE b  );
void preYY_flush_buffer (YY_BUFFER_STATE b  );
void preYYpush_buffer_state (YY_BUFFER_STATE new_buffer  );
void preYYpop_buffer_state (void );

static void preYYensure_buffer_stack (void );
static void preYY_load_buffer_state (void );
static void preYY_init_buffer (YY_BUFFER_STATE b,FILE *file  );

#define YY_FLUSH_BUFFER preYY_flush_buffer(YY_CURRENT_BUFFER )

YY_BUFFER_STATE preYY_scan_buffer (char *base,yy_size_t size  );
YY_BUFFER_STATE preYY_scan_string (yyconst char *yy_str  );
YY_BUFFER_STATE preYY_scan_bytes (yyconst char *bytes,yy_size_t len  );

void *preYYalloc (yy_size_t  );
void *preYYrealloc (void *,yy_size_t  );
void preYYfree (void *  );

#define yy_new_buffer preYY_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        preYYensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            preYY_create_buffer(preYYin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        preYYensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            preYY_create_buffer(preYYin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define preYYwrap(n) 1
#define YY_SKIP_YYWRAP

typedef unsigned char YY_CHAR;

FILE *preYYin = (FILE *) 0, *preYYout = (FILE *) 0;

typedef int yy_state_type;

extern int preYYlineno;

int preYYlineno = 1;

extern char *preYYtext;
#define yytext_ptr preYYtext

static yy_state_type yy_get_previous_state (void );
static yy_state_type yy_try_NUL_trans (yy_state_type current_state  );
static int yy_get_next_buffer (void );
static void yy_fatal_error (yyconst char msg[]  );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up preYYtext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	preYYleng = (size_t) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;

#define YY_NUM_RULES 165
#define YY_END_OF_BUFFER 166
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_acclist[1235] =
    {   0,
      147,  147,  166,  164,  165,    1,  164,  165,  163,  165,
        3,  164,  165,  164,  165,  164,  165,    2,  164,  165,
        6,  164,  165,    1,    6,  164,  165,    6,  164,  165,
        6,  163,  165,    3,    6,  164,  165,    5,  164,  165,
        6,  164,  165,    6,  164,  165,    6,  164,  165,    2,
        6,  164,  165,   53,  164,  165,    1,   53,  164,  165,
       49,  163,  165,    3,   53,  164,  165,   53,  164,  165,
       53,  164,  165,   50,   53,  164,  165,   50,   53,  164,
      165,   50,   53,  164,  165,   50,   53,  164,  165,   50,
       53,  164,  165,   50,   53,  164,  165,    2,   53,  164,

      165,   77,  164,  165,    1,   77,  164,  165,   75,  163,
      165,    3,   77,  164,  165,   77,  164,  165,   77,  164,
      165,   76,   77,  164,  165,   76,   77,  164,  165,   76,
       77,  164,  165,    2,   77,  164,  165,   78,   81,  164,
      165,    1,   78,   81,  164,  165,   84,  163,  165,    3,
       78,   81,  164,  165,   80,   81,  164,  165,   81,  164,
      165,   81,  164,  165,   78,   81,  164,  165,    2,   78,
       81,  164,  165,   85,   88,  164,  165,    1,   85,   88,
      164,  165,    3,   85,   88,  164,  165,   87,   88,  164,
      165,   85,   88,  164,  165,   85,   88,  164,  165,   88,

      164,  165,    2,   85,   88,  164,  165,   23,  164,  165,
        1,   23,  164,  165,   24,  163,  165,    3,   23,  164,
      165,   16,   23,  164,  165,   23,  164,  165,   23,  164,
      165,   23,  164,  165,   21,   23,  164,  165,16404,   23,
      164,  165,   21,   23,  164,  165,16404,   11,   23,  164,
      165,   12,   23,  164,  165,    2,   23,  164,  165,   17,
      164,  165,    1,   17,  164,  165,   19,  164,  165,   17,
      164,  165,   17,  164,  165,  164,  165,    2,   17,  164,
      165,  164,  165,    1,  164,  165,    3,  164,  165,  164,
      165,  164,  165,    2,  164,  165,   90,  164,  165,   94,

      164,  165,    1,   94,  164,  165,   92,  163,  165,    3,
       94,  164,  165,   94,  164,  165,   94,  164,  165,   94,
      164,  165,    2,   94,  164,  165, 8289,  164,  165,16481,
    16482,  164,  165,  100,  164,  165,  101,  164,  165,   99,
      164,  165,  164,  165,  103,  164,  165,  159,  164,  165,
        1,  159,  164,  165,  147,  159,  164,  165,  146,  163,
      165,    3,  159,  164,  165,  150,  159,  164,  165,  142,
      159,  164,  165,  151,  159,  164,  165,  159,  164,  165,
      159,  164,  165,  149,  159,  164,  165,  143,  159,  164,
      165,  159,  164,  165,    2,  159,  164,  165,   70,  164,

      165,    1,   70,  164,  165,   69,  163,  165,    3,   70,
      164,  165,   70,  164,  165,   70,  164,  165,    2,   70,
      164,  165,   68,   70,  164,  165,    1,   68,   70,  164,
      165,   68,   70,  164,  165,   68,   69,  163,  165,    3,
       68,   70,  164,  165,   67,   70,  164,  165,   68,   70,
      164,  165,   68,   70,  164,  165,    2,   68,   70,  164,
      165,  119,  121,  164,  165,    1,  121,  164,  165,  120,
      163,  165,    3,  119,  121,  164,  165,  121,  164,  165,
      121,  164,  165,  119,  121,  164,  165,  121,  164,  165,
        2,  119,  121,  164,  165,  122,  144,  164,  165,    1,

      122,  144,  164,  165,  124,  163,  165,    3,  122,  144,
      164,  165,  144,  164,  165,  122,  144,  164,  165,  122,
      144,  164,  165,  143,  144,  164,  165,    2,  122,  144,
      164,  165,  121,  164,  165,  121,  164,  165,  121,  164,
      165,  132,  136,  137,  164,  165,    1,  132,  137,  164,
      165,  133,  163,  165,    3,  132,  136,  137,  164,  165,
      136,  137,  164,  165,  132,  136,  137,  164,  165,  137,
      164,  165,    2,  132,  136,  137,  164,  165,  129,  131,
      164,  165,    1,  131,  164,  165,  130,  163,  165,    3,
      129,  131,  164,  165,  131,  164,  165,  129,  131,  164,

      165,  129,  131,  164,  165,    2,  129,  131,  164,  165,
      140,  141,  164,  165,    1,  141,  164,  165,    3,  140,
      141,  164,  165,  140,  141,  164,  165,  140,  141,  164,
      165,    2,  140,  141,  164,  165,   59,  164,  165,    1,
       59,  164,  165,   60,  163,  165,    3,   59,  164,  165,
       59,  164,  165,   59,  164,  165,   58,   59,  164,  165,
       59,  164,  165,   58,   59,  164,  165,    2,   59,  164,
      165,   66,  164,  165,    1,   66,  164,  165,   64,  163,
      165,    3,   66,  164,  165,   66,  164,  165,   66,  164,
      165,   62,   66,  164,  165,   66,  164,  165,    2,   66,

      164,  165,   65,   66,  164,  165,   63,   66,  164,  165,
      157,  164,  165,    1,  157,  164,  165,    3,  157,  164,
      165,  154,  157,  164,  165,  157,  164,  165,  157,  164,
      165,  157,  164,  165,    2,  157,  164,  165,  158,  164,
      165,    1,  158,  164,  165,    3,  158,  164,  165,  156,
      158,  164,  165,  158,  164,  165,  158,  164,  165,  158,
      164,  165,    2,  158,  164,  165,   54,  164,  165,   52,
      164,  165,    1,   52,  164,  165,    3,   52,  164,  165,
       52,  164,  165,   52,  164,  165,   52,  164,  165,    2,
       52,  164,  165,   31,  164,  165,    1,   31,  164,  165,

       29,  163,  165,    3,   31,  164,  165,   28,   31,  164,
      165,   31,  164,  165,   25,   31,  164,  165,   26,   31,
      164,  165,   31,  164,  165,   31,  164,  165,   30,   31,
      164,  165,    2,   31,  164,  165,   35,  164,  165,    1,
       35,  164,  165,    3,   35,  164,  165,   32,   35,  164,
      165,   35,  164,  165,   35,  164,  165,   35,  164,  165,
        2,   35,  164,  165,  115,  164,  165,    1,  115,  164,
      165,    3,  115,  164,  165,  115,  164,  165,  115,  164,
      165,  113,  115,  164,  165,    2,  115,  164,  165,  161,
      162,    6,    6,    5,    6,   50,   50,   50,   50,   50,

       50,   50,   50,   50,   83,  161,   82,  162,   76,   76,
       76,   76,   78,   78,   85,   83,   85,  161,   82,   85,
      162,   85,   86, 8212,   21,16404,   22,   21,16404,   17,
       17,  161,   17,  162,   17,   18,   91,  161,  162,   89,
       90,   92,  161,  162,   93, 8289, 8290,   95, 8289,16481,
    16482,  101,  100,  101,   99,  103,  103,  147,  148,  104,
      161,  105,  162,  143,  145,   68,   68,   67,  119,  106,
      108,  161,  107,  162,  119,  122,  123,  122,  162,  122,
      118,  118,  161,  132,  136,  132,  136,  134,  136,  161,
      135,  136,  162,  132,  136,  129,  126,  128,  161,  127,

      129,  162,  129,  140,  138,  140,  161,  139,  140,  162,
      140,   58,   55,   58,   62,   61,   63,  153,  161,  152,
      162,  155,   54,   51,   33,  161,   33,  162,   34,  113,
      161,  162,    4,16391,   50,   50,   50,   50,   50,   43,
       50,   50,   50,   50,   50,   83,   83,  161,   82,   82,
      162,   76,   76,   76,   71,   76,   76,   79,    4,   78,
       83,   85,   83,   85,  161,   82,   85,   82,   85,  162,
        4,   85,   15,   15,   21,16404,   17,  161,   17,  162,
        4,   17,  161,  162,    4,    4,   91,  161,  162,    4,
       96,  102,  148,  104,  104,  161,  105,  105,  162,  107,

      162,    4,  119,  122,  162,    4,  122,  117,  136,  161,
      136,  162,    4,  132,  136,    4,  136,  125,  129,  162,
        4,  129,  140,  161,  140,  162,    4,  140,   58,   27,
      160,16391,    9, 8199,   50,   50,   50,   50,   50,   50,
       50,   50,   50,   50,   83,  160,   76,   72,   76,   76,
       76,   79,   83,   85,  160,   14,   13,   14,   21,16404,
       17,  160,  160,  160,  103,  107,  109,  136,  160,  140,
      160,   58,   27, 8199,    9,   50,   50,   44,   47,   45,
       45,   50,   50,   50,   50,   50,   50,   50,   73,   76,
       74,   76,   76,   13,   21,16404,  111,   58,    8,    9,

       50,   50,   48,   40,   39,   50,   50,   50,   46,   21,
    16404,  110,  112,  114,   58,    9,   38,   42,   41,16420,
       37,   10,   58,    9, 8228,   57,   56,    9, 8228,  116,
        9,    9,    9,    9
    } ;

static yyconst flex_int16_t yy_accept[1154] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    2,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    4,    6,    9,
       11,   14,   16,   18,   21,   24,   28,   31,   34,   38,
       41,   44,   47,   50,   54,   57,   61,   64,   68,   71,
       74,   78,   82,   86,   90,   94,   98,  102,  105,  109,

      112,  116,  119,  122,  126,  130,  134,  138,  142,  147,
      150,  155,  159,  162,  165,  169,  174,  178,  183,  188,
      192,  196,  200,  203,  208,  211,  215,  218,  222,  226,
      229,  232,  235,  240,  243,  248,  252,  256,  260,  263,
      267,  270,  273,  276,  278,  282,  284,  287,  290,  292,
      294,  297,  300,  303,  307,  310,  314,  317,  320,  323,
      327,  332,  334,  337,  340,  343,  345,  348,  351,  355,
      359,  362,  366,  370,  374,  378,  381,  384,  388,  392,
      395,  399,  402,  406,  409,  413,  416,  419,  423,  427,
      432,  436,  440,  445,  449,  453,  457,  462,  466,  470,

      473,  478,  481,  484,  488,  491,  496,  500,  505,  508,
      513,  516,  520,  524,  528,  533,  536,  539,  542,  547,
      552,  555,  561,  565,  570,  573,  579,  583,  587,  590,
      595,  598,  602,  606,  611,  615,  619,  624,  628,  632,
      637,  640,  644,  647,  651,  654,  657,  661,  664,  668,
      672,  675,  679,  682,  686,  689,  692,  696,  699,  703,
      707,  711,  714,  718,  722,  726,  729,  732,  735,  739,
      742,  746,  750,  754,  757,  760,  763,  767,  770,  773,
      777,  781,  784,  787,  790,  794,  797,  801,  804,  808,
      812,  815,  819,  823,  826,  829,  833,  837,  840,  844,

      848,  852,  855,  858,  861,  865,  868,  872,  876,  879,
      882,  886,  890,  891,  892,  892,  893,  894,  895,  896,
      896,  896,  896,  897,  898,  899,  900,  901,  902,  903,
      904,  905,  907,  909,  910,  911,  912,  913,  914,  914,
      914,  915,  916,  919,  922,  923,  924,  924,  924,  924,
      925,  927,  928,  928,  930,  931,  933,  935,  936,  937,
      937,  938,  939,  940,  940,  940,  941,  942,  942,  943,
      944,  945,  945,  946,  946,  947,  948,  949,  952,  952,
      953,  954,  955,  956,  956,  957,  957,  958,  959,  959,
      960,  962,  964,  965,  966,  966,  967,  968,  969,  970,

      971,  973,  975,  976,  976,  976,  976,  976,  976,  976,
      976,  976,  976,  976,  977,  978,  980,  981,  982,  984,
      984,  984,  986,  987,  988,  991,  994,  996,  996,  997,
      998, 1000, 1003, 1004, 1005, 1008, 1011, 1012, 1013, 1014,
     1014, 1015, 1016, 1017, 1018, 1020, 1022, 1023, 1024, 1025,
     1025, 1025, 1025, 1027, 1029, 1030, 1031, 1032, 1033, 1034,
     1034, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042,
     1043, 1044, 1045, 1046, 1047, 1049, 1050, 1052, 1053, 1054,
     1055, 1056, 1057, 1058, 1058, 1059, 1059, 1059, 1061, 1063,
     1066, 1068, 1071, 1073, 1074, 1074, 1075, 1075, 1075, 1077,

     1079, 1081, 1083, 1084, 1085, 1086, 1088, 1089, 1090, 1091,
     1092, 1093, 1093, 1094, 1095, 1097, 1098, 1100, 1102, 1104,
     1104, 1104, 1104, 1104, 1104, 1104, 1104, 1104, 1104, 1104,
     1104, 1104, 1104, 1104, 1104, 1104, 1104, 1104, 1106, 1108,
     1108, 1109, 1111, 1113, 1116, 1118, 1118, 1118, 1119, 1121,
     1123, 1125, 1127, 1129, 1130, 1130, 1131, 1131, 1131, 1132,
     1132, 1133, 1133, 1134, 1134, 1135, 1136, 1137, 1138, 1139,
     1140, 1141, 1142, 1143, 1144, 1145, 1147, 1148, 1150, 1151,
     1152, 1152, 1153, 1153, 1156, 1157, 1159, 1159, 1159, 1161,
     1163, 1164, 1165, 1166, 1167, 1167, 1167, 1168, 1168, 1168,

     1168, 1168, 1168, 1168, 1168, 1168, 1168, 1168, 1168, 1168,
     1168, 1168, 1168, 1168, 1168, 1170, 1172, 1173, 1173, 1174,
     1174, 1174, 1174, 1174, 1174, 1175, 1175, 1176, 1176, 1177,
     1178, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188,
     1189, 1190, 1190, 1191, 1193, 1194, 1194, 1194, 1195, 1195,
     1195, 1197, 1197, 1197, 1197, 1197, 1197, 1197, 1197, 1197,
     1197, 1198, 1198, 1198, 1198, 1198, 1198, 1198, 1198, 1198,
     1198, 1198, 1198, 1198, 1198, 1198, 1198, 1199, 1199, 1199,
     1199, 1199, 1199, 1200, 1200, 1201, 1201, 1202, 1203, 1203,
     1203, 1204, 1205, 1206, 1207, 1208, 1209, 1210, 1210, 1210,

     1212, 1213, 1213, 1213, 1213, 1213, 1213, 1213, 1214, 1215,
     1215, 1215, 1215, 1215, 1215, 1215, 1215, 1215, 1215, 1215,
     1215, 1215, 1215, 1215, 1215, 1215, 1216, 1216, 1216, 1216,
     1217, 1217, 1218, 1218, 1219, 1220, 1221, 1222, 1222, 1222,
     1222, 1222, 1223, 1223, 1223, 1223, 1223, 1223, 1223, 1223,
     1223, 1223, 1223, 1223, 1223, 1223, 1223, 1223, 1223, 1223,
     1223, 1223, 1223, 1224, 1224, 1224, 1224, 1225, 1225, 1226,
     1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226,
     1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1227,
     1228, 1228, 1228, 1228, 1229, 1229, 1230, 1230, 1230, 1230,

     1230, 1230, 1230, 1231, 1231, 1231, 1231, 1231, 1231, 1231,
     1231, 1231, 1231, 1231, 1232, 1232, 1232, 1232, 1232, 1232,
     1232, 1232, 1232, 1232, 1232, 1232, 1232, 1232, 1232, 1233,
     1233, 1233, 1233, 1233, 1233, 1233, 1233, 1233, 1233, 1233,
     1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 1235,
     1235, 1235, 1235, 1235, 1235, 1235, 1235, 1235, 1235, 1235,
     1235, 1235, 1235, 1235, 1235, 1235, 1235, 1235, 1235, 1235,
     1235, 1235, 1235, 1235, 1235, 1235, 1235, 1235, 1235, 1235,
     1235, 1235, 1235, 1235, 1235, 1235, 1235, 1235, 1235, 1235,
     1235, 1235, 1235, 1235, 1235, 1235, 1235, 1235, 1235, 1235,

     1235, 1235, 1235, 1235, 1235, 1235, 1235, 1235, 1235, 1235,
     1235, 1235, 1235, 1235, 1235, 1235, 1235, 1235, 1235, 1235,
     1235, 1235, 1235, 1235, 1235, 1235, 1235, 1235, 1235, 1235,
     1235, 1235, 1235, 1235, 1235, 1235, 1235, 1235, 1235, 1235,
     1235, 1235, 1235, 1235, 1235, 1235, 1235, 1235, 1235, 1235,
     1235, 1235, 1235, 1235, 1235, 1235, 1235, 1235, 1235, 1235,
     1235, 1235, 1235, 1235, 1235, 1235, 1235, 1235, 1235, 1235,
     1235, 1235, 1235, 1235, 1235, 1235, 1235, 1235, 1235, 1235,
     1235, 1235, 1235, 1235, 1235, 1235, 1235, 1235, 1235, 1235,
     1235, 1235, 1235, 1235, 1235, 1235, 1235, 1235, 1235, 1235,

     1235, 1235, 1235, 1235, 1235, 1235, 1235, 1235, 1235, 1235,
     1235, 1235, 1235, 1235, 1235, 1235, 1235, 1235, 1235, 1235,
     1235, 1235, 1235, 1235, 1235, 1235, 1235, 1235, 1235, 1235,
     1235, 1235, 1235, 1235, 1235, 1235, 1235, 1235, 1235, 1235,
     1235, 1235, 1235, 1235, 1235, 1235, 1235, 1235, 1235, 1235,
     1235, 1235, 1235, 1235, 1235, 1235, 1235, 1235, 1235, 1235,
     1235, 1235, 1235, 1235, 1235, 1235, 1235, 1235, 1235, 1235,
     1235, 1235, 1235, 1235, 1235, 1235, 1235, 1235, 1235, 1235,
     1235, 1235, 1235, 1235, 1235, 1235, 1235, 1235, 1235, 1235,
     1235, 1235, 1235, 1235, 1235, 1235, 1235, 1235, 1235, 1235,

     1235, 1235, 1235, 1235, 1235, 1235, 1235, 1235, 1235, 1235,
     1235, 1235, 1235, 1235, 1235, 1235, 1235, 1235, 1235, 1235,
     1235, 1235, 1235, 1235, 1235, 1235, 1235, 1235, 1235, 1235,
     1235, 1235, 1235, 1235, 1235, 1235, 1235, 1235, 1235, 1235,
     1235, 1235, 1235, 1235, 1235, 1235, 1235, 1235, 1235, 1235,
     1235, 1235, 1235
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    2,    1,    1,    3,    4,
        1,    1,    5,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    3,    6,    7,    8,    9,    1,    1,   10,   11,
       12,   13,    1,   14,   15,   16,   17,   18,   19,   18,
       18,   18,   18,   18,   18,   20,   20,   21,    1,   22,
       23,   24,   25,   26,   27,   27,   28,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       29,   30,   31,    1,   27,    1,   32,   33,   34,   35,

       36,   37,   38,   39,   40,   38,   41,   42,   43,   44,
       45,   46,   38,   47,   48,   49,   50,   51,   38,   52,
       53,   38,   54,    1,   55,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst flex_int32_t yy_meta[57] =
    {   0,
        1,    2,    3,    4,    5,    6,    7,    1,    1,    8,
        9,    6,   10,    1,   11,   12,   13,   14,   14,   14,
        1,   15,    6,    6,    1,   16,   17,   17,    1,   18,
        1,   17,   17,   17,   17,   17,   17,   17,   17,   17,
       17,   17,   17,   17,   17,   17,   17,   17,   17,   17,
       17,   17,   17,    1,    1,    1
    } ;

static yyconst flex_int16_t yy_base[1261] =
    {   0,
        0,    4,    9,   64,  120,    0,  176,    0,   26,   37,
      231,  235,  291,    0,  346,  350,  357,  383,  439,    0,
       53,  494,  524,    0,  577,    0,  633,    0,   59,  498,
      688,  692,  697,  702,  757,  812,  868,    0,  923,  978,
      716,  730,  763,  787,  793,  803, 1034,    0, 1090,    0,
     1135,    0,  930,  937,  941,  959, 1162,    0, 1214, 1218,
     1273, 1328, 1225, 1262, 1384,    0, 2831, 5365, 5365, 5365,
     5365,    2, 2805, 5365, 5365, 5365,   71, 5365, 5365, 5365,
        3, 2794,   77, 5365, 5365, 5365, 5365, 5365,    5, 2789,
        0, 2770, 2772,    4,   57, 2762, 5365, 5365, 5365, 5365,

     5365,   10, 2780,    0,    8, 2765, 5365,    0,    0, 5365,
        0, 5365, 2764,   32, 2763,    0,    0,    0,    0, 5365,
       58, 2762,    0,    0, 5365, 5365, 5365, 5365, 5365, 2754,
       60, 2750,  103,   33,  725, 5365, 5365, 5365,    0,    0,
     5365,   73, 2749,    0,    0,    0,   78,  227,  240,  234,
      238,   29, 2759, 2744, 5365, 2733,   99,  242,  106, 2731,
      265,    0, 2731, 2720, 2707, 2692,  247, 5365, 5365,  110,
     5365, 5365, 5365, 2680, 5365,  253, 2654, 5365,    0,  239,
     5365, 5365, 5365, 5365, 5365,  258, 2653, 5365, 5365, 5365,
      246, 5365, 5365, 5365,  260, 2647, 5365,    0, 5365, 5365,

        0, 2631,  261, 2621, 1415,    0,    0,    0, 5365,    0,
     2610,  266, 2601,    0,    0, 2607,  267,  245,  356,    0,
     5365,  366,  272,  367,   83,  376,    0, 5365, 5365,    0,
     2597,  273, 2583,    0,    0, 5365,    0,  343, 2570,    0,
     5365, 5365, 5365, 5365,  353, 2555,    0,  390, 2541, 5365,
     5365, 5365, 5365, 5365,  384, 2539,    0, 2559, 5365, 5365,
        0, 5365, 5365, 5365, 5365,  386, 2532,    0, 5365, 5365,
     5365, 5365, 5365,  392, 2522,    0, 5365,    0, 5365, 5365,
     5365,  397, 2511,  407, 5365, 5365, 5365, 5365, 5365, 5365,
     2500, 5365, 5365,  402, 2487, 5365, 5365, 5365, 5365, 5365,

     5365,  403, 2481,    0, 5365, 5365, 5365, 5365,  404, 2480,
        0, 5365, 2490, 2480,    0, 5365,  501, 5365,  494,  393,
      411,  507,    0, 2458, 2451,  378, 2451,  705, 2438, 2444,
     2436, 2455, 2450,    0,  384, 2430,  800,    0, 2449,  409,
     1462,    0,  523,  525, 1481, 5365, 2442,  415,  426, 5365,
      534, 5365, 2446,  720,    0, 2432, 2426, 1500, 5365,  248,
     5365,  730,  524, 1519,  505, 5365,  692, 2438, 5365,  373,
      503, 1540, 5365, 2435,  747, 5365, 5365,  760,  386, 2428,
     2422, 2421, 2410, 2396,  530, 2391,  723,  541, 2398, 2385,
      359,  767,    0, 5365, 2369, 5365,  707, 5365,    0, 5365,

      530, 2349, 1559, 1550, 2316, 2314, 2309, 2303, 2315, 2304,
     2277, 2285, 2276,    0, 5365, 2301, 1597, 5365, 2303, 2271,
      784,  773,    0,    0, 2294, 2289, 1620, 2259,    0,  749,
     2289, 2279, 1639,    0, 2282, 2273, 1658,    0, 5365, 2266,
     2227,    0, 5365,    0, 2242, 2233, 5365,    0, 5365, 2245,
     2237,  417, 2233, 2221, 5365,    0, 2219, 5365, 5365,  767,
     2223,  969, 2191, 2180, 2182, 2181, 2173, 5365, 2174, 2174,
     2162, 2164, 2165,    0, 2183,    0,    0, 2157, 2157, 2151,
     5365, 2150, 2150, 2173, 5365, 2172,  812,    0,  510,  816,
      794,  802,    0, 5365, 2167, 2158,  835,  847,  995, 2150,

        0,    0,  840,  778,  841, 5365,  777, 2160, 2152, 5365,
     5365, 2126, 2135, 5365, 2119, 5365, 5365, 2113,    0, 2084,
     2074,  812, 2069, 2081, 2079, 2061, 2071, 2059,  656, 2048,
     2058, 2048, 2036, 2040, 2037, 2021, 2024,    0,    0, 2030,
     5365, 2046,    0,  838,    0, 2017,  853, 5365,    0,    0,
     2037,    0,    0, 2012, 2038, 5365, 2036,  991, 5365, 2028,
     1242, 1255, 1268, 1290, 5365, 1995, 1983,  927, 1682, 1982,
     1980, 1980, 1967, 1960, 1972,    0, 1008,  796, 1970, 1966,
     1991, 5365, 1002,  922, 5365, 5365, 1006, 1145, 1299,    0,
      961, 1993, 5365, 1979, 1958, 1937, 5365, 1940, 1931, 1931,

     1935, 1923, 1921, 1926, 1925, 1023, 1925, 1914, 1914, 1897,
     1895, 1904, 1891, 1273,    0,    0, 1884, 1916, 5365, 1141,
      822, 1443, 1478,  859,  953, 1556, 1575, 1612, 1883, 1878,
     5365, 5365,  947, 1867, 1738,  967, 1855, 1842, 1852, 1879,
     5365,  956, 1844,    0, 1155, 1869, 1864, 5365, 1854, 1323,
     1338, 1822, 1149, 1815, 1815, 1795, 1794, 1794, 1780, 1188,
     1221, 1778, 1773, 1765, 1762, 1761, 1646, 1633, 1627, 1626,
     1618, 1628, 1621, 1603, 1612, 1604, 1600, 1624, 1618, 1792,
     1795, 1014, 5365, 1620, 1798, 1805, 1591, 1615,  989, 1576,
     5365,  991, 5365, 1002, 1214, 1575, 1597, 1562, 1347, 1817,

     1248, 1550, 1542, 1546, 1542, 1541, 1524, 1352, 5365, 1356,
     1523, 1522, 1513, 1512, 1498, 1486, 1491, 1493, 1478, 1476,
     1465, 1465, 1470, 1448, 1452, 1454, 1826, 1829, 1832, 1839,
     1851, 1485, 1294, 1019, 5365, 1234, 5365, 1359, 1363, 1858,
     1452, 5365, 1432, 1420, 1419, 1417, 1403, 1402, 1408, 1400,
     1336, 1316, 1311, 1323, 1295, 1311, 1295, 1300, 1286, 1278,
     1288, 1274, 1154, 1863, 1873, 1885, 1892, 1895,    0, 1368,
     1904, 1306, 1264, 1257, 1233, 1229, 1228, 1208,    0, 1187,
     1196, 1191, 1188, 1176, 1120, 1111, 1001,  988, 1246, 5365,
     1898, 1917, 1920, 1927, 1930,    0, 1372, 1950, 1940,  954,

      946,  938, 5365,  924,  931,  911,  889,  884,  818,  818,
     1961, 1964, 1974, 1984, 1987, 1497, 1995, 1466,  774,  754,
      701,  685,  659,  658,  385, 2008, 2018, 2021, 2029, 2032,
     1534, 2040, 1544,  338,  337,  306, 2052, 2055, 2066, 2074,
     2077, 1635, 2085, 1601,  235, 2096, 2100, 2111, 2119, 2122,
     1654, 2130, 2141, 2148, 2154, 2144, 2167, 2158, 2176, 2185,
     2194, 2200, 2211, 2220, 2223, 2226, 2237, 2240, 2249, 2254,
     2258, 2268, 2263, 2273, 2278, 2283, 2289, 2294, 2306, 2309,
     2320, 2325, 2330, 2335, 2340, 2346, 2351, 2360, 2364, 2373,
     2367, 2382, 2392, 2378, 2387, 2397, 2406, 2412, 2415, 2425,

     2430, 2433, 2444, 2450, 2459, 2453, 2469, 2478, 2472, 2488,
     2497, 2491, 2506, 2511, 2516, 2520, 2530, 2524, 2535, 2545,
     2539, 2550, 2555, 2564, 2568, 2578, 2571, 2583, 2593, 2587,
     2602, 2612, 2598, 2617, 2626, 2607, 2631, 2646, 2635, 2651,
     2660, 2640, 2665, 2670, 2655, 2679, 2688, 2682, 2693, 2708,
     2698, 2717, 2722, 2702, 2727, 2736, 2713, 2746, 2761, 2741,
     2750, 2766, 2755, 2775, 2778, 2788, 2793, 2796, 2807, 2813,
     2818, 2823, 2830, 2833, 2842, 2848, 2851, 2860, 2863, 2875,
     2866, 2880, 2890, 2885, 2895, 2904, 2899, 2913, 2923, 2918,
     2932, 2943, 2928, 2952, 2957, 2937, 2962, 2976, 2966, 2981,

     2991, 2971, 2996, 3001, 2985, 3010, 3024, 3013, 3029, 3039,
     3019, 3048, 3053, 3033, 3058, 3072, 3044, 3077, 3092, 3067,
     3081, 3097, 3086, 3106, 3109, 3119, 3124, 3127, 3138, 3144,
     3149, 3154, 3161, 3164, 3173, 3179, 3182, 3191, 3194, 3206,
     3197, 3211, 3221, 3216, 3226, 3235, 3230, 3244, 3254, 3249,
     3263, 3274, 3259, 3283, 3288, 3268,   76, 3293, 3302, 3307,
     3312, 3316, 3321, 3326, 3331, 3341, 3335, 3346, 3355, 3359,
     3364, 3368, 3373, 3378,    5, 3383, 3387, 3393, 3398, 3401,
     3407, 3411, 3416, 3420, 3425, 3430, 3435, 3439, 3445, 3453,
     3459, 3463, 3468, 3472, 3477, 3482, 3487, 3491, 3497, 3500,

     3505, 3511, 3515, 3520, 3524, 3529, 3534, 3539, 3543, 3552,
     3557, 3563, 3567, 3572, 3576, 3581, 3586, 3591, 3595, 3598,
     3604, 3609, 3615, 3619, 3624, 3628, 3633, 3638, 3643, 3650,
     3656, 3661, 3667, 3671, 3676, 3680, 3685, 3690, 3695, 3698,
     3702, 3708, 3713, 3719, 3723, 3728, 3732, 3737, 3742, 3750,
     3754, 5365, 3808, 3826, 3844, 3862, 3880, 3898, 3916, 3934,
     3952, 3970, 3988, 4006, 4024, 4042, 4060, 4078, 4096, 4114,
     4132, 1248, 1274, 4150, 4168, 4186, 4203, 4221, 4237, 4254,
     4271, 4289, 4305, 4322, 4337, 4352, 1300, 4369, 4387, 4404,
     4422, 4439, 4456, 4473, 4491, 1364, 1439, 1446, 4509, 1461,

     4527, 4545, 4553, 4565, 4580, 1499, 4598, 4616, 1504, 4634,
     4652, 4669, 4687, 4704, 4722, 4740, 4756, 4773, 4790, 4806,
     4823, 4838, 4853, 1539, 4870, 4888, 4905, 4923, 4940, 4957,
     4974, 4992, 1558, 1574, 1662, 1797, 5010, 5027, 5035, 5052,
     5070, 1798, 5088, 5106, 1831, 5124, 5141, 5159, 5177, 5195,
     5210, 5227, 5244, 5262, 5279, 5297, 5314, 5329, 1856, 5346
    } ;

static yyconst flex_int16_t yy_def[1261] =
    {   0,
     1153, 1153, 1153, 1154, 1152,    5, 1152,    7, 1155, 1155,
     1156, 1156, 1152,   13, 1157, 1157, 1158, 1158, 1152,   19,
     1159, 1159,   19,   23, 1152,   25, 1152,   27, 1160, 1161,
     1153, 1153, 1153, 1153, 1162, 1162, 1152,   37, 1162, 1162,
     1163, 1163, 1164, 1164, 1165, 1165, 1152,   47, 1152,   49,
       49,   51, 1166, 1166, 1167, 1167,   23,   57, 1168, 1168,
     1169, 1169, 1170, 1170, 1152,   65, 1152, 1152, 1152, 1152,
     1152, 1152, 1152, 1152, 1152, 1152, 1171, 1152, 1152, 1152,
     1152, 1152, 1152, 1152, 1152, 1152, 1152, 1152, 1152, 1152,
     1172, 1172, 1172, 1172, 1172, 1172, 1152, 1152, 1152, 1152,

     1152, 1152, 1152, 1173, 1173, 1173, 1152, 1174, 1174, 1152,
     1174, 1152, 1175, 1152, 1174, 1174, 1176, 1176, 1176, 1152,
     1176, 1176, 1177, 1176, 1152, 1152, 1152, 1152, 1152, 1178,
     1152, 1152, 1179, 1152, 1179, 1152, 1152, 1152, 1180, 1180,
     1152, 1180, 1180, 1181, 1180, 1182, 1182, 1182, 1182, 1182,
     1182, 1183, 1184, 1184, 1152, 1184, 1184, 1184, 1152, 1184,
     1185, 1152, 1152, 1152, 1152, 1152, 1186, 1152, 1152, 1152,
     1152, 1152, 1152, 1152, 1152, 1152, 1152, 1152, 1187, 1152,
     1152, 1152, 1152, 1152, 1152, 1152, 1152, 1152, 1152, 1152,
     1188, 1152, 1152, 1152, 1152, 1152, 1152, 1189, 1152, 1152,

     1189, 1152, 1152, 1189, 1152, 1189, 1190, 1190, 1152, 1190,
     1152, 1190, 1190, 1187, 1190, 1152, 1152, 1152, 1191, 1192,
     1152, 1191, 1193, 1191, 1152, 1191, 1194, 1152, 1152, 1194,
     1152, 1194, 1194, 1194, 1195, 1152, 1195, 1195, 1195, 1195,
     1152, 1152, 1152, 1152, 1152, 1152, 1196, 1152, 1196, 1152,
     1152, 1152, 1152, 1152, 1152, 1152, 1197, 1152, 1152, 1152,
     1198, 1152, 1152, 1152, 1152, 1152, 1152, 1199, 1152, 1152,
     1152, 1152, 1152, 1152, 1152, 1199, 1152, 1200, 1152, 1152,
     1152, 1152, 1152, 1152, 1152, 1152, 1152, 1152, 1152, 1152,
     1201, 1152, 1152, 1152, 1152, 1152, 1152, 1152, 1152, 1152,

     1152, 1152, 1152, 1202, 1152, 1152, 1152, 1152, 1152, 1152,
     1203, 1152, 1152, 1152, 1204, 1152, 1171, 1152, 1152, 1152,
     1205, 1152, 1206, 1206, 1206, 1206, 1206, 1206, 1206, 1206,
     1206, 1207, 1208, 1209, 1209, 1209, 1209, 1210, 1211, 1212,
     1210, 1213, 1214, 1215, 1213, 1152, 1152, 1216, 1152, 1152,
     1217, 1152, 1152, 1217, 1218, 1218, 1218, 1218, 1152, 1219,
     1152, 1219, 1219, 1219, 1152, 1152, 1220, 1221, 1152, 1221,
     1221, 1221, 1152, 1152, 1152, 1152, 1152, 1222, 1152, 1152,
     1152, 1152, 1152, 1152, 1152, 1152, 1223, 1152, 1152, 1152,
     1152, 1152, 1224, 1152, 1152, 1152, 1225, 1152, 1226, 1152,

     1152, 1152, 1226, 1152, 1152, 1152, 1152, 1152, 1152, 1152,
     1152, 1152, 1152, 1227, 1152, 1227, 1227, 1152, 1152, 1152,
     1152, 1228, 1229, 1230, 1230, 1230, 1228, 1152, 1231, 1152,
     1152, 1231, 1231, 1232, 1232, 1232, 1232, 1233, 1152, 1152,
     1233, 1234, 1152, 1235, 1152, 1152, 1152, 1236, 1152, 1152,
     1237, 1238, 1152, 1152, 1152, 1239, 1152, 1152, 1152, 1240,
     1241, 1152, 1242, 1242, 1242, 1242, 1242, 1152, 1242, 1242,
     1242, 1242, 1242, 1243, 1243, 1244, 1244, 1245, 1245, 1245,
     1152, 1245, 1245, 1246, 1152, 1152, 1152, 1247, 1248, 1248,
     1249, 1249, 1250, 1152, 1152, 1152, 1152, 1152, 1251, 1252,

     1252, 1252, 1253, 1253, 1253, 1152, 1221, 1221, 1221, 1152,
     1152, 1152, 1152, 1152, 1152, 1152, 1152, 1152, 1226, 1152,
     1152, 1152, 1152, 1152, 1152, 1152, 1152, 1152, 1152, 1152,
     1152, 1152, 1152, 1152, 1152, 1152, 1152, 1227, 1227, 1152,
     1152, 1230, 1230, 1228, 1230, 1152, 1152, 1152, 1231, 1231,
     1232, 1232, 1232, 1233, 1254, 1152, 1152, 1152, 1152, 1241,
     1255, 1152, 1152, 1152, 1152, 1242, 1242, 1242, 1152, 1242,
     1242, 1242, 1242, 1242, 1242, 1243, 1245, 1245, 1245, 1245,
     1256, 1152, 1152, 1248, 1152, 1152, 1152, 1152, 1251, 1252,
     1253, 1221, 1152, 1152, 1152, 1152, 1152, 1152, 1152, 1152,

     1152, 1152, 1152, 1152, 1152, 1152, 1152, 1152, 1152, 1152,
     1152, 1152, 1152, 1152, 1230, 1232, 1233, 1257, 1152, 1152,
     1255, 1255, 1255, 1152, 1255, 1152, 1152, 1152, 1242, 1242,
     1152, 1152, 1152, 1242, 1152, 1242, 1242, 1242, 1242, 1242,
     1152, 1152, 1245, 1245, 1245, 1152, 1152, 1152, 1152, 1152,
     1251, 1152, 1152, 1152, 1152, 1152, 1152, 1152, 1152, 1152,
     1152, 1152, 1152, 1152, 1152, 1152, 1152, 1152, 1152, 1152,
     1152, 1152, 1152, 1152, 1152, 1152, 1233, 1152, 1152, 1255,
     1255, 1152, 1152, 1152, 1152, 1152, 1242, 1242, 1152, 1152,
     1152, 1152, 1152, 1242, 1242, 1242, 1152, 1152, 1152, 1251,

     1152, 1152, 1152, 1152, 1152, 1152, 1152, 1152, 1152, 1152,
     1152, 1152, 1152, 1152, 1152, 1152, 1152, 1152, 1152, 1152,
     1152, 1152, 1152, 1152, 1152, 1233, 1255, 1255, 1152, 1152,
     1152, 1152, 1152, 1152, 1152, 1258, 1152, 1152, 1152, 1152,
     1152, 1152, 1152, 1152, 1152, 1152, 1152, 1152, 1152, 1152,
     1152, 1152, 1152, 1152, 1152, 1152, 1152, 1152, 1152, 1152,
     1152, 1152, 1233, 1255, 1255, 1152, 1152, 1152, 1259, 1152,
     1152, 1152, 1152, 1152, 1152, 1152, 1152, 1152, 1260, 1152,
     1152, 1152, 1152, 1152, 1152, 1152, 1152, 1152, 1152, 1152,
     1255, 1255, 1152, 1152, 1152, 1259, 1152, 1152, 1152, 1152,

     1152, 1152, 1152, 1152, 1152, 1152, 1152, 1152, 1152, 1152,
     1255, 1255, 1152, 1152, 1152, 1152, 1152, 1152, 1152, 1152,
     1152, 1152, 1152, 1152, 1152, 1255, 1255, 1152, 1152, 1152,
     1152, 1152, 1152, 1152, 1152, 1152, 1255, 1255, 1152, 1152,
     1152, 1152, 1152, 1152, 1152, 1255, 1255, 1152, 1152, 1152,
     1152, 1152, 1152, 1255, 1255, 1152, 1152, 1152, 1152, 1152,
     1152, 1152, 1152, 1152, 1152, 1152, 1152, 1152, 1152, 1152,
     1152, 1152, 1152, 1152, 1152, 1152, 1152, 1152, 1152, 1152,
     1152, 1152, 1152, 1152, 1152, 1152, 1152, 1152, 1152, 1152,
     1152, 1152, 1152, 1152, 1152, 1152, 1152, 1152, 1152, 1152,

     1152, 1152, 1152, 1152, 1152, 1152, 1152, 1152, 1152, 1152,
     1152, 1152, 1152, 1152, 1152, 1152, 1152, 1152, 1152, 1152,
     1152, 1152, 1152, 1152, 1152, 1152, 1152, 1152, 1152, 1152,
     1152, 1152, 1152, 1152, 1152, 1152, 1152, 1152, 1152, 1152,
     1152, 1152, 1152, 1152, 1152, 1152, 1152, 1152, 1152, 1152,
     1152, 1152, 1152, 1152, 1152, 1152, 1152, 1152, 1152, 1152,
     1152, 1152, 1152, 1152, 1152, 1152, 1152, 1152, 1152, 1152,
     1152, 1152, 1152, 1152, 1152, 1152, 1152, 1152, 1152, 1152,
     1152, 1152, 1152, 1152, 1152, 1152, 1152, 1152, 1152, 1152,
     1152, 1152, 1152, 1152, 1152, 1152, 1152, 1152, 1152, 1152,

     1152, 1152, 1152, 1152, 1152, 1152, 1152, 1152, 1152, 1152,
     1152, 1152, 1152, 1152, 1152, 1152, 1152, 1152, 1152, 1152,
     1152, 1152, 1152, 1152, 1152, 1152, 1152, 1152, 1152, 1152,
     1152, 1152, 1152, 1152, 1152, 1152, 1152, 1152, 1152, 1152,
     1152, 1152, 1152, 1152, 1152, 1152, 1152, 1152, 1152, 1152,
     1152, 1152, 1152, 1152, 1152, 1152, 1152, 1152, 1152, 1152,
     1152, 1152, 1152, 1152, 1152, 1152, 1152, 1152, 1152, 1152,
     1152, 1152, 1152, 1152, 1152, 1152, 1152, 1152, 1152, 1152,
     1152, 1152, 1152, 1152, 1152, 1152, 1152, 1152, 1152, 1152,
     1152, 1152, 1152, 1152, 1152, 1152, 1152, 1152, 1152, 1152,

     1152, 1152, 1152, 1152, 1152, 1152, 1152, 1152, 1152, 1152,
     1152, 1152, 1152, 1152, 1152, 1152, 1152, 1152, 1152, 1152,
     1152, 1152, 1152, 1152, 1152, 1152, 1152, 1152, 1152, 1152,
     1152, 1152, 1152, 1152, 1152, 1152, 1152, 1152, 1152, 1152,
     1152, 1152, 1152, 1152, 1152, 1152, 1152, 1152, 1152, 1152,
     1152,    0, 1152, 1152, 1152, 1152, 1152, 1152, 1152, 1152,
     1152, 1152, 1152, 1152, 1152, 1152, 1152, 1152, 1152, 1152,
     1152, 1152, 1152, 1152, 1152, 1152, 1152, 1152, 1152, 1152,
     1152, 1152, 1152, 1152, 1152, 1152, 1152, 1152, 1152, 1152,
     1152, 1152, 1152, 1152, 1152, 1152, 1152, 1152, 1152, 1152,

     1152, 1152, 1152, 1152, 1152, 1152, 1152, 1152, 1152, 1152,
     1152, 1152, 1152, 1152, 1152, 1152, 1152, 1152, 1152, 1152,
     1152, 1152, 1152, 1152, 1152, 1152, 1152, 1152, 1152, 1152,
     1152, 1152, 1152, 1152, 1152, 1152, 1152, 1152, 1152, 1152,
     1152, 1152, 1152, 1152, 1152, 1152, 1152, 1152, 1152, 1152,
     1152, 1152, 1152, 1152, 1152, 1152, 1152, 1152, 1152, 1152
    } ;

static yyconst flex_int16_t yy_nxt[5422] =
    {   0,
     1152,   69,  379,   70,   71,   69,  361,   70,   71, 1152,
       69,  380,   70,   71,  313,  313,   72,  313,  314,  314,
       72,  314,  332,  361,   73,   72,  333,  109,   73,  110,
      111,  365,  112,   73, 1152,  113,  352,  353,  109,  366,
      110,  111,  114,  112,  332,  326,  113,  327,  333,  335,
      115,  336, 1152,  114,  154,   74,  155,  156,  742,   74,
      183,  115,  184,  185,   74,   76,   77,   78,   79,  157,
      343,   80,  313,  317,  344,  186,  314,  158,  318,  320,
       81,  116,  159,  187,  361,  356,  350,  321,   82,  357,
       83,   83,  116,  328,  322,  322,  322,  319,  319,  329,

      330,  361,  369,  322,  322,  349,  349,  349,  160,  373,
      374,  370,  388,  350,  188,  371,  428,  389,  407,   84,
       85,   86,   85,   87,   88,   85,   85,   85,   85,   85,
       85,   85,   85,   85,   85,   85,   89,   85,   85,   85,
       85,   85,   85,   85,   90,   85,   91,   91,   85,   85,
       85,   91,   91,   92,   93,   94,   91,   91,   91,   95,
       91,   91,   91,   91,   91,   91,   91,   91,   91,   96,
       91,   91,   91,   85,   85,   97,   98,   99,   98,  100,
      101,   98,   98,   98,   98,   98,   98,   98,   98,   98,
       98,   98,  102,   98,   98,   98,   98,   98,   98,   98,

      103,   98,  104,  104,   98,   98,   98,  104,  104,  104,
      104,  105,  104,  104,  104,  106,  104,  104,  104,  104,
      104,  104,  104,  104,  104,  104,  104,  104,  104,   98,
       98,  107,  118,  361,   70,  119,  118,  120,   70,  119,
      361,  120,  394,  395,  361,  369,  361,  121,  397,  385,
      361,  121,  362,  398,  361,  122,  363,  361,  364,  122,
      123,  361,  386,  361,  123,  391,  372,  375,  376,  392,
      332,  361,  332,  401,  333,  377,  333,  402,  313,  419,
      420,  421,  416,  314,  425,  431,  124,  541,  426,  432,
      124,  125,  126,  125,  127,  128,  125,  129,  125,  125,

      130,  125,  125,  125,  125,  125,  125,  131,  125,  125,
      125,  125,  125,  125,  125,  132,  125,  133,  133,  125,
      134,  125,  133,  133,  133,  133,  135,  133,  133,  133,
      133,  133,  133,  133,  133,  133,  133,  133,  133,  133,
      133,  133,  133,  133,  136,  137,  138,  140,  541,   70,
       71,  140,  141,   70,   71,  435,  141,  423,  147,  436,
       70,  148,  142,   68,  514,  313,  142,  423,  423,  314,
      143,  515,  424,  149,  143,  144,  369,  423,  845,  144,
       68,  150,  424,  424,  147,  507,   70,  148,  379,   68,
      541,  427,  424,  439,  440,  320,  313,  380,  445,  149,

      314,  145,  446,  321,  313,  145,   68,  150,  314,  313,
      449,  450,  151,  314,  313,  453,  313,  465,  314,  454,
      314,  461,  462,  478,  496,  466,  487,  487,  498,  498,
      498,  479,  497,  497,  558,  558,  350,  541,  151,   68,
       69,   68,   70,   71,   68,   68,   68,   68,   68,   68,
       68,   68,   68,   68,   68,   72,   68,   68,   68,   68,
       68,   68,   68,   73,   68,  152,  152,   68,   68,   68,
      152,  152,  152,  152,  152,  152,  152,  152,  152,  152,
      152,  152,  152,  152,  152,  152,  152,  152,  152,  152,
      152,  152,   68,   68,   74,  154,  320,  155,  156,  190,

      191,  192,  193,  317,  321,  194,  369,  365,  318,  320,
      157,  322,  322,  322,  195,  366,  474,  321,  158,  508,
      322,  322,  196,  159,  322,  322,  322,  319,  319,  474,
      361,  476,  385,  322,  322,  490,  349,  349,  349,  474,
      504,  492,  457,  388,  350,  386,  400,  361,  389,  160,
      161,  161,  474,  197,  476,  161,  161,  161,  161,  161,
      161,  161,  161,  161,  161,  161,  161,  161,  161,  161,
      161,  161,  161,  161,  161,  161,  161,   68,   69,  162,
       70,   71,   68,   68,   68,   68,   68,  163,  164,   68,
      165,   68,  166,   72,   68,   68,   68,   68,   68,   68,

       68,   73,   68,  167,  167,   68,   68,   68,  167,  167,
      167,  167,  167,  167,  167,  167,  167,  167,  167,  167,
      167,  167,  167,  167,  167,  167,  167,  167,  167,  167,
       68,   68,   74,  168,  169,  170,  171,  172,  168,  173,
      174,  168,  175,  168,  168,  168,  168,  168,  168,  176,
      168,  168,  168,  168,  168,  168,  168,  177,  178,  179,
      179,  168,  180,  168,  179,  179,  179,  179,  179,  179,
      179,  179,  179,  179,  179,  179,  179,  179,  179,  179,
      179,  179,  179,  179,  179,  179,  168,  168,  181,   69,
      604,   70,   71,   69,  365,   70,   71,  836,   69,  605,

       70,   71,  366,   69,   72,   70,   71,  468,   72,  397,
      468,  541,   73,   72,  398,  468,   73,  220,   72,  221,
      222,   73,  349,  349,  349,  385,   73,  349,  349,  349,
      350,  220,  223,  221,  222,  350,  361,  541,  386,  469,
      224,  225,  503,   74,  835,  225,  223,   74,  470,  375,
      376,  547,   74,  361,  224,  225,  548,   74,  199,  225,
      200,  201,  375,  376,  228,  510,  229,  230,  499,  202,
      377,  226,  516,  203,  423,  231,  354,  461,  462,  232,
      369,  204,  205,  517,  361,  226,  205,  233,  228,  424,
      229,  230,  541,  592,  236,  834,  221,  237,  642,  231,

      476,  361,  481,  232,  236,  481,  221,  237,  476,  238,
      481,  233,  206,  199,  541,  200,  201,  239,  234,  238,
      597,  582,  474,  476,  202, 1152,  653,  239,  203,  583,
      583,  476,  584,  624,  482,  643,  204,  205,  541,  423,
      597,  205,  234,  483,  586,  474,  361,  361,  240,  588,
      588,  588,  587,  587,  424,  547,  591,  350,  240,  825,
      548,  682,  683,  361,  361,  597,  824,  206,  207,  208,
      207,  209,  210,  207,  207,  207,  207,  207,  207,  207,
      211,  207,  207,  207,  212,  207,  207,  207,  207,  207,
      207,  207,  213,  207,  214,  214,  207,  207,  207,  214,

      214,  214,  214,  214,  214,  214,  214,  214,  214,  214,
      214,  214,  214,  214,  214,  214,  214,  214,  214,  214,
      214,  207,  207,  215,  199,  823,  200,  201,  474,  631,
      822,  263,  631,   70,  264,  216,  265,  631,  263,  217,
       70,  264,  271,  265,   70,  272,  266,  204,  218,  689,
      273,  474,  218,  266,  267,  821, 1152,  274,  642,  268,
      271,  267,   70,  272,  624,  275,  268,  361,  273,  692,
      276,  562,  563,  564,  820,  274,  606,  693,  206,  199,
      653,  200,  201,  275,  361,  269,  690,  819,  276,  565,
      216,  689,  269,  692,  217,  698,  277,  349,  349,  349,

      619,  693,  204,  218,  734,  350,  653,  218,  620,  620,
      641,  485,  735,  641,  277,  648,  682,  683,  641,  647,
      647,  734,  565,  649,  649,  661,  661,  661,  690,  735,
      589,  810,  809,  206,  241,  242,  241,  243,  244,  241,
      241,  241,  241,  241,  241,  241,  241,  241,  241,  241,
      245,  241,  241,  241,  241,  241,  241,  241,  246,  241,
      247,  247,  241,  248,  241,  247,  247,  247,  249,  247,
      247,  247,  247,  247,  247,  247,  247,  247,  247,  247,
      247,  247,  247,  247,  247,  247,  247,  241,  241,  250,
      251,  252,  251,  253,  254,  251,  251,  251,  251,  251,

      251,  251,  251,  251,  251,  251,  255,  251,  251,  251,
      251,  251,  251,  251,  256,  251,  257,  257,  251,  258,
      251,  257,  257,  257,  257,  257,  257,  257,  257,  257,
      257,  257,  257,  257,  257,  257,  257,  257,  257,  257,
      257,  257,  257,  251,  251,  259,  260,  650,  650,  650,
      556,  701,  701,  701,  808,  350,  789,  481,  679,  679,
      481,  261,  261,  807,  790,  481,  261,  261,  261,  261,
      261,  261,  261,  261,  261,  261,  261,  261,  261,  261,
      261,  261,  261,  261,  261,  261,  261,  261,  278,  278,
      708,  709,  710,  278,  278,  278,  278,  278,  278,  278,

      278,  278,  278,  278,  278,  278,  278,  278,  278,  278,
      278,  278,  278,  278,  278,  280,  736,   87,  281,  280,
      737,   87,  281,  661,  661,  661,  299,  806,   70,  300,
      282,  301,  805,  606,  282,  737,  736,  804,  283,  606,
      737,  302,  283,  284,  622,  563,  623,  284,  789,  303,
      701,  701,  701,  624,  304,  737,  790,  626,  627,  628,
      653,  323,  625,  299,  323,   70,  300,  802,  301,  285,
      628,  628,  628,  285,  287,  565,  288,  289,  302,  290,
      305,  653,  291,  292,  293,  653,  303,  334,  565,  294,
      334,  304,  628,  628,  628,  625,  631,  295,  296,  631,

      801,  349,  349,  349,  631,  800,  669,  670,  565,  350,
      565,  671,  799,  393,  672,  673,  393,  305,  788,  674,
      787,  565,  786,  675,  676,  699,  699,  699,  297,  287,
      785,  288,  289,  350,  290,  784,  783,  291,  292,  293,
      349,  349,  349,  565,  294,  651,  541,  606,  350,  739,
      739,  739,  295,  296,  708,  709,  710,  350,  710,  709,
      710,  641,  782,  606,  641,  770,  770,  770,  606,  641,
      797,  797,  797,  350,  816,  816,  816,  438,  350,  781,
      438,  700,  350,  297,  306,  307,  306,   70,  308,  306,
      306,  306,  306,  306,  306,  306,  306,  306,  306,  306,

      309,  306,  306,  306,  306,  306,  306,  306,  310,  306,
      311,  311,  306,  306,  306,  311,  311,  311,  311,  311,
      311,  311,  311,  311,  311,  311,  311,  311,  311,  311,
      311,  311,  311,  311,  311,  311,  311,  306,  306,  312,
      404,  780,  779,  778,  404,  680,  627,  681,  405,  406,
      407,  777,  442,  408,  624,  442,  409,  410,  776,  444,
      775,  411,  444,  625,  774,  412,  413,  488,  833,  833,
      833,  459,  488,  488,  448,  773,  488,  448,  459,  772,
      681,  628,  681,  488,  488,  488,  493,  732,  763,  624,
      493,  493,  493,  762,  761,  493,  625,  493,  625,  831,

      831,  831,  493,  493,  493,  502,  760,  350,  759,  502,
      502,  502,  323,  758,  502,  323,  502,  334,  757,  742,
      334,  502,  502,  502,  505,  361,  541,  756,  505,  505,
      505,  625,  755,  505,  754,  505,  842,  842,  842,  753,
      505,  505,  506,  369,  350,  509,  844,  844,  844,  509,
      509,  509,  393,  752,  509,  393,  509,  751,  684,  685,
      686,  509,  509,  509,  519,  750,  749,  748,  519,  519,
      519,  438,  747,  519,  438,  459,  565,  686,  686,  686,
      519,  519,  519,  520,  521,  746,  522,  442,  523,  745,
      442,  524,  525,  744,  743,  565,  526,  742,  738,  697,

      527,  528,  539,  853,  853,  853,  539,  539,  539,  565,
      695,  539,  733,  539,  686,  686,  686,  732,  539,  539,
      539,  423,  729,  730,  731,  544,  325,  556,  565,  544,
      544,  544,  565,  556,  544,  726,  545,  851,  851,  851,
      565,  544,  544,  544,  550,  350,  725,  724,  550,  550,
      550,  723,  722,  550,  742,  550,  856,  856,  856,  721,
      550,  550,  550,  553,  350,  565,  720,  553,  553,  553,
      719,  718,  553,  565,  553,  444,  717,  716,  444,  553,
      553,  553,  632,  632,  633,  632,  632,  632,  632,  632,
      632,  632,  632,  632,  632,  632,  632,  632,  632,  323,

      323,  323,  632,  632,  632,  632,  632,  632,  323,  323,
      632,  632,  632,  323,  323,  323,  323,  323,  323,  323,
      323,  634,  323,  323,  323,  323,  323,  323,  323,  323,
      323,  323,  323,  323,  323,  632,  632,  632,  691,  691,
      691,  691,  691,  691,  691,  691,  691,  691,  691,  691,
      691,  691,  691,  691,  691,  323,  323,  323,  691,  691,
      691,  691,  691,  691,  323,  323,  691,  691,  691,  323,
      323,  323,  323,  323,  323,  323,  323,  323,  323,  323,
      323,  323,  323,  323,  323,  323,  323,  323,  323,  323,
      323,  691,  691,  691,  727,  685,  728,  728,  686,  728,

      731,  731,  731,  624,  715,  714,  624,  731,  731,  731,
      448,  323,  625,  448,  323,  625,  713,  712,  565,  740,
      740,  740,  711,  741,  707,  565,  706,  350,  764,  730,
      765,  765,  731,  765,  766,  767,  768,  624,  705,  704,
      624,  768,  768,  768,  334,  625,  625,  334,  625,  625,
      703,  565,  565,  768,  768,  768,  702,  653,  565,  565,
      771,  771,  771,  648,  741,  791,  767,  792,  350,  796,
      742,  565,  796,  485,  624,  792,  768,  792,  485,  625,
      577,  697,  625,  625,  624,  565,  696,  793,  794,  795,
      695,  694,  565,  625,  795,  795,  795,  795,  795,  795,

      811,  794,  812,  568,  565,  565,  798,  798,  798,  624,
      741,  742,  565,  688,  350,  565,  625,  687,  625,  812,
      795,  812,  813,  814,  815,  556,  625,  677,  624,  815,
      815,  815,  815,  815,  815,  668,  667,  625,  565,  666,
      565,  665,  818,  818,  818,  565,  741,  565,  565,  664,
      565,  625,  817,  817,  817,  663,  741,  742,  662,  660,
      350,  606,  659,  826,  814,  827,  827,  815,  827,  658,
      625,  657,  624,  565,  656,  624,  828,  829,  830,  655,
      565,  625,  654,  565,  625,  653,  830,  830,  830,  830,
      830,  830,  652,  742,  565,  594,  369,  832,  832,  832,

      485,  741,  645,  742,  565,  350,  644,  565,  640,  639,
      837,  829,  838,  638,  625,  637,  636,  625,  635,  624,
      838,  830,  838,  839,  840,  841,  630,  565,  625,  624,
      629,  841,  841,  841,  841,  841,  841,  565,  625,  561,
      565,  565,  843,  843,  843,  556,  741,  556,  742,  565,
      350,  617,  565,  616,  846,  840,  847,  847,  841,  847,
      605,  625,  615,  624,  614,  613,  624,  612,  848,  849,
      850,  625,  625,  611,  565,  625,  850,  850,  850,  850,
      850,  850,  565,  610,  609,  565,  565,  852,  852,  852,
      608,  741,  607,  742,  565,  350,  606,  565,  854,  849,

      855,  603,  855,  850,  855,  625,  602,  624,  625,  601,
      600,  624,  599,  848,  849,  850,  625,  598,  596,  565,
      625,  850,  850,  850,  850,  850,  850,  565,  595,  594,
      565,  565,  857,  857,  857,  559,  741,  513,  742,  565,
      350,  593,  565,  858,  858,  858,  859,  859,  859,  625,
      854,  849,  855,  625,  350,  369,  855,  850,  855,  624,
      861,  861,  861,  369,  565,  624,  590,  585,  625,  860,
      860,  860,  565,  741,  625,  565,  585,  350,  862,  862,
      862,  485,  485,  742,  482,  580,  350,  863,  863,  863,
      579,  741,  578,  577,  742,  350,  864,  864,  864,  576,

      575,  625,  865,  865,  865,  574,  573,  625,  572,  571,
      350,  742,  570,  866,  866,  866,  569,  741,  568,  567,
      742,  350,  867,  867,  867,  868,  868,  868,  869,  869,
      869,  566,  741,  350,  561,  559,  350,  458,  742,  870,
      870,  870,  871,  871,  871,  457,  556,  742,  449,  458,
      350,  872,  872,  872,  457,  741,  873,  873,  873,  350,
      874,  874,  874,  554,  742,  876,  876,  876,  350,  439,
      875,  875,  875,  742,  741,  877,  877,  877,  350,  742,
      878,  878,  878,  350,  741,  879,  879,  879,  350,  552,
      742,  880,  880,  880,  551,  549,  881,  881,  881,  350,

      741,  457,  742,  546,  350,  543,  542,  742,  882,  882,
      882,  883,  883,  883,  540,  457,  742,  538,  537,  350,
      536,  742,  884,  884,  884,  535,  741,  885,  885,  885,
      350,  742,  886,  886,  886,  534,  742,  887,  887,  887,
      350,  741,  888,  888,  888,  350,  533,  742,  889,  889,
      889,  532,  531,  890,  890,  890,  350,  741,  530,  742,
      529,  350,  891,  891,  891,  518,  892,  892,  892,  894,
      894,  894,  394,  742,  350,  893,  893,  893,  742,  741,
      897,  897,  897,  350,  895,  895,  895,  513,  742,  898,
      898,  898,  350,  742,  896,  896,  896,  350,  741,  899,

      899,  899,  350,  741,  742,  390,  512,  350,  900,  900,
      900,  511,  383,  742,  901,  901,  901,  902,  902,  902,
      742,  741,  350,  382,  381,  350,  742,  903,  903,  903,
      382,  742,  904,  904,  904,  905,  905,  905,  373,  741,
      350,  369,  501,  350,  500,  742,  906,  906,  906,  352,
      742,  494,  907,  907,  907,  909,  909,  909,  485,  742,
      350,  908,  908,  908,  480,  741,  477,  475,  742,  350,
      473,  910,  910,  910,  912,  912,  912,  472,  742,  350,
      911,  911,  911,  471,  741,  467,  742,  464,  350,  463,
      913,  913,  913,  915,  915,  915,  458,  742,  350,  914,

      914,  914,  457,  741,  315,  315,  742,  350,  916,  916,
      916,  315,  742,  917,  917,  917,  350,  741,  918,  918,
      918,  350,  919,  919,  919,  742,  921,  921,  921,  452,
      350,  742,  920,  920,  920,  315,  741,  922,  922,  922,
      350,  924,  924,  924,  742,  350,  315,  923,  923,  923,
      742,  741,  925,  925,  925,  350,  315,  926,  926,  926,
      350,  741,  443,  315,  742,  350,  927,  927,  927,  742,
      928,  928,  928,  930,  930,  930,  441,  742,  350,  315,
      929,  929,  929,  742,  741,  931,  931,  931,  350,  933,
      933,  933,  742,  350,  437,  932,  932,  932,  742,  741,

      936,  936,  936,  350,  934,  934,  934,  433,  742,  939,
      939,  939,  350,  430,  935,  935,  935,  742,  741,  937,
      937,  937,  350,  418,  742,  417,  415,  350,  938,  938,
      938,  742,  741,  940,  940,  940,  350,  942,  942,  942,
      742,  350,  945,  945,  945,  403,  742,  400,  941,  941,
      941,  742,  741,  943,  943,  943,  350,  948,  948,  948,
      742,  350,  944,  944,  944,  742,  741,  946,  946,  946,
      350,  315,  947,  947,  947,  350,  741,  315,  315,  742,
      350,  949,  949,  949,  951,  951,  951,  390,  742,  350,
      950,  950,  950,  742,  741,  952,  952,  952,  350,  742,

      954,  954,  954,  350,  957,  957,  957,  384,  742,  383,
      953,  953,  953,  742,  741,  960,  960,  960,  350,  955,
      955,  955,  382,  742,  956,  956,  956,  350,  741,  958,
      958,  958,  350,  381,  369,  742,  369,  350,  959,  959,
      959,  742,  741,  963,  963,  963,  350,  369,  961,  961,
      961,  742,  964,  964,  964,  742,  350,  966,  966,  966,
      350,  742,  369,  962,  962,  962,  742,  741,  965,  965,
      965,  350,  741,  358,  315,  742,  350,  967,  967,  967,
      968,  968,  968,  348,  741,  350,  345,  341,  350,  742,
      969,  969,  969,  340,  742,  970,  970,  970,  971,  971,

      971,  337,  741,  350,  315,  331,  350,  325,  742,  972,
      972,  972,  324,  315,  742,  973,  973,  973,  315,  742,
      974,  974,  974,  350,  741,  975,  975,  975,  350,  315,
     1152,  742,  976,  976,  976,  977,  977,  977, 1152,  741,
      350,  742, 1152,  350,  978,  978,  978, 1152, 1152,  742,
      979,  979,  979,  980,  980,  980, 1152,  741,  350, 1152,
      742,  350,  981,  981,  981,  982,  982,  982,  984,  984,
      984,  742, 1152,  350, 1152, 1152,  742,  983,  983,  983,
     1152,  741,  985,  985,  985,  350,  742,  987,  987,  987,
      350, 1152,  986,  986,  986,  742,  741,  988,  988,  988,

      350,  990,  990,  990,  742,  350,  989,  989,  989, 1152,
      741, 1152, 1152,  742,  350,  991,  991,  991, 1152,  742,
      993,  993,  993,  350, 1152,  992,  992,  992,  742,  741,
      996,  996,  996,  350,  994,  994,  994, 1152,  742,  999,
      999,  999,  350,  742, 1152,  995,  995,  995, 1152,  741,
     1152, 1152,  742,  350,  997,  997,  997,  742, 1152,  998,
      998,  998,  350,  741, 1000, 1000, 1000,  350, 1002, 1002,
     1002,  742,  350, 1005, 1005, 1005,  742, 1152, 1001, 1001,
     1001,  742,  741, 1003, 1003, 1003,  350, 1008, 1008, 1008,
      742,  350, 1152, 1004, 1004, 1004,  742,  741, 1006, 1006,

     1006,  350, 1152, 1007, 1007, 1007,  350,  741, 1152, 1152,
      742,  350, 1009, 1009, 1009, 1011, 1011, 1011, 1152,  742,
      350, 1014, 1014, 1014,  742, 1152, 1010, 1010, 1010,  742,
      741, 1012, 1012, 1012,  350, 1017, 1017, 1017,  742,  350,
     1152, 1013, 1013, 1013,  742,  741, 1020, 1020, 1020,  350,
     1015, 1015, 1015, 1152,  742, 1016, 1016, 1016,  350,  741,
     1018, 1018, 1018,  350, 1152, 1152,  742, 1152,  350, 1023,
     1023, 1023,  742, 1152, 1019, 1019, 1019,  742,  741, 1021,
     1021, 1021,  350, 1024, 1024, 1024,  742,  350, 1026, 1026,
     1026,  350,  742, 1152, 1022, 1022, 1022,  742,  741, 1025,

     1025, 1025,  350,  741, 1152, 1152,  742,  350, 1027, 1027,
     1027, 1028, 1028, 1028, 1152,  741,  350, 1152, 1152,  350,
      742, 1029, 1029, 1029, 1152,  742, 1030, 1030, 1030, 1031,
     1031, 1031, 1152,  741,  350, 1152, 1152,  350, 1152,  742,
     1032, 1032, 1032, 1152, 1152,  742, 1033, 1033, 1033, 1152,
      742, 1034, 1034, 1034,  350,  741, 1035, 1035, 1035,  350,
     1152, 1152,  742, 1036, 1036, 1036, 1037, 1037, 1037, 1152,
      741,  350,  742, 1152,  350, 1038, 1038, 1038, 1152, 1152,
      742, 1039, 1039, 1039, 1040, 1040, 1040, 1152,  741,  350,
     1152,  742,  350, 1041, 1041, 1041, 1042, 1042, 1042, 1044,

     1044, 1044,  742, 1152,  350, 1152, 1152,  742, 1043, 1043,
     1043, 1152,  741, 1045, 1045, 1045,  350,  742, 1047, 1047,
     1047,  350, 1152, 1046, 1046, 1046,  742,  741, 1048, 1048,
     1048,  350, 1050, 1050, 1050,  742,  350, 1049, 1049, 1049,
     1152,  741, 1152, 1152,  742,  350, 1051, 1051, 1051, 1152,
      742, 1053, 1053, 1053,  350, 1152, 1052, 1052, 1052,  742,
      741, 1056, 1056, 1056,  350, 1054, 1054, 1054, 1152,  742,
     1059, 1059, 1059,  350,  742, 1152, 1055, 1055, 1055, 1152,
      741, 1152, 1152,  742,  350, 1057, 1057, 1057,  742, 1152,
     1058, 1058, 1058,  350,  741, 1060, 1060, 1060,  350,  741,

     1152, 1152,  742,  350, 1061, 1061, 1061,  742, 1152, 1062,
     1062, 1062,  742,  741, 1063, 1063, 1063,  350, 1064, 1064,
     1064,  742,  741, 1065, 1065, 1065,  350,  742, 1066, 1066,
     1066, 1152,  741, 1067, 1067, 1067,  350, 1069, 1069, 1069,
     1152,  742, 1152, 1068, 1068, 1068,  742,  741, 1070, 1070,
     1070,  350,  741, 1152, 1152,  742,  350, 1071, 1071, 1071,
      742, 1072, 1072, 1072, 1152,  742, 1073, 1073, 1073,  742,
     1074, 1074, 1074, 1152,  742, 1075, 1075, 1075, 1152,  742,
     1076, 1076, 1076, 1152,  742, 1077, 1077, 1077,  742, 1078,
     1078, 1078, 1152, 1152,  742, 1079, 1079, 1079, 1152,  742,

     1080, 1080, 1080, 1081, 1081, 1081, 1152, 1152,  742, 1082,
     1082, 1082,  742, 1083, 1083, 1083, 1152,  742, 1084, 1084,
     1084,  742, 1085, 1085, 1085, 1152,  742, 1086, 1086, 1086,
     1152,  742, 1087, 1087, 1087, 1152,  742, 1088, 1088, 1088,
      742, 1089, 1089, 1089, 1152, 1152,  742, 1090, 1090, 1090,
     1152,  742, 1152, 1152,  742, 1091, 1091, 1091, 1152, 1152,
      742, 1092, 1092, 1092,  742, 1093, 1093, 1093, 1152,  742,
     1094, 1094, 1094,  742, 1095, 1095, 1095, 1152,  742, 1096,
     1096, 1096, 1152,  742, 1097, 1097, 1097, 1152,  742, 1098,
     1098, 1098,  742, 1099, 1099, 1099, 1152, 1152,  742, 1100,

     1100, 1100, 1101, 1101, 1101, 1152,  742, 1102, 1102, 1102,
     1152, 1152,  742, 1103, 1103, 1103,  742, 1104, 1104, 1104,
     1152,  742, 1105, 1105, 1105,  742, 1106, 1106, 1106, 1152,
      742, 1107, 1107, 1107, 1152,  742, 1108, 1108, 1108, 1152,
      742, 1109, 1109, 1109,  742, 1110, 1110, 1110, 1152, 1152,
      742, 1152, 1152,  742, 1111, 1111, 1111, 1152,  742, 1112,
     1112, 1112, 1152, 1152,  742, 1113, 1113, 1113,  742, 1114,
     1114, 1114, 1152,  742, 1115, 1115, 1115,  742, 1116, 1116,
     1116, 1152,  742, 1117, 1117, 1117, 1152,  742, 1118, 1118,
     1118, 1152,  742, 1119, 1119, 1119,  742, 1120, 1120, 1120,

     1121, 1121, 1121, 1152, 1152,  742, 1122, 1122, 1122, 1152,
      742, 1123, 1123, 1123, 1152, 1152,  742, 1124, 1124, 1124,
      742, 1125, 1125, 1125, 1152,  742, 1126, 1126, 1126,  742,
     1127, 1127, 1127, 1152,  742, 1128, 1128, 1128, 1152,  742,
     1129, 1129, 1129, 1152,  742, 1130, 1130, 1130,  742, 1152,
     1152,  742, 1131, 1131, 1131, 1152, 1152,  742, 1132, 1132,
     1132, 1152,  742, 1133, 1133, 1133, 1152, 1152,  742, 1134,
     1134, 1134,  742, 1135, 1135, 1135, 1152,  742, 1136, 1136,
     1136,  742, 1137, 1137, 1137, 1152,  742, 1138, 1138, 1138,
     1152,  742, 1139, 1139, 1139, 1152,  742, 1140, 1140, 1140,

     1141, 1141, 1141,  742, 1142, 1142, 1142, 1152, 1152,  742,
     1143, 1143, 1143, 1152,  742, 1144, 1144, 1144, 1152, 1152,
      742, 1145, 1145, 1145,  742, 1146, 1146, 1146, 1152,  742,
     1147, 1147, 1147,  742, 1148, 1148, 1148, 1152,  742, 1149,
     1149, 1149, 1152,  742, 1150, 1150, 1150, 1152,  742, 1152,
     1152,  742, 1151, 1151, 1151,  742, 1075, 1075, 1075, 1152,
     1152,  742, 1152, 1152, 1152, 1152,  742, 1152, 1152, 1152,
     1152, 1152,  742, 1152, 1152, 1152,  742, 1152, 1152, 1152,
     1152,  742, 1152, 1152, 1152,  742, 1152, 1152, 1152, 1152,
      742, 1152, 1152, 1152, 1152,  742, 1152, 1152, 1152, 1152,

     1152, 1152, 1152,  742, 1152, 1152, 1152,  742,   68,   68,
       68,   68,   68,   68,   68,   68,   68,   68,   68,   68,
       68,   68,   68,   68,   68,   68,   75,   75,   75,   75,
       75,   75,   75,   75,   75,   75,   75,   75,   75,   75,
       75,   75,   75,   75,  108,  108,  108,  108,  108,  108,
      108,  108,  108,  108,  108,  108,  108,  108,  108,  108,
      108,  108,  117,  117,  117,  117,  117,  117,  117,  117,
      117,  117,  117,  117,  117,  117,  117,  117,  117,  117,
      139,  139,  139,  139,  139,  139,  139,  139,  139,  139,
      139,  139,  139,  139,  139,  139,  139,  139,  146,  146,

      146,  146,  146,  146,  146,  146,  146,  146,  146,  146,
      146,  146,  146,  146,  146,  146,  153,  153,  153,  153,
      153,  153,  153,  153,  153,  153,  153,  153,  153,  153,
      153,  153,  153,  153,  182,  182,  182,  182,  182,  182,
      182,  182,  182,  182,  182,  182,  182,  182,  182,  182,
      182,  182,  189,  189,  189,  189,  189,  189,  189,  189,
      189,  189,  189,  189,  189,  189,  189,  189,  189,  189,
      198,  198,  198,  198,  198,  198,  198,  198,  198,  198,
      198,  198,  198,  198,  198,  198,  198,  198,  219,  219,
      219,  219,  219,  219,  219,  219,  219,  219,  219,  219,

      219,  219,  219,  219,  219,  219,  227,  227,  227,  227,
      227,  227,  227,  227,  227,  227,  227,  227,  227,  227,
      227,  227,  227,  227,  235,  235,  235,  235,  235,  235,
      235,  235,  235,  235,  235,  235,  235,  235,  235,  235,
      235,  235,  262,  262,  262,  262,  262,  262,  262,  262,
      262,  262,  262,  262,  262,  262,  262,  262,  262,  262,
      270,  270,  270,  270,  270,  270,  270,  270,  270,  270,
      270,  270,  270,  270,  270,  270,  270,  270,  279,  279,
      279,  279,  279,  279,  279,  279,  279,  279,  279,  279,
      279,  279,  279,  279,  279,  279,  286,  286,  286,  286,

      286,  286,  286,  286,  286,  286,  286,  286,  286,  286,
      286,  286,  286,  286,  298,  298,  298,  298,  298,  298,
      298,  298,  298,  298,  298,  298,  298,  298,  298,  298,
      298,  298,  316,  316,  316,  316,  316,  316,  316,  316,
      316,  316,  316,  316,  316,  316,  316,  316,  316,  316,
      338,  338,  338, 1152,  338,  338, 1152, 1152,  338,  338,
      338,  338, 1152,  338,  338,  338,  338,  338,  339,  339,
      339, 1152,  339,  339,  339, 1152,  339,  339,  339,  339,
      339,  339,  339,  339,  339,  339,  342,  342,  342, 1152,
      342,  342, 1152,  342,  342,  342,  342,  342,  342,  342,

      342,  342,  342,  346,  346,  346, 1152,  346,  346,  346,
      346,  346,  346,  346,  346,  346,  346,  346,  346,  346,
      346,  347,  347,  347, 1152,  347,  347,  347,  347,  347,
      347,  347,  347,  347,  347,  347,  347,  347,  347,  351,
      351,  351, 1152, 1152, 1152,  351, 1152, 1152, 1152, 1152,
      351, 1152, 1152,  351,  355,  355,  355, 1152, 1152,  355,
     1152,  355,  355,  355,  355,  355,  355,  355,  355,  355,
      355,  359,  359,  359, 1152,  359,  359,  359,  359,  359,
      359,  359,  359,  359,  359,  359,  359,  359,  359,  360,
      360,  360, 1152,  360,  360,  360,  360,  360,  360,  360,

      360,  360,  360,  360,  360,  360,  360,  367, 1152, 1152,
     1152, 1152, 1152,  367, 1152, 1152, 1152, 1152,  367, 1152,
     1152,  367,  368,  368,  368,  368,  368,  368,  368,  368,
      368,  368,  368,  368,  368,  368,  368,  368,  368,  378,
      378, 1152, 1152, 1152, 1152,  378, 1152, 1152, 1152, 1152,
      378, 1152, 1152,  378,  387, 1152, 1152, 1152, 1152, 1152,
     1152, 1152, 1152,  387, 1152,  387, 1152, 1152,  387,  396,
      396,  396,  396,  396,  396,  396,  396,  396,  396,  396,
      396,  396,  396,  396,  396,  396,  396,  399, 1152,  399,
     1152,  399,  399,  399,  399,  399, 1152,  399,  399, 1152,

      399,  399, 1152,  399,  414,  414,  414, 1152,  414,  414,
      414,  414,  414, 1152,  414,  414,  414,  414,  414,  414,
     1152,  414,  422,  422,  422, 1152,  422,  422,  422,  422,
      422,  422,  422,  422,  422,  422,  422, 1152,  422,  423,
      423,  423, 1152,  423,  423,  423,  423,  423,  423,  423,
      423, 1152,  423,  423, 1152,  423,  424, 1152,  424, 1152,
      424,  424,  424,  424,  424,  424,  424,  424,  424,  424,
      424, 1152,  424,  429, 1152,  429, 1152,  429,  429,  429,
      429,  429, 1152,  429,  429,  429,  429,  429,  429,  429,
      429,  434, 1152,  434, 1152,  434,  434,  434,  434,  434,

      434,  434,  434,  434,  434,  434,  434,  434,  434,  447,
      447,  447, 1152,  447,  447,  447,  447,  447,  447,  447,
      447,  447,  447,  447,  447,  447,  447,  451,  451,  451,
     1152,  451,  451,  451, 1152,  451,  451,  451,  451,  451,
      451,  451,  451,  451,  451,  455,  455,  455, 1152,  455,
      455,  455,  455,  455,  455,  455,  455,  455,  455,  455,
      455,  455,  455,  456,  456, 1152,  456, 1152, 1152,  456,
      459, 1152,  459,  459, 1152,  459, 1152,  459, 1152,  459,
      460,  460,  460, 1152,  460,  460,  460,  460,  460,  460,
      460,  460,  460,  460,  460,  460,  460,  460,  474,  474,

      474, 1152,  474,  474,  474,  474,  474,  474,  474,  474,
      474,  474,  474,  474,  474,  474,  476,  476,  476, 1152,
      476,  476,  476,  476,  476,  476,  476,  476,  476,  476,
      476,  476,  476,  476,  338,  338,  338, 1152,  338,  338,
     1152, 1152,  338,  338,  338,  338, 1152,  338,  338,  338,
      338,  338,  484,  484,  484, 1152,  484,  484,  484,  484,
      484,  484,  484,  484,  484,  484,  484,  484,  484,  486,
      486,  486, 1152,  486,  486,  486,  486,  486,  486,  486,
      486,  486,  486,  486,  486,  486,  486,  342,  342,  342,
     1152,  342,  342, 1152,  342,  342,  342,  342,  342,  342,

      342,  342,  342,  342,  489,  489,  489, 1152,  489,  489,
      489,  489,  489,  489,  489,  489,  489,  489,  489,  489,
      489,  489,  491,  491,  491, 1152,  491,  491,  491,  491,
      491,  491,  491,  491,  491,  491,  491,  491,  491,  491,
      495,  495,  495, 1152,  495,  495,  495,  495,  495,  495,
      495,  495,  495,  495,  495,  495,  495,  495,  351,  351,
      351, 1152, 1152, 1152,  351, 1152, 1152, 1152, 1152,  351,
     1152, 1152,  351,  355,  355,  355, 1152, 1152,  355, 1152,
      355,  355,  355,  355,  355,  355,  355,  355,  355,  355,
      360,  360,  360, 1152,  360,  360,  360,  360,  360,  360,

      360,  360,  360,  360,  360,  360,  360,  360,  367, 1152,
     1152, 1152, 1152, 1152,  367, 1152, 1152, 1152, 1152,  367,
     1152, 1152,  367,  368,  368,  368,  368,  368,  368,  368,
      368,  368,  368,  368,  368,  368,  368,  368,  368,  368,
      378,  378, 1152, 1152, 1152, 1152,  378, 1152, 1152, 1152,
     1152,  378, 1152, 1152,  378,  387, 1152, 1152, 1152, 1152,
     1152, 1152, 1152, 1152,  387, 1152,  387, 1152, 1152,  387,
      396,  396,  396,  396,  396,  396,  396,  396,  396,  396,
      396,  396,  396,  396,  396,  396,  396,  396,  399, 1152,
      399, 1152,  399,  399,  399,  399,  399, 1152,  399,  399,

     1152,  399,  399, 1152,  399,  414,  414,  414, 1152,  414,
      414,  414,  414,  414, 1152,  414,  414,  414,  414,  414,
      414, 1152,  414,  422,  422,  422, 1152,  422,  422,  422,
      422,  422,  422,  422,  422,  422,  422,  422, 1152,  422,
      423,  423,  423, 1152,  423,  423,  423,  423,  423,  423,
      423,  423, 1152,  423,  423, 1152,  423,  424, 1152,  424,
     1152,  424,  424,  424,  424,  424,  424,  424,  424,  424,
      424,  424, 1152,  424,  429, 1152,  429, 1152,  429,  429,
      429,  429,  429, 1152,  429,  429,  429,  429,  429,  429,
      429,  429,  434, 1152,  434, 1152,  434,  434,  434,  434,

      434,  434,  434,  434,  434,  434,  434,  434,  434,  434,
      555,  555,  555, 1152,  555,  555,  555,  555,  555,  555,
      555,  555,  555,  555,  555,  555,  555,  557,  557,  557,
     1152,  557,  557,  557,  557,  557,  557,  557,  557,  557,
      557,  557,  557,  557,  557,  456,  456, 1152,  456, 1152,
     1152,  456,  460,  460,  460, 1152,  460,  460,  460,  460,
      460,  460,  460,  460,  460,  460,  460,  460,  460,  460,
      560,  560,  560, 1152,  560,  560,  560,  560,  560,  560,
      560,  560,  560,  560,  560,  560,  560,  560,  474,  474,
      474, 1152,  474,  474,  474,  474,  474,  474,  474,  474,

      474,  474,  474,  474,  474,  474,  476,  476,  476, 1152,
      476,  476,  476,  476,  476,  476,  476,  476,  476,  476,
      476,  476,  476,  476,  581,  581,  581, 1152,  581,  581,
      581,  581,  581,  581,  581,  581,  581,  581,  581,  581,
      581,  338,  338,  338, 1152,  338,  338, 1152, 1152,  338,
      338,  338,  338, 1152,  338,  338,  338,  338,  338,  489,
      489,  489, 1152,  489,  489,  489,  489,  489,  489,  489,
      489,  489,  489,  489,  489,  489,  489,  491,  491,  491,
     1152,  491,  491,  491,  491,  491,  491,  491,  491,  491,
      491,  491,  491,  491,  491,  342,  342,  342, 1152,  342,

      342, 1152,  342,  342,  342,  342,  342,  342,  342,  342,
      342,  342,  351,  351,  351, 1152, 1152, 1152,  351, 1152,
     1152, 1152, 1152,  351, 1152, 1152,  351,  355,  355,  355,
     1152, 1152,  355, 1152,  355,  355,  355,  355,  355,  355,
      355,  355,  355,  355,  360,  360,  360, 1152,  360,  360,
      360,  360,  360,  360,  360,  360,  360,  360,  360,  360,
      360,  360,  618,  618,  618, 1152,  618,  618,  618,  618,
      618,  618,  618,  618,  618,  618,  618,  618,  618,  621,
      621,  621,  621,  621,  621,  621,  621,  621,  621,  621,
      621,  621,  621,  621,  621,  621,  621,  646,  646,  646,

     1152,  646,  646,  646,  646,  646,  646,  646,  646,  646,
      646,  646,  646,  646,  678,  678,  678, 1152,  678,  678,
      678,  678,  678,  678,  678,  678,  678,  678,  678,  678,
      678,  769, 1152, 1152, 1152,  769, 1152, 1152, 1152, 1152,
     1152, 1152, 1152,  769, 1152,  769,  803,  803,  803,  803,
      803,  803,  803,  803,  803,  803,  803,  803,  803, 1152,
      803,  803, 1152,  803,   67, 1152, 1152, 1152, 1152, 1152,
     1152, 1152, 1152, 1152, 1152, 1152, 1152, 1152, 1152, 1152,
     1152, 1152, 1152, 1152, 1152, 1152, 1152, 1152, 1152, 1152,
     1152, 1152, 1152, 1152, 1152, 1152, 1152, 1152, 1152, 1152,

     1152, 1152, 1152, 1152, 1152, 1152, 1152, 1152, 1152, 1152,
     1152, 1152, 1152, 1152, 1152, 1152, 1152, 1152, 1152, 1152,
     1152
    } ;

static yyconst flex_int16_t yy_chk[5422] =
    {   0,
        0,    1,  162,    1,    1,    2,  146,    2,    2,    0,
        3,  162,    3,    3,   72,   81,    1,   89,   72,   81,
        2,   89,  102,  146,    1,    3,  102,    9,    2,    9,
        9,  152,    9,    3,    0,    9,  134,  134,   10,  152,
       10,   10,    9,   10,  114,   94,   10,   94,  114,  105,
        9,  105,    0,   10,   21,    1,   21,   21, 1075,    2,
       29,   10,   29,   29,    3,    4,    4,    4,    4,   21,
      121,    4,  131,   77,  121,   29,  131,   21,   77,   83,
        4,    9,   21,   29,  147,  142, 1057,   83,    4,  142,
        4,    4,   10,   95,   83,   83,   83,   77,   77,   95,

       95,  147,  157,   83,   83,  133,  133,  133,   21,  159,
      159,  157,  170,  133,   29,  157,  225,  170,  225,    4,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,

        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,   11,  148,   11,   11,   12,   11,   12,   12,
      150,   12,  180,  180,  151,  158,  149,   11,  191,  167,
      148,   12,  149,  191,  360,   11,  149,  150,  150,   12,
       11,  151,  167,  149,   12,  176,  158,  161,  161,  176,
      186,  360,  195,  203,  186,  161,  195,  203,  212,  217,
      218,  218,  212,  217,  223,  232,   11,  845,  223,  232,
       12,   13,   13,   13,   13,   13,   13,   13,   13,   13,

       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   15,  836,   15,
       15,   16,   15,   16,   16,  238,   16,  219,   17,  238,
       17,   17,   15,   17,  391,  245,   16,  222,  224,  245,
       15,  391,  219,   17,   16,   15,  370,  226,  835,   16,
       17,   17,  222,  224,   18,  370,   18,   18,  379,   18,
      834,  224,  226,  248,  248,  320,  255,  379,  266,   18,

      255,   15,  266,  320,  274,   16,   18,   18,  274,  282,
      284,  284,   17,  282,  294,  302,  309,  326,  294,  302,
      309,  321,  321,  335,  348,  326,  340,  340,  349,  349,
      349,  335,  348,  348,  452,  452,  349,  825,   18,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   22,  319,   22,   22,   30,

       30,   30,   30,  317,  319,   30,  371,  365,  317,  322,
       22,  319,  319,  319,   30,  365,  489,  322,   22,  371,
      319,  319,   30,   22,  322,  322,  322,  317,  317,  343,
      363,  344,  385,  322,  322,  343,  351,  351,  351,  489,
      363,  344,  401,  388,  351,  385,  401,  363,  388,   22,
       23,   23,  343,   30,  344,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   25,   25,   25,
       25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
       25,   25,   25,   25,   25,   25,   25,   25,   25,   25,

       25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
       25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
       25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
       25,   25,   25,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   31,
      529,   31,   31,   32,  367,   32,   32,  824,   33,  529,

       33,   33,  367,   34,   31,   34,   34,  328,   32,  397,
      328,  823,   31,   33,  397,  328,   32,   41,   34,   41,
       41,   33,  354,  354,  354,  387,   34,  135,  135,  135,
      354,   42,   41,   42,   42,  135,  362,  822,  387,  328,
       41,   41,  362,   31,  821,   41,   42,   32,  328,  375,
      375,  430,   33,  362,   42,   42,  430,   34,   35,   42,
       35,   35,  378,  378,   43,  375,   43,   43,  354,   35,
      378,   41,  392,   35,  422,   43,  135,  460,  460,   43,
      507,   35,   35,  392,  504,   42,   35,   43,   44,  422,
       44,   44,  421,  507,   45,  820,   45,   45,  578,   44,

      491,  504,  337,   44,   46,  337,   46,   46,  492,   45,
      337,   44,   35,   36,  421,   36,   36,   45,   43,   46,
      522,  487,  490,  491,   36,  621,  819,   46,   36,  487,
      487,  492,  490,  621,  337,  578,   36,   36,  421,  544,
      522,   36,   44,  337,  497,  490,  503,  505,   45,  498,
      498,  498,  497,  497,  544,  547,  503,  498,   46,  810,
      547,  624,  624,  503,  505,  522,  809,   36,   37,   37,
       37,   37,   37,   37,   37,   37,   37,   37,   37,   37,
       37,   37,   37,   37,   37,   37,   37,   37,   37,   37,
       37,   37,   37,   37,   37,   37,   37,   37,   37,   37,

       37,   37,   37,   37,   37,   37,   37,   37,   37,   37,
       37,   37,   37,   37,   37,   37,   37,   37,   37,   37,
       37,   37,   37,   37,   39,  808,   39,   39,  584,  568,
      807,   53,  568,   53,   53,   39,   53,  568,   54,   39,
       54,   54,   55,   54,   55,   55,   53,   39,   39,  633,
       55,  584,   39,   54,   53,  806,  625,   55,  642,   53,
       56,   54,   56,   56,  625,   55,   54,  591,   56,  636,
       55,  462,  462,  462,  805,   56,  804,  636,   39,   40,
      802,   40,   40,   56,  591,   53,  633,  801,   56,  462,
       40,  689,   54,  692,   40,  642,   55,  499,  499,  499,

      558,  692,   40,   40,  694,  499,  800,   40,  558,  558,
      577,  583,  694,  577,   56,  587,  682,  682,  577,  583,
      583,  734,  462,  587,  587,  606,  606,  606,  689,  734,
      499,  788,  787,   40,   47,   47,   47,   47,   47,   47,
       47,   47,   47,   47,   47,   47,   47,   47,   47,   47,
       47,   47,   47,   47,   47,   47,   47,   47,   47,   47,
       47,   47,   47,   47,   47,   47,   47,   47,   47,   47,
       47,   47,   47,   47,   47,   47,   47,   47,   47,   47,
       47,   47,   47,   47,   47,   47,   47,   47,   47,   47,
       49,   49,   49,   49,   49,   49,   49,   49,   49,   49,

       49,   49,   49,   49,   49,   49,   49,   49,   49,   49,
       49,   49,   49,   49,   49,   49,   49,   49,   49,   49,
       49,   49,   49,   49,   49,   49,   49,   49,   49,   49,
       49,   49,   49,   49,   49,   49,   49,   49,   49,   49,
       49,   49,   49,   49,   49,   49,   51,  588,  588,  588,
      620,  653,  653,  653,  786,  588,  763,  645,  620,  620,
      645,   51,   51,  785,  763,  645,   51,   51,   51,   51,
       51,   51,   51,   51,   51,   51,   51,   51,   51,   51,
       51,   51,   51,   51,   51,   51,   51,   51,   57,   57,
      660,  660,  660,   57,   57,   57,   57,   57,   57,   57,

       57,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   59,  695,   59,   59,   60,
      695,   60,   60,  661,  661,  661,   63,  784,   63,   63,
       59,   63,  783,  782,   60,  695,  736,  781,   59,  780,
      736,   63,   60,   59,  561,  561,  561,   60,  789,   63,
      701,  701,  701,  561,   63,  736,  789,  562,  562,  562,
      778, 1172,  561,   64, 1172,   64,   64,  777,   64,   59,
      563,  563,  563,   60,   61,  562,   61,   61,   64,   61,
       63,  776,   61,   61,   61,  775,   64, 1173,  563,   61,
     1173,   64,  564,  564,  564,  561,  733,   61,   61,  733,

      774,  589,  589,  589,  733,  773,  614,  614,  562,  589,
      564,  614,  772, 1187,  614,  614, 1187,   64,  762,  614,
      761,  563,  760,  614,  614,  650,  650,  650,   61,   62,
      759,   62,   62,  650,   62,  758,  757,   62,   62,   62,
      651,  651,  651,  564,   62,  589,  756,  755,  651,  699,
      699,  699,   62,   62,  708,  708,  708,  699,  710,  710,
      710,  738,  754,  753,  738,  739,  739,  739,  752,  738,
      770,  770,  770,  739,  797,  797,  797, 1196,  770,  751,
     1196,  651,  797,   62,   65,   65,   65,   65,   65,   65,
       65,   65,   65,   65,   65,   65,   65,   65,   65,   65,

       65,   65,   65,   65,   65,   65,   65,   65,   65,   65,
       65,   65,   65,   65,   65,   65,   65,   65,   65,   65,
       65,   65,   65,   65,   65,   65,   65,   65,   65,   65,
       65,   65,   65,   65,   65,   65,   65,   65,   65,   65,
      205,  750,  749,  748,  205,  622,  622,  622,  205,  205,
      205,  747, 1197,  205,  622, 1197,  205,  205,  746, 1198,
      745,  205, 1198,  622,  744,  205,  205,  341,  818,  818,
      818,  341,  341,  341, 1200,  743,  341, 1200,  341,  741,
      623,  623,  623,  341,  341,  341,  345,  732,  726,  623,
      345,  345,  345,  725,  724,  345,  622,  345,  623,  816,

      816,  816,  345,  345,  345,  358,  723,  816,  722,  358,
      358,  358, 1206,  721,  358, 1206,  358, 1209,  720,  818,
     1209,  358,  358,  358,  364,  364,  719,  718,  364,  364,
      364,  623,  717,  364,  716,  364,  831,  831,  831,  715,
      364,  364,  364,  372,  831,  372,  833,  833,  833,  372,
      372,  372, 1224,  714,  372, 1224,  372,  713,  626,  626,
      626,  372,  372,  372,  403,  712,  711,  707,  403,  403,
      403, 1233,  706,  403, 1233,  403,  626,  627,  627,  627,
      403,  403,  403,  404,  404,  705,  404, 1234,  404,  704,
     1234,  404,  404,  703,  702,  627,  404,  833,  698,  697,

      404,  404,  417,  844,  844,  844,  417,  417,  417,  626,
      696,  417,  690,  417,  628,  628,  628,  688,  417,  417,
      417,  427,  684,  684,  684,  427,  687,  679,  627,  427,
      427,  427,  628,  678,  427,  677,  427,  842,  842,  842,
      684,  427,  427,  427,  433,  842,  676,  675,  433,  433,
      433,  674,  673,  433,  844,  433,  851,  851,  851,  672,
      433,  433,  433,  437,  851,  628,  671,  437,  437,  437,
      670,  669,  437,  684,  437, 1235,  668,  667, 1235,  437,
      437,  437,  569,  569,  569,  569,  569,  569,  569,  569,
      569,  569,  569,  569,  569,  569,  569,  569,  569,  569,

      569,  569,  569,  569,  569,  569,  569,  569,  569,  569,
      569,  569,  569,  569,  569,  569,  569,  569,  569,  569,
      569,  569,  569,  569,  569,  569,  569,  569,  569,  569,
      569,  569,  569,  569,  569,  569,  569,  569,  635,  635,
      635,  635,  635,  635,  635,  635,  635,  635,  635,  635,
      635,  635,  635,  635,  635,  635,  635,  635,  635,  635,
      635,  635,  635,  635,  635,  635,  635,  635,  635,  635,
      635,  635,  635,  635,  635,  635,  635,  635,  635,  635,
      635,  635,  635,  635,  635,  635,  635,  635,  635,  635,
      635,  635,  635,  635,  680,  680,  680,  681,  681,  681,

      685,  685,  685,  680,  666,  665,  681,  686,  686,  686,
     1236, 1242,  680, 1236, 1242,  681,  664,  663,  685,  700,
      700,  700,  662,  700,  659,  686,  658,  700,  727,  727,
      727,  728,  728,  728,  729,  729,  729,  727,  657,  656,
      728,  730,  730,  730, 1245,  680,  727, 1245,  681,  728,
      655,  685,  729,  731,  731,  731,  654,  652,  686,  730,
      740,  740,  740,  649,  740,  764,  764,  764,  740, 1259,
      700,  731, 1259,  647,  764,  765,  765,  765,  646,  727,
      643,  640,  728,  764,  765,  729,  639,  766,  766,  766,
      638,  637,  730,  765,  767,  767,  767,  768,  768,  768,

      791,  791,  791,  634,  731,  766,  771,  771,  771,  791,
      771,  740,  767,  630,  771,  768,  764,  629,  791,  792,
      792,  792,  793,  793,  793,  618,  765,  617,  792,  794,
      794,  794,  795,  795,  795,  613,  612,  792,  766,  611,
      793,  610,  799,  799,  799,  767,  799,  794,  768,  609,
      795,  791,  798,  798,  798,  608,  798,  771,  607,  605,
      798,  604,  603,  811,  811,  811,  812,  812,  812,  602,
      792,  601,  811,  793,  600,  812,  813,  813,  813,  599,
      794,  811,  598,  795,  812,  596,  814,  814,  814,  815,
      815,  815,  595,  799,  813,  594,  592,  817,  817,  817,

      581,  817,  580,  798,  814,  817,  579,  815,  575,  574,
      826,  826,  826,  573,  811,  572,  571,  812,  570,  826,
      827,  827,  827,  828,  828,  828,  567,  813,  826,  827,
      566,  829,  829,  829,  830,  830,  830,  814,  827,  560,
      815,  828,  832,  832,  832,  557,  832,  555,  817,  829,
      832,  554,  830,  551,  837,  837,  837,  838,  838,  838,
      546,  826,  542,  837,  540,  537,  838,  536,  839,  839,
      839,  827,  837,  535,  828,  838,  840,  840,  840,  841,
      841,  841,  829,  534,  533,  830,  839,  843,  843,  843,
      532,  843,  531,  832,  840,  843,  530,  841,  846,  846,

      846,  528,  847,  847,  847,  837,  527,  846,  838,  526,
      525,  847,  524,  848,  848,  848,  846,  523,  521,  839,
      847,  849,  849,  849,  850,  850,  850,  840,  520,  518,
      841,  848,  852,  852,  852,  515,  852,  513,  843,  849,
      852,  512,  850,  853,  853,  853,  856,  856,  856,  846,
      854,  854,  854,  847,  856,  509,  855,  855,  855,  854,
      858,  858,  858,  508,  848,  855,  500,  496,  854,  857,
      857,  857,  849,  857,  855,  850,  495,  857,  859,  859,
      859,  486,  484,  852,  483,  482,  859,  860,  860,  860,
      480,  860,  479,  478,  853,  860,  861,  861,  861,  475,

      473,  854,  862,  862,  862,  472,  471,  855,  470,  469,
      862,  858,  467,  863,  863,  863,  466,  863,  465,  464,
      857,  863,  864,  864,  864,  865,  865,  865,  866,  866,
      866,  463,  866,  865,  461,  457,  866,  454,  860,  867,
      867,  867,  868,  868,  868,  453,  451,  861,  450,  446,
      868,  869,  869,  869,  445,  869,  870,  870,  870,  869,
      871,  871,  871,  441,  863,  873,  873,  873,  871,  440,
      872,  872,  872,  864,  872,  874,  874,  874,  872,  866,
      875,  875,  875,  874,  875,  876,  876,  876,  875,  436,
      867,  877,  877,  877,  435,  432,  878,  878,  878,  877,

      878,  431,  869,  428,  878,  426,  425,  870,  879,  879,
      879,  880,  880,  880,  420,  419,  873,  416,  413,  880,
      412,  872,  881,  881,  881,  411,  881,  882,  882,  882,
      881,  875,  883,  883,  883,  410,  876,  884,  884,  884,
      883,  884,  885,  885,  885,  884,  409,  878,  886,  886,
      886,  408,  407,  887,  887,  887,  886,  887,  406,  879,
      405,  887,  888,  888,  888,  402,  889,  889,  889,  891,
      891,  891,  395,  881,  889,  890,  890,  890,  882,  890,
      894,  894,  894,  890,  892,  892,  892,  390,  884,  895,
      895,  895,  892,  885,  893,  893,  893,  895,  893,  896,

      896,  896,  893,  896,  887,  389,  386,  896,  897,  897,
      897,  384,  383,  888,  898,  898,  898,  899,  899,  899,
      891,  899,  898,  382,  381,  899,  890,  900,  900,  900,
      380,  894,  901,  901,  901,  902,  902,  902,  374,  902,
      901,  368,  357,  902,  356,  893,  903,  903,  903,  353,
      896,  347,  904,  904,  904,  906,  906,  906,  339,  897,
      904,  905,  905,  905,  336,  905,  333,  332,  899,  905,
      331,  907,  907,  907,  909,  909,  909,  330,  900,  907,
      908,  908,  908,  329,  908,  327,  902,  325,  908,  324,
      910,  910,  910,  912,  912,  912,  314,  903,  910,  911,

      911,  911,  313,  911,  310,  303,  906,  911,  913,  913,
      913,  295,  905,  914,  914,  914,  913,  914,  915,  915,
      915,  914,  916,  916,  916,  909,  918,  918,  918,  291,
      916,  908,  917,  917,  917,  283,  917,  919,  919,  919,
      917,  921,  921,  921,  912,  919,  275,  920,  920,  920,
      911,  920,  922,  922,  922,  920,  267,  923,  923,  923,
      922,  923,  258,  256,  914,  923,  924,  924,  924,  915,
      925,  925,  925,  927,  927,  927,  249,  918,  925,  246,
      926,  926,  926,  917,  926,  928,  928,  928,  926,  930,
      930,  930,  921,  928,  239,  929,  929,  929,  920,  929,

      933,  933,  933,  929,  931,  931,  931,  233,  923,  936,
      936,  936,  931,  231,  932,  932,  932,  924,  932,  934,
      934,  934,  932,  216,  927,  213,  211,  934,  935,  935,
      935,  926,  935,  937,  937,  937,  935,  939,  939,  939,
      930,  937,  942,  942,  942,  204,  929,  202,  938,  938,
      938,  933,  938,  940,  940,  940,  938,  945,  945,  945,
      936,  940,  941,  941,  941,  932,  941,  943,  943,  943,
      941,  196,  944,  944,  944,  943,  944,  187,  177,  935,
      944,  946,  946,  946,  948,  948,  948,  174,  939,  946,
      947,  947,  947,  942,  947,  949,  949,  949,  947,  938,

      951,  951,  951,  949,  954,  954,  954,  166,  945,  165,
      950,  950,  950,  941,  950,  957,  957,  957,  950,  952,
      952,  952,  164,  944,  953,  953,  953,  952,  953,  955,
      955,  955,  953,  163,  160,  948,  156,  955,  956,  956,
      956,  947,  956,  960,  960,  960,  956,  154,  958,  958,
      958,  951,  961,  961,  961,  954,  958,  963,  963,  963,
      961,  950,  153,  959,  959,  959,  957,  959,  962,  962,
      962,  959,  962,  143,  132,  953,  962,  964,  964,  964,
      965,  965,  965,  130,  965,  964,  122,  115,  965,  956,
      966,  966,  966,  113,  960,  967,  967,  967,  968,  968,

      968,  106,  968,  967,  103,   96,  968,   93,  963,  969,
      969,  969,   92,   90,  959,  970,  970,  970,   82,  962,
      971,  971,  971,  970,  971,  972,  972,  972,  971,   73,
       67,  965,  973,  973,  973,  974,  974,  974,    0,  974,
      973,  966,    0,  974,  975,  975,  975,    0,    0,  968,
      976,  976,  976,  977,  977,  977,    0,  977,  976,    0,
      969,  977,  978,  978,  978,  979,  979,  979,  981,  981,
      981,  971,    0,  979,    0,    0,  972,  980,  980,  980,
        0,  980,  982,  982,  982,  980,  974,  984,  984,  984,
      982,    0,  983,  983,  983,  975,  983,  985,  985,  985,

      983,  987,  987,  987,  977,  985,  986,  986,  986,    0,
      986,    0,    0,  978,  986,  988,  988,  988,    0,  981,
      990,  990,  990,  988,    0,  989,  989,  989,  980,  989,
      993,  993,  993,  989,  991,  991,  991,    0,  984,  996,
      996,  996,  991,  983,    0,  992,  992,  992,    0,  992,
        0,    0,  987,  992,  994,  994,  994,  986,    0,  995,
      995,  995,  994,  995,  997,  997,  997,  995,  999,  999,
      999,  990,  997, 1002, 1002, 1002,  989,    0,  998,  998,
      998,  993,  998, 1000, 1000, 1000,  998, 1005, 1005, 1005,
      996, 1000,    0, 1001, 1001, 1001,  992, 1001, 1003, 1003,

     1003, 1001,    0, 1004, 1004, 1004, 1003, 1004,    0,    0,
      995, 1004, 1006, 1006, 1006, 1008, 1008, 1008,    0,  999,
     1006, 1011, 1011, 1011, 1002,    0, 1007, 1007, 1007,  998,
     1007, 1009, 1009, 1009, 1007, 1014, 1014, 1014, 1005, 1009,
        0, 1010, 1010, 1010, 1001, 1010, 1017, 1017, 1017, 1010,
     1012, 1012, 1012,    0, 1004, 1013, 1013, 1013, 1012, 1013,
     1015, 1015, 1015, 1013,    0,    0, 1008,    0, 1015, 1020,
     1020, 1020, 1011,    0, 1016, 1016, 1016, 1007, 1016, 1018,
     1018, 1018, 1016, 1021, 1021, 1021, 1014, 1018, 1023, 1023,
     1023, 1021, 1010,    0, 1019, 1019, 1019, 1017, 1019, 1022,

     1022, 1022, 1019, 1022,    0,    0, 1013, 1022, 1024, 1024,
     1024, 1025, 1025, 1025,    0, 1025, 1024,    0,    0, 1025,
     1020, 1026, 1026, 1026,    0, 1016, 1027, 1027, 1027, 1028,
     1028, 1028,    0, 1028, 1027,    0,    0, 1028,    0, 1023,
     1029, 1029, 1029,    0,    0, 1019, 1030, 1030, 1030,    0,
     1022, 1031, 1031, 1031, 1030, 1031, 1032, 1032, 1032, 1031,
        0,    0, 1025, 1033, 1033, 1033, 1034, 1034, 1034,    0,
     1034, 1033, 1026,    0, 1034, 1035, 1035, 1035,    0,    0,
     1028, 1036, 1036, 1036, 1037, 1037, 1037,    0, 1037, 1036,
        0, 1029, 1037, 1038, 1038, 1038, 1039, 1039, 1039, 1041,

     1041, 1041, 1031,    0, 1039,    0,    0, 1032, 1040, 1040,
     1040,    0, 1040, 1042, 1042, 1042, 1040, 1034, 1044, 1044,
     1044, 1042,    0, 1043, 1043, 1043, 1035, 1043, 1045, 1045,
     1045, 1043, 1047, 1047, 1047, 1037, 1045, 1046, 1046, 1046,
        0, 1046,    0,    0, 1038, 1046, 1048, 1048, 1048,    0,
     1041, 1050, 1050, 1050, 1048,    0, 1049, 1049, 1049, 1040,
     1049, 1053, 1053, 1053, 1049, 1051, 1051, 1051,    0, 1044,
     1056, 1056, 1056, 1051, 1043,    0, 1052, 1052, 1052,    0,
     1052,    0,    0, 1047, 1052, 1054, 1054, 1054, 1046,    0,
     1055, 1055, 1055, 1054, 1055, 1058, 1058, 1058, 1055, 1058,

        0,    0, 1050, 1058, 1059, 1059, 1059, 1049,    0, 1060,
     1060, 1060, 1053, 1060, 1061, 1061, 1061, 1060, 1062, 1062,
     1062, 1056, 1062, 1063, 1063, 1063, 1062, 1052, 1064, 1064,
     1064,    0, 1064, 1065, 1065, 1065, 1064, 1067, 1067, 1067,
        0, 1055,    0, 1066, 1066, 1066, 1058, 1066, 1068, 1068,
     1068, 1066, 1068,    0,    0, 1059, 1068, 1069, 1069, 1069,
     1060, 1070, 1070, 1070,    0, 1061, 1071, 1071, 1071, 1062,
     1072, 1072, 1072,    0, 1063, 1073, 1073, 1073,    0, 1064,
     1074, 1074, 1074,    0, 1065, 1076, 1076, 1076, 1067, 1077,
     1077, 1077,    0,    0, 1066, 1078, 1078, 1078,    0, 1068,

     1079, 1079, 1079, 1080, 1080, 1080,    0,    0, 1069, 1081,
     1081, 1081, 1070, 1082, 1082, 1082,    0, 1071, 1083, 1083,
     1083, 1072, 1084, 1084, 1084,    0, 1073, 1085, 1085, 1085,
        0, 1074, 1086, 1086, 1086,    0, 1076, 1087, 1087, 1087,
     1077, 1088, 1088, 1088,    0,    0, 1078, 1089, 1089, 1089,
        0, 1079,    0,    0, 1080, 1090, 1090, 1090,    0,    0,
     1081, 1091, 1091, 1091, 1082, 1092, 1092, 1092,    0, 1083,
     1093, 1093, 1093, 1084, 1094, 1094, 1094,    0, 1085, 1095,
     1095, 1095,    0, 1086, 1096, 1096, 1096,    0, 1087, 1097,
     1097, 1097, 1088, 1098, 1098, 1098,    0,    0, 1089, 1099,

     1099, 1099, 1100, 1100, 1100,    0, 1090, 1101, 1101, 1101,
        0,    0, 1091, 1102, 1102, 1102, 1092, 1103, 1103, 1103,
        0, 1093, 1104, 1104, 1104, 1094, 1105, 1105, 1105,    0,
     1095, 1106, 1106, 1106,    0, 1096, 1107, 1107, 1107,    0,
     1097, 1108, 1108, 1108, 1098, 1109, 1109, 1109,    0,    0,
     1099,    0,    0, 1100, 1110, 1110, 1110,    0, 1101, 1111,
     1111, 1111,    0,    0, 1102, 1112, 1112, 1112, 1103, 1113,
     1113, 1113,    0, 1104, 1114, 1114, 1114, 1105, 1115, 1115,
     1115,    0, 1106, 1116, 1116, 1116,    0, 1107, 1117, 1117,
     1117,    0, 1108, 1118, 1118, 1118, 1109, 1119, 1119, 1119,

     1120, 1120, 1120,    0,    0, 1110, 1121, 1121, 1121,    0,
     1111, 1122, 1122, 1122,    0,    0, 1112, 1123, 1123, 1123,
     1113, 1124, 1124, 1124,    0, 1114, 1125, 1125, 1125, 1115,
     1126, 1126, 1126,    0, 1116, 1127, 1127, 1127,    0, 1117,
     1128, 1128, 1128,    0, 1118, 1129, 1129, 1129, 1119,    0,
        0, 1120, 1130, 1130, 1130,    0,    0, 1121, 1131, 1131,
     1131,    0, 1122, 1132, 1132, 1132,    0,    0, 1123, 1133,
     1133, 1133, 1124, 1134, 1134, 1134,    0, 1125, 1135, 1135,
     1135, 1126, 1136, 1136, 1136,    0, 1127, 1137, 1137, 1137,
        0, 1128, 1138, 1138, 1138,    0, 1129, 1139, 1139, 1139,

     1140, 1140, 1140, 1130, 1141, 1141, 1141,    0,    0, 1131,
     1142, 1142, 1142,    0, 1132, 1143, 1143, 1143,    0,    0,
     1133, 1144, 1144, 1144, 1134, 1145, 1145, 1145,    0, 1135,
     1146, 1146, 1146, 1136, 1147, 1147, 1147,    0, 1137, 1148,
     1148, 1148,    0, 1138, 1149, 1149, 1149,    0, 1139,    0,
        0, 1140, 1150, 1150, 1150, 1141, 1151, 1151, 1151,    0,
        0, 1142,    0,    0,    0,    0, 1143,    0,    0,    0,
        0,    0, 1144,    0,    0,    0, 1145,    0,    0,    0,
        0, 1146,    0,    0,    0, 1147,    0,    0,    0,    0,
     1148,    0,    0,    0,    0, 1149,    0,    0,    0,    0,

        0,    0,    0, 1150,    0,    0,    0, 1151, 1153, 1153,
     1153, 1153, 1153, 1153, 1153, 1153, 1153, 1153, 1153, 1153,
     1153, 1153, 1153, 1153, 1153, 1153, 1154, 1154, 1154, 1154,
     1154, 1154, 1154, 1154, 1154, 1154, 1154, 1154, 1154, 1154,
     1154, 1154, 1154, 1154, 1155, 1155, 1155, 1155, 1155, 1155,
     1155, 1155, 1155, 1155, 1155, 1155, 1155, 1155, 1155, 1155,
     1155, 1155, 1156, 1156, 1156, 1156, 1156, 1156, 1156, 1156,
     1156, 1156, 1156, 1156, 1156, 1156, 1156, 1156, 1156, 1156,
     1157, 1157, 1157, 1157, 1157, 1157, 1157, 1157, 1157, 1157,
     1157, 1157, 1157, 1157, 1157, 1157, 1157, 1157, 1158, 1158,

     1158, 1158, 1158, 1158, 1158, 1158, 1158, 1158, 1158, 1158,
     1158, 1158, 1158, 1158, 1158, 1158, 1159, 1159, 1159, 1159,
     1159, 1159, 1159, 1159, 1159, 1159, 1159, 1159, 1159, 1159,
     1159, 1159, 1159, 1159, 1160, 1160, 1160, 1160, 1160, 1160,
     1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160,
     1160, 1160, 1161, 1161, 1161, 1161, 1161, 1161, 1161, 1161,
     1161, 1161, 1161, 1161, 1161, 1161, 1161, 1161, 1161, 1161,
     1162, 1162, 1162, 1162, 1162, 1162, 1162, 1162, 1162, 1162,
     1162, 1162, 1162, 1162, 1162, 1162, 1162, 1162, 1163, 1163,
     1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163,

     1163, 1163, 1163, 1163, 1163, 1163, 1164, 1164, 1164, 1164,
     1164, 1164, 1164, 1164, 1164, 1164, 1164, 1164, 1164, 1164,
     1164, 1164, 1164, 1164, 1165, 1165, 1165, 1165, 1165, 1165,
     1165, 1165, 1165, 1165, 1165, 1165, 1165, 1165, 1165, 1165,
     1165, 1165, 1166, 1166, 1166, 1166, 1166, 1166, 1166, 1166,
     1166, 1166, 1166, 1166, 1166, 1166, 1166, 1166, 1166, 1166,
     1167, 1167, 1167, 1167, 1167, 1167, 1167, 1167, 1167, 1167,
     1167, 1167, 1167, 1167, 1167, 1167, 1167, 1167, 1168, 1168,
     1168, 1168, 1168, 1168, 1168, 1168, 1168, 1168, 1168, 1168,
     1168, 1168, 1168, 1168, 1168, 1168, 1169, 1169, 1169, 1169,

     1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169,
     1169, 1169, 1169, 1169, 1170, 1170, 1170, 1170, 1170, 1170,
     1170, 1170, 1170, 1170, 1170, 1170, 1170, 1170, 1170, 1170,
     1170, 1170, 1171, 1171, 1171, 1171, 1171, 1171, 1171, 1171,
     1171, 1171, 1171, 1171, 1171, 1171, 1171, 1171, 1171, 1171,
     1174, 1174, 1174,    0, 1174, 1174,    0,    0, 1174, 1174,
     1174, 1174,    0, 1174, 1174, 1174, 1174, 1174, 1175, 1175,
     1175,    0, 1175, 1175, 1175,    0, 1175, 1175, 1175, 1175,
     1175, 1175, 1175, 1175, 1175, 1175, 1176, 1176, 1176,    0,
     1176, 1176,    0, 1176, 1176, 1176, 1176, 1176, 1176, 1176,

     1176, 1176, 1176, 1177, 1177, 1177,    0, 1177, 1177, 1177,
     1177, 1177, 1177, 1177, 1177, 1177, 1177, 1177, 1177, 1177,
     1177, 1178, 1178, 1178,    0, 1178, 1178, 1178, 1178, 1178,
     1178, 1178, 1178, 1178, 1178, 1178, 1178, 1178, 1178, 1179,
     1179, 1179,    0,    0,    0, 1179,    0,    0,    0,    0,
     1179,    0,    0, 1179, 1180, 1180, 1180,    0,    0, 1180,
        0, 1180, 1180, 1180, 1180, 1180, 1180, 1180, 1180, 1180,
     1180, 1181, 1181, 1181,    0, 1181, 1181, 1181, 1181, 1181,
     1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1182,
     1182, 1182,    0, 1182, 1182, 1182, 1182, 1182, 1182, 1182,

     1182, 1182, 1182, 1182, 1182, 1182, 1182, 1183,    0,    0,
        0,    0,    0, 1183,    0,    0,    0,    0, 1183,    0,
        0, 1183, 1184, 1184, 1184, 1184, 1184, 1184, 1184, 1184,
     1184, 1184, 1184, 1184, 1184, 1184, 1184, 1184, 1184, 1185,
     1185,    0,    0,    0,    0, 1185,    0,    0,    0,    0,
     1185,    0,    0, 1185, 1186,    0,    0,    0,    0,    0,
        0,    0,    0, 1186,    0, 1186,    0,    0, 1186, 1188,
     1188, 1188, 1188, 1188, 1188, 1188, 1188, 1188, 1188, 1188,
     1188, 1188, 1188, 1188, 1188, 1188, 1188, 1189,    0, 1189,
        0, 1189, 1189, 1189, 1189, 1189,    0, 1189, 1189,    0,

     1189, 1189,    0, 1189, 1190, 1190, 1190,    0, 1190, 1190,
     1190, 1190, 1190,    0, 1190, 1190, 1190, 1190, 1190, 1190,
        0, 1190, 1191, 1191, 1191,    0, 1191, 1191, 1191, 1191,
     1191, 1191, 1191, 1191, 1191, 1191, 1191,    0, 1191, 1192,
     1192, 1192,    0, 1192, 1192, 1192, 1192, 1192, 1192, 1192,
     1192,    0, 1192, 1192,    0, 1192, 1193,    0, 1193,    0,
     1193, 1193, 1193, 1193, 1193, 1193, 1193, 1193, 1193, 1193,
     1193,    0, 1193, 1194,    0, 1194,    0, 1194, 1194, 1194,
     1194, 1194,    0, 1194, 1194, 1194, 1194, 1194, 1194, 1194,
     1194, 1195,    0, 1195,    0, 1195, 1195, 1195, 1195, 1195,

     1195, 1195, 1195, 1195, 1195, 1195, 1195, 1195, 1195, 1199,
     1199, 1199,    0, 1199, 1199, 1199, 1199, 1199, 1199, 1199,
     1199, 1199, 1199, 1199, 1199, 1199, 1199, 1201, 1201, 1201,
        0, 1201, 1201, 1201,    0, 1201, 1201, 1201, 1201, 1201,
     1201, 1201, 1201, 1201, 1201, 1202, 1202, 1202,    0, 1202,
     1202, 1202, 1202, 1202, 1202, 1202, 1202, 1202, 1202, 1202,
     1202, 1202, 1202, 1203, 1203,    0, 1203,    0,    0, 1203,
     1204,    0, 1204, 1204,    0, 1204,    0, 1204,    0, 1204,
     1205, 1205, 1205,    0, 1205, 1205, 1205, 1205, 1205, 1205,
     1205, 1205, 1205, 1205, 1205, 1205, 1205, 1205, 1207, 1207,

     1207,    0, 1207, 1207, 1207, 1207, 1207, 1207, 1207, 1207,
     1207, 1207, 1207, 1207, 1207, 1207, 1208, 1208, 1208,    0,
     1208, 1208, 1208, 1208, 1208, 1208, 1208, 1208, 1208, 1208,
     1208, 1208, 1208, 1208, 1210, 1210, 1210,    0, 1210, 1210,
        0,    0, 1210, 1210, 1210, 1210,    0, 1210, 1210, 1210,
     1210, 1210, 1211, 1211, 1211,    0, 1211, 1211, 1211, 1211,
     1211, 1211, 1211, 1211, 1211, 1211, 1211, 1211, 1211, 1212,
     1212, 1212,    0, 1212, 1212, 1212, 1212, 1212, 1212, 1212,
     1212, 1212, 1212, 1212, 1212, 1212, 1212, 1213, 1213, 1213,
        0, 1213, 1213,    0, 1213, 1213, 1213, 1213, 1213, 1213,

     1213, 1213, 1213, 1213, 1214, 1214, 1214,    0, 1214, 1214,
     1214, 1214, 1214, 1214, 1214, 1214, 1214, 1214, 1214, 1214,
     1214, 1214, 1215, 1215, 1215,    0, 1215, 1215, 1215, 1215,
     1215, 1215, 1215, 1215, 1215, 1215, 1215, 1215, 1215, 1215,
     1216, 1216, 1216,    0, 1216, 1216, 1216, 1216, 1216, 1216,
     1216, 1216, 1216, 1216, 1216, 1216, 1216, 1216, 1217, 1217,
     1217,    0,    0,    0, 1217,    0,    0,    0,    0, 1217,
        0,    0, 1217, 1218, 1218, 1218,    0,    0, 1218,    0,
     1218, 1218, 1218, 1218, 1218, 1218, 1218, 1218, 1218, 1218,
     1219, 1219, 1219,    0, 1219, 1219, 1219, 1219, 1219, 1219,

     1219, 1219, 1219, 1219, 1219, 1219, 1219, 1219, 1220,    0,
        0,    0,    0,    0, 1220,    0,    0,    0,    0, 1220,
        0,    0, 1220, 1221, 1221, 1221, 1221, 1221, 1221, 1221,
     1221, 1221, 1221, 1221, 1221, 1221, 1221, 1221, 1221, 1221,
     1222, 1222,    0,    0,    0,    0, 1222,    0,    0,    0,
        0, 1222,    0,    0, 1222, 1223,    0,    0,    0,    0,
        0,    0,    0,    0, 1223,    0, 1223,    0,    0, 1223,
     1225, 1225, 1225, 1225, 1225, 1225, 1225, 1225, 1225, 1225,
     1225, 1225, 1225, 1225, 1225, 1225, 1225, 1225, 1226,    0,
     1226,    0, 1226, 1226, 1226, 1226, 1226,    0, 1226, 1226,

        0, 1226, 1226,    0, 1226, 1227, 1227, 1227,    0, 1227,
     1227, 1227, 1227, 1227,    0, 1227, 1227, 1227, 1227, 1227,
     1227,    0, 1227, 1228, 1228, 1228,    0, 1228, 1228, 1228,
     1228, 1228, 1228, 1228, 1228, 1228, 1228, 1228,    0, 1228,
     1229, 1229, 1229,    0, 1229, 1229, 1229, 1229, 1229, 1229,
     1229, 1229,    0, 1229, 1229,    0, 1229, 1230,    0, 1230,
        0, 1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230,
     1230, 1230,    0, 1230, 1231,    0, 1231,    0, 1231, 1231,
     1231, 1231, 1231,    0, 1231, 1231, 1231, 1231, 1231, 1231,
     1231, 1231, 1232,    0, 1232,    0, 1232, 1232, 1232, 1232,

     1232, 1232, 1232, 1232, 1232, 1232, 1232, 1232, 1232, 1232,
     1237, 1237, 1237,    0, 1237, 1237, 1237, 1237, 1237, 1237,
     1237, 1237, 1237, 1237, 1237, 1237, 1237, 1238, 1238, 1238,
        0, 1238, 1238, 1238, 1238, 1238, 1238, 1238, 1238, 1238,
     1238, 1238, 1238, 1238, 1238, 1239, 1239,    0, 1239,    0,
        0, 1239, 1240, 1240, 1240,    0, 1240, 1240, 1240, 1240,
     1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240,
     1241, 1241, 1241,    0, 1241, 1241, 1241, 1241, 1241, 1241,
     1241, 1241, 1241, 1241, 1241, 1241, 1241, 1241, 1243, 1243,
     1243,    0, 1243, 1243, 1243, 1243, 1243, 1243, 1243, 1243,

     1243, 1243, 1243, 1243, 1243, 1243, 1244, 1244, 1244,    0,
     1244, 1244, 1244, 1244, 1244, 1244, 1244, 1244, 1244, 1244,
     1244, 1244, 1244, 1244, 1246, 1246, 1246,    0, 1246, 1246,
     1246, 1246, 1246, 1246, 1246, 1246, 1246, 1246, 1246, 1246,
     1246, 1247, 1247, 1247,    0, 1247, 1247,    0,    0, 1247,
     1247, 1247, 1247,    0, 1247, 1247, 1247, 1247, 1247, 1248,
     1248, 1248,    0, 1248, 1248, 1248, 1248, 1248, 1248, 1248,
     1248, 1248, 1248, 1248, 1248, 1248, 1248, 1249, 1249, 1249,
        0, 1249, 1249, 1249, 1249, 1249, 1249, 1249, 1249, 1249,
     1249, 1249, 1249, 1249, 1249, 1250, 1250, 1250,    0, 1250,

     1250,    0, 1250, 1250, 1250, 1250, 1250, 1250, 1250, 1250,
     1250, 1250, 1251, 1251, 1251,    0,    0,    0, 1251,    0,
        0,    0,    0, 1251,    0,    0, 1251, 1252, 1252, 1252,
        0,    0, 1252,    0, 1252, 1252, 1252, 1252, 1252, 1252,
     1252, 1252, 1252, 1252, 1253, 1253, 1253,    0, 1253, 1253,
     1253, 1253, 1253, 1253, 1253, 1253, 1253, 1253, 1253, 1253,
     1253, 1253, 1254, 1254, 1254,    0, 1254, 1254, 1254, 1254,
     1254, 1254, 1254, 1254, 1254, 1254, 1254, 1254, 1254, 1255,
     1255, 1255, 1255, 1255, 1255, 1255, 1255, 1255, 1255, 1255,
     1255, 1255, 1255, 1255, 1255, 1255, 1255, 1256, 1256, 1256,

        0, 1256, 1256, 1256, 1256, 1256, 1256, 1256, 1256, 1256,
     1256, 1256, 1256, 1256, 1257, 1257, 1257,    0, 1257, 1257,
     1257, 1257, 1257, 1257, 1257, 1257, 1257, 1257, 1257, 1257,
     1257, 1258,    0,    0,    0, 1258,    0,    0,    0,    0,
        0,    0,    0, 1258,    0, 1258, 1260, 1260, 1260, 1260,
     1260, 1260, 1260, 1260, 1260, 1260, 1260, 1260, 1260,    0,
     1260, 1260,    0, 1260, 1152, 1152, 1152, 1152, 1152, 1152,
     1152, 1152, 1152, 1152, 1152, 1152, 1152, 1152, 1152, 1152,
     1152, 1152, 1152, 1152, 1152, 1152, 1152, 1152, 1152, 1152,
     1152, 1152, 1152, 1152, 1152, 1152, 1152, 1152, 1152, 1152,

     1152, 1152, 1152, 1152, 1152, 1152, 1152, 1152, 1152, 1152,
     1152, 1152, 1152, 1152, 1152, 1152, 1152, 1152, 1152, 1152,
     1152
    } ;

extern int preYY_flex_debug;
int preYY_flex_debug = 0;

static yy_state_type *yy_state_buf=0, *yy_state_ptr=0;
static char *yy_full_match;
static int yy_lp;
static int yy_looking_for_trail_begin = 0;
static int yy_full_lp;
static int *yy_full_state;
#define YY_TRAILING_MASK 0x2000
#define YY_TRAILING_HEAD_MASK 0x4000
#define REJECT \
{ \
*yy_cp = (yy_hold_char); /* undo effects of setting up preYYtext */ \
yy_cp = (yy_full_match); /* restore poss. backed-over text */ \
(yy_lp) = (yy_full_lp); /* restore orig. accepting pos. */ \
(yy_state_ptr) = (yy_full_state); /* restore orig. state */ \
yy_current_state = *(yy_state_ptr); /* restore curr. state */ \
++(yy_lp); \
goto find_rule; \
}

#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *preYYtext;
#line 1 "pre.l"
/******************************************************************************
 *
 * 
 *
 * Copyright (C) 1997-2010 by Dimitri van Heesch.
 *
 * Permission to use, copy, modify, and distribute this software and its
 * documentation under the terms of the GNU General Public License is hereby 
 * granted. No representations are made about the suitability of this software 
 * for any purpose. It is provided "as is" without express or implied warranty.
 * See the GNU General Public License for more details.
 *
 * Documents produced by Doxygen are derivative works derived from the
 * input used in their production; they are not affected by this license.
 *
 */
#line 19 "pre.l"

/*
 *	includes
 */

#include <stdio.h>
#include <assert.h>
#include <ctype.h>
#include <errno.h>

#include "qtbc.h"
#include <qarray.h>
#include <qstack.h>
#include <qfile.h>
#include <qstrlist.h>
#include <qdict.h>
#include <qregexp.h>
#include <qfileinfo.h>
#include <qdir.h>
  
#include "pre.h"
#include "constexp.h"
#include "define.h"
#include "doxygen.h"
#include "message.h"
#include "util.h"
#include "defargs.h"
#include "debug.h"
#include "bufstr.h"
#include "portable.h"
#include "bufstr.h"

#define YY_NEVER_INTERACTIVE 1
  

struct FileState
{
  FileState(int size) : fileBuf(size), 
                        oldFileBuf(0), oldFileBufPos(0) {}
  int lineNr;
  //FILE *filePtr;
  BufStr fileBuf;
  //FILE *oldYYin;
  BufStr *oldFileBuf;
  int oldFileBufPos;
  //bool isPlainFile;
  YY_BUFFER_STATE bufState;
  QCString fileName;
};  

/* -----------------------------------------------------------------
 *
 *	scanner's state
 */

static int                g_yyLineNr   = 1;
static QCString           g_yyFileName;
static FileDef           *g_yyFileDef;
static FileDef           *g_inputFileDef;
static int                g_ifcount    = 0;
static QStrList          *g_pathList = 0;  
static QStack<FileState>  g_includeStack;
static QDict<int>        *g_argDict;
static int                g_defArgs = -1;
static QCString           g_defName;
static QCString           g_defText;
static QCString           g_defLitText;
static QCString           g_defArgsStr;
static bool               g_defVarArgs;
static int                g_level;
static int                g_lastCContext;
static int                g_lastCPPContext;
static QArray<int>        g_levelGuard;
static BufStr            *g_inputBuf;
static int                g_inputBufPos;
static BufStr            *g_outputBuf;
static int                g_roundCount;
static bool               g_quoteArg;
static DefineDict        *g_fileDefineDict = new DefineDict(10009);
static DefineDict        *g_expandedDict;
static int                g_findDefArgContext;
static bool               g_expectGuard;
static QCString           g_lastGuardName;
static QCString           g_incName;
static QCString           g_guardExpr;
static int                g_curlyCount;
static bool               g_nospaces; // add extra spaces during macro expansion

static bool               g_macroExpansion; // from the configuration
static bool               g_expandOnlyPredef; // from the configuration
static int                g_commentCount;
static bool               g_insideComment;
static bool               g_isImported;
static QCString           g_blockName;
static int                g_condCtx;
static bool               g_skip;
static QStack<bool>       g_condStack;
static bool               g_insideCS; // C# has simpler preprocessor

static bool               g_lexInit = FALSE;

DefineDict* getFileDefineDict() 
{
  return g_fileDefineDict;
}

static void setFileName(const char *name)
{
  bool ambig;
  QFileInfo fi(name);
  g_yyFileName=convertToQCString(fi.absFilePath());
  g_yyFileDef=findFileDef(Doxygen::inputNameDict,g_yyFileName,ambig);
  //printf("setFileName(%s) g_yyFileName=%s g_yyFileDef=%p\n",
  //    name,g_yyFileName.data(),g_yyFileDef);
  if (g_yyFileDef && g_yyFileDef->isReference()) g_yyFileDef=0;
  g_insideCS = getLanguageFromFileName(g_yyFileName)==SrcLangExt_CSharp;
}

static void incrLevel()
{
  g_level++;
  g_levelGuard.resize(g_level);
  g_levelGuard[g_level-1]=FALSE;
  //printf("%s line %d: incrLevel %d\n",g_yyFileName.data(),g_yyLineNr,g_level);
}

static void decrLevel()
{
  //printf("%s line %d: decrLevel %d\n",g_yyFileName.data(),g_yyLineNr,g_level);
  if (g_level > 0)
  {
    g_level--;
    g_levelGuard.resize(g_level);
  }
  else
  {
    warn(g_yyFileName,g_yyLineNr,"warning: More #endif's than #if's found.\n");
  }
}

static bool otherCaseDone()
{
  if (g_level==0)
  {
    warn(g_yyFileName,g_yyLineNr,"warning: Found an #else without a preceding #if.\n");
    return TRUE;
  }
  else
  {
    return g_levelGuard[g_level-1];
  }
}

static void setCaseDone(bool value)
{
  g_levelGuard[g_level-1]=value;
}

static bool macroIsAccessible(Define *def)
{
  //printf("macroIsAccessible(%s) input=%s def=%s\n",
  //    def->name.data(),g_inputFileDef?g_inputFileDef->name().data():"<none>",
  //    def->fileDef ? def->fileDef->name().data() : "<none>");
  if (def && def->isPredefined) // predefined macro -> globally accessible
  {
    //printf("%s: predefined macro %s\n",g_inputFileDef->name().data(),def->name.data());
    return TRUE;
  }
  if (def && def->fileDef==g_inputFileDef)
  {
    //printf("%s: macro %s defined in this file at line %d now at %d\n",
    //	g_inputFileDef->name().data(),def->name.data(),def->lineNr,g_yyLineNr);
    return def->lineNr<=g_yyLineNr;
  }
  if (g_inputFileDef && def && def->fileDef) // check if g_inputFileDef actually includes def->fileDef
  {
    QDict<FileDef> includedFiles(257);
    bool b = g_inputFileDef->includes(def->fileDef,&includedFiles);
    //printf("%s: Checking for accessibility of define '%s' (defined in %s): result=%d\n",
    //       g_inputFileDef->name().data(),def->name.data(),def->fileDef->name().data(),b);
    return b;
  }
  //printf("not accessible!\n");
  return FALSE;
}

static Define *isDefined(const char *name)
{
  Define *def=0;
  if (name)
  {
    def=g_fileDefineDict->find(name);
    //if ((def=fileDefineCache->findDefine(g_yyFileName,name)) && !def->undef) 
    //	return def;
    if (def && def->undef) def=0;
    if (def && !macroIsAccessible(def)) def=0;
  }
  return def;
}


static QDict<void> g_allIncludes(10009);

static FileState *checkAndOpenFile(const QCString &fileName,bool &alreadyIncluded)
{
  alreadyIncluded = FALSE;
  FileState *fs = 0;
  //printf("checkAndOpenFile(%s)\n",fileName.data());
  QFileInfo fi(fileName);
  if (fi.exists() && fi.isFile())
  {
    static QStrList &exclPatterns = Config_getList("EXCLUDE_PATTERNS");
    if (patternMatch(fi,&exclPatterns)) return 0;

    QCString absName = convertToQCString(fi.absFilePath());

    // global guard
    if (g_curlyCount==0) // not #include inside { ... }
    {
      if (g_allIncludes.find(absName)!=0)
      {
        alreadyIncluded = TRUE;
        //printf("  already included 1\n");
        return 0; // already done
      }
      g_allIncludes.insert(absName,(void *)0x8);
    }
    // check include stack for absName

    QStack<FileState> tmpStack;
    g_includeStack.setAutoDelete(FALSE);
    while ((fs=g_includeStack.pop()))
    {
      if (fs->fileName==absName) alreadyIncluded=TRUE;
      tmpStack.push(fs);
    }
    while ((fs=tmpStack.pop()))
    {
      g_includeStack.push(fs);
    }
    g_includeStack.setAutoDelete(TRUE);

    if (alreadyIncluded)
    {
      //printf("  already included 2\n");
      return 0;
    }
    //printf("#include %s\n",absName.data());

    fs = new FileState(fi.size()+4096);
    alreadyIncluded = FALSE;
    if (!readInputFile(absName,fs->fileBuf))
    { // error
      //printf("  error reading\n");
      delete fs;
      fs=0;
    }
    else
    {
      fs->oldFileBuf    = g_inputBuf;
      fs->oldFileBufPos = g_inputBufPos;
    }
  }
  return fs;
}

static FileState *findFile(const char *fileName,bool localInclude,bool &alreadyIncluded)
{
  //printf("** findFile(%s,%d) g_yyFileName=%s\n",fileName,localInclude,g_yyFileName.data());
  if (localInclude && !g_yyFileName.isEmpty())
  {
    QFileInfo fi(g_yyFileName);
    if (fi.exists())
    {
      QCString absName = QCString(fi.dirPath(TRUE).data())+"/"+fileName;
      FileState *fs = checkAndOpenFile(absName,alreadyIncluded);
      if (fs)
      {
	setFileName(absName);
	g_yyLineNr=1;
	return fs;
      }
      else if (alreadyIncluded)
      {
	return 0;
      }
    }
  }
  if (g_pathList==0) 
  {
    return 0;
  }
  char *s=g_pathList->first();
  while (s)
  {
    QCString absName = (QCString)s+"/"+fileName;
    FileState *fs = checkAndOpenFile(absName,alreadyIncluded);
    if (fs)
    {
      setFileName(absName);
      g_yyLineNr=1;
      return fs;
    }
    else if (alreadyIncluded)
    {
      return 0;
    }

    s=g_pathList->next();
  } 
  return 0;
}

static QCString extractTrailingComment(const char *s)
{
  if (s==0) return "";
  int i=strlen(s)-1;
  while (i>=0)
  {
    char c=s[i];
    switch (c)
    {
      case '/':
	{
	  i--;
	  if (i>=0 && s[i]=='*') // end of a comment block
	  {
	    i--;
	    while (i>0 && !(s[i-1]=='/' && s[i]=='*')) i--;
	    if (i==0) return s; else return &s[i-1];
	  }
	  else
	  {
	    return "";
	  }
	} 
	break;
	// whitespace or line-continuation
      case ' ':
      case '\t': 
      case '\r':
      case '\n':
      case '\\':
	break;
      default:
	return "";
    }
    i--;
  }
  return "";
}

static int getNextChar(const QCString &expr,QCString *rest,uint &pos);
static int getCurrentChar(const QCString &expr,QCString *rest,uint pos);
static void unputChar(const QCString &expr,QCString *rest,uint &pos,char c);
static void expandExpression(QCString &expr,QCString *rest,int pos);

static QCString stringize(const QCString &s)
{
  QCString result;
  uint i=0;
  bool inString=FALSE;
  bool inChar=FALSE;
  char c,pc;
  while (i<s.length())
  {
    if (!inString && !inChar)
    {
      while (i<s.length() && !inString && !inChar)
      {
	c=s.at(i++);
	if (c=='"')
	{
	  result+="\\\"";
	  inString=TRUE;
	}
	else if (c=='\'')
	{
	  result+=c;
	  inChar=TRUE;
	}
	else
	{
	  result+=c;
	}
      }
    }
    else if (inChar)
    {
      while (i<s.length() && inChar)
      {
	c=s.at(i++);
	if (c=='\'')
	{
	  result+='\'';
	  inChar=FALSE;
	}
	else if (c=='\\')
	{
	  result+="\\\\";
	}
	else
	{
	  result+=c;
	}
      }
    }
    else
    {
      pc=0;
      while (i<s.length() && inString)
      {
	char c=s.at(i++);
	if (c=='"') 
	{
	  result+="\\\"";
	  inString= pc=='\\';
	}
	else if (c=='\\')
	  result+="\\\\";
	else
	  result+=c;
	pc=c;
      }
    }
  }
  //printf("stringize `%s'->`%s'\n",s.data(),result.data());
  return result;
}

/*! Execute all ## operators in expr. 
 * If the macro name before or after the operator contains a no-rescan 
 * marker (@-) then this is removed (before the concatenated macro name
 * may be expanded again.
 */
static void processConcatOperators(QCString &expr)
{
  //printf("processConcatOperators: in=`%s'\n",expr.data());
  QRegExp r("[ \\t\\n]*##[ \\t\\n]*"); 
  int l,n,i=0;
  if (expr.isEmpty()) return;
  while ((n=r.match(expr,i,&l))!=-1)
  {
    //printf("Match: `%s'\n",expr.data()+i);
    if (n+l+1<(int)expr.length() && expr.at(n+l)=='@' && expr.at(n+l+1)=='-')
    {
      // remove no-rescan marker after ID
      l+=2;
    }
    //printf("found `%s'\n",expr.mid(n,l).data());
    // remove the ## operator and the surrounding whitespace
    expr=expr.left(n)+expr.right(expr.length()-n-l);
    int k=n-1;
    while (k>=0 && isId(expr.at(k))) k--; 
    if (k>0 && expr.at(k)=='-' && expr.at(k-1)=='@')
    {
      // remove no-rescan marker before ID
      expr=expr.left(k-1)+expr.right(expr.length()-k-1);
      n-=2;
    }
    i=n;
  }
  //printf("processConcatOperators: out=`%s'\n",expr.data());
}

static void yyunput (int c,char *buf_ptr  );
static void returnCharToStream(char c)
{
  unput(c);
}

static inline void addTillEndOfString(const QCString &expr,QCString *rest,
                                       uint &pos,char term,QCString &arg)
{
  int cc;
  while ((cc=getNextChar(expr,rest,pos))!=EOF)
  {
    if (cc=='\\') arg+=(char)cc,cc=getNextChar(expr,rest,pos);
    else if (cc==term) return;
    arg+=(char)cc;
  }
}

/*! replaces the function macro \a def whose argument list starts at
 * \a pos in expression \a expr. 
 * Notice that this routine may scan beyond the \a expr string if needed.
 * In that case the characters will be read from the input file.
 * The replacement string will be returned in \a result and the 
 * length of the (unexpanded) argument list is stored in \a len.
 */ 
static bool replaceFunctionMacro(const QCString &expr,QCString *rest,int pos,int &len,const Define *def,QCString &result)
{
  //printf("replaceFunctionMacro(expr=%s,rest=%s,pos=%d,def=%s) level=%d\n",expr.data(),rest ? rest->data() : 0,pos,def->name.data(),g_level);
  uint j=pos;
  len=0;
  result.resize(0);
  int cc;
  while ((cc=getCurrentChar(expr,rest,j))!=EOF && isspace(cc)) 
  { 
    len++; 
    getNextChar(expr,rest,j); 
  }
  if (cc!='(') 
  { 
    unputChar(expr,rest,j,' '); 
    return FALSE; 
  }
  getNextChar(expr,rest,j); // eat the `(' character

  QDict<QCString> argTable;  // list of arguments
  argTable.setAutoDelete(TRUE);
  QCString arg;
  int argCount=0;
  bool done=FALSE;
  
  // PHASE 1: read the macro arguments
  if (def->nargs==0)
  {
    while ((cc=getNextChar(expr,rest,j))!=EOF)
    {
      char c = (char)cc;
      if (c==')') break;
    }
  }
  else
  {
    while (!done && (argCount<def->nargs || def->varArgs) && 
	((cc=getNextChar(expr,rest,j))!=EOF)
	  )
    {
      char c=(char)cc;
      if (c=='(') // argument is a function => search for matching )
      {
	int level=1;
	arg+=c;
	//char term='\0';
	while ((cc=getNextChar(expr,rest,j))!=EOF)
	{
	  char c=(char)cc;
	  //printf("processing %c: term=%c (%d)\n",c,term,term);
	  if (c=='\'' || c=='\"') // skip ('s and )'s inside strings
	  {
	    arg+=c;
	    addTillEndOfString(expr,rest,j,c,arg);
	  }
	  if (c==')')
	  {
	    level--;
	    arg+=c;
	    if (level==0) break;
	  }
	  else if (c=='(')
	  {
	    level++;
	    arg+=c;
	  }
	  else
	    arg+=c;
	}
      }
      else if (c==')' || c==',') // last or next argument found
      {
	if (c==',' && argCount==def->nargs-1 && def->varArgs)
	{
	  arg=arg.stripWhiteSpace();
	  arg+=',';
	}
	else
	{
	  QCString argKey;
	  argKey.sprintf("@%d",argCount++); // key name
	  arg=arg.stripWhiteSpace();
	  // add argument to the lookup table
	  argTable.insert(argKey, new QCString(arg));
	  arg.resize(0);
	  if (c==')') // end of the argument list
	  {
	    done=TRUE;
	  }
	}
      } 
      else if (c=='\"') // append literal strings
      {
	arg+=c; 
	bool found=FALSE;
	while (!found && (cc=getNextChar(expr,rest,j))!=EOF)
	{
	  found = cc=='"';
	  if (cc=='\\')
	  {
	    c=(char)cc;	  
	    arg+=c;
	    if ((cc=getNextChar(expr,rest,j))==EOF) break;
	  }
	  c=(char)cc;	  
	  arg+=c;
	}
      }
      else if (c=='\'') // append literal characters
      {
	arg+=c;
	bool found=FALSE;
	while (!found && (cc=getNextChar(expr,rest,j))!=EOF)
	{
	  found = cc=='\'';
	  if (cc=='\\')
	  {
	    c=(char)cc;	  
	    arg+=c;
	    if ((cc=getNextChar(expr,rest,j))==EOF) break;
	  }
	  c=(char)cc;
	  arg+=c;
	}
      }	    
      else // append other characters
      {
	arg+=c;
      }
    }
  }

  // PHASE 2: apply the macro function
  if (argCount==def->nargs || 
      (argCount>def->nargs && def->varArgs)) // matching parameters lists
  {
    uint k=0;
    // substitution of all formal arguments
    QCString resExpr;
    const QCString d=def->definition.stripWhiteSpace();
    //printf("Macro definition: %s\n",d.data());
    bool inString=FALSE;
    while (k<d.length())
    {
      if (d.at(k)=='@') // maybe a marker, otherwise an escaped @
      {
	if (d.at(k+1)=='@') // escaped @ => copy it (is unescaped later)
	{
	  k+=2;
	  resExpr+="@@"; // we unescape these later
	}
	else if (d.at(k+1)=='-') // no-rescan marker
	{
	  k+=2;
	  resExpr+="@-";
	}
	else // argument marker => read the argument number
	{
	  QCString key="@";
	  QCString *subst=0;
	  bool hash=FALSE;
	  int l=k-1;
	  // search for ## backward
	  if (l>=0 && d.at(l)=='"') l--;
	  while (l>=0 && d.at(l)==' ') l--;
	  if (l>0 && d.at(l)=='#' && d.at(l-1)=='#') hash=TRUE;
	  k++;
	  // scan the number
	  while (k<d.length() && d.at(k)>='0' && d.at(k)<='9') key+=d.at(k++);
	  if (!hash) 
	  {
	    // search for ## forward
	    l=k;
	    if (l<(int)d.length() && d.at(l)=='"') l++;
	    while (l<(int)d.length() && d.at(l)==' ') l++;
	    if (l<(int)d.length()-1 && d.at(l)=='#' && d.at(l+1)=='#') hash=TRUE;
	  }
	  //printf("request key %s result %s\n",key.data(),argTable[key]->data());
	  if (key.length()>1 && (subst=argTable[key])) 
	  {
	    QCString substArg=*subst;
	    //printf("substArg=`%s'\n",substArg.data());
	    // only if no ## operator is before or after the argument
	    // marker we do macro expansion.
	    if (!hash) expandExpression(substArg,0,0);
	    if (inString)
	    {
	      //printf("`%s'=stringize(`%s')\n",stringize(*subst).data(),subst->data());

	      // if the marker is inside a string (because a # was put 
	      // before the macro name) we must escape " and \ characters
	      resExpr+=stringize(substArg);
	    }
	    else
	    {
	      if (hash && substArg.isEmpty())
	      {
		resExpr+="@E"; // empty argument will be remove later on
	      }
	      else if (g_nospaces)
	      {
	        resExpr+=substArg;
	      }
	      else
	      {
	        resExpr+=" "+substArg+" ";
	      }
	    }
	  }
	}
      }
      else // no marker, just copy
      {
	if (!inString && d.at(k)=='\"') 
	{
	  inString=TRUE; // entering a literal string
	}
	else if (inString && d.at(k)=='\"' && (d.at(k-1)!='\\' || d.at(k-2)=='\\'))
	{
	  inString=FALSE; // leaving a literal string
	}
	resExpr+=d.at(k++);
      }
    }
    len=j-pos;
    result=resExpr;
    //printf("result after substitution `%s' expr=`%s'\n",
    //       result.data(),expr.mid(pos,len).data());
    return TRUE;
  }
  return FALSE;
}


/*! returns the next identifier in string \a expr by starting at position \a p.
 * The position of the identifier is returned (or -1 if nothing is found)
 * and \a l is its length. Any quoted strings are skipping during the search.
 */
static int getNextId(const QCString &expr,int p,int *l)
{
  int n;
  while (p<(int)expr.length())
  {
    char c=expr.at(p++);
    if (isdigit(c)) // skip number
    {
      while (p<(int)expr.length() && isId(expr.at(p))) p++;
    }
    else if (isalpha(c) || c=='_') // read id
    {
      n=p-1;
      while (p<(int)expr.length() && isId(expr.at(p))) p++;
      *l=p-n;
      return n; 
    }
    else if (c=='"') // skip string
    {
      char ppc=0,pc=c;
      if (p<(int)expr.length()) c=expr.at(p);
      while (p<(int)expr.length() && (c!='"' || (pc=='\\' && ppc!='\\'))) 
	// continue as long as no " is found, but ignoring \", but not \\"
      {
	ppc=pc;
	pc=c;
	c=expr.at(p);
	p++;
      }
      if (p<(int)expr.length()) ++p; // skip closing quote
    }
    else if (c=='/') // skip C Comment
    {
      char pc=c;
      if (p<(int)expr.length()) 
      {
	c=expr.at(++p);
        if (c=='*')  // Start of C comment
        { 
  	  while (p<(int)expr.length() && !(pc=='*' && c=='/'))
	  {
	    pc=c;
	    c=expr.at(++p);
	  }
	  p++;
        }
      }
    }
  }
  return -1;
}

/*! preforms recursive macro expansion on the string \a expr
 *  starting at position \a pos.
 *  May read additional characters from the input while re-scanning!
 *  If \a expandAll is \c TRUE then all macros in the expression are
 *  expanded, otherwise only the first is expanded.
 */
static void expandExpression(QCString &expr,QCString *rest,int pos)
{
  //printf("expandExpression(%s,%s)\n",expr.data(),rest ? rest->data() : 0);
  QCString macroName;
  QCString expMacro;
  bool definedTest=FALSE;
  int i=pos,l,p,len;
  while ((p=getNextId(expr,i,&l))!=-1) // search for an macro name
  {
    bool replaced=FALSE;
    macroName=expr.mid(p,l);
    if (p<2 || !(expr.at(p-2)=='@' && expr.at(p-1)=='-')) // no-rescan marker?
    {
      if (g_expandedDict->find(macroName)==0) // expand macro
      {
	Define *def=isDefined(macroName);
	if (definedTest) // macro name was found after defined 
	{
	  if (def) expMacro = " 1 "; else expMacro = " 0 ";
	  replaced=TRUE;
	  len=l;
	  definedTest=FALSE;
	}
	else if (def && def->nargs==-1) // simple macro
	{
	  // substitute the definition of the macro
	  //printf("macro `%s'->`%s'\n",macroName.data(),def->definition.data());
	  if (g_nospaces)
	  {
	    expMacro=def->definition.stripWhiteSpace();
	  }
	  else
	  {
	    expMacro=" "+def->definition.stripWhiteSpace()+" ";
	  }
	  //expMacro=def->definition.stripWhiteSpace();
	  replaced=TRUE;
	  len=l;
	  //printf("simple macro expansion=`%s'->`%s'\n",macroName.data(),expMacro.data());
	}
	else if (def && def->nargs>=0) // function macro
	{
	  replaced=replaceFunctionMacro(expr,rest,p+l,len,def,expMacro);
	  len+=l;
	}
        else if (macroName=="defined")
        {
  	  //printf("found defined inside macro definition '%s'\n",expr.right(expr.length()-p).data());
	  definedTest=TRUE;
        }

	if (replaced) // expand the macro and rescan the expression
	{
	    
	  //printf("replacing `%s'->`%s'\n",expr.mid(p,len).data(),expMacro.data());
	  QCString resultExpr=expMacro;
	  QCString restExpr=expr.right(expr.length()-len-p);
	  processConcatOperators(resultExpr);
	  if (def && !def->nonRecursive)
	  {
	    g_expandedDict->insert(macroName,def);
	    expandExpression(resultExpr,&restExpr,0);
	    g_expandedDict->remove(macroName);
	  }
	  expr=expr.left(p)+resultExpr+restExpr;
	  i=p;
	  //printf("new expression: %s\n",expr.data());
	}
	else // move to the next macro name
	{
	  //printf("moving to the next macro old=%d new=%d\n",i,p+l);
	  i=p+l;
	}
      }
      else // move to the next macro name
      {
	expr=expr.left(p)+"@-"+expr.right(expr.length()-p);
	//printf("macro already expanded, moving to the next macro expr=%s\n",expr.data());
	i=p+l+2;
	//i=p+l;
      }
    }
    else // no re-scan marker found, skip the macro name
    {
      //printf("skipping marked macro\n");
      i=p+l;
    }
  }
}

/*! replaces all occurrences of @@@@ in \a s by @@
 *  and removes all occurrences of @@E.
 *  All identifiers found are replaced by 0L
 */
QCString removeIdsAndMarkers(const char *s)
{
  //printf("removeIdsAndMarkers(%s)\n",s);
  const char *p=s;
  char c;
  bool inNum=FALSE;
  QCString result;
  if (p)
  {
    while ((c=*p))
    {
      if (c=='@') // replace @@ with @ and remove @E
      {
	if (*(p+1)=='@')
	{
	  result+=c; 
	}
	else if (*(p+1)=='E')
	{
	  // skip
	}
	p+=2;
      }
      else if (isdigit(c)) // number
      {
	result+=c;
	p++;
        inNum=TRUE;	
      }
      else if (c=='d' && !inNum) // identifier starting with a `d'
      {
	if (strncmp(p,"defined ",8)==0 || strncmp(p,"defined(",8)==0) 
	           // defined keyword
	{
	  p+=7; // skip defined
	}
	else
	{
	  result+="0L";
	  p++;
	  while ((c=*p) && isId(c)) p++;
	}
      }
      else if ((isalpha(c) || c=='_') && !inNum) // replace identifier with 0L
      {
	result+="0L";
	p++;
	while ((c=*p) && isId(c)) p++;
      }
      else if (c=='/') // skip C comments
      {
	char pc=c;
	c=*++p;
	if (c=='*') // start of C comment
	{ 
	  while (*p && !(pc=='*' && c=='/')) // search end of comment
	  {
	    pc=c;
	    c=*++p;
	  }
	  p++;
	}
	else // oops, not comment but division
	{
	  result+=pc;
	  goto nextChar;
	}
      }
      else 
      {
nextChar:
	result+=c;
	char lc=tolower(c);
	if (!isId(lc) && lc!='.' /*&& lc!='-' && lc!='+'*/) inNum=FALSE;
	p++;
      }
    }
  }
  //printf("removeIdsAndMarkers(%s)=%s\n",s,result.data());
  return result;
}

/*! replaces all occurrences of @@ in \a s by @
 *  \par assumption: 
 *   \a s only contains pairs of @@'s
 */
QCString removeMarkers(const char *s)
{
  const char *p=s;
  char c;
  QCString result;
  if (p)
  {
    while ((c=*p))
    {
      switch(c)
      {
	case '@': // replace @@ with @
	  {
	    if (*(p+1)=='@')
	    {
	      result+=c; 
	    }
	    p+=2;
	  }
	  break;
	case '/': // skip C comments
	  {
	    result+=c;
	    char pc=c;
	    c=*++p;
	    if (c=='*') // start of C comment
	    { 
	      while (*p && !(pc=='*' && c=='/')) // search end of comment
	      {
		if (*p=='@' && *(p+1)=='@') 
		  result+=c,p++;
		else 
		  result+=c;
		pc=c;
		c=*++p;
	      }
	      if (*p)
	      {
	        result+=c;
	        p++;
	      }
	    }
	  }
	  break;
	case '"': // skip string literals
	  {
	    result+=c;
	    char pc=c;
	    c=*++p;
	    while (*p && (c!='"' || pc=='\\')) // no end quote
	    {
	      result+=c;
	      c=*++p;
	    }
	  }
	  break;
	case '\'': // skip char literals
	  {
	    result+=c;
	    char pc=c;
	    c=*++p;
	    while (*p && (c!='\'' || pc=='\\')) // no end quote
	    {
	      result+=c;
	      c=*++p;
	    }
	  }
	  break;
	default:
	  {
	    result+=c;
	    p++;
	  }
	  break;
      }
    }
  }
  //printf("RemoveMarkers(%s)=%s\n",s,result.data());
  return result;
}

/*! compute the value of the expression in string \a expr.
 *  If needed the function may read additional characters from the input.
 */

bool computeExpression(const QCString &expr)
{
  QCString e=expr;
  expandExpression(e,0,0);
  //printf("after expansion `%s'\n",e.data());
  e = removeIdsAndMarkers(e);
  if (e.isEmpty()) return FALSE;
  //printf("parsing `%s'\n",e.data());
  return parseCppExpression(g_yyFileName,g_yyLineNr,e);
}

/*! expands the macro definition in \a name
 *  If needed the function may read additional characters from the input
 */

QCString expandMacro(const QCString &name)
{
  QCString n=name;
  expandExpression(n,0,0);
  n=removeMarkers(n);
  //printf("expandMacro `%s'->`%s'\n",name.data(),n.data());
  return n;
}

Define *newDefine()
{
  Define *def=new Define;
  def->name       = g_defName;
  def->definition = g_defText.stripWhiteSpace();
  def->nargs      = g_defArgs;
  def->fileName   = g_yyFileName; 
  def->fileDef    = g_yyFileDef;
  def->lineNr     = g_yyLineNr;
  def->varArgs    = g_defVarArgs;
  //printf("newDefine: %s->%s\n",def->name.data(),
  //    def->fileDef ? def->fileDef->name().data() : "<none>");
  //printf("newDefine: `%s'->`%s'\n",def->name.data(),def->definition.data());
  if (!def->name.isEmpty() && Doxygen::expandAsDefinedDict[def->name])
  {
    def->isPredefined=TRUE;
  }
  return def;
}

void addDefine()
{
  if (g_skip) return; // do not add this define as it is inside a 
                      // conditional section (cond command) that is disabled.
  if (!Doxygen::gatherDefines) return;

  //printf("addDefine %s %s\n",g_defName.data(),g_defArgsStr.data());
  //ArgumentList *al = new ArgumentList;
  //stringToArgumentList(g_defArgsStr,al);
  MemberDef *md=new MemberDef(
      g_yyFileName,g_yyLineNr,
      "#define",g_defName,g_defArgsStr,0,
      Public,Normal,FALSE,Member,MemberDef::Define,0,0);
  if (!g_defArgsStr.isEmpty())
  {
    ArgumentList *argList = new ArgumentList;
    //printf("addDefine() g_defName=`%s' g_defArgsStr=`%s'\n",g_defName.data(),g_defArgsStr.data());
    stringToArgumentList(g_defArgsStr,argList);
    md->setArgumentList(argList);
  }
  //printf("Setting initializer for `%s' to `%s'\n",g_defName.data(),g_defText.data());
  int l=g_defLitText.find('\n');
  if (l>0 && g_defLitText.left(l).stripWhiteSpace()=="\\")
  {
    // strip first line if it only contains a slash
    g_defLitText = g_defLitText.right(g_defLitText.length()-l-1);
  }
  else if (l>0)
  {
    // align the items on the first line with the items on the second line
    int k=l+1;
    const char *p=g_defLitText.data()+k;
    char c;
    while ((c=*p++) && (c==' ' || c=='\t')) k++;
    g_defLitText=g_defLitText.mid(l+1,k-l-1)+g_defLitText.stripWhiteSpace();
  }
  md->setInitializer(g_defLitText.stripWhiteSpace());

  //printf("pre.l: md->setFileDef(%p)\n",g_inputFileDef);
  md->setFileDef(g_inputFileDef);
  md->setDefinition("#define "+g_defName);

  MemberName *mn=Doxygen::functionNameSDict->find(g_defName);
  if (mn==0)
  {
    mn = new MemberName(g_defName);
    Doxygen::functionNameSDict->append(g_defName,mn);
  }
  mn->append(md);
  if (g_yyFileDef) 
  {
    g_yyFileDef->insertMember(md);
  }

  //Define *d;
  //if ((d=defineDict[g_defName])==0) defineDict.insert(g_defName,newDefine()); 
}

static inline void outputChar(char c)
{
  if (g_includeStack.isEmpty() || g_curlyCount>0) g_outputBuf->addChar(c);
}

static inline void outputArray(const char *a,int len)
{
  if (g_includeStack.isEmpty() || g_curlyCount>0) g_outputBuf->addArray(a,len);
}

static void readIncludeFile(const QCString &inc)
{
  if (!Config_getBool("SEARCH_INCLUDES")) return; // do not read include files
  uint i=0;

  // find the start of the include file name
  while (i<inc.length() &&
         (inc.at(i)==' ' || inc.at(i)=='"' || inc.at(i)=='<')
        ) i++;
  uint s=i;

  // was it a local include?
  bool localInclude = s>0 && inc.at(s-1)=='"';

  // find the end of the include file name
  while (i<inc.length() && inc.at(i)!='"' && inc.at(i)!='>') i++;

  if (s<inc.length() && i>s) // valid include file name found
  {
    // extract include path+name
    QCString incFileName=inc.mid(s,i-s).stripWhiteSpace();

    QCString oldFileName = g_yyFileName;
    FileDef *oldFileDef  = g_yyFileDef;
    int oldLineNr        = g_yyLineNr;
    //printf("Searching for `%s'\n",incFileName.data());

    // findFile will overwrite g_yyFileDef if found
    FileState *fs;
    bool alreadyIncluded = FALSE;
    //printf("calling findFile(%s)\n",incFileName.data());
    if ((fs=findFile(incFileName,localInclude,alreadyIncluded))) // see if the include file can be found
    {
      //printf("Found include file!\n");
      if (Debug::isFlagSet(Debug::Preprocessor))
      {
        for (i=0;i<g_includeStack.count();i++) msg("  ");
        msg("#include %s: parsing...\n",incFileName.data());
      }
      if (oldFileDef)
      {
        // add include dependency to the file in which the #include was found
        oldFileDef->addIncludeDependency(g_yyFileDef,incFileName,localInclude,g_isImported);
        // add included by dependency
        if (g_yyFileDef)
        {
          //printf("Adding include dependency %s->%s\n",oldFileDef->name().data(),incFileName.data());
          g_yyFileDef->addIncludedByDependency(oldFileDef,oldFileDef->docName(),localInclude,g_isImported);
        }
      }
      fs->bufState = YY_CURRENT_BUFFER;
      fs->lineNr   = oldLineNr;
      fs->fileName = oldFileName;
      // push the state on the stack
      g_includeStack.push(fs);
      // set the scanner to the include file

      // Deal with file changes due to 
      // #include's within { .. } blocks
      QCString lineStr(g_yyFileName.length()+20);
      lineStr.sprintf("# 1 \"%s\" 1\n",g_yyFileName.data());
      outputArray(lineStr.data(),lineStr.length());

      //fprintf(stderr,"Switching to include file %s\n",incFileName.data());
      g_expectGuard=TRUE;
      g_inputBuf   = &fs->fileBuf;
      g_inputBufPos=0;
      preYY_switch_to_buffer(preYY_create_buffer(0,YY_BUF_SIZE));
    }
    else
    {
      //printf("  calling findFile(%s) alreadyInc=%d\n",incFileName.data(),alreadyIncluded);
      if (oldFileDef)
      {
	bool ambig;
	FileDef *fd = findFileDef(Doxygen::inputNameDict,incFileName,ambig);
	//printf("findFileDef(%s)=%p\n",incFileName.data(),fd);
	// add include dependency to the file in which the #include was found
	oldFileDef->addIncludeDependency(fd,incFileName,localInclude,g_isImported);
	// add included by dependency
        if (fd)
        {
          //printf("Adding include dependency (2) %s->%s ambig=%d\n",oldFileDef->name().data(),fd->name().data(),ambig);
          fd->addIncludedByDependency(oldFileDef,oldFileDef->docName(),localInclude,g_isImported);
        }
      }
      if (Debug::isFlagSet(Debug::Preprocessor))
      {
        msg("#include %s: not found or already included! skipping...\n",incFileName.data());
        //printf("error: include file %s not found\n",preYYtext);
      }
      if (g_curlyCount>0 && !alreadyIncluded) // failed to find #include inside { ... }
      {
	warn(g_yyFileName,g_yyLineNr,"Warning: include file %s not found, perhaps you forgot to add its directory to INCLUDE_PATH?",incFileName.data());
      }
    }
  }
}

/* ----------------------------------------------------------------- */

static void startCondSection(const char *sectId)
{
  g_condStack.push(new bool(g_skip));
  if (Config_getList("ENABLED_SECTIONS").find(sectId)==-1)
  {
    g_skip=TRUE;
  }
}

static void endCondSection()
{
  if (g_condStack.isEmpty())
  {
    g_skip=FALSE;
  }
  else
  {
    bool *ctx = g_condStack.pop();
    g_skip=*ctx;
  }
}

static QCString escapeAt(const char *text)
{
  QCString result;
  if (text)
  {
    char c;
    const char *p=text;
    while ((c=*p++))
    {
      if (c=='@') result+="@@"; else result+=c;
    }
  }
  return result;
}

static char resolveTrigraph(char c)
{
  switch (c)
  {
    case '=': return '#';
    case '/': return '\\';
    case '\'': return '^';
    case '(': return '[';
    case ')': return ']';
    case '!': return '|';
    case '<': return '{';
    case '>': return '}';
    case '-': return '~';
  }
  return '?';
}

/* ----------------------------------------------------------------- */

#undef  YY_INPUT
#define YY_INPUT(buf,result,max_size) result=yyread(buf,max_size);

static int yyread(char *buf,int max_size)
{
  int bytesInBuf = g_inputBuf->curPos()-g_inputBufPos;
  int bytesToCopy = QMIN(max_size,bytesInBuf);
  memcpy(buf,g_inputBuf->data()+g_inputBufPos,bytesToCopy);
  g_inputBufPos+=bytesToCopy;
  return bytesToCopy;
}

/* ----------------------------------------------------------------- */

































#line 3603 "<stdout>"

#define INITIAL 0
#define Start 1
#define Command 2
#define SkipCommand 3
#define SkipLine 4
#define SkipString 5
#define CopyLine 6
#define CopyString 7
#define Include 8
#define IncludeID 9
#define EndImport 10
#define DefName 11
#define DefineArg 12
#define DefineText 13
#define SkipCPPBlock 14
#define Ifdef 15
#define Ifndef 16
#define SkipCComment 17
#define CopyCComment 18
#define SkipVerbatim 19
#define SkipCPPComment 20
#define RemoveCComment 21
#define RemoveCPPComment 22
#define Guard 23
#define DefinedExpr1 24
#define DefinedExpr2 25
#define SkipDoubleQuote 26
#define SkipSingleQuote 27
#define UndefName 28
#define IgnoreLine 29
#define FindDefineArgs 30
#define ReadString 31
#define CondLine 32

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

static int yy_init_globals (void );

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int preYYlex_destroy (void );

int preYYget_debug (void );

void preYYset_debug (int debug_flag  );

YY_EXTRA_TYPE preYYget_extra (void );

void preYYset_extra (YY_EXTRA_TYPE user_defined  );

FILE *preYYget_in (void );

void preYYset_in  (FILE * in_str  );

FILE *preYYget_out (void );

void preYYset_out  (FILE * out_str  );

yy_size_t preYYget_leng (void );

char *preYYget_text (void );

int preYYget_lineno (void );

void preYYset_lineno (int line_number  );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int preYYwrap (void );
#else
extern int preYYwrap (void );
#endif
#endif

    static void yyunput (int c,char *buf_ptr  );
    
#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT

#ifdef __cplusplus
static int yyinput (void );
#else
static int input (void );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 262144
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO fwrite( preYYtext, preYYleng, 1, preYYout )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		yy_size_t n; \
		for ( n = 0; n < max_size && \
			     (c = getc( preYYin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( preYYin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = fread(buf, 1, max_size, preYYin))==0 && ferror(preYYin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(preYYin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int preYYlex (void);

#define YY_DECL int preYYlex (void)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after preYYtext and preYYleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	if ( preYYleng > 0 ) \
		YY_CURRENT_BUFFER_LVALUE->yy_at_bol = \
				(preYYtext[preYYleng - 1] == '\n'); \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    
#line 1395 "pre.l"


#line 3823 "<stdout>"

	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

        /* Create the reject buffer large enough to save one state per allowed character. */
        if ( ! (yy_state_buf) )
            (yy_state_buf) = (yy_state_type *)preYYalloc(YY_STATE_BUF_SIZE  );
            if ( ! (yy_state_buf) )
                YY_FATAL_ERROR( "out of dynamic memory in preYYlex()" );

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! preYYin )
			preYYin = stdin;

		if ( ! preYYout )
			preYYout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			preYYensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				preYY_create_buffer(preYYin,YY_BUF_SIZE );
		}

		preYY_load_buffer_state( );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of preYYtext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
		yy_current_state += YY_AT_BOL();

		(yy_state_ptr) = (yy_state_buf);
		*(yy_state_ptr)++ = yy_current_state;

yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 1153 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			*(yy_state_ptr)++ = yy_current_state;
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 5365 );

yy_find_action:
		yy_current_state = *--(yy_state_ptr);
		(yy_lp) = yy_accept[yy_current_state];
goto find_rule; /* Shut up GCC warning -Wall */
find_rule: /* we branch to this label when backing up */
		for ( ; ; ) /* until we find what rule we matched */
			{
			if ( (yy_lp) && (yy_lp) < yy_accept[yy_current_state + 1] )
				{
				yy_act = yy_acclist[(yy_lp)];
				if ( yy_act & YY_TRAILING_HEAD_MASK ||
				     (yy_looking_for_trail_begin) )
					{
					if ( yy_act == (yy_looking_for_trail_begin) )
						{
						(yy_looking_for_trail_begin) = 0;
						yy_act &= ~YY_TRAILING_HEAD_MASK;
						break;
						}
					}
				else if ( yy_act & YY_TRAILING_MASK )
					{
					(yy_looking_for_trail_begin) = yy_act & ~YY_TRAILING_MASK;
					(yy_looking_for_trail_begin) |= YY_TRAILING_HEAD_MASK;
					(yy_full_match) = yy_cp;
					(yy_full_state) = (yy_state_ptr);
					(yy_full_lp) = (yy_lp);
					}
				else
					{
					(yy_full_match) = yy_cp;
					(yy_full_state) = (yy_state_ptr);
					(yy_full_lp) = (yy_lp);
					break;
					}
				++(yy_lp);
				goto find_rule;
				}
			--yy_cp;
			yy_current_state = *--(yy_state_ptr);
			(yy_lp) = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
case 1:
YY_RULE_SETUP
#line 1397 "pre.l"

	YY_BREAK
case 2:
YY_RULE_SETUP
#line 1398 "pre.l"

	YY_BREAK
case 3:
YY_RULE_SETUP
#line 1399 "pre.l"

	YY_BREAK
case 4:
YY_RULE_SETUP
#line 1400 "pre.l"
{ // Trigraph
  					  unput(resolveTrigraph(preYYtext[2]));
  					}
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 1403 "pre.l"
{ BEGIN(Command); }
	YY_BREAK
case 6:
/* rule 6 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up preYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up preYYtext again */
YY_RULE_SETUP
#line 1404 "pre.l"
{
 					  outputArray(preYYtext,preYYleng); 
  					  BEGIN(CopyLine); 
					}
	YY_BREAK
case 7:
/* rule 7 can match eol */
YY_RULE_SETUP
#line 1408 "pre.l"
{ // constructors?
					  int i;
					  for (i=preYYleng-1;i>=0;i--)
					  {
					    unput(preYYtext[i]);
					  }
					  BEGIN(CopyLine);
                                        }
	YY_BREAK
case 8:
/* rule 8 can match eol */
#line 1417 "pre.l"
case 9:
/* rule 9 can match eol */
YY_RULE_SETUP
#line 1417 "pre.l"
{ // function like macro
  					  static bool skipFuncMacros = Config_getBool("SKIP_FUNCTION_MACROS");
					  QCString name(preYYtext);
					  name=name.left(name.find('(')).stripWhiteSpace();

					  Define *def=0;
					  if (skipFuncMacros && 
					      name!="Q_PROPERTY" &&
					      !(
					         (g_includeStack.isEmpty() || g_curlyCount>0) &&
					         g_macroExpansion &&
					         (def=g_fileDefineDict->find(name)) &&
						 macroIsAccessible(def) &&
					         (!g_expandOnlyPredef || def->isPredefined)
					       )
					     )
					  {
					    outputChar('\n');
					    g_yyLineNr++;
					  }
					  else // don't skip
					  {
					    int i;
					    for (i=preYYleng-1;i>=0;i--)
					    {
					      unput(preYYtext[i]);
					    }
					    BEGIN(CopyLine);
					  }
  					}
	YY_BREAK
case 10:
/* rule 10 can match eol */
YY_RULE_SETUP
#line 1447 "pre.l"
{
                                          QCString text=preYYtext;
  					  g_yyLineNr+=text.contains('\n');
					  outputArray(preYYtext,preYYleng);
  					}
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 1452 "pre.l"
{ // count brackets inside the main file
  					  if (g_includeStack.isEmpty()) 
					  {
					    g_curlyCount++;
					  }
					  outputChar(*preYYtext);
  					}
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 1459 "pre.l"
{ // count brackets inside the main file
  					  if (g_includeStack.isEmpty() && g_curlyCount>0) 
					  {
					    g_curlyCount--;
					  }
					  outputChar(*preYYtext);
  					}
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 1466 "pre.l"
{ 
  					  outputArray(preYYtext,preYYleng);
					}
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 1469 "pre.l"
{ 
  					  outputArray(preYYtext,preYYleng);
					}
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 1472 "pre.l"
{ 
  					  outputArray(preYYtext,preYYleng);
					}
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 1475 "pre.l"
{
					  outputChar(*preYYtext);
					  BEGIN( CopyString );
					}
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 1479 "pre.l"
{
  					  outputArray(preYYtext,preYYleng);
					}
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 1482 "pre.l"
{
					  outputArray(preYYtext,preYYleng);
					}
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 1485 "pre.l"
{
					  outputChar(*preYYtext);
					  BEGIN( CopyLine );
					}
	YY_BREAK
case 20:
/* rule 20 can match eol */
YY_RULE_SETUP
#line 1489 "pre.l"
{
  					  g_expectGuard = FALSE;
  					  Define *def=0;
					  //def=g_fileDefineDict->find(preYYtext);
					  //printf("Search for define %s found=%d g_includeStack.isEmpty()=%d "
					  //       "g_curlyCount=%d g_macroExpansion=%d g_expandOnlyPredef=%d "
					  //	 "isPreDefined=%d\n",preYYtext,def ? 1 : 0,
					  //	 g_includeStack.isEmpty(),g_curlyCount,g_macroExpansion,g_expandOnlyPredef,
					  //	 def ? def->isPredefined : -1
					  //	);
					  if ((g_includeStack.isEmpty() || g_curlyCount>0) &&
					      g_macroExpansion &&
					      (def=g_fileDefineDict->find(preYYtext)) &&
				              (def->isPredefined || macroIsAccessible(def)) &&
					      (!g_expandOnlyPredef || def->isPredefined)
					     )
					  {
					    //printf("Found it! #args=%d\n",def->nargs);
					    g_roundCount=0;
					    g_defArgsStr=preYYtext;
					    if (def->nargs==-1) // no function macro
					    {
					      QCString result = def->isPredefined ? def->definition : expandMacro(g_defArgsStr);
					      outputArray(result,result.length());
					    }
					    else // zero or more arguments
					    {
					      g_findDefArgContext = CopyLine;
					      BEGIN(FindDefineArgs);
					    }
					  }
					  else
					  {
					    outputArray(preYYtext,preYYleng);
					  }
  					}
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 1525 "pre.l"
{
                                          Define *def=0;
  					  if ((g_includeStack.isEmpty() || g_curlyCount>0) && 
					      g_macroExpansion &&
					      (def=g_fileDefineDict->find(preYYtext)) &&
					      def->nargs==-1 &&
				              (def->isPredefined || macroIsAccessible(def)) &&
					      (!g_expandOnlyPredef || def->isPredefined)
					     )
					  {
					    QCString result=def->isPredefined ? def->definition : expandMacro(preYYtext); 
					    outputArray(result,result.length());
					  }
					  else
					  {
					    outputArray(preYYtext,preYYleng);
					  }
  					}
	YY_BREAK
case 22:
/* rule 22 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up preYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up preYYtext again */
YY_RULE_SETUP
#line 1543 "pre.l"
{ // strip line continuation characters
  					}
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 1545 "pre.l"
{
  					  outputChar(*preYYtext);
  					}
	YY_BREAK
case 24:
/* rule 24 can match eol */
YY_RULE_SETUP
#line 1548 "pre.l"
{
  					  outputChar('\n');
					  BEGIN(Start);
					  g_yyLineNr++;
  					}
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 1553 "pre.l"
{
  					  g_defArgsStr+='(';
  					  g_roundCount++;
  					}
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 1557 "pre.l"
{
  					  g_defArgsStr+=')';
					  g_roundCount--;
					  if (g_roundCount==0)
					  {
					    QCString result=expandMacro(g_defArgsStr);
					    //printf("g_defArgsStr=`%s'->`%s'\n",g_defArgsStr.data(),result.data());
					    if (g_findDefArgContext==CopyLine)
					    {
					      outputArray(result,result.length());
					      BEGIN(g_findDefArgContext);
					    }
					    else // g_findDefArgContext==IncludeID
					    {
					      readIncludeFile(result);
					      g_nospaces=FALSE;
					      BEGIN(Start);
					    }
					  }
  					}
	YY_BREAK
/*
<FindDefineArgs>")"{B}*"("		{
  					  g_defArgsStr+=preYYtext;
  					}
  */
case 27:
YY_RULE_SETUP
#line 1582 "pre.l"
{
  					  g_defArgsStr+=preYYtext;
  					}
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 1585 "pre.l"
{
  					  g_defArgsStr+=*preYYtext;
  					  BEGIN(ReadString);
  					}
	YY_BREAK
case 29:
/* rule 29 can match eol */
YY_RULE_SETUP
#line 1589 "pre.l"
{
  					  g_yyLineNr++;
					  outputChar('\n');
  					}
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 1593 "pre.l"
{
  					  g_defArgsStr+="@@";
  					}
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 1596 "pre.l"
{
  					  g_defArgsStr+=*preYYtext;
  					}
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 1599 "pre.l"
{
  					  g_defArgsStr+=*preYYtext;
					  BEGIN(FindDefineArgs);
  					}
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 1603 "pre.l"
{
  					  g_defArgsStr+=preYYtext;
  					}
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 1606 "pre.l"
{
  					  g_defArgsStr+=preYYtext;
  					}
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 1609 "pre.l"
{
  					  g_defArgsStr+=*preYYtext;
  					}
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 1612 "pre.l"
{
  					  g_isImported = preYYtext[1]=='m';
  					  if (g_macroExpansion) 
					    BEGIN(IncludeID);
  					}
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 1617 "pre.l"
{ 
  					  g_isImported = preYYtext[1]=='m';
					  char c[2];
					  c[0]=preYYtext[preYYleng-1];c[1]='\0';
					  g_incName=c;
  					  BEGIN(Include); 
					}
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 1624 "pre.l"
{ 
  			                  //printf("!!!DefName\n"); 
  					  BEGIN(DefName); 
					}
	YY_BREAK
case 39:
*yy_cp = (yy_hold_char); /* undo effects of setting up preYYtext */
(yy_c_buf_p) = yy_cp = yy_bp + 5;
YY_DO_BEFORE_ACTION; /* set up preYYtext again */
YY_RULE_SETUP
#line 1628 "pre.l"
{
  					  incrLevel();
					  g_guardExpr.resize(0);
  					  BEGIN(DefinedExpr2);
  					}
	YY_BREAK
case 40:
*yy_cp = (yy_hold_char); /* undo effects of setting up preYYtext */
(yy_c_buf_p) = yy_cp = yy_bp + 5;
YY_DO_BEFORE_ACTION; /* set up preYYtext again */
YY_RULE_SETUP
#line 1633 "pre.l"
{
  					  //printf("Pre.l: ifdef\n");
  					  incrLevel();
					  g_guardExpr.resize(0);
  					  BEGIN(DefinedExpr1);
  					}
	YY_BREAK
case 41:
*yy_cp = (yy_hold_char); /* undo effects of setting up preYYtext */
(yy_c_buf_p) = yy_cp = yy_bp + 6;
YY_DO_BEFORE_ACTION; /* set up preYYtext again */
YY_RULE_SETUP
#line 1639 "pre.l"
{
  					  incrLevel();
					  g_guardExpr="! ";
  					  BEGIN(DefinedExpr2);
					}
	YY_BREAK
case 42:
*yy_cp = (yy_hold_char); /* undo effects of setting up preYYtext */
(yy_c_buf_p) = yy_cp = yy_bp + 6;
YY_DO_BEFORE_ACTION; /* set up preYYtext again */
YY_RULE_SETUP
#line 1644 "pre.l"
{
  					  incrLevel();
					  g_guardExpr="! ";
  					  BEGIN(DefinedExpr1);
  					}
	YY_BREAK
case 43:
*yy_cp = (yy_hold_char); /* undo effects of setting up preYYtext */
(yy_c_buf_p) = yy_cp = yy_bp + 2;
YY_DO_BEFORE_ACTION; /* set up preYYtext again */
YY_RULE_SETUP
#line 1649 "pre.l"
{
  					  incrLevel();
					  g_guardExpr.resize(0);
					  BEGIN(Guard);
					}
	YY_BREAK
case 44:
*yy_cp = (yy_hold_char); /* undo effects of setting up preYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up preYYtext again */
YY_RULE_SETUP
#line 1654 "pre.l"
{
  					  if (!otherCaseDone())
					  {
					    g_guardExpr.resize(0);
					    BEGIN(Guard);  
					  }
					  else
					  {
					    g_ifcount=0;
					    BEGIN(SkipCPPBlock);
					  }
  					}
	YY_BREAK
case 45:
/* rule 45 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up preYYtext */
(yy_c_buf_p) = yy_cp = yy_bp + 4;
YY_DO_BEFORE_ACTION; /* set up preYYtext again */
YY_RULE_SETUP
#line 1666 "pre.l"
{
					  //printf("else g_levelGuard[%d]=%d\n",g_level-1,g_levelGuard[g_level-1]);
  					  if (otherCaseDone())
					  {
					    g_ifcount=0;
					    BEGIN(SkipCPPBlock);
					  }
					  else
					  {
					    setCaseDone(TRUE);
					    //g_levelGuard[g_level-1]=TRUE;
					  } 
  					}
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 1679 "pre.l"
{
  					  BEGIN(UndefName);
  					}
	YY_BREAK
case 47:
*yy_cp = (yy_hold_char); /* undo effects of setting up preYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up preYYtext again */
YY_RULE_SETUP
#line 1682 "pre.l"
{
  					  if (!otherCaseDone())
					  {
					    g_guardExpr.resize(0);
  					    BEGIN(Guard);
					  }
  					}
	YY_BREAK
case 48:
/* rule 48 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up preYYtext */
(yy_c_buf_p) = yy_cp = yy_bp + 5;
YY_DO_BEFORE_ACTION; /* set up preYYtext again */
YY_RULE_SETUP
#line 1689 "pre.l"
{
  					  //printf("Pre.l: #endif\n");
  					  decrLevel();
  					}
	YY_BREAK
case 49:
/* rule 49 can match eol */
YY_RULE_SETUP
#line 1693 "pre.l"
{
  					  outputChar('\n');
  					  BEGIN(Start);
					  g_yyLineNr++;
  					}
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 1698 "pre.l"
{ // unknown directive
					  BEGIN(IgnoreLine);
					}
	YY_BREAK
case 51:
/* rule 51 can match eol */
YY_RULE_SETUP
#line 1701 "pre.l"
{
  					  outputChar('\n');
					  g_yyLineNr++;
					}
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 1705 "pre.l"

	YY_BREAK
case 53:
YY_RULE_SETUP
#line 1706 "pre.l"

	YY_BREAK
case 54:
YY_RULE_SETUP
#line 1707 "pre.l"
{
  					  Define *def;
  					  if ((def=isDefined(preYYtext)) 
					      /*&& !def->isPredefined*/
					      && !def->nonRecursive
					     )
					  {
					    //printf("undefining %s\n",preYYtext);
					    def->undef=TRUE;
					  }
					  BEGIN(Start);
  					}
	YY_BREAK
case 55:
/* rule 55 can match eol */
YY_RULE_SETUP
#line 1719 "pre.l"
{
  					  outputChar('\n');
  					  g_guardExpr+=' ';
					  g_yyLineNr++;
  					}
	YY_BREAK
case 56:
*yy_cp = (yy_hold_char); /* undo effects of setting up preYYtext */
(yy_c_buf_p) = yy_cp = yy_bp + 7;
YY_DO_BEFORE_ACTION; /* set up preYYtext again */
YY_RULE_SETUP
#line 1724 "pre.l"
{
    					  BEGIN(DefinedExpr2);
    					}
	YY_BREAK
case 57:
*yy_cp = (yy_hold_char); /* undo effects of setting up preYYtext */
(yy_c_buf_p) = yy_cp = yy_bp + 7;
YY_DO_BEFORE_ACTION; /* set up preYYtext again */
YY_RULE_SETUP
#line 1727 "pre.l"
{
    					  BEGIN(DefinedExpr1);
    					}
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 1730 "pre.l"
{ g_guardExpr+=preYYtext; }
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 1731 "pre.l"
{ g_guardExpr+=*preYYtext; }
	YY_BREAK
case 60:
/* rule 60 can match eol */
YY_RULE_SETUP
#line 1732 "pre.l"
{
  					  unput(*preYYtext);
  					  //printf("Guard: `%s'\n",
					  //    g_guardExpr.data());
					  bool guard=computeExpression(g_guardExpr);
					  setCaseDone(guard);
					  //printf("if g_levelGuard[%d]=%d\n",g_level-1,g_levelGuard[g_level-1]);
					  if (guard)
					  {
					    BEGIN(Start);
					  } 
					  else
					  {
					    g_ifcount=0;
					    BEGIN(SkipCPPBlock);
					  }
  					}
	YY_BREAK
case 61:
/* rule 61 can match eol */
YY_RULE_SETUP
#line 1749 "pre.l"
{ g_yyLineNr++; outputChar('\n'); }
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 1750 "pre.l"
{
  					  if (isDefined(preYYtext))
					    g_guardExpr+=" 1L ";
					  else
					    g_guardExpr+=" 0L ";
					  g_lastGuardName=preYYtext;
					  BEGIN(Guard);
  					}
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 1758 "pre.l"
{
  					  if (isDefined(preYYtext))
					    g_guardExpr+=" 1L ";
					  else
					    g_guardExpr+=" 0L ";
					  g_lastGuardName=preYYtext;
  					}
	YY_BREAK
case 64:
/* rule 64 can match eol */
YY_RULE_SETUP
#line 1765 "pre.l"
{ // should not happen, handle anyway
                                          g_yyLineNr++;
  					  g_ifcount=0;
 					  BEGIN(SkipCPPBlock); 
					}
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 1770 "pre.l"
{
  					  BEGIN(Guard);
  					}
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 1773 "pre.l"

	YY_BREAK
case 67:
YY_RULE_SETUP
#line 1774 "pre.l"
{ BEGIN(SkipCommand); }
	YY_BREAK
case 68:
/* rule 68 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up preYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up preYYtext again */
YY_RULE_SETUP
#line 1775 "pre.l"
{ BEGIN(SkipLine); }
	YY_BREAK
case 69:
/* rule 69 can match eol */
YY_RULE_SETUP
#line 1776 "pre.l"
{ g_yyLineNr++; outputChar('\n'); }
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 1777 "pre.l"

	YY_BREAK
case 71:
*yy_cp = (yy_hold_char); /* undo effects of setting up preYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up preYYtext again */
YY_RULE_SETUP
#line 1778 "pre.l"
{ 
  					  incrLevel();
                                          g_ifcount++; 
  					  //printf("#if... depth=%d\n",g_ifcount);
					}
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 1783 "pre.l"
{
					  //printf("Else! g_ifcount=%d otherCaseDone=%d\n",g_ifcount,otherCaseDone());
  					  if (g_ifcount==0 && !otherCaseDone())
					  {
					    setCaseDone(TRUE);
  					    //outputChar('\n');
					    BEGIN(Start);
					  }
  					}
	YY_BREAK
case 73:
*yy_cp = (yy_hold_char); /* undo effects of setting up preYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up preYYtext again */
YY_RULE_SETUP
#line 1792 "pre.l"
{
  					  if (g_ifcount==0) 
					  {
  					    if (!otherCaseDone())
					    {
					      g_guardExpr.resize(0);
					      g_lastGuardName.resize(0);
  					      BEGIN(Guard);
					    }
					    else
					    {
					      BEGIN(SkipCPPBlock);
					    }
					  }
					}
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 1807 "pre.l"
{ 
  					  decrLevel();
  				          if (--g_ifcount<0)
  					  {
  					    //outputChar('\n');
					    BEGIN(Start);
					  }
					}
	YY_BREAK
case 75:
/* rule 75 can match eol */
YY_RULE_SETUP
#line 1815 "pre.l"
{ 
  					  outputChar('\n');
  					  g_yyLineNr++; 
					  BEGIN(SkipCPPBlock);
					}
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 1820 "pre.l"
{ // unknown directive 
  					  BEGIN(SkipLine); 
					}
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 1823 "pre.l"

	YY_BREAK
case 78:
YY_RULE_SETUP
#line 1824 "pre.l"

	YY_BREAK
case 79:
YY_RULE_SETUP
#line 1825 "pre.l"
{ }
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 1826 "pre.l"
{
					  BEGIN(SkipString);
					}
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 1829 "pre.l"

	YY_BREAK
case 82:
YY_RULE_SETUP
#line 1830 "pre.l"
{
  					  g_lastCPPContext=YY_START;
  					  BEGIN(RemoveCPPComment);
					}
	YY_BREAK
case 83:
*yy_cp = (yy_hold_char); /* undo effects of setting up preYYtext */
(yy_c_buf_p) = yy_cp = yy_bp + 2;
YY_DO_BEFORE_ACTION; /* set up preYYtext again */
YY_RULE_SETUP
#line 1834 "pre.l"
{
					  g_lastCContext=YY_START;
  					  BEGIN(RemoveCComment);
  					}
	YY_BREAK
case 84:
/* rule 84 can match eol */
YY_RULE_SETUP
#line 1838 "pre.l"
{
  					  outputChar('\n');
					  g_yyLineNr++;  
					  BEGIN(SkipCPPBlock);
					}
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 1843 "pre.l"
{ }
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 1844 "pre.l"
{ }
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 1845 "pre.l"
{
  					  BEGIN(SkipLine);
  					}
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 1848 "pre.l"
{ }
	YY_BREAK
case 89:
*yy_cp = (yy_hold_char); /* undo effects of setting up preYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up preYYtext again */
YY_RULE_SETUP
#line 1849 "pre.l"
{
  					  g_nospaces=TRUE;
				          g_roundCount=0;
					  g_defArgsStr=preYYtext;
					  g_findDefArgContext = IncludeID;
					  BEGIN(FindDefineArgs);
					}
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 1856 "pre.l"
{
  					  g_nospaces=TRUE;
                                          readIncludeFile(expandMacro(preYYtext));
					  BEGIN(Start);
  					}
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 1861 "pre.l"
{ 
					  g_incName+=preYYtext;
					  readIncludeFile(g_incName);
					  if (g_isImported)
					  {
					    BEGIN(EndImport);
					  }
					  else
					  {
					    BEGIN(Start);
					  }
  					}
	YY_BREAK
case 92:
/* rule 92 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up preYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up preYYtext again */
YY_RULE_SETUP
#line 1873 "pre.l"
{
  					  BEGIN(Start);
  					}
	YY_BREAK
case 93:
/* rule 93 can match eol */
YY_RULE_SETUP
#line 1876 "pre.l"
{ 
					  outputChar('\n');
					  g_yyLineNr++;
					}
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 1880 "pre.l"
{
  					}
	YY_BREAK
case 95:
*yy_cp = (yy_hold_char); /* undo effects of setting up preYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up preYYtext again */
YY_RULE_SETUP
#line 1882 "pre.l"
{ // define with argument
  					  //printf("Define() `%s'\n",preYYtext);
					  g_argDict = new QDict<int>(31);
					  g_argDict->setAutoDelete(TRUE);
					  g_defArgs = 0; 
                                          g_defArgsStr.resize(0);
					  g_defText.resize(0);
					  g_defLitText.resize(0);
					  g_defName = preYYtext;
					  g_defVarArgs = FALSE;
					  BEGIN(DefineArg);
  					}
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 1894 "pre.l"
{ // special case: define with 1 -> can be "guard"
  					  //printf("Define `%s'\n",preYYtext);
  					  g_argDict = 0;
					  g_defArgs = -1;
                                          g_defArgsStr.resize(0);
					  g_defName = preYYtext;
					  g_defName = g_defName.left(g_defName.length()-1).stripWhiteSpace();
					  g_defVarArgs = FALSE;
					  if ( g_defName!=g_lastGuardName || !g_expectGuard)
					  { // define may appear in the output
					    QCString tmp=(QCString)"#define "+g_defName;
					    outputArray(tmp.data(),tmp.length());
					    g_quoteArg=FALSE;
					    g_insideComment=FALSE;
					    g_lastGuardName.resize(0);
				            g_defText="1"; 
					    g_defLitText="1"; 
					    BEGIN(DefineText); 
					  }
					  else // define is a guard => hide
					  {
					    g_defText.resize(0);
					    g_defLitText.resize(0);
					    BEGIN(Start);
					  }
  					}
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 1920 "pre.l"
{ // define with content
  					  //printf("Define `%s'\n",preYYtext);
  					  g_argDict = 0;
					  g_defArgs = -1;
                                          g_defArgsStr.resize(0);
					  g_defText.resize(0);
					  g_defLitText.resize(0);
					  g_defName = preYYtext;
					  g_defVarArgs = FALSE;
					  QCString tmp=(QCString)"#define "+g_defName+g_defArgsStr;
					  outputArray(tmp.data(),tmp.length());
					  g_quoteArg=FALSE;
					  g_insideComment=FALSE;
					  BEGIN(DefineText); 
  					}
	YY_BREAK
case 98:
/* rule 98 can match eol */
YY_RULE_SETUP
#line 1935 "pre.l"
{ // empty define
  					  g_argDict = 0;
					  g_defArgs = -1;
					  g_defName = preYYtext;
                                          g_defArgsStr.resize(0);
					  g_defText.resize(0);
					  g_defLitText.resize(0);
					  g_defVarArgs = FALSE;
					  //printf("Guard check: %s!=%s || %d\n",
					  //    g_defName.data(),g_lastGuardName.data(),g_expectGuard);
					  if ( g_defName!=g_lastGuardName || !g_expectGuard)
					  { // define may appear in the output
					    QCString tmp=(QCString)"#define "+g_defName;
					    outputArray(tmp.data(),tmp.length());
					    g_quoteArg=FALSE;
					    g_insideComment=FALSE;
					    if (g_insideCS) g_defText="1"; // for C#, use "1" as define text
					    BEGIN(DefineText);
					  }
					  else // define is a guard => hide
					  {
					    //printf("Found a guard %s\n",preYYtext);
					    g_lastGuardName.resize(0);
					    BEGIN(Start);
					  }
					  g_expectGuard=FALSE;
  					}
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 1962 "pre.l"
{ g_defArgsStr+=preYYtext; }
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 1963 "pre.l"
{ g_defArgsStr+=preYYtext; }
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 1964 "pre.l"
{
                                          g_defArgsStr+=preYYtext; 
					  QCString tmp=(QCString)"#define "+g_defName+g_defArgsStr;
					  outputArray(tmp.data(),tmp.length());
					  g_quoteArg=FALSE;
					  g_insideComment=FALSE;
  					  BEGIN(DefineText);
  					}
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 1972 "pre.l"
{ // Variadic macro
					  g_defVarArgs = TRUE;
					  g_defArgsStr+=preYYtext;
					  g_argDict->insert("__VA_ARGS__",new int(g_defArgs));
					  g_defArgs++;
  					}
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 1978 "pre.l"
{
  					  //printf("Define addArg(%s)\n",preYYtext);
  					  QCString argName=preYYtext;
  					  g_defVarArgs = preYYtext[preYYleng-1]=='.';
					  if (g_defVarArgs) // strip ellipsis
					  {
					    argName=argName.left(argName.length()-3);
					  }
					  argName = argName.stripWhiteSpace();
                                          g_defArgsStr+=preYYtext;
					  g_argDict->insert(argName,new int(g_defArgs)); 
					  g_defArgs++;
  					}
	YY_BREAK
/*
<DefineText>"/ **"|"/ *!"			{
  					  g_defText+=preYYtext;
					  g_defLitText+=preYYtext;
					  g_insideComment=TRUE;
  					}
<DefineText>"* /"			{
  					  g_defText+=preYYtext;
					  g_defLitText+=preYYtext;
					  g_insideComment=FALSE;
  					}
  */
case 104:
YY_RULE_SETUP
#line 2003 "pre.l"
{
					  g_defText+=preYYtext;
					  g_defLitText+=preYYtext;
					  g_lastCContext=YY_START;
					  g_commentCount=1;
  					  BEGIN(CopyCComment);
  					}
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 2010 "pre.l"
{
  					  outputArray(preYYtext,preYYleng);
  					  g_lastCPPContext=YY_START;
					  g_defLitText+=' ';
  					  BEGIN(SkipCPPComment);
  					}
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 2016 "pre.l"
{
  					  if (preYYtext[0]=='/') outputChar('/');
  					  outputChar('*');outputChar('/');
					  if (--g_commentCount<=0)
					  {
					    if (g_lastCContext==Start) 
					      // small hack to make sure that ^... rule will
					      // match when going to Start... Example: "/*...*/ some stuff..."
					    {
					      YY_CURRENT_BUFFER->yy_at_bol=1;
					    }
  					    BEGIN(g_lastCContext);  
					  }
  					}
	YY_BREAK
case 107:
YY_RULE_SETUP
#line 2030 "pre.l"
{
  					  outputArray(preYYtext,preYYleng);
  					}
	YY_BREAK
case 108:
YY_RULE_SETUP
#line 2033 "pre.l"
{
  					  outputChar('/');outputChar('*');
					  //g_commentCount++;
  					}
	YY_BREAK
case 109:
YY_RULE_SETUP
#line 2037 "pre.l"
{
  					  outputArray(preYYtext,preYYleng);
  					}
	YY_BREAK
case 110:
/* rule 110 can match eol */
YY_RULE_SETUP
#line 2040 "pre.l"
{
  					  outputArray(preYYtext,preYYleng);
  					  g_yyLineNr+=QCString(preYYtext).contains('\n');
  					}
	YY_BREAK
case 111:
/* rule 111 can match eol */
YY_RULE_SETUP
#line 2044 "pre.l"
{
  					  outputArray(preYYtext,preYYleng);
  					  g_yyLineNr+=QCString(preYYtext).contains('\n');
					  if (preYYtext[1]=='f')
					  {
					    g_blockName="f";
					  }
					  else
					  {
					    g_blockName=QCString(&preYYtext[1]).stripWhiteSpace();
					  }
					  BEGIN(SkipVerbatim);
  					}
	YY_BREAK
case 112:
YY_RULE_SETUP
#line 2057 "pre.l"
{ // conditional section
  					  g_condCtx = YY_START;
  					  outputArray(preYYtext,preYYleng);
  					  BEGIN(CondLine);
  					}
	YY_BREAK
case 113:
YY_RULE_SETUP
#line 2062 "pre.l"
{
  				          startCondSection(preYYtext);
  					  outputArray(preYYtext,preYYleng);
  					  BEGIN(g_condCtx);
  					}
	YY_BREAK
case 114:
/* rule 114 can match eol */
#line 2068 "pre.l"
case 115:
/* rule 115 can match eol */
YY_RULE_SETUP
#line 2068 "pre.l"
{
  					  outputArray(preYYtext,preYYleng);
  					  g_yyLineNr+=QCString(preYYtext).contains('\n');
  					  startCondSection(" ");
					  if (YY_START==CondLine) BEGIN(g_condCtx);
  					}
	YY_BREAK
case 116:
/* rule 116 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up preYYtext */
(yy_c_buf_p) = yy_cp = yy_bp + 8;
YY_DO_BEFORE_ACTION; /* set up preYYtext again */
YY_RULE_SETUP
#line 2074 "pre.l"
{
  					  outputArray(preYYtext,preYYleng);
  					  endCondSection();
  					}
	YY_BREAK
case 117:
YY_RULE_SETUP
#line 2078 "pre.l"
{ /* end of verbatim block */
  					  outputArray(preYYtext,preYYleng);
					  if (preYYtext[1]=='f' && g_blockName=="f")
					  {
					    BEGIN(SkipCComment);
					  }
					  else if (&preYYtext[4]==g_blockName)
					  {
					    BEGIN(SkipCComment);
					  }
  					}
	YY_BREAK
case 118:
YY_RULE_SETUP
#line 2089 "pre.l"
{
  					  outputArray(preYYtext,preYYleng);
  					}
	YY_BREAK
case 119:
YY_RULE_SETUP
#line 2092 "pre.l"
{
  					  outputArray(preYYtext,preYYleng);
  					}
	YY_BREAK
case 120:
/* rule 120 can match eol */
YY_RULE_SETUP
#line 2095 "pre.l"
{ 
  					  g_yyLineNr++;
  					  outputChar('\n');
  					}
	YY_BREAK
case 121:
YY_RULE_SETUP
#line 2099 "pre.l"
{
  					  outputChar(*preYYtext);
  					}
	YY_BREAK
case 122:
YY_RULE_SETUP
#line 2102 "pre.l"
{
					  g_defLitText+=preYYtext;
					  g_defText+=escapeAt(preYYtext);
  					}
	YY_BREAK
case 123:
YY_RULE_SETUP
#line 2106 "pre.l"
{
					  g_defLitText+=preYYtext;
					  g_defText+=preYYtext;
  					  BEGIN(g_lastCContext);
  					}
	YY_BREAK
case 124:
/* rule 124 can match eol */
YY_RULE_SETUP
#line 2111 "pre.l"
{ 
  					  g_yyLineNr++;
					  g_defLitText+=preYYtext;
					  g_defText+=' ';
  					}
	YY_BREAK
case 125:
YY_RULE_SETUP
#line 2116 "pre.l"
{ // see bug 594021 for a usecase for this rule
                                          if (g_lastCContext==SkipCPPBlock)
					  {
					    BEGIN(SkipCommand);
					  }
					  else
					  {
					    REJECT;
					  }
					}
	YY_BREAK
case 126:
YY_RULE_SETUP
#line 2126 "pre.l"
{ BEGIN(g_lastCContext); }
	YY_BREAK
case 127:
YY_RULE_SETUP
#line 2127 "pre.l"

	YY_BREAK
case 128:
YY_RULE_SETUP
#line 2128 "pre.l"

	YY_BREAK
case 129:
YY_RULE_SETUP
#line 2129 "pre.l"

	YY_BREAK
case 130:
/* rule 130 can match eol */
YY_RULE_SETUP
#line 2130 "pre.l"
{ g_yyLineNr++; outputChar('\n'); }
	YY_BREAK
case 131:
YY_RULE_SETUP
#line 2131 "pre.l"

	YY_BREAK
case 132:
YY_RULE_SETUP
#line 2132 "pre.l"
{
  					  outputArray(preYYtext,preYYleng);
  					}
	YY_BREAK
case 133:
/* rule 133 can match eol */
YY_RULE_SETUP
#line 2135 "pre.l"
{
  					  unput(*preYYtext);
  					  BEGIN(g_lastCPPContext);
  					}
	YY_BREAK
case 134:
YY_RULE_SETUP
#line 2139 "pre.l"
{
  					  outputChar('/');outputChar('*');
  					}
	YY_BREAK
case 135:
YY_RULE_SETUP
#line 2142 "pre.l"
{
  					  outputChar('/');outputChar('/');
  					}
	YY_BREAK
case 136:
YY_RULE_SETUP
#line 2145 "pre.l"
{
  					  outputArray(preYYtext,preYYleng);
  					}
	YY_BREAK
case 137:
YY_RULE_SETUP
#line 2148 "pre.l"
{
  					  outputChar(*preYYtext);
  					}
	YY_BREAK
case 138:
YY_RULE_SETUP
#line 2151 "pre.l"

	YY_BREAK
case 139:
YY_RULE_SETUP
#line 2152 "pre.l"

	YY_BREAK
case 140:
YY_RULE_SETUP
#line 2153 "pre.l"

	YY_BREAK
case 141:
YY_RULE_SETUP
#line 2154 "pre.l"

	YY_BREAK
case 142:
YY_RULE_SETUP
#line 2155 "pre.l"
{
  					  g_quoteArg=TRUE;
					  g_defLitText+=preYYtext;
  					}
	YY_BREAK
case 143:
YY_RULE_SETUP
#line 2159 "pre.l"
{
					  g_defLitText+=preYYtext;
  					  if (g_quoteArg)
					  {
					    g_defText+="\"";
					  }
					  if (g_defArgs>0)
					  {
					    int *n;
					    if ((n=(*g_argDict)[preYYtext]))
					    {
					      //if (!g_quoteArg) g_defText+=' ';
					      g_defText+='@';
					      QCString numStr;
					      numStr.sprintf("%d",*n);
					      g_defText+=numStr;
					      //if (!g_quoteArg) g_defText+=' ';
					    }
					    else
					    {
					      g_defText+=preYYtext;
					    }
					  }
					  else
					  {
					    g_defText+=preYYtext;
					  }
					  if (g_quoteArg)
					  {
					    g_defText+="\"";
					  }
					  g_quoteArg=FALSE;
  					}
	YY_BREAK
case 144:
YY_RULE_SETUP
#line 2192 "pre.l"
{
					  g_defLitText+=preYYtext;
					  g_defText+=preYYtext;
  					}
	YY_BREAK
case 145:
/* rule 145 can match eol */
YY_RULE_SETUP
#line 2196 "pre.l"
{ 
					  g_defLitText+=preYYtext;
					  outputChar('\n');
  					  g_defText += ' '; g_yyLineNr++; 
					}
	YY_BREAK
case 146:
/* rule 146 can match eol */
YY_RULE_SETUP
#line 2201 "pre.l"
{
					  QCString comment=extractTrailingComment(g_defLitText);
					  g_defLitText+=preYYtext;
					  if (!comment.isEmpty())
					  {
					    outputArray(comment,comment.length());
					    g_defLitText=g_defLitText.left(g_defLitText.length()-comment.length()-1);
					  }
  					  outputChar('\n');
  					  Define *def=0;
					  //printf("Define name=`%s' text=`%s' litTexti=`%s'\n",g_defName.data(),g_defText.data(),g_defLitText.data());
					  if (g_includeStack.isEmpty() || g_curlyCount>0) 
					  {
					    addDefine();
					  }
					  def=g_fileDefineDict->find(g_defName);
					  if (def==0) // new define
					  {
					    //printf("new define!\n");
					    g_fileDefineDict->insert(g_defName,newDefine());
					  }
					  else if (def && macroIsAccessible(def))
					       // name already exists
					  {
					    //printf("existing define!\n");
					    //printf("define found\n");
					    if (def->undef) // undefined name
					    {
					      def->undef = FALSE;
					      def->name = g_defName;
					      def->definition = g_defText.stripWhiteSpace();
					      def->nargs = g_defArgs;
					      def->fileName = g_yyFileName.copy(); 
					      def->lineNr = g_yyLineNr;
					    }
					    else
					    {
					      //printf("error: define %s is defined more than once!\n",g_defName.data());
					    }
					  }
					  delete g_argDict; g_argDict=0;
					  g_yyLineNr++;
					  g_lastGuardName.resize(0);
					  BEGIN(Start);
  					}
	YY_BREAK
case 147:
YY_RULE_SETUP
#line 2246 "pre.l"
{ g_defText += ' '; g_defLitText+=preYYtext; }
	YY_BREAK
case 148:
YY_RULE_SETUP
#line 2247 "pre.l"
{ g_defText += "##"; g_defLitText+=preYYtext; }
	YY_BREAK
case 149:
YY_RULE_SETUP
#line 2248 "pre.l"
{ g_defText += "@@"; g_defLitText+=preYYtext; }
	YY_BREAK
case 150:
YY_RULE_SETUP
#line 2249 "pre.l"
{ 
                                          g_defText += *preYYtext; 
  					  g_defLitText+=preYYtext; 
					  if (!g_insideComment)
					  {
					    BEGIN(SkipDoubleQuote);
					  }
  					}
	YY_BREAK
case 151:
YY_RULE_SETUP
#line 2257 "pre.l"
{ g_defText += *preYYtext;
  					  g_defLitText+=preYYtext; 
					  if (!g_insideComment)
					  {
  					    BEGIN(SkipSingleQuote);
					  }
					}
	YY_BREAK
case 152:
YY_RULE_SETUP
#line 2264 "pre.l"
{ g_defText += preYYtext; g_defLitText+=preYYtext; }
	YY_BREAK
case 153:
YY_RULE_SETUP
#line 2265 "pre.l"
{ g_defText += preYYtext; g_defLitText+=preYYtext; }
	YY_BREAK
case 154:
YY_RULE_SETUP
#line 2266 "pre.l"
{
  					  g_defText += *preYYtext; g_defLitText+=preYYtext; 
					  BEGIN(DefineText);
  					}
	YY_BREAK
case 155:
YY_RULE_SETUP
#line 2270 "pre.l"
{
  					  g_defText += preYYtext; g_defLitText+=preYYtext;
					}
	YY_BREAK
case 156:
YY_RULE_SETUP
#line 2273 "pre.l"
{
  					  g_defText += *preYYtext; g_defLitText+=preYYtext;
					  BEGIN(DefineText);
  					}
	YY_BREAK
case 157:
YY_RULE_SETUP
#line 2277 "pre.l"
{ g_defText += *preYYtext; g_defLitText+=preYYtext; }
	YY_BREAK
case 158:
YY_RULE_SETUP
#line 2278 "pre.l"
{ g_defText += *preYYtext; g_defLitText+=preYYtext; }
	YY_BREAK
case 159:
YY_RULE_SETUP
#line 2279 "pre.l"
{ g_defText += *preYYtext; g_defLitText+=preYYtext; }
	YY_BREAK
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(Start):
case YY_STATE_EOF(Command):
case YY_STATE_EOF(SkipCommand):
case YY_STATE_EOF(SkipLine):
case YY_STATE_EOF(SkipString):
case YY_STATE_EOF(CopyLine):
case YY_STATE_EOF(CopyString):
case YY_STATE_EOF(Include):
case YY_STATE_EOF(IncludeID):
case YY_STATE_EOF(EndImport):
case YY_STATE_EOF(DefName):
case YY_STATE_EOF(DefineArg):
case YY_STATE_EOF(DefineText):
case YY_STATE_EOF(SkipCPPBlock):
case YY_STATE_EOF(Ifdef):
case YY_STATE_EOF(Ifndef):
case YY_STATE_EOF(SkipCComment):
case YY_STATE_EOF(CopyCComment):
case YY_STATE_EOF(SkipVerbatim):
case YY_STATE_EOF(SkipCPPComment):
case YY_STATE_EOF(RemoveCComment):
case YY_STATE_EOF(RemoveCPPComment):
case YY_STATE_EOF(Guard):
case YY_STATE_EOF(DefinedExpr1):
case YY_STATE_EOF(DefinedExpr2):
case YY_STATE_EOF(SkipDoubleQuote):
case YY_STATE_EOF(SkipSingleQuote):
case YY_STATE_EOF(UndefName):
case YY_STATE_EOF(IgnoreLine):
case YY_STATE_EOF(FindDefineArgs):
case YY_STATE_EOF(ReadString):
case YY_STATE_EOF(CondLine):
#line 2280 "pre.l"
{
                                          //fprintf(stderr,"End of include file\n");
					  //printf("Include stack depth=%d\n",g_includeStack.count());
  					  if (g_includeStack.isEmpty())
					  {
					    //fprintf(stderr,"Terminating scanner!\n");
					    yyterminate();
					  }
					  else
					  {
					    FileState *fs=g_includeStack.pop();
					    //fileDefineCache->merge(g_yyFileName,fs->fileName);
					    YY_BUFFER_STATE oldBuf = YY_CURRENT_BUFFER;
					    preYY_switch_to_buffer(fs->bufState );
					    preYY_delete_buffer(oldBuf );
					    g_yyLineNr    = fs->lineNr;
                                            //preYYin = fs->oldYYin;
                                            g_inputBuf    = fs->oldFileBuf;
					    g_inputBufPos = fs->oldFileBufPos;
					    setFileName(fs->fileName);
					    //fprintf(stderr,"######## FileName %s\n",g_yyFileName.data());
					    
                                            // Deal with file changes due to 
                                            // #include's within { .. } blocks
                                            QCString lineStr(15+g_yyFileName.length());
                                            lineStr.sprintf("# %d \"%s\" 2",g_yyLineNr,g_yyFileName.data());
                                            outputArray(lineStr.data(),lineStr.length());
					    
					    delete fs; fs=0;
					  }
  					}
	YY_BREAK
case 160:
*yy_cp = (yy_hold_char); /* undo effects of setting up preYYtext */
(yy_c_buf_p) = yy_cp = yy_bp + 2;
YY_DO_BEFORE_ACTION; /* set up preYYtext again */
#line 2312 "pre.l"
case 161:
YY_RULE_SETUP
#line 2312 "pre.l"
{
					  outputArray(preYYtext,preYYleng);
  					  g_lastCContext=YY_START;
					  g_commentCount=1;
					  if (preYYleng==3) g_lastGuardName.resize(0); // reset guard in case the #define is documented!
					  BEGIN(SkipCComment);
  					}
	YY_BREAK
case 162:
YY_RULE_SETUP
#line 2319 "pre.l"
{
					  outputArray(preYYtext,preYYleng);
  					  g_lastCPPContext=YY_START;
					  if (preYYleng==3) g_lastGuardName.resize(0); // reset guard in case the #define is documented!
					  BEGIN(SkipCPPComment);
					}
	YY_BREAK
case 163:
/* rule 163 can match eol */
YY_RULE_SETUP
#line 2325 "pre.l"
{ 
  					  outputChar('\n');
  					  g_yyLineNr++; 
					}
	YY_BREAK
case 164:
YY_RULE_SETUP
#line 2329 "pre.l"
{
  					  g_expectGuard = FALSE;
  					  outputChar(*preYYtext);
  					}
	YY_BREAK
case 165:
YY_RULE_SETUP
#line 2334 "pre.l"
ECHO;
	YY_BREAK
#line 5665 "<stdout>"

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed preYYin at a new source and called
			 * preYYlex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = preYYin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( preYYwrap( ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * preYYtext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of preYYlex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (void)
{
    	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = (yytext_ptr);
	register int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			yy_size_t num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			YY_FATAL_ERROR(
"input buffer overflow, can't enlarge buffer because scanner uses REJECT" );

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			preYYrestart(preYYin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yy_size_t) ((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) preYYrealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (void)
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    
	yy_current_state = (yy_start);
	yy_current_state += YY_AT_BOL();

	(yy_state_ptr) = (yy_state_buf);
	*(yy_state_ptr)++ = yy_current_state;

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 56);
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 1153 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		*(yy_state_ptr)++ = yy_current_state;
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state )
{
	register int yy_is_jam;
    
	register YY_CHAR yy_c = 56;
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 1153 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 1152);
	if ( ! yy_is_jam )
		*(yy_state_ptr)++ = yy_current_state;

	return yy_is_jam ? 0 : yy_current_state;
}

    static void yyunput (int c, register char * yy_bp )
{
	register char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up preYYtext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register yy_size_t number_to_move = (yy_n_chars) + 2;
		register char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		register char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (void)
#else
    static int input  (void)
#endif

{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			yy_size_t offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					preYYrestart(preYYin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( preYYwrap( ) )
						return 0;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve preYYtext */
	(yy_hold_char) = *++(yy_c_buf_p);

	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = (c == '\n');

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void preYYrestart  (FILE * input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        preYYensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            preYY_create_buffer(preYYin,YY_BUF_SIZE );
	}

	preYY_init_buffer(YY_CURRENT_BUFFER,input_file );
	preYY_load_buffer_state( );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void preYY_switch_to_buffer  (YY_BUFFER_STATE  new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		preYYpop_buffer_state();
	 *		preYYpush_buffer_state(new_buffer);
     */
	preYYensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	preYY_load_buffer_state( );

	/* We don't actually know whether we did this switch during
	 * EOF (preYYwrap()) processing, but the only time this flag
	 * is looked at is after preYYwrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

static void preYY_load_buffer_state  (void)
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	preYYin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE preYY_create_buffer  (FILE * file, int  size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) preYYalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in preYY_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) preYYalloc(b->yy_buf_size + 2  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in preYY_create_buffer()" );

	b->yy_is_our_buffer = 1;

	preYY_init_buffer(b,file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with preYY_create_buffer()
 * 
 */
    void preYY_delete_buffer (YY_BUFFER_STATE  b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		preYYfree((void *) b->yy_ch_buf  );

	preYYfree((void *) b  );
}

#ifndef __cplusplus
extern int isatty (int );
#endif /* __cplusplus */
    
/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a preYYrestart() or at EOF.
 */
    static void preYY_init_buffer  (YY_BUFFER_STATE  b, FILE * file )

{
	int oerrno = errno;
    
	preYY_flush_buffer(b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then preYY_init_buffer was _probably_
     * called from preYYrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void preYY_flush_buffer (YY_BUFFER_STATE  b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		preYY_load_buffer_state( );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void preYYpush_buffer_state (YY_BUFFER_STATE new_buffer )
{
    	if (new_buffer == NULL)
		return;

	preYYensure_buffer_stack();

	/* This block is copied from preYY_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from preYY_switch_to_buffer. */
	preYY_load_buffer_state( );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void preYYpop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	preYY_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		preYY_load_buffer_state( );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void preYYensure_buffer_stack (void)
{
	yy_size_t num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		(yy_buffer_stack) = (struct yy_buffer_state**)preYYalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in preYYensure_buffer_stack()" );
								  
		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)preYYrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in preYYensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * 
 * @return the newly allocated buffer state object. 
 */
YY_BUFFER_STATE preYY_scan_buffer  (char * base, yy_size_t  size )
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) preYYalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in preYY_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	preYY_switch_to_buffer(b  );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to preYYlex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * 
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       preYY_scan_bytes() instead.
 */
YY_BUFFER_STATE preYY_scan_string (yyconst char * yystr )
{
    
	return preYY_scan_bytes(yystr,strlen(yystr) );
}

/** Setup the input buffer state to scan the given bytes. The next call to preYYlex() will
 * scan from a @e copy of @a bytes.
 * @param bytes the byte buffer to scan
 * @param len the number of bytes in the buffer pointed to by @a bytes.
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE preYY_scan_bytes  (yyconst char * yybytes, yy_size_t  _yybytes_len )
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n, i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = _yybytes_len + 2;
	buf = (char *) preYYalloc(n  );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in preYY_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = preYY_scan_buffer(buf,n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in preYY_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yy_fatal_error (yyconst char* msg )
{
    	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up preYYtext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		preYYtext[preYYleng] = (yy_hold_char); \
		(yy_c_buf_p) = preYYtext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		preYYleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the current line number.
 * 
 */
int preYYget_lineno  (void)
{
        
    return preYYlineno;
}

/** Get the input stream.
 * 
 */
FILE *preYYget_in  (void)
{
        return preYYin;
}

/** Get the output stream.
 * 
 */
FILE *preYYget_out  (void)
{
        return preYYout;
}

/** Get the length of the current token.
 * 
 */
yy_size_t preYYget_leng  (void)
{
        return preYYleng;
}

/** Get the current token.
 * 
 */

char *preYYget_text  (void)
{
        return preYYtext;
}

/** Set the current line number.
 * @param line_number
 * 
 */
void preYYset_lineno (int  line_number )
{
    
    preYYlineno = line_number;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param in_str A readable stream.
 * 
 * @see preYY_switch_to_buffer
 */
void preYYset_in (FILE *  in_str )
{
        preYYin = in_str ;
}

void preYYset_out (FILE *  out_str )
{
        preYYout = out_str ;
}

int preYYget_debug  (void)
{
        return preYY_flex_debug;
}

void preYYset_debug (int  bdebug )
{
        preYY_flex_debug = bdebug ;
}

static int yy_init_globals (void)
{
        /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from preYYlex_destroy(), so don't allocate here.
     */

    (yy_buffer_stack) = 0;
    (yy_buffer_stack_top) = 0;
    (yy_buffer_stack_max) = 0;
    (yy_c_buf_p) = (char *) 0;
    (yy_init) = 0;
    (yy_start) = 0;

    (yy_state_buf) = 0;
    (yy_state_ptr) = 0;
    (yy_full_match) = 0;
    (yy_lp) = 0;

/* Defined in main.c */
#ifdef YY_STDINIT
    preYYin = stdin;
    preYYout = stdout;
#else
    preYYin = (FILE *) 0;
    preYYout = (FILE *) 0;
#endif

    /* For future reference: Set errno on error, since we are called by
     * preYYlex_init()
     */
    return 0;
}

/* preYYlex_destroy is for both reentrant and non-reentrant scanners. */
int preYYlex_destroy  (void)
{
    
    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		preYY_delete_buffer(YY_CURRENT_BUFFER  );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		preYYpop_buffer_state();
	}

	/* Destroy the stack itself. */
	preYYfree((yy_buffer_stack) );
	(yy_buffer_stack) = NULL;

    preYYfree ( (yy_state_buf) );
    (yy_state_buf)  = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * preYYlex() is called, initialization will occur. */
    yy_init_globals( );

    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *preYYalloc (yy_size_t  size )
{
	return (void *) malloc( size );
}

void *preYYrealloc  (void * ptr, yy_size_t  size )
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void preYYfree (void * ptr )
{
	free( (char *) ptr );	/* see preYYrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 2334 "pre.l"



/*@ ----------------------------------------------------------------------------
 */

static int getNextChar(const QCString &expr,QCString *rest,uint &pos)
{
  //printf("getNextChar(%s,%s,%d)\n",expr.data(),rest ? rest->data() : 0,pos);
  if (pos<expr.length())
  {
    //printf("%c=expr()\n",expr.at(pos));
    return expr.at(pos++);
  }
  else if (rest && !rest->isEmpty())
  {
    int cc=rest->at(0);
    *rest=rest->right(rest->length()-1);
    //printf("%c=rest\n",cc);
    return cc;
  }
  else
  {
    int cc=yyinput();
    //printf("%c=yyinput()\n",cc);
    return cc;
  }
}
 
static int getCurrentChar(const QCString &expr,QCString *rest,uint pos)
{
  //printf("getCurrentChar(%s,%s,%d)\n",expr.data(),rest ? rest->data() : 0,pos);
  if (pos<expr.length())
  {
    //printf("%c=expr()\n",expr.at(pos));
    return expr.at(pos);
  }
  else if (rest && !rest->isEmpty())
  {
    int cc=rest->at(0);
    //printf("%c=rest\n",cc);
    return cc;
  }
  else
  {
    int cc=yyinput();
    returnCharToStream(cc);
    //unput((char)cc);
    //printf("%c=yyinput()\n",cc);
    return cc;
  }
}

static void unputChar(const QCString &expr,QCString *rest,uint &pos,char c)
{
  //printf("unputChar(%s,%s,%d,%c)\n",expr.data(),rest ? rest->data() : 0,pos,c);
  if (pos<expr.length())
  {
    pos++;
  }
  else if (rest)
  {
    //printf("Prepending to rest!\n");
    char cs[2];cs[0]=c;cs[1]='\0';
    rest->prepend(cs);
  }
  else
  {
    //unput(c);
    returnCharToStream(c);
  }
  //printf("result: unputChar(%s,%s,%d,%c)\n",expr.data(),rest ? rest->data() : 0,pos,c);
}

void addSearchDir(const char *dir)
{
  QFileInfo fi(dir);
  if (fi.isDir()) g_pathList->append(fi.absFilePath());
} 

void initPreprocessor()
{
  g_pathList = new QStrList;
  addSearchDir(".");
  g_expandedDict = new DefineDict(17);
}

void cleanUpPreprocessor()
{
  delete g_expandedDict; g_expandedDict=0;
  delete g_pathList; g_pathList=0;
}


void preprocessFile(const char *fileName,BufStr &input,BufStr &output)
{
  uint orgOffset=output.curPos();
  //printf("##########################\n%s\n####################\n",
  //    input.data());

  g_macroExpansion = Config_getBool("MACRO_EXPANSION");
  g_expandOnlyPredef = Config_getBool("EXPAND_ONLY_PREDEF");
  g_curlyCount=0;
  g_nospaces=FALSE;
  g_inputBuf=&input;
  g_inputBufPos=0;
  g_outputBuf=&output;
  g_includeStack.setAutoDelete(TRUE);
  g_includeStack.clear();
  g_expandedDict->setAutoDelete(FALSE);
  g_expandedDict->clear();
  g_condStack.clear();
  g_condStack.setAutoDelete(TRUE);
  
  static bool firstTime=TRUE;
  if (firstTime)
  {
    // add predefined macros
    char *defStr;
    QStrList &predefList = Config_getList("PREDEFINED");
    QStrListIterator sli(predefList);
    for (sli.toFirst();(defStr=sli.current());++sli)
    {
      QCString ds = defStr;
      int i_equals=ds.find('=');
      int i_obrace=ds.find('(');
      int i_cbrace=ds.find(')');
      bool nonRecursive = i_equals>0 && ds.at(i_equals-1)==':';

      if (i_obrace==0) continue; // no define name

      if (i_obrace<i_equals && i_cbrace<i_equals && 
	  i_obrace!=-1      && i_cbrace!=-1      && 
	  i_obrace<i_cbrace
	 ) // predefined function macro definition
      {
	//printf("predefined function macro '%s'\n",defStr);
	QRegExp reId("[a-z_A-Z][a-z_A-Z0-9]*"); // regexp matching an id
	QDict<int> argDict(17);
	argDict.setAutoDelete(TRUE);
	int i=i_obrace+1,p,l,count=0;
	// gather the formal arguments in a dictionary 
	while (i<i_cbrace && (p=reId.match(ds,i,&l)))
	{
	  argDict.insert(ds.mid(p,l),new int(count++));
	  i=p+l;
	}
	// strip definition part
	QCString tmp=ds.right(ds.length()-i_equals-1);
	QCString definition;
	i=0;
	// substitute all occurrences of formal arguments by their 
	// corresponding markers
	while ((p=reId.match(tmp,i,&l))!=-1)
	{
	  if (p>i) definition+=tmp.mid(i,p-i);
	  int *argIndex;
	  if ((argIndex=argDict[tmp.mid(p,l)])!=0)
	  {
	    QCString marker;
	    marker.sprintf(" @%d ",*argIndex);
	    definition+=marker;
	  }
	  else
	  {
	    definition+=tmp.mid(p,l);
	  }
	  i=p+l;
	}
	if (i<(int)tmp.length()) definition+=tmp.mid(i,tmp.length()-i);

	// add define definition to the dictionary of defines for this file
	QCString dname = ds.left(i_obrace);
	if (!dname.isEmpty())
	{
	  Define *def = new Define;
	  def->name         = dname;
	  def->definition   = definition; 
	  def->nargs        = count;
	  def->isPredefined = TRUE;
	  def->nonRecursive = nonRecursive;
	  def->fileDef      = g_yyFileDef;
	  def->fileName     = fileName;
	  g_fileDefineDict->insert(def->name,def);
	}

	//printf("#define `%s' `%s' #nargs=%d\n",
	//  def->name.data(),def->definition.data(),def->nargs);
      }
      else if ((i_obrace==-1 || i_obrace>i_equals) &&
	  (i_cbrace==-1 || i_cbrace>i_equals) &&
	  !ds.isEmpty() && (int)ds.length()>i_equals
	  ) // predefined non-function macro definition
      {
	//printf("predefined normal macro '%s'\n",defStr);
	Define *def = new Define;
	if (i_equals==-1) // simple define without argument
	{
	  def->name = ds;
	  def->definition = "1"; // substitute occurrences by 1 (true)
	}
	else // simple define with argument
	{
	  int ine=i_equals - (nonRecursive ? 1 : 0);
	  def->name = ds.left(ine);
	  def->definition = ds.right(ds.length()-i_equals-1);
	}
	if (!def->name.isEmpty())
	{
	  def->nargs = -1;
	  def->isPredefined = TRUE;
	  def->nonRecursive = nonRecursive;
	  def->fileDef      = g_yyFileDef;
	  def->fileName     = fileName;
	  g_fileDefineDict->insert(def->name,def);
	}
	else
	{
	  delete def;
	}

	//printf("#define `%s' `%s' #nargs=%d\n",
	//  def->name.data(),def->definition.data(),def->nargs);
      }
    }
    firstTime=FALSE;
  }
 
  g_yyLineNr = 1;
  g_level    = 0;
  g_ifcount  = 0;
  setFileName(fileName);
  g_inputFileDef = g_yyFileDef;

  BEGIN( Start );
  
  g_expectGuard = TRUE;
  g_lastGuardName.resize(0);
  g_guardExpr.resize(0);
  
  preYYlex();
  g_lexInit=TRUE;

  if (Debug::isFlagSet(Debug::Preprocessor))
  {
    char *orgPos=output.data()+orgOffset;
    char *newPos=output.data()+output.curPos();
    msg("Preprocessor output (size: %d bytes):\n",newPos-orgPos);
    int line=1;
    msg("---------\n00001 ");
    while (orgPos<newPos) 
    {
      putchar(*orgPos);
      if (*orgPos=='\n') printf("%05d ",++line);
      orgPos++;
    }
    msg("\n---------\n");
  }
}

void preFreeScanner()
{
#if defined(YY_FLEX_SUBMINOR_VERSION) 
  if (g_lexInit)
  {
    preYYlex_destroy();
  }
#endif
}

#if !defined(YY_FLEX_SUBMINOR_VERSION) 
extern "C" { // some bogus code to keep the compiler happy
//  int  preYYwrap() { return 1 ; }
  void preYYdummy() { yy_flex_realloc(0,0); } 
}
#endif


