
#line 3 "<stdout>"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define yy_create_buffer preYY_create_buffer
#define yy_delete_buffer preYY_delete_buffer
#define yy_flex_debug preYY_flex_debug
#define yy_init_buffer preYY_init_buffer
#define yy_flush_buffer preYY_flush_buffer
#define yy_load_buffer_state preYY_load_buffer_state
#define yy_switch_to_buffer preYY_switch_to_buffer
#define yyin preYYin
#define yyleng preYYleng
#define yylex preYYlex
#define yylineno preYYlineno
#define yyout preYYout
#define yyrestart preYYrestart
#define yytext preYYtext
#define yywrap preYYwrap
#define yyalloc preYYalloc
#define yyrealloc preYYrealloc
#define yyfree preYYfree

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 35
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;
#endif /* ! C99 */

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! FLEXINT_H */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE preYYrestart(preYYin  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#define YY_BUF_SIZE 262144
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

extern yy_size_t preYYleng;

extern FILE *preYYin, *preYYout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    #define YY_LESS_LINENO(n)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up preYYtext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up preYYtext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	yy_size_t yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via preYYrestart()), so that the user can continue scanning by
	 * just pointing preYYin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* Stack of input buffers. */
static size_t yy_buffer_stack_top = 0; /**< index of top of stack. */
static size_t yy_buffer_stack_max = 0; /**< capacity of stack. */
static YY_BUFFER_STATE * yy_buffer_stack = 0; /**< Stack as an array. */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* yy_hold_char holds the character lost when preYYtext is formed. */
static char yy_hold_char;
static yy_size_t yy_n_chars;		/* number of characters read into yy_ch_buf */
yy_size_t preYYleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 0;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow preYYwrap()'s to do buffer switches
 * instead of setting up a fresh preYYin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void preYYrestart (FILE *input_file  );
void preYY_switch_to_buffer (YY_BUFFER_STATE new_buffer  );
YY_BUFFER_STATE preYY_create_buffer (FILE *file,int size  );
void preYY_delete_buffer (YY_BUFFER_STATE b  );
void preYY_flush_buffer (YY_BUFFER_STATE b  );
void preYYpush_buffer_state (YY_BUFFER_STATE new_buffer  );
void preYYpop_buffer_state (void );

static void preYYensure_buffer_stack (void );
static void preYY_load_buffer_state (void );
static void preYY_init_buffer (YY_BUFFER_STATE b,FILE *file  );

#define YY_FLUSH_BUFFER preYY_flush_buffer(YY_CURRENT_BUFFER )

YY_BUFFER_STATE preYY_scan_buffer (char *base,yy_size_t size  );
YY_BUFFER_STATE preYY_scan_string (yyconst char *yy_str  );
YY_BUFFER_STATE preYY_scan_bytes (yyconst char *bytes,yy_size_t len  );

void *preYYalloc (yy_size_t  );
void *preYYrealloc (void *,yy_size_t  );
void preYYfree (void *  );

#define yy_new_buffer preYY_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        preYYensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            preYY_create_buffer(preYYin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        preYYensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            preYY_create_buffer(preYYin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define preYYwrap(n) 1
#define YY_SKIP_YYWRAP

typedef unsigned char YY_CHAR;

FILE *preYYin = (FILE *) 0, *preYYout = (FILE *) 0;

typedef int yy_state_type;

extern int preYYlineno;

int preYYlineno = 1;

extern char *preYYtext;
#define yytext_ptr preYYtext

static yy_state_type yy_get_previous_state (void );
static yy_state_type yy_try_NUL_trans (yy_state_type current_state  );
static int yy_get_next_buffer (void );
static void yy_fatal_error (yyconst char msg[]  );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up preYYtext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	preYYleng = (size_t) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;

#define YY_NUM_RULES 169
#define YY_END_OF_BUFFER 170
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_acclist[1254] =
    {   0,
      151,  151,  170,  168,  169,    1,  168,  169,  167,  169,
        3,  168,  169,  168,  169,  168,  169,    2,  168,  169,
        6,  168,  169,    1,    6,  168,  169,    6,  168,  169,
        6,  167,  169,    3,    6,  168,  169,    5,  168,  169,
        6,  168,  169,    6,  168,  169,    6,  168,  169,    2,
        6,  168,  169,   54,  168,  169,    1,   54,  168,  169,
       49,  167,  169,    3,   54,  168,  169,   54,  168,  169,
       54,  168,  169,   51,   54,  168,  169,   51,   54,  168,
      169,   51,   54,  168,  169,   51,   54,  168,  169,   51,
       54,  168,  169,   51,   54,  168,  169,   51,   54,  168,

      169,    2,   54,  168,  169,   78,  168,  169,    1,   78,
      168,  169,   76,  167,  169,    3,   78,  168,  169,   78,
      168,  169,   78,  168,  169,   77,   78,  168,  169,   77,
       78,  168,  169,   77,   78,  168,  169,    2,   78,  168,
      169,   79,   82,  168,  169,    1,   79,   82,  168,  169,
       87,  167,  169,    3,   79,   82,  168,  169,   81,   82,
      168,  169,   82,  168,  169,   82,  168,  169,   79,   82,
      168,  169,    2,   79,   82,  168,  169,   88,   91,  168,
      169,    1,   88,   91,  168,  169,    3,   88,   91,  168,
      169,   90,   91,  168,  169,   88,   91,  168,  169,   88,

       91,  168,  169,   91,  168,  169,    2,   88,   91,  168,
      169,   23,  168,  169,    1,   23,  168,  169,   24,  167,
      169,    3,   23,  168,  169,   16,   23,  168,  169,   23,
      168,  169,   23,  168,  169,   23,  168,  169,   21,   23,
      168,  169,16404,   23,  168,  169,   21,   23,  168,  169,
    16404,   11,   23,  168,  169,   12,   23,  168,  169,    2,
       23,  168,  169,   17,  168,  169,    1,   17,  168,  169,
       19,  168,  169,   17,  168,  169,   17,  168,  169,  168,
      169,    2,   17,  168,  169,  168,  169,    1,  168,  169,
        3,  168,  169,  168,  169,  168,  169,    2,  168,  169,

       93,  168,  169,   97,  168,  169,    1,   97,  168,  169,
       95,  167,  169,    3,   97,  168,  169,   97,  168,  169,
       97,  168,  169,   97,  168,  169,    2,   97,  168,  169,
     8293,  168,  169,16482,16484,16485,  168,  169,  104,  168,
      169,  105,  168,  169,  103,  168,  169,  168,  169,  107,
      168,  169,  168,  169,  163,  168,  169,    1,  163,  168,
      169,  151,  163,  168,  169,  150,  167,  169,    3,  163,
      168,  169,  154,  163,  168,  169,  146,  163,  168,  169,
      155,  163,  168,  169,  163,  168,  169,  163,  168,  169,
      153,  163,  168,  169,  147,  163,  168,  169,  163,  168,

      169,    2,  163,  168,  169,   71,  168,  169,    1,   71,
      168,  169,   70,  167,  169,    3,   71,  168,  169,   71,
      168,  169,   71,  168,  169,    2,   71,  168,  169,   69,
       71,  168,  169,    1,   69,   71,  168,  169,   69,   71,
      168,  169,   69,   70,  167,  169,    3,   69,   71,  168,
      169,   68,   71,  168,  169,   69,   71,  168,  169,   69,
       71,  168,  169,    2,   69,   71,  168,  169,  123,  125,
      168,  169,    1,  125,  168,  169,  124,  167,  169,    3,
      123,  125,  168,  169,  125,  168,  169,  125,  168,  169,
      123,  125,  168,  169,  125,  168,  169,    2,  123,  125,

      168,  169,  126,  148,  168,  169,    1,  126,  148,  168,
      169,  128,  167,  169,    3,  126,  148,  168,  169,  148,
      168,  169,  126,  148,  168,  169,  126,  148,  168,  169,
      147,  148,  168,  169,    2,  126,  148,  168,  169,  125,
      168,  169,  125,  168,  169,  125,  168,  169,  136,  140,
      141,  168,  169,    1,  136,  141,  168,  169,  137,  167,
      169,    3,  136,  140,  141,  168,  169,  140,  141,  168,
      169,  136,  140,  141,  168,  169,  141,  168,  169,    2,
      136,  140,  141,  168,  169,  133,  135,  168,  169,    1,
      135,  168,  169,  134,  167,  169,    3,  133,  135,  168,

      169,  135,  168,  169,  133,  135,  168,  169,  133,  135,
      168,  169,    2,  133,  135,  168,  169,  144,  145,  168,
      169,    1,  145,  168,  169,    3,  144,  145,  168,  169,
      144,  145,  168,  169,  144,  145,  168,  169,    2,  144,
      145,  168,  169,   60,  168,  169,    1,   60,  168,  169,
       61,  167,  169,    3,   60,  168,  169,   60,  168,  169,
       60,  168,  169,   59,   60,  168,  169,   60,  168,  169,
       59,   60,  168,  169,    2,   60,  168,  169,   67,  168,
      169,    1,   67,  168,  169,   65,  167,  169,    3,   67,
      168,  169,   67,  168,  169,   67,  168,  169,   63,   67,

      168,  169,   67,  168,  169,    2,   67,  168,  169,   66,
       67,  168,  169,   64,   67,  168,  169,  161,  168,  169,
        1,  161,  168,  169,    3,  161,  168,  169,  158,  161,
      168,  169,  161,  168,  169,  161,  168,  169,  161,  168,
      169,    2,  161,  168,  169,  162,  168,  169,    1,  162,
      168,  169,    3,  162,  168,  169,  160,  162,  168,  169,
      162,  168,  169,  162,  168,  169,  162,  168,  169,    2,
      162,  168,  169,   55,  168,  169,   53,  168,  169,    1,
       53,  168,  169,    3,   53,  168,  169,   53,  168,  169,
       53,  168,  169,   53,  168,  169,    2,   53,  168,  169,

       31,  168,  169,    1,   31,  168,  169,   29,  167,  169,
        3,   31,  168,  169,   28,   31,  168,  169,   31,  168,
      169,   25,   31,  168,  169,   26,   31,  168,  169,   31,
      168,  169,   31,  168,  169,   30,   31,  168,  169,    2,
       31,  168,  169,   35,  168,  169,    1,   35,  168,  169,
        3,   35,  168,  169,   32,   35,  168,  169,   35,  168,
      169,   35,  168,  169,   35,  168,  169,    2,   35,  168,
      169,  119,  168,  169,    1,  119,  168,  169,    3,  119,
      168,  169,  119,  168,  169,  119,  168,  169,  117,  119,
      168,  169,    2,  119,  168,  169,  165,  166,    6,    6,

        5,    6,   51,   51,   51,   51,   51,   51,   51,   51,
       51,   51,   86,  165,   84,  166,   77,   77,   77,   77,
       79,   79,   88,   85,   88,  165,   83,   88,  166,   88,
       89, 8212,   21,16404,   22,   21,16404,   17,   17,  165,
       17,  166,   17,   18,   94,  165,  166,   92,   93,   95,
      165,  166,   96, 8293, 8292, 8290, 8293,16482,16484,16485,
      105,  104,  105,  103,  107,  107,  102,  151,  152,  108,
      165,  109,  166,  147,  149,   69,   69,   68,  123,  110,
      112,  165,  111,  166,  123,  126,  127,  126,  166,  126,
      122,  122,  165,  136,  140,  136,  140,  138,  140,  165,

      139,  140,  166,  136,  140,  133,  130,  132,  165,  131,
      133,  166,  133,  144,  142,  144,  165,  143,  144,  166,
      144,   59,   56,   59,   63,   62,   64,  157,  165,  156,
      166,  159,   55,   52,   33,  165,   33,  166,   34,  117,
      165,  166,    4,16391,   51,   51,   51,   51,   51,   43,
       51,   51,   51,   51,   51,   51,   86,   86,  165,   84,
       84,  166,   77,   77,   77,   72,   77,   77,   80,    4,
       79,   85,   88,   85,   85,   88,  165,   83,   88,   83,
       83,   88,  166,    4,   88,   15,   15,   21,16404,   17,
      165,   17,  166,    4,   17,  165,  166,    4,    4,   94,

      165,  166,    4,  106,  152,  108,  108,  165,  109,  109,
      166,  111,  166,    4,  123,  126,  166,    4,  126,  121,
      140,  165,  140,  166,    4,  136,  140,    4,  140,  129,
      133,  166,    4,  133,  144,  165,  144,  166,    4,  144,
       59,  156,  166,   27,  164,16391,    9, 8199,   51,   51,
       51,   51,   51,   51,   51,   51,   51,   51,   51,   86,
      164,   77,   73,   77,   77,   77,   80,   85,   88,  164,
       14,   13,   14,   21,16404,   17,  164,  164,  164,   99,
      107,  111,  113,  140,  164,  144,  164,   59,   27, 8199,
        9,   51,   51,   44,   47,   45,   45,   51,   51,   51,

       51,   51,   51,   51,   51,   74,   77,   75,   77,   77,
       13,   21,16404,  115,   59,    8,    9,   51,   51,   48,
       40,   39,   51,   51,   51,   51,   46,   21,16404,  114,
      116,  118,   59,    9,   38,   42,   41,16420,   37,   10,
       59,    9, 8228,   58,   57,    9, 8228,  120,    9,    9,
       50,    9,    9
    } ;

static yyconst flex_int16_t yy_accept[1173] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    2,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    4,    6,    9,
       11,   14,   16,   18,   21,   24,   28,   31,   34,   38,
       41,   44,   47,   50,   54,   57,   61,   64,   68,   71,
       74,   78,   82,   86,   90,   94,   98,  102,  106,  109,

      113,  116,  120,  123,  126,  130,  134,  138,  142,  146,
      151,  154,  159,  163,  166,  169,  173,  178,  182,  187,
      192,  196,  200,  204,  207,  212,  215,  219,  222,  226,
      230,  233,  236,  239,  244,  247,  252,  256,  260,  264,
      267,  271,  274,  277,  280,  282,  286,  288,  291,  294,
      296,  298,  301,  304,  307,  311,  314,  318,  321,  324,
      327,  331,  337,  339,  342,  345,  348,  350,  353,  355,
      358,  362,  366,  369,  373,  377,  381,  385,  388,  391,
      395,  399,  402,  406,  409,  413,  416,  420,  423,  426,
      430,  434,  439,  443,  447,  452,  456,  460,  464,  469,

      473,  477,  480,  485,  488,  491,  495,  498,  503,  507,
      512,  515,  520,  523,  527,  531,  535,  540,  543,  546,
      549,  554,  559,  562,  568,  572,  577,  580,  586,  590,
      594,  597,  602,  605,  609,  613,  618,  622,  626,  631,
      635,  639,  644,  647,  651,  654,  658,  661,  664,  668,
      671,  675,  679,  682,  686,  689,  693,  696,  699,  703,
      706,  710,  714,  718,  721,  725,  729,  733,  736,  739,
      742,  746,  749,  753,  757,  761,  764,  767,  770,  774,
      777,  780,  784,  788,  791,  794,  797,  801,  804,  808,
      811,  815,  819,  822,  826,  830,  833,  836,  840,  844,

      847,  851,  855,  859,  862,  865,  868,  872,  875,  879,
      883,  886,  889,  893,  897,  898,  899,  899,  900,  901,
      902,  903,  903,  903,  903,  904,  905,  906,  907,  908,
      909,  910,  911,  912,  913,  915,  917,  918,  919,  920,
      921,  922,  922,  922,  923,  924,  927,  930,  931,  932,
      932,  932,  932,  933,  935,  936,  936,  938,  939,  941,
      943,  944,  945,  945,  946,  947,  948,  948,  948,  949,
      950,  950,  951,  952,  953,  953,  954,  954,  955,  956,
      957,  961,  961,  961,  962,  963,  964,  965,  965,  966,
      966,  967,  968,  969,  969,  970,  972,  974,  975,  976,

      976,  977,  978,  979,  980,  981,  983,  985,  986,  986,
      986,  986,  986,  986,  986,  986,  986,  986,  986,  987,
      988,  990,  991,  992,  994,  994,  994,  996,  997,  998,
     1001, 1004, 1006, 1006, 1007, 1008, 1010, 1013, 1014, 1015,
     1018, 1021, 1022, 1023, 1024, 1024, 1025, 1026, 1027, 1028,
     1030, 1032, 1033, 1034, 1035, 1035, 1035, 1035, 1037, 1039,
     1040, 1041, 1042, 1043, 1044, 1044, 1044, 1045, 1046, 1047,
     1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057,
     1058, 1060, 1061, 1063, 1064, 1065, 1066, 1067, 1068, 1069,
     1069, 1070, 1070, 1070, 1072, 1074, 1075, 1078, 1080, 1081,

     1084, 1086, 1087, 1087, 1088, 1088, 1088, 1090, 1092, 1094,
     1096, 1097, 1098, 1099, 1101, 1102, 1103, 1104, 1104, 1104,
     1105, 1105, 1106, 1107, 1109, 1110, 1112, 1114, 1116, 1116,
     1116, 1116, 1116, 1116, 1116, 1116, 1116, 1116, 1116, 1116,
     1116, 1116, 1116, 1116, 1116, 1116, 1116, 1118, 1120, 1120,
     1121, 1123, 1125, 1128, 1130, 1130, 1130, 1131, 1133, 1135,
     1137, 1139, 1141, 1142, 1144, 1144, 1145, 1145, 1145, 1146,
     1146, 1147, 1147, 1148, 1148, 1149, 1150, 1151, 1152, 1153,
     1154, 1155, 1156, 1157, 1158, 1159, 1160, 1162, 1163, 1165,
     1166, 1167, 1167, 1168, 1168, 1171, 1172, 1174, 1174, 1174,

     1176, 1178, 1179, 1180, 1181, 1182, 1183, 1183, 1183, 1184,
     1184, 1184, 1184, 1184, 1184, 1184, 1184, 1184, 1184, 1184,
     1184, 1184, 1184, 1184, 1184, 1184, 1184, 1186, 1188, 1189,
     1189, 1190, 1190, 1190, 1190, 1190, 1190, 1191, 1191, 1192,
     1192, 1193, 1194, 1196, 1197, 1198, 1199, 1200, 1201, 1202,
     1203, 1204, 1205, 1206, 1207, 1207, 1208, 1210, 1211, 1211,
     1211, 1212, 1212, 1212, 1214, 1214, 1214, 1214, 1214, 1214,
     1214, 1214, 1214, 1214, 1215, 1215, 1215, 1215, 1215, 1215,
     1215, 1215, 1215, 1215, 1215, 1215, 1215, 1215, 1215, 1215,
     1216, 1216, 1216, 1216, 1216, 1216, 1217, 1217, 1218, 1218,

     1219, 1220, 1220, 1220, 1221, 1222, 1223, 1224, 1225, 1226,
     1227, 1228, 1228, 1228, 1230, 1231, 1231, 1231, 1231, 1231,
     1231, 1231, 1232, 1233, 1233, 1233, 1233, 1233, 1233, 1233,
     1233, 1233, 1233, 1233, 1233, 1233, 1233, 1233, 1233, 1233,
     1234, 1234, 1234, 1234, 1235, 1235, 1236, 1236, 1237, 1238,
     1239, 1240, 1240, 1240, 1240, 1240, 1240, 1241, 1241, 1241,
     1241, 1241, 1241, 1241, 1241, 1241, 1241, 1241, 1241, 1241,
     1241, 1241, 1241, 1241, 1241, 1241, 1241, 1241, 1242, 1242,
     1242, 1242, 1243, 1243, 1244, 1244, 1244, 1244, 1244, 1244,
     1244, 1244, 1244, 1244, 1244, 1244, 1244, 1244, 1244, 1244,

     1244, 1244, 1244, 1244, 1244, 1245, 1246, 1246, 1246, 1246,
     1247, 1247, 1248, 1248, 1248, 1248, 1248, 1248, 1248, 1248,
     1249, 1249, 1249, 1249, 1249, 1249, 1249, 1249, 1249, 1249,
     1249, 1250, 1250, 1250, 1250, 1250, 1250, 1250, 1250, 1250,
     1250, 1250, 1250, 1250, 1250, 1250, 1250, 1251, 1251, 1252,
     1252, 1252, 1252, 1252, 1252, 1252, 1252, 1252, 1252, 1253,
     1253, 1253, 1253, 1253, 1253, 1253, 1253, 1253, 1254, 1254,
     1254, 1254, 1254, 1254, 1254, 1254, 1254, 1254, 1254, 1254,
     1254, 1254, 1254, 1254, 1254, 1254, 1254, 1254, 1254, 1254,
     1254, 1254, 1254, 1254, 1254, 1254, 1254, 1254, 1254, 1254,

     1254, 1254, 1254, 1254, 1254, 1254, 1254, 1254, 1254, 1254,
     1254, 1254, 1254, 1254, 1254, 1254, 1254, 1254, 1254, 1254,
     1254, 1254, 1254, 1254, 1254, 1254, 1254, 1254, 1254, 1254,
     1254, 1254, 1254, 1254, 1254, 1254, 1254, 1254, 1254, 1254,
     1254, 1254, 1254, 1254, 1254, 1254, 1254, 1254, 1254, 1254,
     1254, 1254, 1254, 1254, 1254, 1254, 1254, 1254, 1254, 1254,
     1254, 1254, 1254, 1254, 1254, 1254, 1254, 1254, 1254, 1254,
     1254, 1254, 1254, 1254, 1254, 1254, 1254, 1254, 1254, 1254,
     1254, 1254, 1254, 1254, 1254, 1254, 1254, 1254, 1254, 1254,
     1254, 1254, 1254, 1254, 1254, 1254, 1254, 1254, 1254, 1254,

     1254, 1254, 1254, 1254, 1254, 1254, 1254, 1254, 1254, 1254,
     1254, 1254, 1254, 1254, 1254, 1254, 1254, 1254, 1254, 1254,
     1254, 1254, 1254, 1254, 1254, 1254, 1254, 1254, 1254, 1254,
     1254, 1254, 1254, 1254, 1254, 1254, 1254, 1254, 1254, 1254,
     1254, 1254, 1254, 1254, 1254, 1254, 1254, 1254, 1254, 1254,
     1254, 1254, 1254, 1254, 1254, 1254, 1254, 1254, 1254, 1254,
     1254, 1254, 1254, 1254, 1254, 1254, 1254, 1254, 1254, 1254,
     1254, 1254, 1254, 1254, 1254, 1254, 1254, 1254, 1254, 1254,
     1254, 1254, 1254, 1254, 1254, 1254, 1254, 1254, 1254, 1254,
     1254, 1254, 1254, 1254, 1254, 1254, 1254, 1254, 1254, 1254,

     1254, 1254, 1254, 1254, 1254, 1254, 1254, 1254, 1254, 1254,
     1254, 1254, 1254, 1254, 1254, 1254, 1254, 1254, 1254, 1254,
     1254, 1254, 1254, 1254, 1254, 1254, 1254, 1254, 1254, 1254,
     1254, 1254, 1254, 1254, 1254, 1254, 1254, 1254, 1254, 1254,
     1254, 1254, 1254, 1254, 1254, 1254, 1254, 1254, 1254, 1254,
     1254, 1254, 1254, 1254, 1254, 1254, 1254, 1254, 1254, 1254,
     1254, 1254, 1254, 1254, 1254, 1254, 1254, 1254, 1254, 1254,
     1254, 1254
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    2,    1,    1,    3,    4,
        1,    1,    5,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    3,    6,    7,    8,    9,    1,    1,   10,   11,
       12,   13,    1,   14,   15,   16,   17,   18,   19,   18,
       18,   18,   18,   18,   18,   20,   20,   21,    1,   22,
       23,   24,   25,   26,   27,   27,   28,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       29,   30,   31,    1,   27,    1,   32,   33,   34,   35,

       36,   37,   38,   39,   40,   41,   42,   43,   44,   45,
       46,   47,   41,   48,   49,   50,   51,   52,   41,   53,
       54,   41,   55,    1,   56,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst flex_int32_t yy_meta[58] =
    {   0,
        1,    2,    3,    4,    5,    6,    7,    1,    1,    8,
        9,    6,   10,    1,   11,   12,   13,   14,   14,   14,
        1,   15,    6,    6,    1,   16,   17,   17,    1,   18,
        1,   17,   17,   17,   17,   17,   17,   17,   17,   17,
       17,   17,   17,   17,   17,   17,   17,   17,   17,   17,
       17,   17,   17,   17,    1,    1,    1
    } ;

static yyconst flex_int16_t yy_base[1283] =
    {   0,
        0,    4,    9,   65,  122,    0,  179,    0,   26,   37,
      235,  239,  296,    0,  352,  356,  363,  387,  444,    0,
       54,  500,  531,    0,  585,    0,  642,    0,  504,  698,
      703,  707,  712,  717,  773,  829,  886,    0,  942,  998,
      731,  766,  780,  804,  810,  948, 1055,    0, 1112,    0,
     1158,    0,  959,  976,  952, 1211, 1242,    0, 1215, 1295,
     1351, 1407, 1302, 1309, 1464,    0, 2845, 5439, 5439, 5439,
     5439,    2, 2818, 5439, 5439, 5439,   37, 5439, 5439, 5439,
        3, 2817,   69, 5439, 5439, 5439, 5439, 5439,    5, 2814,
        0, 2787, 2784,    3,   41, 2758, 2752, 5439, 5439, 5439,

     5439, 5439,   10, 2767,    0,    7, 2753, 5439,    0,    0,
     5439,    0, 5439, 2759,   36, 2762,    0,    0,    0,    0,
     5439,   64, 2761,    0,    0, 5439, 5439, 5439, 5439, 5439,
     2748,   78, 2751,   95,   33,  507, 5439, 5439, 5439,    0,
        0, 5439,   88, 2750,    0,    0,    0,   95,   96,   97,
      238,  231,   52, 2763, 2758, 5439, 2756,  244,  243,   70,
     2754,  247,    0, 2750, 2748, 2747, 2724,  250, 2730, 5439,
     5439,  104, 5439, 5439, 5439, 2717, 5439,   96, 2694, 5439,
        0,  111, 5439, 5439, 5439, 5439, 5439,  254, 2681, 5439,
     5439, 5439,  246, 5439, 5439, 5439,  257, 2680, 5439,    0,

     5439, 5439,    0, 2682,  259, 2665, 1496,    0,    0,    0,
     5439,    0, 2671,  262, 2661,    0,    0, 2664,  265,   81,
      271,    0, 5439,  278,  268,  373,  250,  362,    0, 5439,
     5439,    0, 2662,  270, 2653,    0,    0, 5439,    0,  276,
     2647,    0, 5439, 5439, 5439, 5439,  277, 2641,    0,  367,
     2623, 5439, 5439, 5439, 5439, 5439,  349, 2628,    0, 2647,
     5439, 5439,    0, 5439, 5439, 5439, 5439,  361, 2620,    0,
     5439, 5439, 5439, 5439, 5439,  380, 2619,    0, 5439,    0,
     5439, 5439, 5439,  382, 2610,  379, 5439, 5439, 5439, 5439,
     5439, 5439, 2604, 5439, 5439,  383, 2606, 5439, 5439, 5439,

     5439, 5439, 5439,  388, 2601,    0, 5439, 5439, 5439, 5439,
      389, 2600,    0, 5439, 2610, 2605,    0, 5439,  400, 5439,
      404,  407,  405,  504,    0, 2581, 2575,  336, 2563,  813,
     2550, 2561, 2559, 2544, 2565, 2547,    0,  381, 2527,  833,
        0, 2546,  407, 1544,    0,  506,  412, 1563, 5439, 2545,
      516,  430, 5439,  534, 5439, 2536,  776,    0, 2522, 2513,
     1582, 5439,  496, 5439,  520,  723, 1601,  537, 5439,  538,
     2525, 5439,  538,  539, 1622, 5439, 2522,  543, 5439, 5439,
      735, 2517,  701, 2517, 2515, 2514, 2506, 2492,  715, 2490,
      738, 5439,  435, 2496, 2495,  737,  745,    0, 5439, 2493,

     5439,  547, 5439,    0, 5439,  423, 2466, 1641, 1632, 2428,
     2427, 2425, 2412, 2424, 2419, 2400, 2412, 2403,    0, 5439,
     2422, 1680, 5439, 2424, 2391,  764,  708,    0,    0, 2420,
     2410, 1703, 2380,    0,  741, 2411, 2406, 1722,    0, 2405,
     2399, 1741,    0, 5439, 2410, 2372,    0, 5439,    0, 2394,
     2389, 5439,    0, 5439, 2391, 2372,  534, 2367, 2354, 5439,
        0, 2345, 5439, 5439,  715, 2347,  797, 2308, 2309, 2306,
     2297, 2287, 5439, 2282, 2279, 2260, 2262, 2259, 2256,    0,
     2274,    0,    0, 2253, 2247, 2230, 5439, 2222, 2222, 2245,
     5439, 2241,  748,    0,  407,    0,  746,  815,    0,  821,

        0, 5439, 2231, 2228,  822,  859,  983, 2220,    0,    0,
      787,  765,  836, 5439,  821, 2227, 2217,  868,  836, 5439,
     2203, 2201, 5439, 2186, 5439, 5439, 2183,    0, 2146, 2134,
      942, 2129, 2146, 2134, 2100, 2113, 2099,  830, 2086, 2088,
     2077, 2070, 2074, 2079, 2067, 2069,    0,    0, 2072, 5439,
     2089,    0,  867,    0, 2059,  871, 5439,    0,    0, 2082,
        0,    0, 2055, 5439, 2074, 5439, 2072,  994, 5439, 2069,
     1168,  987, 1243, 1246, 5439, 2044, 2032,  874, 1765, 2039,
     2038, 2028, 2012, 2003, 2008, 2014,    0, 1011,  810, 2013,
     2011, 2037, 5439, 1008,  846, 5439, 5439, 1011, 1032, 1254,

        0,  951, 2032, 5439, 5439, 1998, 1978, 1962, 5439, 1960,
     1949, 1953, 1955, 1938, 1929, 1933, 1933,  878, 1933, 1907,
     1913, 1899, 1898, 1910, 1890, 1190,    0,    0, 1883, 1916,
     5439, 1021,  845, 1250, 1319,  945, 1034, 1325, 1333, 1339,
     1890, 1888, 5439, 5439,  967, 1886, 1822, 1038, 1883, 1869,
     1881, 1875, 1895, 5439,  992, 1860,    0, 1041, 1873, 1752,
     5439, 1751, 1171, 1346, 1724, 1174, 1716, 1721, 1709, 1708,
     1716, 1697, 1366, 1378, 1692, 1690, 1682, 1686, 1685, 1692,
     1674, 1671, 1665, 1660, 1676, 1675, 1656, 1665, 1652, 1658,
     1678, 1677, 1381, 1392, 1047, 5439, 1395, 1402, 1524, 1643,

     1674, 1178, 1637, 5439, 1042, 5439, 1211, 1418, 1637, 1667,
     1665, 1620, 1423, 1877, 1426, 1609, 1601, 1605, 1604, 1616,
     1595, 1434, 5439, 1438, 1591, 1590, 1585, 1587, 1584, 1569,
     1567, 1565, 1546, 1547, 1539, 1532, 1539, 1523, 1527, 1527,
     1560, 1617, 1638, 1657, 1695, 1555, 1224, 1228, 5439, 1441,
     5439, 1180, 1361, 1448, 1882, 1525, 5439, 1507, 1505, 1504,
     1499, 1475, 1481, 1488, 1417, 1400, 1381, 1368, 1380, 1361,
     1374, 1360, 1365, 1333, 1327, 1332, 1301, 1241, 1887, 1891,
     1897, 1901, 1906,    0, 1296, 1451, 1910, 1328, 1290, 1276,
     1263, 1261, 1268, 1249,    0, 1219, 1223, 1217, 1210, 1184,

     1143, 1009, 1016,  989, 1307, 5439, 1926, 1936, 1930, 1950,
     1955,    0,  991, 1579, 1959, 1970,  966,  967,  954, 5439,
      942,  940,  933,  931,  917,  895,  813, 1975, 1985, 1979,
     1990, 1998,  723, 1598, 2013, 2004,  698,  702,  509,  474,
      462,  474,  385, 2023, 2034, 2028, 2053, 2058, 5439, 1678,
     2062, 2038,  301,  248,  215, 2082, 2093, 2067, 2097, 2106,
     1718, 2121, 2087,   54, 2126, 2141, 2130, 2136, 2151, 1737,
     2160, 2155, 2165, 2190, 2018, 2194, 2170, 2179, 2219, 2184,
     2224, 2229, 2204, 2239, 2249, 2209, 2258, 2268, 2213, 2277,
     2282, 2243, 2291, 2296, 2262, 2305, 2308, 2273, 2321, 2331,

     2317, 2336, 2341, 2326, 2350, 2353, 2362, 2365, 2380, 2370,
     2389, 2394, 2374, 2399, 2408, 2385, 2417, 2427, 2438, 2441,
     2450, 2455, 2461, 2464, 2473, 2476, 2481, 2486, 2491, 2496,
     2508, 2511, 2520, 2529, 2534, 2539, 2544, 2549, 2554, 2563,
     2566, 2569, 2578, 2582, 2585, 2597, 2600, 2603, 2612, 2616,
     2625, 2634, 2638, 2643, 2652, 2657, 2666, 2660, 2671, 2680,
     2689, 2692, 2697, 2706, 2709, 2719, 2713, 2728, 2738, 2724,
     2743, 2752, 2733, 2761, 2766, 2777, 2780, 2791, 2796, 2800,
     2805, 2810, 2814, 2819, 2824, 2830, 2833, 2844, 2850, 2859,
     2853, 2864, 2873, 2868, 2878, 2887, 2882, 2892, 2902, 2897,

     2907, 2922, 2912, 2927, 2936, 2916, 2945, 2955, 2931, 2950,
     2965, 2941, 2970, 2990, 2960, 2979, 2995, 2975, 3000, 3014,
     2984, 3023, 3033, 3004, 3038, 3049, 3009, 3062, 3067, 3028,
     3076, 3086, 3043, 3081, 3096, 3058, 3091, 3105, 3072, 3114,
     3125, 3130, 3134, 3139, 3144, 3150, 3159, 3153, 3164, 3179,
     3168, 3184, 3193, 3173, 3198, 3208, 3188, 3213, 3222, 3202,
     3227, 3242, 3217, 3247, 3257, 3232, 3262, 3271, 3236, 3281,
     3291, 3251, 3296, 3306, 3266,   65, 3311, 3276, 3325, 3285,
     3330, 3300, 3340, 3320, 3345, 3354, 3360, 3365, 3369, 3373,
     3378, 3383, 3386,    5, 3389, 3393, 3398, 3401, 3407, 3413,

     3418, 3422, 3426, 3431, 3442, 3446, 3454, 3460, 3466, 3471,
     3475, 3479, 3484, 3487, 3490, 3495, 3499, 3502, 3507, 3513,
     3519, 3524, 3528, 3532, 3543, 3548, 3555, 3560, 3566, 3572,
     3577, 3581, 3585, 3588, 3591, 3596, 3601, 3604, 3608, 3613,
     3619, 3625, 3630, 3634, 3644, 3649, 3657, 3661, 3666, 3672,
     3678, 3683, 3687, 3690, 3693, 3697, 3702, 3705, 3710, 3714,
     3719, 3725, 3731, 3736, 3746, 3750, 3758, 3763, 3767, 3772,
     5439, 3827, 3845, 3863, 3881, 3899, 3917, 3935, 3953, 3971,
     3989, 4007, 4025, 4043, 4061, 4079, 4097, 4115, 4133, 4151,
       18,  793, 4169, 4187, 4205, 4222, 4240, 4256, 4273, 4290,

     4308, 4324, 4341, 4356, 4372, 1170, 4389, 4407, 4424, 4442,
     4459, 4476, 4493, 4511, 1246, 1331, 1361, 4529, 1373, 4547,
     4565, 4573, 4585, 4600, 1375, 4618, 4636, 1432, 4654, 4672,
     4689, 4707, 4724, 4742, 4760, 4776, 4793, 4810, 4826, 4843,
     4858, 4874, 1444, 4891, 4909, 4926, 4944, 4961, 4978, 4995,
     5013, 1519, 1520, 1524, 1529, 5031, 5048, 5056, 5073, 5091,
     1543, 5109, 5127, 1581, 5145, 5162, 5180, 5198, 5216, 5234,
     5252, 5267, 5284, 5301, 5319, 5336, 5353, 5371, 5388, 5403,
     1600, 5420
    } ;

static yyconst flex_int16_t yy_def[1283] =
    {   0,
     1172, 1172, 1172, 1173, 1171,    5, 1171,    7, 1174, 1174,
     1175, 1175, 1171,   13, 1176, 1176, 1177, 1177, 1171,   19,
     1178, 1178,   19,   23, 1171,   25, 1171,   27, 1179, 1180,
     1172, 1172, 1172, 1172, 1181, 1181, 1171,   37, 1181, 1181,
     1182, 1182, 1183, 1183, 1184, 1184, 1171,   47, 1171,   49,
       49,   51, 1185, 1185, 1186, 1186,   23,   57, 1187, 1187,
     1188, 1188, 1189, 1189, 1171,   65, 1171, 1171, 1171, 1171,
     1171, 1171, 1171, 1171, 1171, 1171, 1190, 1171, 1171, 1171,
     1171, 1171, 1171, 1171, 1171, 1171, 1171, 1171, 1171, 1171,
     1191, 1191, 1191, 1191, 1191, 1191, 1191, 1171, 1171, 1171,

     1171, 1171, 1171, 1171, 1192, 1192, 1192, 1171, 1193, 1193,
     1171, 1193, 1171, 1194, 1171, 1193, 1193, 1195, 1195, 1195,
     1171, 1195, 1195, 1196, 1195, 1171, 1171, 1171, 1171, 1171,
     1197, 1171, 1171, 1198, 1171, 1198, 1171, 1171, 1171, 1199,
     1199, 1171, 1199, 1199, 1200, 1199, 1201, 1201, 1201, 1201,
     1201, 1201, 1202, 1203, 1203, 1171, 1203, 1203, 1203, 1171,
     1203, 1204, 1171, 1171, 1171, 1171, 1171, 1205, 1171, 1171,
     1171, 1171, 1171, 1171, 1171, 1171, 1171, 1171, 1171, 1171,
     1206, 1171, 1171, 1171, 1171, 1171, 1171, 1171, 1171, 1171,
     1171, 1171, 1207, 1171, 1171, 1171, 1171, 1171, 1171, 1208,

     1171, 1171, 1208, 1171, 1171, 1208, 1171, 1208, 1209, 1209,
     1171, 1209, 1171, 1209, 1209, 1206, 1209, 1171, 1171, 1171,
     1210, 1211, 1171, 1210, 1212, 1210, 1171, 1210, 1213, 1171,
     1171, 1213, 1171, 1213, 1213, 1213, 1214, 1171, 1214, 1214,
     1214, 1214, 1171, 1171, 1171, 1171, 1171, 1171, 1215, 1171,
     1215, 1171, 1171, 1171, 1171, 1171, 1171, 1171, 1216, 1171,
     1171, 1171, 1217, 1171, 1171, 1171, 1171, 1171, 1171, 1218,
     1171, 1171, 1171, 1171, 1171, 1171, 1171, 1218, 1171, 1219,
     1171, 1171, 1171, 1171, 1171, 1171, 1171, 1171, 1171, 1171,
     1171, 1171, 1220, 1171, 1171, 1171, 1171, 1171, 1171, 1171,

     1171, 1171, 1171, 1171, 1171, 1221, 1171, 1171, 1171, 1171,
     1171, 1171, 1222, 1171, 1171, 1171, 1223, 1171, 1190, 1171,
     1171, 1171, 1224, 1171, 1225, 1225, 1225, 1225, 1225, 1225,
     1225, 1225, 1225, 1225, 1226, 1227, 1228, 1228, 1228, 1228,
     1229, 1230, 1231, 1229, 1232, 1233, 1234, 1232, 1171, 1171,
     1235, 1171, 1171, 1236, 1171, 1171, 1236, 1237, 1237, 1237,
     1237, 1171, 1238, 1171, 1238, 1238, 1238, 1171, 1171, 1239,
     1240, 1171, 1240, 1240, 1240, 1171, 1171, 1171, 1171, 1171,
     1241, 1171, 1171, 1171, 1171, 1171, 1171, 1171, 1171, 1171,
     1242, 1171, 1171, 1171, 1171, 1171, 1171, 1243, 1171, 1171,

     1171, 1244, 1171, 1245, 1171, 1171, 1171, 1245, 1171, 1171,
     1171, 1171, 1171, 1171, 1171, 1171, 1171, 1171, 1246, 1171,
     1246, 1246, 1171, 1171, 1171, 1171, 1247, 1248, 1249, 1249,
     1249, 1247, 1171, 1250, 1171, 1171, 1250, 1250, 1251, 1251,
     1251, 1251, 1252, 1171, 1171, 1252, 1253, 1171, 1254, 1171,
     1171, 1171, 1255, 1171, 1171, 1256, 1257, 1171, 1171, 1171,
     1258, 1171, 1171, 1171, 1259, 1260, 1171, 1261, 1261, 1261,
     1261, 1261, 1171, 1261, 1261, 1261, 1261, 1261, 1261, 1262,
     1262, 1263, 1263, 1264, 1264, 1264, 1171, 1264, 1264, 1265,
     1171, 1171, 1171, 1266, 1267, 1268, 1267, 1269, 1270, 1269,

     1271, 1171, 1171, 1171, 1171, 1171, 1272, 1273, 1273, 1273,
     1274, 1274, 1274, 1171, 1275, 1275, 1275, 1171, 1171, 1171,
     1171, 1171, 1171, 1171, 1171, 1171, 1171, 1245, 1171, 1171,
     1171, 1171, 1171, 1171, 1171, 1171, 1171, 1171, 1171, 1171,
     1171, 1171, 1171, 1171, 1171, 1171, 1246, 1246, 1171, 1171,
     1249, 1249, 1247, 1249, 1171, 1171, 1171, 1250, 1250, 1251,
     1251, 1251, 1252, 1171, 1276, 1171, 1171, 1171, 1171, 1260,
     1277, 1171, 1171, 1171, 1171, 1261, 1261, 1261, 1171, 1261,
     1261, 1261, 1261, 1261, 1261, 1261, 1262, 1264, 1264, 1264,
     1264, 1278, 1171, 1171, 1267, 1171, 1171, 1171, 1171, 1272,

     1273, 1274, 1275, 1171, 1171, 1171, 1171, 1171, 1171, 1171,
     1171, 1171, 1171, 1171, 1171, 1171, 1171, 1171, 1171, 1171,
     1171, 1171, 1171, 1171, 1171, 1171, 1249, 1251, 1252, 1279,
     1171, 1171, 1277, 1277, 1277, 1171, 1277, 1171, 1171, 1171,
     1261, 1261, 1171, 1171, 1171, 1261, 1171, 1261, 1261, 1261,
     1261, 1261, 1261, 1171, 1171, 1264, 1264, 1264, 1171, 1171,
     1171, 1171, 1171, 1272, 1171, 1171, 1171, 1171, 1171, 1171,
     1171, 1171, 1171, 1171, 1171, 1171, 1171, 1171, 1171, 1171,
     1171, 1171, 1171, 1171, 1171, 1171, 1171, 1171, 1171, 1252,
     1171, 1171, 1277, 1277, 1171, 1171, 1171, 1171, 1171, 1261,

     1261, 1171, 1171, 1171, 1171, 1171, 1261, 1261, 1261, 1261,
     1171, 1171, 1171, 1272, 1171, 1171, 1171, 1171, 1171, 1171,
     1171, 1171, 1171, 1171, 1171, 1171, 1171, 1171, 1171, 1171,
     1171, 1171, 1171, 1171, 1171, 1171, 1171, 1171, 1171, 1252,
     1277, 1277, 1171, 1171, 1171, 1171, 1171, 1171, 1171, 1280,
     1171, 1171, 1171, 1171, 1171, 1171, 1171, 1171, 1171, 1171,
     1171, 1171, 1171, 1171, 1171, 1171, 1171, 1171, 1171, 1171,
     1171, 1171, 1171, 1171, 1171, 1171, 1171, 1252, 1277, 1277,
     1171, 1171, 1171, 1281, 1171, 1171, 1171, 1171, 1171, 1171,
     1171, 1171, 1171, 1171, 1282, 1171, 1171, 1171, 1171, 1171,

     1171, 1171, 1171, 1171, 1171, 1171, 1277, 1277, 1171, 1171,
     1171, 1281, 1171, 1171, 1171, 1171, 1171, 1171, 1171, 1171,
     1171, 1171, 1171, 1171, 1171, 1171, 1171, 1277, 1277, 1171,
     1171, 1171, 1171, 1171, 1171, 1171, 1171, 1171, 1171, 1171,
     1171, 1171, 1171, 1277, 1277, 1171, 1171, 1171, 1171, 1171,
     1171, 1171, 1171, 1171, 1171, 1277, 1277, 1171, 1171, 1171,
     1171, 1171, 1171, 1171, 1277, 1277, 1171, 1171, 1171, 1171,
     1171, 1171, 1277, 1277, 1171, 1171, 1171, 1171, 1171, 1171,
     1171, 1171, 1171, 1171, 1171, 1171, 1171, 1171, 1171, 1171,
     1171, 1171, 1171, 1171, 1171, 1171, 1171, 1171, 1171, 1171,

     1171, 1171, 1171, 1171, 1171, 1171, 1171, 1171, 1171, 1171,
     1171, 1171, 1171, 1171, 1171, 1171, 1171, 1171, 1171, 1171,
     1171, 1171, 1171, 1171, 1171, 1171, 1171, 1171, 1171, 1171,
     1171, 1171, 1171, 1171, 1171, 1171, 1171, 1171, 1171, 1171,
     1171, 1171, 1171, 1171, 1171, 1171, 1171, 1171, 1171, 1171,
     1171, 1171, 1171, 1171, 1171, 1171, 1171, 1171, 1171, 1171,
     1171, 1171, 1171, 1171, 1171, 1171, 1171, 1171, 1171, 1171,
     1171, 1171, 1171, 1171, 1171, 1171, 1171, 1171, 1171, 1171,
     1171, 1171, 1171, 1171, 1171, 1171, 1171, 1171, 1171, 1171,
     1171, 1171, 1171, 1171, 1171, 1171, 1171, 1171, 1171, 1171,

     1171, 1171, 1171, 1171, 1171, 1171, 1171, 1171, 1171, 1171,
     1171, 1171, 1171, 1171, 1171, 1171, 1171, 1171, 1171, 1171,
     1171, 1171, 1171, 1171, 1171, 1171, 1171, 1171, 1171, 1171,
     1171, 1171, 1171, 1171, 1171, 1171, 1171, 1171, 1171, 1171,
     1171, 1171, 1171, 1171, 1171, 1171, 1171, 1171, 1171, 1171,
     1171, 1171, 1171, 1171, 1171, 1171, 1171, 1171, 1171, 1171,
     1171, 1171, 1171, 1171, 1171, 1171, 1171, 1171, 1171, 1171,
     1171, 1171, 1171, 1171, 1171, 1171, 1171, 1171, 1171, 1171,
     1171, 1171, 1171, 1171, 1171, 1171, 1171, 1171, 1171, 1171,
     1171, 1171, 1171, 1171, 1171, 1171, 1171, 1171, 1171, 1171,

     1171, 1171, 1171, 1171, 1171, 1171, 1171, 1171, 1171, 1171,
     1171, 1171, 1171, 1171, 1171, 1171, 1171, 1171, 1171, 1171,
     1171, 1171, 1171, 1171, 1171, 1171, 1171, 1171, 1171, 1171,
     1171, 1171, 1171, 1171, 1171, 1171, 1171, 1171, 1171, 1171,
     1171, 1171, 1171, 1171, 1171, 1171, 1171, 1171, 1171, 1171,
     1171, 1171, 1171, 1171, 1171, 1171, 1171, 1171, 1171, 1171,
     1171, 1171, 1171, 1171, 1171, 1171, 1171, 1171, 1171, 1171,
        0, 1171, 1171, 1171, 1171, 1171, 1171, 1171, 1171, 1171,
     1171, 1171, 1171, 1171, 1171, 1171, 1171, 1171, 1171, 1171,
     1171, 1171, 1171, 1171, 1171, 1171, 1171, 1171, 1171, 1171,

     1171, 1171, 1171, 1171, 1171, 1171, 1171, 1171, 1171, 1171,
     1171, 1171, 1171, 1171, 1171, 1171, 1171, 1171, 1171, 1171,
     1171, 1171, 1171, 1171, 1171, 1171, 1171, 1171, 1171, 1171,
     1171, 1171, 1171, 1171, 1171, 1171, 1171, 1171, 1171, 1171,
     1171, 1171, 1171, 1171, 1171, 1171, 1171, 1171, 1171, 1171,
     1171, 1171, 1171, 1171, 1171, 1171, 1171, 1171, 1171, 1171,
     1171, 1171, 1171, 1171, 1171, 1171, 1171, 1171, 1171, 1171,
     1171, 1171, 1171, 1171, 1171, 1171, 1171, 1171, 1171, 1171,
     1171, 1171
    } ;

static yyconst flex_int16_t yy_nxt[5497] =
    {   0,
     1171,   69,  383,   70,   71,   69,  364,   70,   71, 1171,
       69,  384,   70,   71,  315,  315,   72,  315,  316,  316,
       72,  316,  335,  364,   73,   72,  336,  110,   73,  111,
      112,  325,  113,   73,  325,  114,  355,  356,  110,  319,
      111,  112,  115,  113,  320,  328,  114,  329,  335,  338,
      116,  339,  336,  115,  368,  155,   74,  156,  157,  757,
       74,  116,  369,  321,  321,   74,   76,   77,   78,   79,
      158,  322,   80,  376,  377,  353,  346,  330,  159,  323,
      347,   81,  117,  160,  331,  332,  324,  324,  324,   82,
      315,   83,   83,  117,  316,  324,  324,  352,  352,  352,

      359,  364,  364,  364,  360,  353,  393,  550,  396,  365,
      161,  394,  397,  366,  399,  400,  425,  426,  364,  364,
      364,   84,   85,   86,   85,   87,   88,   85,   85,   85,
       85,   85,   85,   85,   85,   85,   85,   85,   89,   85,
       85,   85,   85,   85,   85,   85,   90,   85,   91,   91,
       85,   85,   85,   91,   91,   92,   93,   94,   91,   91,
       91,   95,   91,   91,   91,   91,   91,   91,   96,   91,
       91,   91,   97,   91,   91,   91,   85,   85,   98,   99,
      100,   99,  101,  102,   99,   99,   99,   99,   99,   99,
       99,   99,   99,   99,   99,  103,   99,   99,   99,   99,

       99,   99,   99,  104,   99,  105,  105,   99,   99,   99,
      105,  105,  105,  105,  106,  105,  105,  105,  107,  105,
      105,  105,  105,  105,  105,  105,  105,  105,  105,  105,
      105,  105,  105,   99,   99,  108,  119,  364,   70,  120,
      119,  121,   70,  120,  364,  121,  372,  372,  402,  378,
      379,  122,  389,  403,  364,  122,  373,  380,  550,  123,
      374,  364,  367,  123,  124,  390,  335,  375,  124,  335,
      336,  406,  428,  336,  315,  407,  382,  424,  421,  428,
      430,  316,  436,  433,  431,  412,  437,  429,  440,  315,
      864,  125,  441,  316,  429,  125,  126,  127,  126,  128,

      129,  126,  130,  126,  126,  131,  126,  126,  126,  126,
      126,  126,  132,  126,  126,  126,  126,  126,  126,  126,
      133,  126,  134,  134,  126,  135,  126,  134,  134,  134,
      134,  136,  134,  134,  134,  134,  134,  134,  134,  134,
      134,  134,  134,  134,  134,  134,  134,  134,  134,  134,
      137,  138,  139,  141,  550,   70,   71,  141,  142,   70,
       71,  315,  142,  428,  148,  316,   70,  149,  143,   68,
      444,  445,  143,  450,  428,  470,  144,  451,  429,  150,
      144,  145,  454,  455,  471,  145,   68,  151,  148,  429,
       70,  149,  315,   68,  315,  315,  316,  432,  316,  316,

      458,  315,  319,  150,  459,  316,  322,  320,  146,  322,
       68,  151,  146,  496,  323,  466,  467,  323,  499,  152,
      484,  324,  324,  324,  493,  493,  321,  321,  500,  485,
      324,  324,  506,  506,  506,  462,  496,  393,  550,  405,
      353,  499,  394,  152,   68,   69,   68,   70,   71,   68,
       68,   68,   68,   68,   68,   68,   68,   68,   68,   68,
       72,   68,   68,   68,   68,   68,   68,   68,   73,   68,
      153,  153,   68,   68,   68,  153,  153,  153,  153,  153,
      153,  153,  153,  153,  153,  153,  153,  153,  153,  153,
      153,  153,  153,  153,  153,  153,  153,  153,   68,   68,

       74,  155,  364,  156,  157,  185,  322,  186,  187,  352,
      352,  352,  496,  855,  323,  550,  158,  353,  497,  364,
      188,  324,  324,  324,  159,  504,  364,  550,  189,  160,
      324,  324,  511,  505,  505,  496,  352,  352,  352,  368,
      368,  372,  372,  364,  353,  378,  379,  369,  369,  402,
      515,  568,  568,  854,  403,  516,  161,  162,  162,  357,
      190,  518,  162,  162,  162,  162,  162,  162,  162,  162,
      162,  162,  162,  162,  162,  162,  162,  162,  162,  162,
      162,  162,  162,  162,  162,   68,   69,  163,   70,   71,
       68,   68,   68,   68,   68,  164,  165,   68,  166,   68,

      167,   72,   68,   68,   68,   68,   68,   68,   68,   73,
       68,  168,  168,   68,  169,   68,  168,  168,  168,  168,
      168,  168,  168,  168,  168,  168,  168,  168,  168,  168,
      168,  168,  168,  168,  168,  168,  168,  168,  168,   68,
       68,   74,  170,  171,  172,  173,  174,  170,  175,  176,
      170,  177,  170,  170,  170,  170,  170,  170,  178,  170,
      170,  170,  170,  170,  170,  170,  179,  180,  181,  181,
      170,  182,  170,  181,  181,  181,  181,  181,  181,  181,
      181,  181,  181,  181,  181,  181,  181,  181,  181,  181,
      181,  181,  181,  181,  181,  181,  170,  170,  183,  192,

      193,  194,  195,  383,   69,  196,   70,   71,   69,  428,
       70,   71,  384,   69,  197,   70,   71,  389,   69,   72,
       70,   71,  198,   72,  429,  466,  467,   73,   72,  364,
      390,   73,  222,   72,  223,  224,   73,  378,  379,  512,
      389,   73,  523,  556,  853,  380,  364,  225,  557,  524,
      525,  666,  496,  390,  199,  226,  227,  593,  849,   74,
      227,  526,  595,   74,  382,  594,  594,  222,   74,  223,
      224,  364,  550,   74,  201,  496,  202,  203,  352,  352,
      352,  230,  225,  231,  232,  204,  353,  228,  364,  205,
      226,  227,  233,  364,  550,  227,  234,  206,  207,  572,

      573,  574,  207,  602,  235,  230,  337,  231,  232,  337,
      364,  238,  655,  223,  239,  473,  233,  575,  473,  550,
      234,  499,  228,  473,  372,  507,  240,  499,  235,  208,
      201,  597,  202,  203,  241,  487,  236,  603,  487,  598,
      598,  204,  364,  487,  499,  205,  380,  474, 1171,  656,
      499,  575,  496,  206,  207,  843,  636,  475,  207,  364,
      236,  599,  599,  599,  616,  382,  242,  488,  428,  353,
      604,  604,  604,  556,  617,  496,  643,  489,  557,  643,
      674,  674,  674,  429,  643,  208,  209,  210,  209,  211,
      212,  209,  209,  209,  209,  209,  209,  209,  213,  209,

      209,  209,  214,  209,  209,  209,  209,  209,  209,  209,
      215,  209,  216,  216,  209,  209,  209,  216,  216,  216,
      216,  216,  216,  216,  216,  216,  216,  216,  216,  216,
      216,  216,  216,  216,  216,  216,  216,  216,  216,  216,
      209,  209,  217,  201,  842,  202,  203,  695,  696,  238,
      609,  223,  239,  273,  218,   70,  274,  364,  219,  841,
      265,  275,   70,  266,  240,  267,  206,  220,  276,  702,
      609,  220,  241,  840,  364,  268,  277,  265,  839,   70,
      266,  278,  267,  269,  838,  352,  352,  352,  270,  638,
      639,  640,  268,  353,  655,  618,  609,  666,  208,  201,

      269,  202,  203,  631,  242,  270,  703,  575,  279,  837,
      218,  632,  632,  654,  219,  271,  654,  491,  600,  666,
      661,  654,  206,  220,  833,  660,  660,  220,  662,  662,
      566,  712,  271,  827,  663,  663,  663, 1171,  692,  692,
      705,  575,  353,  487,  705,  636,  487,  826,  706,  695,
      696,  487,  706,  825,  208,  243,  244,  243,  245,  246,
      243,  243,  243,  243,  243,  243,  243,  243,  243,  243,
      243,  247,  243,  243,  243,  243,  243,  243,  243,  248,
      243,  249,  249,  243,  250,  243,  249,  249,  249,  251,
      249,  249,  249,  249,  249,  249,  249,  249,  249,  249,

      249,  249,  249,  249,  249,  249,  249,  249,  249,  243,
      243,  252,  253,  254,  253,  255,  256,  253,  253,  253,
      253,  253,  253,  253,  253,  253,  253,  253,  257,  253,
      253,  253,  253,  253,  253,  253,  258,  253,  259,  259,
      253,  260,  253,  259,  259,  259,  259,  259,  259,  259,
      259,  259,  259,  259,  259,  259,  259,  259,  259,  259,
      259,  259,  259,  259,  259,  259,  253,  253,  261,  262,
      634,  573,  635,  713,  713,  713,  715,  715,  715,  636,
      702,  353,  752,  398,  263,  263,  398,  824,  637,  263,
      263,  263,  263,  263,  263,  263,  263,  263,  263,  263,

      263,  263,  263,  263,  263,  263,  263,  263,  263,  263,
      263,  263,  273,  748,   70,  274,  282,  703,   87,  283,
      275,  749,  637,  682,  683,  785,  643,  276,  684,  643,
      748,  284,  685,  686,  643,  277,  823,  687,  749,  285,
      278,  688,  689,  805,  286,  640,  640,  640,  640,  640,
      640,  806,  693,  639,  694,  822,  352,  352,  352,  443,
      618,  636,  443,  575,  353,  821,  575,  279,  280,  280,
      637,  287,  618,  280,  280,  280,  280,  280,  280,  280,
      280,  280,  280,  280,  280,  280,  280,  280,  280,  280,
      280,  280,  280,  280,  280,  280,  282,  575,   87,  283,

      575,  664,  666,  301,  637,   70,  302,  819,  303,  805,
      301,  284,   70,  302,  666,  303,  666,  806,  304,  285,
      818,  694,  640,  694,  286,  304,  305,  697,  698,  699,
      636,  306,  817,  305,  816,  699,  699,  699,  306,  637,
      813,  699,  699,  699,  447,  575,  804,  447,  352,  352,
      352,  287,  289,  575,  290,  291,  353,  292,  307,  575,
      293,  294,  295,  654,  803,  307,  654,  296,  722,  723,
      724,  654,  802,  637,  449,  297,  298,  449,  801,  575,
      674,  674,  674,  741,  698,  742,  453,  575,  325,  453,
      714,  325,  636,  575,  742,  699,  742,  743,  744,  745,

      800,  637,  799,  636,  745,  745,  745,  299,  289,  550,
      290,  291,  637,  292,  618,  575,  293,  294,  295,  798,
      750,  618,  575,  296,  751,  754,  754,  754,  715,  715,
      715,  297,  298,  353,  618,  637,  722,  723,  724,  751,
      724,  723,  724,  750,  797,  337,  637,  751,  337,  575,
      786,  786,  786,  814,  814,  814,  575,  398,  353,  796,
      398,  353,  751,  299,  308,  309,  308,   70,  310,  308,
      308,  308,  308,  308,  308,  308,  308,  308,  308,  308,
      311,  308,  308,  308,  308,  308,  308,  308,  312,  308,
      313,  313,  308,  308,  308,  313,  313,  313,  313,  313,

      313,  313,  313,  313,  313,  313,  313,  313,  313,  313,
      313,  313,  313,  313,  313,  313,  313,  313,  308,  308,
      314,  409,  795,  794,  793,  409,  745,  745,  745,  410,
      411,  412,  443,  447,  413,  443,  447,  449,  414,  415,
      449,  792,  453,  416,  575,  453,  791,  417,  418,  494,
      790,  789,  788,  464,  494,  494,  325,  746,  494,  325,
      464,  778,  779,  744,  780,  494,  494,  494,  501,  777,
      776,  636,  501,  501,  501,  775,  774,  501,  575,  501,
      637,  834,  834,  834,  501,  501,  501,  510,  773,  353,
      772,  510,  510,  510,  337,  550,  510,  337,  510,  771,

      850,  850,  850,  510,  510,  510,  513,  364,  353,  770,
      513,  513,  513,  812,  637,  513,  812,  513,  769,  780,
      745,  780,  513,  513,  514,  372,  768,  517,  636,  767,
      766,  517,  517,  517,  765,  764,  517,  637,  517,  763,
      781,  782,  783,  517,  517,  517,  528,  762,  761,  760,
      528,  528,  528,  759,  758,  528,  753,  464,  575,  783,
      783,  783,  528,  528,  528,  529,  530,  711,  531,  752,
      532,  637,  708,  747,  533,  534,  746,  575,  327,  535,
      861,  861,  861,  536,  537,  548,  566,  566,  353,  548,
      548,  548,  575,  740,  548,  739,  548,  783,  783,  783,

      738,  548,  548,  548,  428,  737,  736,  735,  553,  734,
      733,  575,  553,  553,  553,  575,  732,  553,  731,  554,
      870,  870,  870,  730,  553,  553,  553,  559,  353,  729,
      728,  559,  559,  559,  727,  726,  559,  725,  559,  875,
      875,  875,  721,  559,  559,  559,  562,  353,  720,  575,
      562,  562,  562,  719,  718,  562,  717,  562,  716,  666,
      661,  491,  562,  562,  562,  644,  644,  645,  644,  644,
      644,  644,  644,  644,  644,  644,  644,  644,  644,  644,
      644,  644,  325,  325,  325,  644,  644,  644,  644,  644,
      644,  325,  325,  644,  644,  644,  325,  325,  325,  325,

      325,  325,  325,  325,  646,  325,  325,  325,  325,  325,
      325,  325,  325,  325,  325,  325,  325,  325,  325,  644,
      644,  644,  704,  704,  704,  704,  704,  704,  704,  704,
      704,  704,  704,  704,  704,  704,  704,  704,  704,  325,
      325,  325,  704,  704,  704,  704,  704,  704,  325,  325,
      704,  704,  704,  325,  325,  325,  325,  325,  325,  325,
      325,  325,  325,  325,  325,  325,  325,  325,  325,  325,
      325,  325,  325,  325,  325,  325,  704,  704,  704,  755,
      755,  755,  491,  756,  787,  787,  787,  353,  756,  807,
      782,  808,  353,  808,  783,  808,  588,  711,  636,  809,

      810,  811,  636,  811,  811,  811,  710,  637,  811,  811,
      811,  637,  815,  815,  815,  709,  756,  575,  708,  707,
      353,  575,  578,  701,  700,  566,  575,  690,  828,  810,
      829,  757,  830,  831,  832,  681,  757,  636,  829,  811,
      829,  637,  680,  679,  678,  637,  637,  636,  677,  676,
      575,  575,  832,  832,  832,  575,  637,  832,  832,  832,
      575,  835,  835,  835,  757,  756,  675,  673,  618,  353,
      575,  672,  836,  836,  836,  575,  756,  844,  831,  845,
      637,  846,  847,  848,  575,  671,  636,  845,  832,  845,
      637,  670,  848,  848,  848,  637,  636,  669,  668,  575,

      848,  848,  848,  667,  575,  637,  852,  852,  852,  575,
      575,  666,  665,  757,  606,  851,  851,  851,  575,  756,
      878,  878,  878,  353,  757,  856,  847,  857,  353,  637,
      858,  859,  860,  575,  636,  372,  857,  848,  857,  637,
      863,  863,  863,  637,  575,  636,  491,  658,  575,  657,
      653,  652,  575,  651,  637,  860,  860,  860,  757,  650,
      860,  860,  860,  649,  862,  862,  862,  757,  756,  867,
      868,  869,  353,  575,  648,  647,  642,  637,  575,  641,
      571,  566,  575,  566,  865,  859,  866,  575,  637,  872,
      872,  872,  757,  636,  629,  866,  860,  866,  628,  869,

      869,  869,  637,  617,  636,  627,  626,  575,  869,  869,
      869,  625,  575,  637,  624,  623,  757,  575,  622,  621,
      620,  575,  619,  871,  871,  871,  575,  756,  873,  868,
      874,  353,  867,  868,  869,  618,  637,  636,  869,  869,
      869,  757,  615,  874,  869,  874,  637,  637,  614,  613,
      575,  575,  636,  869,  869,  869,  575,  877,  877,  877,
      575,  637,  876,  876,  876,  612,  756,  873,  868,  874,
      353,  575,  880,  880,  880,  757,  636,  611,  610,  608,
      637,  881,  881,  881,  575,  637,  883,  883,  883,  353,
      575,  607,  874,  869,  874,  637,  879,  879,  879,  606,

      756,  636,  569,  522,  353,  575,  886,  886,  886,  757,
      637,  889,  889,  889,  757,  892,  892,  892,  605,  637,
      372,  882,  882,  882,  757,  756,  884,  884,  884,  353,
      372,  885,  885,  885,  353,  756,  601,  596,  757,  353,
      596,  887,  887,  887,  637,  895,  895,  895,  757,  353,
      491,  888,  888,  888,  491,  756,  488,  591,  757,  353,
      890,  890,  890,  757,  898,  898,  898,  757,  353,  590,
      891,  891,  891,  757,  756,  901,  901,  901,  353,  893,
      893,  893,  589,  757,  894,  894,  894,  353,  756,  588,
      587,  586,  353,  896,  896,  896,  585,  757,  897,  897,

      897,  353,  756,  757,  584,  583,  353,  899,  899,  899,
      900,  900,  900,  582,  756,  353,  757,  581,  353,  904,
      904,  904,  757,  902,  902,  902,  580,  757,  907,  907,
      907,  353,  579,  903,  903,  903,  757,  756,  905,  905,
      905,  353,  578,  906,  906,  906,  353,  756,  577,  576,
      757,  353,  908,  908,  908,  909,  909,  909,  571,  756,
      353,  569,  757,  353,  910,  910,  910,  911,  911,  911,
      463,  757,  913,  913,  913,  353,  916,  916,  916,  462,
      757,  566,  912,  912,  912,  757,  756,  919,  919,  919,
      353,  914,  914,  914,  454,  757,  915,  915,  915,  353,

      756,  917,  917,  917,  353,  564,  462,  757,  563,  353,
      918,  918,  918,  444,  756,  561,  757,  560,  353,  920,
      920,  920,  558,  462,  757,  555,  552,  353,  757,  921,
      921,  921,  551,  756,  757,  549,  462,  353,  547,  757,
      922,  922,  922,  923,  923,  923,  546,  545,  757,  544,
      543,  353,  924,  924,  924,  542,  756,  925,  925,  925,
      353,  541,  757,  926,  926,  926,  927,  927,  927,  540,
      756,  353,  539,  538,  353,  928,  928,  928,  929,  929,
      929,  757,  527,  930,  930,  930,  353,  756,  931,  931,
      931,  353,  757,  932,  932,  932,  399,  522,  933,  933,

      933,  353,  756,  395,  757,  521,  353,  520,  387,  757,
      934,  934,  934,  935,  935,  935,  386,  385,  757,  386,
      519,  353,  936,  936,  936,  376,  756,  757,  372,  509,
      353,  937,  937,  937,  508,  757,  938,  938,  938,  355,
      757,  939,  939,  939,  353,  756,  940,  940,  940,  353,
      757,  941,  941,  941,  502,  491,  942,  942,  942,  353,
      756,  486,  757,  483,  353,  943,  943,  943,  944,  944,
      944,  945,  945,  945,  757,  756,  353,  481,  479,  353,
      946,  946,  946,  757,  947,  947,  947,  948,  948,  948,
      478,  756,  353,  757,  477,  353,  476,  472,  757,  949,

      949,  949,  950,  950,  950,  951,  951,  951,  757,  756,
      353,  469,  468,  353,  952,  952,  952,  757,  953,  953,
      953,  463,  462,  757,  317,  317,  353,  954,  954,  954,
      317,  756,  757,  457,  317,  353,  955,  955,  955,  757,
      956,  956,  956,  317,  317,  957,  957,  957,  353,  756,
      448,  757,  317,  353,  958,  958,  958,  757,  446,  959,
      959,  959,  961,  961,  961,  317,  757,  353,  960,  960,
      960,  442,  756,  962,  962,  962,  353,  438,  435,  757,
      423,  353,  963,  963,  963,  422,  756,  420,  757,  408,
      353,  964,  964,  964,  965,  965,  965,  757,  405,  966,

      966,  966,  353,  756,  317,  317,  757,  353,  967,  967,
      967,  968,  968,  968,  757,  970,  970,  970,  317,  353,
      757,  969,  969,  969,  395,  756,  973,  973,  973,  353,
      971,  971,  971,  392,  757,  976,  976,  976,  353,  388,
      972,  972,  972,  757,  756,  974,  974,  974,  353,  387,
      386,  757,  385,  353,  975,  975,  975,  372,  756,  372,
      757,  372,  353,  977,  977,  977,  372,  757,  978,  978,
      978,  353,  756,  757,  361,  317,  353,  351,  757,  979,
      979,  979,  980,  980,  980,  348,  344,  757,  343,  340,
      353,  317,  757,  981,  981,  981,  334,  756,  982,  982,

      982,  353,  983,  983,  983,  333,  757,  984,  984,  984,
      353,  756,  985,  985,  985,  353,  986,  986,  986,  327,
      757,  987,  987,  987,  353,  756,  988,  988,  988,  353,
      326,  757,  989,  989,  989,  990,  990,  990,  317,  756,
      353,  317,  317,  353, 1171,  757,  991,  991,  991, 1171,
      757, 1171,  992,  992,  992,  994,  994,  994, 1171,  757,
      353,  993,  993,  993,  757,  756,  995,  995,  995,  353,
      997,  997,  997,  757,  353,  996,  996,  996,  757,  756,
      998,  998,  998,  353, 1000, 1000, 1000,  757,  353,  999,
      999,  999, 1171,  756, 1001, 1001, 1001,  353,  757, 1003,

     1003, 1003,  353, 1171, 1002, 1002, 1002,  757,  756, 1004,
     1004, 1004,  353,  757, 1006, 1006, 1006,  353, 1009, 1009,
     1009, 1171,  757, 1171, 1005, 1005, 1005,  757,  756, 1007,
     1007, 1007,  353, 1012, 1012, 1012,  757,  353, 1008, 1008,
     1008,  757,  756, 1015, 1015, 1015,  353, 1010, 1010, 1010,
     1171,  757, 1013, 1013, 1013,  353,  757, 1011, 1011, 1011,
      353,  756, 1018, 1018, 1018,  353,  757, 1014, 1014, 1014,
      757,  756, 1016, 1016, 1016,  353,  757, 1021, 1021, 1021,
      353, 1019, 1019, 1019, 1171,  757, 1024, 1024, 1024,  353,
      757, 1171, 1017, 1017, 1017,  757,  756, 1020, 1020, 1020,

      353,  756, 1022, 1022, 1022,  353, 1027, 1027, 1027,  757,
      353, 1030, 1030, 1030,  757, 1171, 1023, 1023, 1023,  757,
      756, 1171, 1171, 1171,  353, 1025, 1025, 1025, 1171,  757,
     1033, 1033, 1033,  353, 1171, 1026, 1026, 1026,  757,  756,
     1028, 1028, 1028,  353,  757, 1036, 1036, 1036,  353,  757,
     1171, 1029, 1029, 1029, 1171,  756, 1171, 1171,  757,  353,
     1039, 1039, 1039,  757, 1031, 1031, 1031, 1171,  757, 1032,
     1032, 1032,  353,  756, 1042, 1042, 1042,  353, 1034, 1034,
     1034, 1171,  757, 1037, 1037, 1037,  353,  757, 1035, 1035,
     1035,  353,  756, 1040, 1040, 1040,  353,  757, 1038, 1038,

     1038,  353,  756,  757, 1171, 1171,  353, 1041, 1041, 1041,
     1171,  756,  757, 1171, 1171,  353, 1043, 1043, 1043, 1171,
     1171,  757, 1171, 1171,  353, 1171,  757, 1044, 1044, 1044,
     1171,  756, 1045, 1045, 1045,  353, 1046, 1046, 1046, 1171,
      757, 1047, 1047, 1047,  353,  756, 1048, 1048, 1048,  353,
      757, 1171, 1049, 1049, 1049, 1051, 1051, 1051, 1171,  757,
      353, 1050, 1050, 1050, 1171,  756, 1052, 1052, 1052,  353,
     1054, 1054, 1054, 1171,  353, 1057, 1057, 1057, 1171,  757,
     1171, 1053, 1053, 1053,  757,  756, 1055, 1055, 1055,  353,
     1060, 1060, 1060,  757,  353, 1056, 1056, 1056,  757,  756,

     1058, 1058, 1058,  353, 1063, 1063, 1063,  757,  353, 1171,
     1059, 1059, 1059,  757,  756, 1061, 1061, 1061,  353, 1066,
     1066, 1066,  757,  353, 1062, 1062, 1062,  757,  756, 1064,
     1064, 1064,  353,  757, 1069, 1069, 1069,  353, 1072, 1072,
     1072, 1171,  757, 1171, 1065, 1065, 1065,  757,  756, 1067,
     1067, 1067,  353, 1075, 1075, 1075,  757,  353, 1171, 1068,
     1068, 1068,  757,  756, 1070, 1070, 1070,  353, 1078, 1078,
     1078,  757,  353, 1071, 1071, 1071,  757,  756, 1080, 1080,
     1080,  353, 1171, 1073, 1073, 1073,  757, 1082, 1082, 1082,
      757,  353, 1171, 1074, 1074, 1074,  757,  756, 1076, 1076,

     1076,  353, 1084, 1084, 1084,  757,  353, 1171, 1077, 1077,
     1077,  757,  756, 1079, 1079, 1079,  353,  756, 1171, 1171,
      757,  353, 1086, 1086, 1086,  757, 1171, 1081, 1081, 1081,
      757,  756, 1083, 1083, 1083,  353,  756, 1171, 1171,  757,
      353, 1171, 1085, 1085, 1085,  757,  756, 1087, 1087, 1087,
      353,  756, 1171, 1171,  757,  353, 1088, 1088, 1088, 1171,
      757, 1171, 1089, 1089, 1089,  757,  756, 1090, 1090, 1090,
      353, 1091, 1091, 1091,  757, 1092, 1092, 1092, 1171,  757,
     1093, 1093, 1093, 1171,  757, 1094, 1094, 1094, 1095, 1095,
     1095, 1096, 1096, 1096,  757, 1097, 1097, 1097, 1171,  757,

     1098, 1098, 1098, 1099, 1099, 1099, 1171, 1171,  757, 1100,
     1100, 1100, 1171, 1171,  757, 1101, 1101, 1101, 1171,  757,
     1102, 1102, 1102,  757, 1103, 1103, 1103,  757, 1104, 1104,
     1104, 1171,  757, 1105, 1105, 1105, 1171,  757, 1171, 1171,
      757, 1171, 1171,  757, 1106, 1106, 1106,  757, 1107, 1107,
     1107, 1171,  757, 1171, 1171,  757, 1108, 1108, 1108, 1171,
     1171,  757, 1109, 1109, 1109, 1171, 1171,  757, 1110, 1110,
     1110, 1171,  757, 1111, 1111, 1111,  757, 1112, 1112, 1112,
      757, 1113, 1113, 1113, 1171,  757, 1114, 1114, 1114, 1115,
     1115, 1115, 1116, 1116, 1116, 1171,  757, 1117, 1117, 1117,

      757, 1118, 1118, 1118, 1119, 1119, 1119, 1171,  757, 1120,
     1120, 1120, 1171, 1171,  757, 1121, 1121, 1121, 1171, 1171,
      757, 1122, 1122, 1122, 1171,  757, 1123, 1123, 1123,  757,
     1124, 1124, 1124,  757, 1125, 1125, 1125, 1171,  757, 1171,
     1171,  757, 1171, 1171,  757, 1126, 1126, 1126, 1171,  757,
     1127, 1127, 1127,  757, 1171, 1171,  757, 1128, 1128, 1128,
     1171,  757, 1129, 1129, 1129, 1171, 1171,  757, 1130, 1130,
     1130, 1171, 1171,  757, 1131, 1131, 1131, 1171,  757, 1132,
     1132, 1132,  757, 1133, 1133, 1133,  757, 1134, 1134, 1134,
     1135, 1135, 1135, 1136, 1136, 1136, 1171,  757, 1137, 1137,

     1137, 1171,  757, 1138, 1138, 1138, 1139, 1139, 1139,  757,
     1140, 1140, 1140, 1171,  757, 1141, 1141, 1141, 1171, 1171,
      757, 1142, 1142, 1142, 1171, 1171,  757, 1143, 1143, 1143,
     1171,  757, 1144, 1144, 1144,  757, 1145, 1145, 1145,  757,
     1171, 1171,  757, 1171, 1171,  757, 1146, 1146, 1146, 1171,
      757, 1147, 1147, 1147, 1171,  757, 1171, 1171,  757, 1148,
     1148, 1148,  757, 1149, 1149, 1149, 1171,  757, 1150, 1150,
     1150, 1171, 1171,  757, 1151, 1151, 1151, 1171, 1171,  757,
     1152, 1152, 1152, 1171,  757, 1153, 1153, 1153,  757, 1154,
     1154, 1154, 1155, 1155, 1155, 1156, 1156, 1156,  757, 1157,

     1157, 1157, 1171,  757, 1158, 1158, 1158, 1159, 1159, 1159,
     1171,  757, 1160, 1160, 1160,  757, 1161, 1161, 1161, 1171,
      757, 1162, 1162, 1162, 1171, 1171,  757, 1163, 1163, 1163,
     1171, 1171,  757, 1164, 1164, 1164, 1171,  757, 1165, 1165,
     1165,  757, 1171, 1171,  757, 1171, 1171,  757, 1166, 1166,
     1166,  757, 1167, 1167, 1167, 1171,  757, 1171, 1171,  757,
     1168, 1168, 1168, 1171,  757, 1169, 1169, 1169,  757, 1170,
     1170, 1170, 1171,  757, 1094, 1094, 1094, 1171, 1171,  757,
     1171, 1171, 1171, 1171, 1171,  757, 1171, 1171, 1171, 1171,
      757, 1171, 1171, 1171, 1171, 1171, 1171, 1171, 1171, 1171,

      757, 1171, 1171, 1171,  757, 1171, 1171, 1171, 1171, 1171,
     1171, 1171,  757, 1171, 1171, 1171, 1171,  757, 1171, 1171,
     1171,  757, 1171, 1171, 1171, 1171,  757,   68,   68,   68,
       68,   68,   68,   68,   68,   68,   68,   68,   68,   68,
       68,   68,   68,   68,   68,   75,   75,   75,   75,   75,
       75,   75,   75,   75,   75,   75,   75,   75,   75,   75,
       75,   75,   75,  109,  109,  109,  109,  109,  109,  109,
      109,  109,  109,  109,  109,  109,  109,  109,  109,  109,
      109,  118,  118,  118,  118,  118,  118,  118,  118,  118,
      118,  118,  118,  118,  118,  118,  118,  118,  118,  140,

      140,  140,  140,  140,  140,  140,  140,  140,  140,  140,
      140,  140,  140,  140,  140,  140,  140,  147,  147,  147,
      147,  147,  147,  147,  147,  147,  147,  147,  147,  147,
      147,  147,  147,  147,  147,  154,  154,  154,  154,  154,
      154,  154,  154,  154,  154,  154,  154,  154,  154,  154,
      154,  154,  154,  184,  184,  184,  184,  184,  184,  184,
      184,  184,  184,  184,  184,  184,  184,  184,  184,  184,
      184,  191,  191,  191,  191,  191,  191,  191,  191,  191,
      191,  191,  191,  191,  191,  191,  191,  191,  191,  200,
      200,  200,  200,  200,  200,  200,  200,  200,  200,  200,

      200,  200,  200,  200,  200,  200,  200,  221,  221,  221,
      221,  221,  221,  221,  221,  221,  221,  221,  221,  221,
      221,  221,  221,  221,  221,  229,  229,  229,  229,  229,
      229,  229,  229,  229,  229,  229,  229,  229,  229,  229,
      229,  229,  229,  237,  237,  237,  237,  237,  237,  237,
      237,  237,  237,  237,  237,  237,  237,  237,  237,  237,
      237,  264,  264,  264,  264,  264,  264,  264,  264,  264,
      264,  264,  264,  264,  264,  264,  264,  264,  264,  272,
      272,  272,  272,  272,  272,  272,  272,  272,  272,  272,
      272,  272,  272,  272,  272,  272,  272,  281,  281,  281,

      281,  281,  281,  281,  281,  281,  281,  281,  281,  281,
      281,  281,  281,  281,  281,  288,  288,  288,  288,  288,
      288,  288,  288,  288,  288,  288,  288,  288,  288,  288,
      288,  288,  288,  300,  300,  300,  300,  300,  300,  300,
      300,  300,  300,  300,  300,  300,  300,  300,  300,  300,
      300,  318,  318,  318,  318,  318,  318,  318,  318,  318,
      318,  318,  318,  318,  318,  318,  318,  318,  318,  341,
      341,  341, 1171,  341,  341, 1171, 1171,  341,  341,  341,
      341, 1171,  341,  341,  341,  341,  341,  342,  342,  342,
     1171,  342,  342,  342, 1171,  342,  342,  342,  342,  342,

      342,  342,  342,  342,  342,  345,  345,  345, 1171,  345,
      345, 1171,  345,  345,  345,  345,  345,  345,  345,  345,
      345,  345,  349,  349,  349, 1171,  349,  349,  349,  349,
      349,  349,  349,  349,  349,  349,  349,  349,  349,  349,
      350,  350,  350, 1171,  350,  350,  350,  350,  350,  350,
      350,  350,  350,  350,  350,  350,  350,  350,  354,  354,
      354, 1171, 1171, 1171,  354, 1171, 1171, 1171, 1171,  354,
     1171, 1171,  354,  358,  358,  358, 1171, 1171,  358, 1171,
      358,  358,  358,  358,  358,  358,  358,  358,  358,  358,
      362,  362,  362, 1171,  362,  362,  362,  362,  362,  362,

      362,  362,  362,  362,  362,  362,  362,  362,  363,  363,
      363, 1171,  363,  363,  363,  363,  363,  363,  363,  363,
      363,  363,  363,  363,  363,  363,  370, 1171, 1171, 1171,
     1171, 1171,  370, 1171, 1171, 1171, 1171,  370, 1171, 1171,
      370,  371,  371,  371,  371,  371,  371,  371,  371,  371,
      371,  371,  371,  371,  371,  371,  371,  371,  381,  381,
     1171, 1171, 1171, 1171,  381, 1171, 1171, 1171, 1171,  381,
     1171, 1171,  381,  381,  391, 1171, 1171, 1171, 1171, 1171,
     1171, 1171, 1171,  391, 1171,  391, 1171, 1171,  391,  401,
      401,  401,  401,  401,  401,  401,  401,  401,  401,  401,

      401,  401,  401,  401,  401,  401,  401,  404, 1171,  404,
     1171,  404,  404,  404,  404,  404, 1171,  404,  404, 1171,
      404,  404, 1171,  404,  419,  419,  419, 1171,  419,  419,
      419,  419,  419, 1171,  419,  419,  419,  419,  419,  419,
     1171,  419,  427,  427,  427, 1171,  427,  427,  427,  427,
      427,  427,  427,  427,  427,  427,  427, 1171,  427,  428,
      428,  428, 1171,  428,  428,  428,  428,  428,  428,  428,
      428, 1171,  428,  428, 1171,  428,  429, 1171,  429, 1171,
      429,  429,  429,  429,  429,  429,  429,  429,  429,  429,
      429, 1171,  429,  434, 1171,  434, 1171,  434,  434,  434,

      434,  434, 1171,  434,  434,  434,  434,  434,  434,  434,
      434,  439, 1171,  439, 1171,  439,  439,  439,  439,  439,
      439,  439,  439,  439,  439,  439,  439,  439,  439,  452,
      452,  452, 1171,  452,  452,  452,  452,  452,  452,  452,
      452,  452,  452,  452,  452,  452,  452,  456,  456,  456,
     1171,  456,  456,  456, 1171,  456,  456,  456,  456,  456,
      456,  456,  456,  456,  456,  460,  460,  460, 1171,  460,
      460,  460,  460,  460,  460,  460,  460,  460,  460,  460,
      460,  460,  460,  461,  461, 1171,  461, 1171, 1171,  461,
      464, 1171,  464,  464, 1171,  464, 1171,  464, 1171,  464,

      465,  465,  465, 1171,  465,  465,  465,  465,  465,  465,
      465,  465,  465,  465,  465,  465,  465,  465,  480,  480,
      480, 1171,  480,  480,  480,  480,  480,  480,  480,  480,
      480,  480,  480,  480,  480,  480,  482,  482,  482, 1171,
      482,  482,  482,  482,  482,  482,  482,  482,  482,  482,
      482,  482,  482,  482,  341,  341,  341, 1171,  341,  341,
     1171, 1171,  341,  341,  341,  341, 1171,  341,  341,  341,
      341,  341,  490,  490,  490, 1171,  490,  490,  490,  490,
      490,  490,  490,  490,  490,  490,  490,  490,  490,  492,
      492,  492, 1171,  492,  492,  492,  492,  492,  492,  492,

      492,  492,  492,  492,  492,  492,  492,  345,  345,  345,
     1171,  345,  345, 1171,  345,  345,  345,  345,  345,  345,
      345,  345,  345,  345,  495,  495,  495, 1171,  495,  495,
      495,  495,  495,  495,  495,  495,  495,  495,  495,  495,
      495,  495,  498,  498,  498, 1171,  498,  498,  498,  498,
      498,  498,  498,  498,  498,  498,  498,  498,  498,  498,
      503,  503,  503, 1171,  503,  503,  503,  503,  503,  503,
      503,  503,  503,  503,  503,  503,  503,  503,  354,  354,
      354, 1171, 1171, 1171,  354, 1171, 1171, 1171, 1171,  354,
     1171, 1171,  354,  358,  358,  358, 1171, 1171,  358, 1171,

      358,  358,  358,  358,  358,  358,  358,  358,  358,  358,
      363,  363,  363, 1171,  363,  363,  363,  363,  363,  363,
      363,  363,  363,  363,  363,  363,  363,  363,  370, 1171,
     1171, 1171, 1171, 1171,  370, 1171, 1171, 1171, 1171,  370,
     1171, 1171,  370,  371,  371,  371,  371,  371,  371,  371,
      371,  371,  371,  371,  371,  371,  371,  371,  371,  371,
      381,  381, 1171, 1171, 1171, 1171,  381, 1171, 1171, 1171,
     1171,  381, 1171, 1171,  381,  381,  391, 1171, 1171, 1171,
     1171, 1171, 1171, 1171, 1171,  391, 1171,  391, 1171, 1171,
      391,  401,  401,  401,  401,  401,  401,  401,  401,  401,

      401,  401,  401,  401,  401,  401,  401,  401,  401,  404,
     1171,  404, 1171,  404,  404,  404,  404,  404, 1171,  404,
      404, 1171,  404,  404, 1171,  404,  419,  419,  419, 1171,
      419,  419,  419,  419,  419, 1171,  419,  419,  419,  419,
      419,  419, 1171,  419,  427,  427,  427, 1171,  427,  427,
      427,  427,  427,  427,  427,  427,  427,  427,  427, 1171,
      427,  428,  428,  428, 1171,  428,  428,  428,  428,  428,
      428,  428,  428, 1171,  428,  428, 1171,  428,  429, 1171,
      429, 1171,  429,  429,  429,  429,  429,  429,  429,  429,
      429,  429,  429, 1171,  429,  434, 1171,  434, 1171,  434,

      434,  434,  434,  434, 1171,  434,  434,  434,  434,  434,
      434,  434,  434,  439, 1171,  439, 1171,  439,  439,  439,
      439,  439,  439,  439,  439,  439,  439,  439,  439,  439,
      439,  565,  565,  565, 1171,  565,  565,  565,  565,  565,
      565,  565,  565,  565,  565,  565,  565,  565,  567,  567,
      567, 1171,  567,  567,  567,  567,  567,  567,  567,  567,
      567,  567,  567,  567,  567,  567,  461,  461, 1171,  461,
     1171, 1171,  461,  465,  465,  465, 1171,  465,  465,  465,
      465,  465,  465,  465,  465,  465,  465,  465,  465,  465,
      465,  570,  570,  570, 1171,  570,  570,  570,  570,  570,

      570,  570,  570,  570,  570,  570,  570,  570,  570,  480,
      480,  480, 1171,  480,  480,  480,  480,  480,  480,  480,
      480,  480,  480,  480,  480,  480,  480,  482,  482,  482,
     1171,  482,  482,  482,  482,  482,  482,  482,  482,  482,
      482,  482,  482,  482,  482,  592,  592,  592, 1171,  592,
      592,  592,  592,  592,  592,  592,  592,  592,  592,  592,
      592,  592,  341,  341,  341, 1171,  341,  341, 1171, 1171,
      341,  341,  341,  341, 1171,  341,  341,  341,  341,  341,
      495,  495,  495, 1171,  495,  495,  495,  495,  495,  495,
      495,  495,  495,  495,  495,  495,  495,  495,  496,  496,

      496, 1171,  496,  496,  496,  496,  496,  496,  496,  496,
      496,  496,  496,  496,  496,  496,  498,  498,  498, 1171,
      498,  498,  498,  498,  498,  498,  498,  498,  498,  498,
      498,  498,  498,  498,  499,  499,  499, 1171,  499,  499,
      499,  499,  499,  499,  499,  499,  499,  499,  499,  499,
      499,  499,  345,  345,  345, 1171,  345,  345, 1171,  345,
      345,  345,  345,  345,  345,  345,  345,  345,  345,  354,
      354,  354, 1171, 1171, 1171,  354, 1171, 1171, 1171, 1171,
      354, 1171, 1171,  354,  358,  358,  358, 1171, 1171,  358,
     1171,  358,  358,  358,  358,  358,  358,  358,  358,  358,

      358,  363,  363,  363, 1171,  363,  363,  363,  363,  363,
      363,  363,  363,  363,  363,  363,  363,  363,  363,  371,
      371,  371,  371,  371,  371,  371,  371,  371,  371,  371,
      371,  371,  371,  371,  371,  371,  630,  630,  630, 1171,
      630,  630,  630,  630,  630,  630,  630,  630,  630,  630,
      630,  630,  630,  633,  633,  633,  633,  633,  633,  633,
      633,  633,  633,  633,  633,  633,  633,  633,  633,  633,
      633,  659,  659,  659, 1171,  659,  659,  659,  659,  659,
      659,  659,  659,  659,  659,  659,  659,  659,  691,  691,
      691, 1171,  691,  691,  691,  691,  691,  691,  691,  691,

      691,  691,  691,  691,  691,  784, 1171, 1171, 1171,  784,
     1171, 1171, 1171, 1171, 1171, 1171, 1171,  784, 1171,  784,
      820,  820,  820,  820,  820,  820,  820,  820,  820,  820,
      820,  820,  820, 1171,  820,  820, 1171,  820,   67, 1171,
     1171, 1171, 1171, 1171, 1171, 1171, 1171, 1171, 1171, 1171,
     1171, 1171, 1171, 1171, 1171, 1171, 1171, 1171, 1171, 1171,
     1171, 1171, 1171, 1171, 1171, 1171, 1171, 1171, 1171, 1171,
     1171, 1171, 1171, 1171, 1171, 1171, 1171, 1171, 1171, 1171,
     1171, 1171, 1171, 1171, 1171, 1171, 1171, 1171, 1171, 1171,
     1171, 1171, 1171, 1171, 1171, 1171

    } ;

static yyconst flex_int16_t yy_chk[5497] =
    {   0,
        0,    1,  163,    1,    1,    2,  147,    2,    2,    0,
        3,  163,    3,    3,   72,   81,    1,   89,   72,   81,
        2,   89,  103,  147,    1,    3,  103,    9,    2,    9,
        9, 1191,    9,    3, 1191,    9,  135,  135,   10,   77,
       10,   10,    9,   10,   77,   94,   10,   94,  115,  106,
        9,  106,  115,   10,  153,   21,    1,   21,   21, 1094,
        2,   10,  153,   77,   77,    3,    4,    4,    4,    4,
       21,   83,    4,  160,  160, 1076,  122,   95,   21,   83,
      122,    4,    9,   21,   95,   95,   83,   83,   83,    4,
      132,    4,    4,   10,  132,   83,   83,  134,  134,  134,

      143,  148,  149,  150,  143,  134,  172,  864,  178,  150,
       21,  172,  178,  150,  182,  182,  220,  220,  148,  149,
      150,    4,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,

        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,   11,  152,   11,   11,
       12,   11,   12,   12,  151,   12,  159,  158,  193,  162,
      162,   11,  168,  193,  152,   12,  158,  162,  855,   11,
      158,  151,  151,   12,   11,  168,  188,  159,   12,  197,
      188,  205,  221,  197,  214,  205,  162,  219,  214,  224,
      225,  219,  234,  227,  225,  227,  234,  221,  240,  247,
      854,   11,  240,  247,  224,   12,   13,   13,   13,   13,

       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   15,  853,   15,   15,   16,   15,   16,
       16,  257,   16,  228,   17,  257,   17,   17,   15,   17,
      250,  250,   16,  268,  226,  328,   15,  268,  228,   17,
       16,   15,  286,  286,  328,   16,   17,   17,   18,  226,
       18,   18,  276,   18,  284,  296,  276,  226,  284,  296,

      304,  311,  319,   18,  304,  311,  321,  319,   15,  322,
       18,   18,   16,  495,  321,  323,  323,  322,  347,   17,
      338,  321,  321,  321,  343,  343,  319,  319,  347,  338,
      321,  321,  352,  352,  352,  406,  495,  393,  843,  406,
      352,  347,  393,   18,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,

       19,   22,  363,   22,   22,   29,  324,   29,   29,  136,
      136,  136,  346,  842,  324,  841,   22,  136,  346,  363,
       29,  324,  324,  324,   22,  351,  365,  840,   29,   22,
      324,  324,  365,  351,  351,  346,  354,  354,  354,  368,
      370,  373,  374,  365,  354,  378,  378,  368,  370,  402,
      373,  457,  457,  839,  402,  374,   22,   23,   23,  136,
       29,  378,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   25,   25,   25,   25,   25,
       25,   25,   25,   25,   25,   25,   25,   25,   25,   25,

       25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
       25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
       25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
       25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
       25,   25,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   30,

       30,   30,   30,  383,   31,   30,   31,   31,   32,  427,
       32,   32,  383,   33,   30,   33,   33,  389,   34,   31,
       34,   34,   30,   32,  427,  465,  465,   31,   33,  366,
      389,   32,   41,   34,   41,   41,   33,  381,  381,  366,
      391,   34,  396,  435,  838,  381,  366,   41,  435,  396,
      397,  837,  497,  391,   30,   41,   41,  493,  833,   31,
       41,  397,  497,   32,  381,  493,  493,   42,   33,   42,
       42,  512,  426,   34,   35,  497,   35,   35,  357,  357,
      357,   43,   42,   43,   43,   35,  357,   41,  512,   35,
       42,   42,   43,  511,  426,   42,   43,   35,   35,  467,

      467,  467,   35,  511,   43,   44, 1192,   44,   44, 1192,
      511,   45,  589,   45,   45,  330,   44,  467,  330,  426,
       44,  498,   42,  330,  515,  357,   45,  500,   44,   35,
       36,  505,   36,   36,   45,  340,   43,  515,  340,  505,
      505,   36,  513,  340,  498,   36,  519,  330,  633,  589,
      500,  467,  595,   36,   36,  827,  633,  330,   36,  513,
       44,  506,  506,  506,  538,  519,   45,  340,  553,  506,
      518,  518,  518,  556,  538,  595,  578,  340,  556,  578,
      618,  618,  618,  553,  578,   36,   37,   37,   37,   37,
       37,   37,   37,   37,   37,   37,   37,   37,   37,   37,

       37,   37,   37,   37,   37,   37,   37,   37,   37,   37,
       37,   37,   37,   37,   37,   37,   37,   37,   37,   37,
       37,   37,   37,   37,   37,   37,   37,   37,   37,   37,
       37,   37,   37,   37,   37,   37,   37,   37,   37,   37,
       37,   37,   37,   39,  826,   39,   39,  636,  636,   46,
      531,   46,   46,   55,   39,   55,   55,  602,   39,  825,
       53,   55,   53,   53,   46,   53,   39,   39,   55,  645,
      531,   39,   46,  824,  602,   53,   55,   54,  823,   54,
       54,   55,   54,   53,  822,  507,  507,  507,   53,  572,
      572,  572,   54,  507,  655,  821,  531,  819,   39,   40,

       54,   40,   40,  568,   46,   54,  645,  572,   55,  818,
       40,  568,  568,  588,   40,   53,  588,  594,  507,  817,
      598,  588,   40,   40,  813,  594,  594,   40,  598,  598,
      632,  655,   54,  804,  599,  599,  599,  637,  632,  632,
      648,  572,  599,  658,  705,  637,  658,  803,  648,  695,
      695,  658,  705,  802,   40,   47,   47,   47,   47,   47,
       47,   47,   47,   47,   47,   47,   47,   47,   47,   47,
       47,   47,   47,   47,   47,   47,   47,   47,   47,   47,
       47,   47,   47,   47,   47,   47,   47,   47,   47,   47,
       47,   47,   47,   47,   47,   47,   47,   47,   47,   47,

       47,   47,   47,   47,   47,   47,   47,   47,   47,   47,
       47,   47,   49,   49,   49,   49,   49,   49,   49,   49,
       49,   49,   49,   49,   49,   49,   49,   49,   49,   49,
       49,   49,   49,   49,   49,   49,   49,   49,   49,   49,
       49,   49,   49,   49,   49,   49,   49,   49,   49,   49,
       49,   49,   49,   49,   49,   49,   49,   49,   49,   49,
       49,   49,   49,   49,   49,   49,   49,   49,   49,   51,
      571,  571,  571,  663,  663,  663,  666,  666,  666,  571,
      702,  663,  752, 1206,   51,   51, 1206,  801,  571,   51,
       51,   51,   51,   51,   51,   51,   51,   51,   51,   51,

       51,   51,   51,   51,   51,   51,   51,   51,   51,   51,
       51,   51,   56,  707,   56,   56,   59,  702,   59,   59,
       56,  707,  571,  626,  626,  752,  747,   56,  626,  747,
      748,   59,  626,  626,  747,   56,  800,  626,  748,   59,
       56,  626,  626,  778,   59,  573,  573,  573,  574,  574,
      574,  778,  634,  634,  634,  799,  600,  600,  600, 1215,
      798,  634, 1215,  573,  600,  797,  574,   56,   57,   57,
      634,   59,  796,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   60,  573,   60,   60,

      574,  600,  794,   63,  634,   63,   63,  793,   63,  805,
       64,   60,   64,   64,  792,   64,  791,  805,   63,   60,
      790,  635,  635,  635,   60,   64,   63,  638,  638,  638,
      635,   63,  789,   64,  788,  639,  639,  639,   64,  635,
      785,  640,  640,  640, 1216,  638,  777, 1216,  664,  664,
      664,   60,   61,  639,   61,   61,  664,   61,   63,  640,
       61,   61,   61,  753,  776,   64,  753,   61,  673,  673,
      673,  753,  775,  635, 1217,   61,   61, 1217,  774,  638,
      674,  674,  674,  693,  693,  693, 1219,  639, 1225, 1219,
      664, 1225,  693,  640,  694,  694,  694,  697,  697,  697,

      773,  693,  772,  694,  698,  698,  698,   61,   62,  771,
       62,   62,  694,   62,  770,  697,   62,   62,   62,  769,
      708,  768,  698,   62,  708,  713,  713,  713,  715,  715,
      715,   62,   62,  713,  767,  693,  722,  722,  722,  708,
      724,  724,  724,  750,  766, 1228,  694,  750, 1228,  697,
      754,  754,  754,  786,  786,  786,  698, 1243,  754,  765,
     1243,  786,  750,   62,   65,   65,   65,   65,   65,   65,
       65,   65,   65,   65,   65,   65,   65,   65,   65,   65,
       65,   65,   65,   65,   65,   65,   65,   65,   65,   65,
       65,   65,   65,   65,   65,   65,   65,   65,   65,   65,

       65,   65,   65,   65,   65,   65,   65,   65,   65,   65,
       65,   65,   65,   65,   65,   65,   65,   65,   65,   65,
       65,  207,  764,  763,  762,  207,  699,  699,  699,  207,
      207,  207, 1252, 1253,  207, 1252, 1253, 1254,  207,  207,
     1254,  761, 1255,  207,  699, 1255,  760,  207,  207,  344,
      759,  758,  756,  344,  344,  344, 1261,  746,  344, 1261,
      344,  740,  741,  741,  741,  344,  344,  344,  348,  739,
      738,  741,  348,  348,  348,  737,  736,  348,  699,  348,
      741,  814,  814,  814,  348,  348,  348,  361,  735,  814,
      734,  361,  361,  361, 1264,  733,  361, 1264,  361,  732,

      834,  834,  834,  361,  361,  361,  367,  367,  834,  731,
      367,  367,  367, 1281,  741,  367, 1281,  367,  730,  742,
      742,  742,  367,  367,  367,  375,  729,  375,  742,  728,
      727,  375,  375,  375,  726,  725,  375,  742,  375,  721,
      743,  743,  743,  375,  375,  375,  408,  720,  719,  718,
      408,  408,  408,  717,  716,  408,  712,  408,  743,  744,
      744,  744,  408,  408,  408,  409,  409,  711,  409,  710,
      409,  742,  709,  703,  409,  409,  701,  744,  700,  409,
      850,  850,  850,  409,  409,  422,  692,  691,  850,  422,
      422,  422,  743,  690,  422,  689,  422,  745,  745,  745,

      688,  422,  422,  422,  432,  687,  686,  685,  432,  684,
      683,  744,  432,  432,  432,  745,  682,  432,  681,  432,
      861,  861,  861,  680,  432,  432,  432,  438,  861,  679,
      678,  438,  438,  438,  677,  676,  438,  675,  438,  870,
      870,  870,  672,  438,  438,  438,  442,  870,  671,  745,
      442,  442,  442,  670,  669,  442,  668,  442,  667,  665,
      662,  660,  442,  442,  442,  579,  579,  579,  579,  579,
      579,  579,  579,  579,  579,  579,  579,  579,  579,  579,
      579,  579,  579,  579,  579,  579,  579,  579,  579,  579,
      579,  579,  579,  579,  579,  579,  579,  579,  579,  579,

      579,  579,  579,  579,  579,  579,  579,  579,  579,  579,
      579,  579,  579,  579,  579,  579,  579,  579,  579,  579,
      579,  579,  647,  647,  647,  647,  647,  647,  647,  647,
      647,  647,  647,  647,  647,  647,  647,  647,  647,  647,
      647,  647,  647,  647,  647,  647,  647,  647,  647,  647,
      647,  647,  647,  647,  647,  647,  647,  647,  647,  647,
      647,  647,  647,  647,  647,  647,  647,  647,  647,  647,
      647,  647,  647,  647,  647,  647,  647,  647,  647,  714,
      714,  714,  659,  714,  755,  755,  755,  714,  755,  779,
      779,  779,  755,  780,  780,  780,  656,  653,  779,  781,

      781,  781,  780,  782,  782,  782,  652,  779,  783,  783,
      783,  780,  787,  787,  787,  651,  787,  781,  650,  649,
      787,  782,  646,  642,  641,  630,  783,  629,  807,  807,
      807,  714,  809,  809,  809,  625,  755,  807,  808,  808,
      808,  779,  624,  623,  622,  780,  807,  808,  621,  620,
      809,  781,  810,  810,  810,  782,  808,  811,  811,  811,
      783,  815,  815,  815,  787,  815,  619,  617,  616,  815,
      810,  615,  816,  816,  816,  811,  816,  828,  828,  828,
      807,  830,  830,  830,  809,  614,  828,  829,  829,  829,
      808,  613,  831,  831,  831,  828,  829,  612,  611,  830,

      832,  832,  832,  610,  810,  829,  836,  836,  836,  811,
      831,  608,  607,  815,  606,  835,  835,  835,  832,  835,
      875,  875,  875,  835,  816,  844,  844,  844,  875,  828,
      846,  846,  846,  830,  844,  603,  845,  845,  845,  829,
      852,  852,  852,  844,  831,  845,  592,  591,  846,  590,
      586,  585,  832,  584,  845,  847,  847,  847,  836,  583,
      848,  848,  848,  582,  851,  851,  851,  835,  851,  858,
      858,  858,  851,  847,  581,  580,  577,  844,  848,  576,
      570,  567,  846,  565,  856,  856,  856,  858,  845,  863,
      863,  863,  852,  856,  563,  857,  857,  857,  560,  859,

      859,  859,  856,  555,  857,  551,  549,  847,  860,  860,
      860,  546,  848,  857,  545,  544,  851,  859,  543,  542,
      541,  858,  540,  862,  862,  862,  860,  862,  865,  865,
      865,  862,  867,  867,  867,  539,  856,  865,  868,  868,
      868,  863,  537,  866,  866,  866,  865,  857,  536,  535,
      867,  859,  866,  869,  869,  869,  868,  872,  872,  872,
      860,  866,  871,  871,  871,  534,  871,  873,  873,  873,
      871,  869,  877,  877,  877,  862,  873,  533,  532,  530,
      865,  878,  878,  878,  867,  873,  880,  880,  880,  878,
      868,  529,  874,  874,  874,  866,  876,  876,  876,  527,

      876,  874,  524,  522,  876,  869,  883,  883,  883,  872,
      874,  886,  886,  886,  871,  889,  889,  889,  521,  873,
      517,  879,  879,  879,  877,  879,  881,  881,  881,  879,
      516,  882,  882,  882,  881,  882,  508,  504,  880,  882,
      503,  884,  884,  884,  874,  892,  892,  892,  876,  884,
      492,  885,  885,  885,  490,  885,  489,  488,  883,  885,
      887,  887,  887,  886,  895,  895,  895,  889,  887,  486,
      888,  888,  888,  879,  888,  898,  898,  898,  888,  890,
      890,  890,  485,  882,  891,  891,  891,  890,  891,  484,
      481,  479,  891,  893,  893,  893,  478,  892,  894,  894,

      894,  893,  894,  885,  477,  476,  894,  896,  896,  896,
      897,  897,  897,  475,  897,  896,  895,  474,  897,  901,
      901,  901,  888,  899,  899,  899,  472,  898,  904,  904,
      904,  899,  471,  900,  900,  900,  891,  900,  902,  902,
      902,  900,  470,  903,  903,  903,  902,  903,  469,  468,
      894,  903,  905,  905,  905,  906,  906,  906,  466,  906,
      905,  462,  897,  906,  907,  907,  907,  908,  908,  908,
      459,  901,  910,  910,  910,  908,  913,  913,  913,  458,
      904,  456,  909,  909,  909,  900,  909,  916,  916,  916,
      909,  911,  911,  911,  455,  903,  912,  912,  912,  911,

      912,  914,  914,  914,  912,  451,  450,  906,  446,  914,
      915,  915,  915,  445,  915,  441,  907,  440,  915,  917,
      917,  917,  437,  436,  910,  433,  431,  917,  913,  918,
      918,  918,  430,  918,  909,  425,  424,  918,  421,  916,
      919,  919,  919,  920,  920,  920,  418,  417,  912,  416,
      415,  920,  921,  921,  921,  414,  921,  922,  922,  922,
      921,  413,  915,  923,  923,  923,  924,  924,  924,  412,
      924,  923,  411,  410,  924,  925,  925,  925,  926,  926,
      926,  918,  407,  927,  927,  927,  926,  927,  928,  928,
      928,  927,  919,  929,  929,  929,  400,  395,  930,  930,

      930,  929,  930,  394,  921,  390,  930,  388,  387,  922,
      931,  931,  931,  932,  932,  932,  386,  385,  924,  384,
      382,  932,  933,  933,  933,  377,  933,  925,  371,  360,
      933,  934,  934,  934,  359,  927,  935,  935,  935,  356,
      928,  936,  936,  936,  935,  936,  937,  937,  937,  936,
      930,  938,  938,  938,  350,  342,  939,  939,  939,  938,
      939,  339,  931,  336,  939,  940,  940,  940,  941,  941,
      941,  942,  942,  942,  933,  942,  941,  335,  334,  942,
      943,  943,  943,  934,  944,  944,  944,  945,  945,  945,
      333,  945,  944,  936,  332,  945,  331,  329,  937,  946,

      946,  946,  947,  947,  947,  948,  948,  948,  939,  948,
      947,  327,  326,  948,  949,  949,  949,  940,  950,  950,
      950,  316,  315,  942,  312,  305,  950,  951,  951,  951,
      297,  951,  943,  293,  285,  951,  952,  952,  952,  945,
      953,  953,  953,  277,  269,  954,  954,  954,  953,  954,
      260,  946,  258,  954,  955,  955,  955,  948,  251,  956,
      956,  956,  958,  958,  958,  248,  949,  956,  957,  957,
      957,  241,  957,  959,  959,  959,  957,  235,  233,  951,
      218,  959,  960,  960,  960,  215,  960,  213,  952,  206,
      960,  961,  961,  961,  962,  962,  962,  954,  204,  963,

      963,  963,  962,  963,  198,  189,  955,  963,  964,  964,
      964,  965,  965,  965,  958,  967,  967,  967,  179,  965,
      957,  966,  966,  966,  176,  966,  970,  970,  970,  966,
      968,  968,  968,  169,  960,  973,  973,  973,  968,  167,
      969,  969,  969,  961,  969,  971,  971,  971,  969,  166,
      165,  963,  164,  971,  972,  972,  972,  161,  972,  157,
      964,  155,  972,  974,  974,  974,  154,  967,  975,  975,
      975,  974,  975,  966,  144,  133,  975,  131,  970,  976,
      976,  976,  977,  977,  977,  123,  116,  973,  114,  107,
      977,  104,  969,  978,  978,  978,   97,  978,  979,  979,

      979,  978,  980,  980,  980,   96,  972,  981,  981,  981,
      980,  981,  982,  982,  982,  981,  983,  983,  983,   93,
      975,  984,  984,  984,  983,  984,  985,  985,  985,  984,
       92,  976,  986,  986,  986,  987,  987,  987,   90,  987,
      986,   82,   73,  987,   67,  978,  988,  988,  988,    0,
      979,    0,  989,  989,  989,  991,  991,  991,    0,  981,
      989,  990,  990,  990,  982,  990,  992,  992,  992,  990,
      994,  994,  994,  984,  992,  993,  993,  993,  985,  993,
      995,  995,  995,  993,  997,  997,  997,  987,  995,  996,
      996,  996,    0,  996,  998,  998,  998,  996,  988, 1000,

     1000, 1000,  998,    0,  999,  999,  999,  991,  999, 1001,
     1001, 1001,  999,  990, 1003, 1003, 1003, 1001, 1006, 1006,
     1006,    0,  994,    0, 1002, 1002, 1002,  993, 1002, 1004,
     1004, 1004, 1002, 1009, 1009, 1009,  997, 1004, 1005, 1005,
     1005,  996, 1005, 1012, 1012, 1012, 1005, 1007, 1007, 1007,
        0, 1000, 1010, 1010, 1010, 1007,  999, 1008, 1008, 1008,
     1010, 1008, 1015, 1015, 1015, 1008, 1003, 1011, 1011, 1011,
     1006, 1011, 1013, 1013, 1013, 1011, 1002, 1018, 1018, 1018,
     1013, 1016, 1016, 1016,    0, 1009, 1021, 1021, 1021, 1016,
     1005,    0, 1014, 1014, 1014, 1012, 1014, 1017, 1017, 1017,

     1014, 1017, 1019, 1019, 1019, 1017, 1024, 1024, 1024, 1008,
     1019, 1027, 1027, 1027, 1015,    0, 1020, 1020, 1020, 1011,
     1020,    0,    0,    0, 1020, 1022, 1022, 1022,    0, 1018,
     1030, 1030, 1030, 1022,    0, 1023, 1023, 1023, 1021, 1023,
     1025, 1025, 1025, 1023, 1014, 1033, 1033, 1033, 1025, 1017,
        0, 1026, 1026, 1026,    0, 1026,    0,    0, 1024, 1026,
     1036, 1036, 1036, 1027, 1028, 1028, 1028,    0, 1020, 1029,
     1029, 1029, 1028, 1029, 1039, 1039, 1039, 1029, 1031, 1031,
     1031,    0, 1030, 1034, 1034, 1034, 1031, 1023, 1032, 1032,
     1032, 1034, 1032, 1037, 1037, 1037, 1032, 1033, 1035, 1035,

     1035, 1037, 1035, 1026,    0,    0, 1035, 1038, 1038, 1038,
        0, 1038, 1036,    0,    0, 1038, 1040, 1040, 1040,    0,
        0, 1029,    0,    0, 1040,    0, 1039, 1041, 1041, 1041,
        0, 1041, 1042, 1042, 1042, 1041, 1043, 1043, 1043,    0,
     1032, 1044, 1044, 1044, 1043, 1044, 1045, 1045, 1045, 1044,
     1035,    0, 1046, 1046, 1046, 1048, 1048, 1048,    0, 1038,
     1046, 1047, 1047, 1047,    0, 1047, 1049, 1049, 1049, 1047,
     1051, 1051, 1051,    0, 1049, 1054, 1054, 1054,    0, 1041,
        0, 1050, 1050, 1050, 1042, 1050, 1052, 1052, 1052, 1050,
     1057, 1057, 1057, 1044, 1052, 1053, 1053, 1053, 1045, 1053,

     1055, 1055, 1055, 1053, 1060, 1060, 1060, 1048, 1055,    0,
     1056, 1056, 1056, 1047, 1056, 1058, 1058, 1058, 1056, 1063,
     1063, 1063, 1051, 1058, 1059, 1059, 1059, 1054, 1059, 1061,
     1061, 1061, 1059, 1050, 1066, 1066, 1066, 1061, 1069, 1069,
     1069,    0, 1057,    0, 1062, 1062, 1062, 1053, 1062, 1064,
     1064, 1064, 1062, 1072, 1072, 1072, 1060, 1064,    0, 1065,
     1065, 1065, 1056, 1065, 1067, 1067, 1067, 1065, 1075, 1075,
     1075, 1063, 1067, 1068, 1068, 1068, 1059, 1068, 1078, 1078,
     1078, 1068,    0, 1070, 1070, 1070, 1066, 1080, 1080, 1080,
     1069, 1070,    0, 1071, 1071, 1071, 1062, 1071, 1073, 1073,

     1073, 1071, 1082, 1082, 1082, 1072, 1073,    0, 1074, 1074,
     1074, 1065, 1074, 1077, 1077, 1077, 1074, 1077,    0,    0,
     1075, 1077, 1084, 1084, 1084, 1068,    0, 1079, 1079, 1079,
     1078, 1079, 1081, 1081, 1081, 1079, 1081,    0,    0, 1080,
     1081,    0, 1083, 1083, 1083, 1071, 1083, 1085, 1085, 1085,
     1083, 1085,    0,    0, 1082, 1085, 1086, 1086, 1086,    0,
     1074,    0, 1087, 1087, 1087, 1077, 1087, 1088, 1088, 1088,
     1087, 1089, 1089, 1089, 1084, 1090, 1090, 1090,    0, 1079,
     1091, 1091, 1091,    0, 1081, 1092, 1092, 1092, 1093, 1093,
     1093, 1095, 1095, 1095, 1083, 1096, 1096, 1096,    0, 1085,

     1097, 1097, 1097, 1098, 1098, 1098,    0,    0, 1086, 1099,
     1099, 1099,    0,    0, 1087, 1100, 1100, 1100,    0, 1088,
     1101, 1101, 1101, 1089, 1102, 1102, 1102, 1090, 1103, 1103,
     1103,    0, 1091, 1104, 1104, 1104,    0, 1092,    0,    0,
     1093,    0,    0, 1095, 1105, 1105, 1105, 1096, 1106, 1106,
     1106,    0, 1097,    0,    0, 1098, 1107, 1107, 1107,    0,
        0, 1099, 1108, 1108, 1108,    0,    0, 1100, 1109, 1109,
     1109,    0, 1101, 1110, 1110, 1110, 1102, 1111, 1111, 1111,
     1103, 1112, 1112, 1112,    0, 1104, 1113, 1113, 1113, 1114,
     1114, 1114, 1115, 1115, 1115,    0, 1105, 1116, 1116, 1116,

     1106, 1117, 1117, 1117, 1118, 1118, 1118,    0, 1107, 1119,
     1119, 1119,    0,    0, 1108, 1120, 1120, 1120,    0,    0,
     1109, 1121, 1121, 1121,    0, 1110, 1122, 1122, 1122, 1111,
     1123, 1123, 1123, 1112, 1124, 1124, 1124,    0, 1113,    0,
        0, 1114,    0,    0, 1115, 1125, 1125, 1125,    0, 1116,
     1126, 1126, 1126, 1117,    0,    0, 1118, 1127, 1127, 1127,
        0, 1119, 1128, 1128, 1128,    0,    0, 1120, 1129, 1129,
     1129,    0,    0, 1121, 1130, 1130, 1130,    0, 1122, 1131,
     1131, 1131, 1123, 1132, 1132, 1132, 1124, 1133, 1133, 1133,
     1134, 1134, 1134, 1135, 1135, 1135,    0, 1125, 1136, 1136,

     1136,    0, 1126, 1137, 1137, 1137, 1138, 1138, 1138, 1127,
     1139, 1139, 1139,    0, 1128, 1140, 1140, 1140,    0,    0,
     1129, 1141, 1141, 1141,    0,    0, 1130, 1142, 1142, 1142,
        0, 1131, 1143, 1143, 1143, 1132, 1144, 1144, 1144, 1133,
        0,    0, 1134,    0,    0, 1135, 1145, 1145, 1145,    0,
     1136, 1146, 1146, 1146,    0, 1137,    0,    0, 1138, 1147,
     1147, 1147, 1139, 1148, 1148, 1148,    0, 1140, 1149, 1149,
     1149,    0,    0, 1141, 1150, 1150, 1150,    0,    0, 1142,
     1151, 1151, 1151,    0, 1143, 1152, 1152, 1152, 1144, 1153,
     1153, 1153, 1154, 1154, 1154, 1155, 1155, 1155, 1145, 1156,

     1156, 1156,    0, 1146, 1157, 1157, 1157, 1158, 1158, 1158,
        0, 1147, 1159, 1159, 1159, 1148, 1160, 1160, 1160,    0,
     1149, 1161, 1161, 1161,    0,    0, 1150, 1162, 1162, 1162,
        0,    0, 1151, 1163, 1163, 1163,    0, 1152, 1164, 1164,
     1164, 1153,    0,    0, 1154,    0,    0, 1155, 1165, 1165,
     1165, 1156, 1166, 1166, 1166,    0, 1157,    0,    0, 1158,
     1167, 1167, 1167,    0, 1159, 1168, 1168, 1168, 1160, 1169,
     1169, 1169,    0, 1161, 1170, 1170, 1170,    0,    0, 1162,
        0,    0,    0,    0,    0, 1163,    0,    0,    0,    0,
     1164,    0,    0,    0,    0,    0,    0,    0,    0,    0,

     1165,    0,    0,    0, 1166,    0,    0,    0,    0,    0,
        0,    0, 1167,    0,    0,    0,    0, 1168,    0,    0,
        0, 1169,    0,    0,    0,    0, 1170, 1172, 1172, 1172,
     1172, 1172, 1172, 1172, 1172, 1172, 1172, 1172, 1172, 1172,
     1172, 1172, 1172, 1172, 1172, 1173, 1173, 1173, 1173, 1173,
     1173, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 1173,
     1173, 1173, 1173, 1174, 1174, 1174, 1174, 1174, 1174, 1174,
     1174, 1174, 1174, 1174, 1174, 1174, 1174, 1174, 1174, 1174,
     1174, 1175, 1175, 1175, 1175, 1175, 1175, 1175, 1175, 1175,
     1175, 1175, 1175, 1175, 1175, 1175, 1175, 1175, 1175, 1176,

     1176, 1176, 1176, 1176, 1176, 1176, 1176, 1176, 1176, 1176,
     1176, 1176, 1176, 1176, 1176, 1176, 1176, 1177, 1177, 1177,
     1177, 1177, 1177, 1177, 1177, 1177, 1177, 1177, 1177, 1177,
     1177, 1177, 1177, 1177, 1177, 1178, 1178, 1178, 1178, 1178,
     1178, 1178, 1178, 1178, 1178, 1178, 1178, 1178, 1178, 1178,
     1178, 1178, 1178, 1179, 1179, 1179, 1179, 1179, 1179, 1179,
     1179, 1179, 1179, 1179, 1179, 1179, 1179, 1179, 1179, 1179,
     1179, 1180, 1180, 1180, 1180, 1180, 1180, 1180, 1180, 1180,
     1180, 1180, 1180, 1180, 1180, 1180, 1180, 1180, 1180, 1181,
     1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181,

     1181, 1181, 1181, 1181, 1181, 1181, 1181, 1182, 1182, 1182,
     1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182,
     1182, 1182, 1182, 1182, 1182, 1183, 1183, 1183, 1183, 1183,
     1183, 1183, 1183, 1183, 1183, 1183, 1183, 1183, 1183, 1183,
     1183, 1183, 1183, 1184, 1184, 1184, 1184, 1184, 1184, 1184,
     1184, 1184, 1184, 1184, 1184, 1184, 1184, 1184, 1184, 1184,
     1184, 1185, 1185, 1185, 1185, 1185, 1185, 1185, 1185, 1185,
     1185, 1185, 1185, 1185, 1185, 1185, 1185, 1185, 1185, 1186,
     1186, 1186, 1186, 1186, 1186, 1186, 1186, 1186, 1186, 1186,
     1186, 1186, 1186, 1186, 1186, 1186, 1186, 1187, 1187, 1187,

     1187, 1187, 1187, 1187, 1187, 1187, 1187, 1187, 1187, 1187,
     1187, 1187, 1187, 1187, 1187, 1188, 1188, 1188, 1188, 1188,
     1188, 1188, 1188, 1188, 1188, 1188, 1188, 1188, 1188, 1188,
     1188, 1188, 1188, 1189, 1189, 1189, 1189, 1189, 1189, 1189,
     1189, 1189, 1189, 1189, 1189, 1189, 1189, 1189, 1189, 1189,
     1189, 1190, 1190, 1190, 1190, 1190, 1190, 1190, 1190, 1190,
     1190, 1190, 1190, 1190, 1190, 1190, 1190, 1190, 1190, 1193,
     1193, 1193,    0, 1193, 1193,    0,    0, 1193, 1193, 1193,
     1193,    0, 1193, 1193, 1193, 1193, 1193, 1194, 1194, 1194,
        0, 1194, 1194, 1194,    0, 1194, 1194, 1194, 1194, 1194,

     1194, 1194, 1194, 1194, 1194, 1195, 1195, 1195,    0, 1195,
     1195,    0, 1195, 1195, 1195, 1195, 1195, 1195, 1195, 1195,
     1195, 1195, 1196, 1196, 1196,    0, 1196, 1196, 1196, 1196,
     1196, 1196, 1196, 1196, 1196, 1196, 1196, 1196, 1196, 1196,
     1197, 1197, 1197,    0, 1197, 1197, 1197, 1197, 1197, 1197,
     1197, 1197, 1197, 1197, 1197, 1197, 1197, 1197, 1198, 1198,
     1198,    0,    0,    0, 1198,    0,    0,    0,    0, 1198,
        0,    0, 1198, 1199, 1199, 1199,    0,    0, 1199,    0,
     1199, 1199, 1199, 1199, 1199, 1199, 1199, 1199, 1199, 1199,
     1200, 1200, 1200,    0, 1200, 1200, 1200, 1200, 1200, 1200,

     1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1201, 1201,
     1201,    0, 1201, 1201, 1201, 1201, 1201, 1201, 1201, 1201,
     1201, 1201, 1201, 1201, 1201, 1201, 1202,    0,    0,    0,
        0,    0, 1202,    0,    0,    0,    0, 1202,    0,    0,
     1202, 1203, 1203, 1203, 1203, 1203, 1203, 1203, 1203, 1203,
     1203, 1203, 1203, 1203, 1203, 1203, 1203, 1203, 1204, 1204,
        0,    0,    0,    0, 1204,    0,    0,    0,    0, 1204,
        0,    0, 1204, 1204, 1205,    0,    0,    0,    0,    0,
        0,    0,    0, 1205,    0, 1205,    0,    0, 1205, 1207,
     1207, 1207, 1207, 1207, 1207, 1207, 1207, 1207, 1207, 1207,

     1207, 1207, 1207, 1207, 1207, 1207, 1207, 1208,    0, 1208,
        0, 1208, 1208, 1208, 1208, 1208,    0, 1208, 1208,    0,
     1208, 1208,    0, 1208, 1209, 1209, 1209,    0, 1209, 1209,
     1209, 1209, 1209,    0, 1209, 1209, 1209, 1209, 1209, 1209,
        0, 1209, 1210, 1210, 1210,    0, 1210, 1210, 1210, 1210,
     1210, 1210, 1210, 1210, 1210, 1210, 1210,    0, 1210, 1211,
     1211, 1211,    0, 1211, 1211, 1211, 1211, 1211, 1211, 1211,
     1211,    0, 1211, 1211,    0, 1211, 1212,    0, 1212,    0,
     1212, 1212, 1212, 1212, 1212, 1212, 1212, 1212, 1212, 1212,
     1212,    0, 1212, 1213,    0, 1213,    0, 1213, 1213, 1213,

     1213, 1213,    0, 1213, 1213, 1213, 1213, 1213, 1213, 1213,
     1213, 1214,    0, 1214,    0, 1214, 1214, 1214, 1214, 1214,
     1214, 1214, 1214, 1214, 1214, 1214, 1214, 1214, 1214, 1218,
     1218, 1218,    0, 1218, 1218, 1218, 1218, 1218, 1218, 1218,
     1218, 1218, 1218, 1218, 1218, 1218, 1218, 1220, 1220, 1220,
        0, 1220, 1220, 1220,    0, 1220, 1220, 1220, 1220, 1220,
     1220, 1220, 1220, 1220, 1220, 1221, 1221, 1221,    0, 1221,
     1221, 1221, 1221, 1221, 1221, 1221, 1221, 1221, 1221, 1221,
     1221, 1221, 1221, 1222, 1222,    0, 1222,    0,    0, 1222,
     1223,    0, 1223, 1223,    0, 1223,    0, 1223,    0, 1223,

     1224, 1224, 1224,    0, 1224, 1224, 1224, 1224, 1224, 1224,
     1224, 1224, 1224, 1224, 1224, 1224, 1224, 1224, 1226, 1226,
     1226,    0, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226,
     1226, 1226, 1226, 1226, 1226, 1226, 1227, 1227, 1227,    0,
     1227, 1227, 1227, 1227, 1227, 1227, 1227, 1227, 1227, 1227,
     1227, 1227, 1227, 1227, 1229, 1229, 1229,    0, 1229, 1229,
        0,    0, 1229, 1229, 1229, 1229,    0, 1229, 1229, 1229,
     1229, 1229, 1230, 1230, 1230,    0, 1230, 1230, 1230, 1230,
     1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230, 1231,
     1231, 1231,    0, 1231, 1231, 1231, 1231, 1231, 1231, 1231,

     1231, 1231, 1231, 1231, 1231, 1231, 1231, 1232, 1232, 1232,
        0, 1232, 1232,    0, 1232, 1232, 1232, 1232, 1232, 1232,
     1232, 1232, 1232, 1232, 1233, 1233, 1233,    0, 1233, 1233,
     1233, 1233, 1233, 1233, 1233, 1233, 1233, 1233, 1233, 1233,
     1233, 1233, 1234, 1234, 1234,    0, 1234, 1234, 1234, 1234,
     1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234,
     1235, 1235, 1235,    0, 1235, 1235, 1235, 1235, 1235, 1235,
     1235, 1235, 1235, 1235, 1235, 1235, 1235, 1235, 1236, 1236,
     1236,    0,    0,    0, 1236,    0,    0,    0,    0, 1236,
        0,    0, 1236, 1237, 1237, 1237,    0,    0, 1237,    0,

     1237, 1237, 1237, 1237, 1237, 1237, 1237, 1237, 1237, 1237,
     1238, 1238, 1238,    0, 1238, 1238, 1238, 1238, 1238, 1238,
     1238, 1238, 1238, 1238, 1238, 1238, 1238, 1238, 1239,    0,
        0,    0,    0,    0, 1239,    0,    0,    0,    0, 1239,
        0,    0, 1239, 1240, 1240, 1240, 1240, 1240, 1240, 1240,
     1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240,
     1241, 1241,    0,    0,    0,    0, 1241,    0,    0,    0,
        0, 1241,    0,    0, 1241, 1241, 1242,    0,    0,    0,
        0,    0,    0,    0,    0, 1242,    0, 1242,    0,    0,
     1242, 1244, 1244, 1244, 1244, 1244, 1244, 1244, 1244, 1244,

     1244, 1244, 1244, 1244, 1244, 1244, 1244, 1244, 1244, 1245,
        0, 1245,    0, 1245, 1245, 1245, 1245, 1245,    0, 1245,
     1245,    0, 1245, 1245,    0, 1245, 1246, 1246, 1246,    0,
     1246, 1246, 1246, 1246, 1246,    0, 1246, 1246, 1246, 1246,
     1246, 1246,    0, 1246, 1247, 1247, 1247,    0, 1247, 1247,
     1247, 1247, 1247, 1247, 1247, 1247, 1247, 1247, 1247,    0,
     1247, 1248, 1248, 1248,    0, 1248, 1248, 1248, 1248, 1248,
     1248, 1248, 1248,    0, 1248, 1248,    0, 1248, 1249,    0,
     1249,    0, 1249, 1249, 1249, 1249, 1249, 1249, 1249, 1249,
     1249, 1249, 1249,    0, 1249, 1250,    0, 1250,    0, 1250,

     1250, 1250, 1250, 1250,    0, 1250, 1250, 1250, 1250, 1250,
     1250, 1250, 1250, 1251,    0, 1251,    0, 1251, 1251, 1251,
     1251, 1251, 1251, 1251, 1251, 1251, 1251, 1251, 1251, 1251,
     1251, 1256, 1256, 1256,    0, 1256, 1256, 1256, 1256, 1256,
     1256, 1256, 1256, 1256, 1256, 1256, 1256, 1256, 1257, 1257,
     1257,    0, 1257, 1257, 1257, 1257, 1257, 1257, 1257, 1257,
     1257, 1257, 1257, 1257, 1257, 1257, 1258, 1258,    0, 1258,
        0,    0, 1258, 1259, 1259, 1259,    0, 1259, 1259, 1259,
     1259, 1259, 1259, 1259, 1259, 1259, 1259, 1259, 1259, 1259,
     1259, 1260, 1260, 1260,    0, 1260, 1260, 1260, 1260, 1260,

     1260, 1260, 1260, 1260, 1260, 1260, 1260, 1260, 1260, 1262,
     1262, 1262,    0, 1262, 1262, 1262, 1262, 1262, 1262, 1262,
     1262, 1262, 1262, 1262, 1262, 1262, 1262, 1263, 1263, 1263,
        0, 1263, 1263, 1263, 1263, 1263, 1263, 1263, 1263, 1263,
     1263, 1263, 1263, 1263, 1263, 1265, 1265, 1265,    0, 1265,
     1265, 1265, 1265, 1265, 1265, 1265, 1265, 1265, 1265, 1265,
     1265, 1265, 1266, 1266, 1266,    0, 1266, 1266,    0,    0,
     1266, 1266, 1266, 1266,    0, 1266, 1266, 1266, 1266, 1266,
     1267, 1267, 1267,    0, 1267, 1267, 1267, 1267, 1267, 1267,
     1267, 1267, 1267, 1267, 1267, 1267, 1267, 1267, 1268, 1268,

     1268,    0, 1268, 1268, 1268, 1268, 1268, 1268, 1268, 1268,
     1268, 1268, 1268, 1268, 1268, 1268, 1269, 1269, 1269,    0,
     1269, 1269, 1269, 1269, 1269, 1269, 1269, 1269, 1269, 1269,
     1269, 1269, 1269, 1269, 1270, 1270, 1270,    0, 1270, 1270,
     1270, 1270, 1270, 1270, 1270, 1270, 1270, 1270, 1270, 1270,
     1270, 1270, 1271, 1271, 1271,    0, 1271, 1271,    0, 1271,
     1271, 1271, 1271, 1271, 1271, 1271, 1271, 1271, 1271, 1272,
     1272, 1272,    0,    0,    0, 1272,    0,    0,    0,    0,
     1272,    0,    0, 1272, 1273, 1273, 1273,    0,    0, 1273,
        0, 1273, 1273, 1273, 1273, 1273, 1273, 1273, 1273, 1273,

     1273, 1274, 1274, 1274,    0, 1274, 1274, 1274, 1274, 1274,
     1274, 1274, 1274, 1274, 1274, 1274, 1274, 1274, 1274, 1275,
     1275, 1275, 1275, 1275, 1275, 1275, 1275, 1275, 1275, 1275,
     1275, 1275, 1275, 1275, 1275, 1275, 1276, 1276, 1276,    0,
     1276, 1276, 1276, 1276, 1276, 1276, 1276, 1276, 1276, 1276,
     1276, 1276, 1276, 1277, 1277, 1277, 1277, 1277, 1277, 1277,
     1277, 1277, 1277, 1277, 1277, 1277, 1277, 1277, 1277, 1277,
     1277, 1278, 1278, 1278,    0, 1278, 1278, 1278, 1278, 1278,
     1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 1279, 1279,
     1279,    0, 1279, 1279, 1279, 1279, 1279, 1279, 1279, 1279,

     1279, 1279, 1279, 1279, 1279, 1280,    0,    0,    0, 1280,
        0,    0,    0,    0,    0,    0,    0, 1280,    0, 1280,
     1282, 1282, 1282, 1282, 1282, 1282, 1282, 1282, 1282, 1282,
     1282, 1282, 1282,    0, 1282, 1282,    0, 1282, 1171, 1171,
     1171, 1171, 1171, 1171, 1171, 1171, 1171, 1171, 1171, 1171,
     1171, 1171, 1171, 1171, 1171, 1171, 1171, 1171, 1171, 1171,
     1171, 1171, 1171, 1171, 1171, 1171, 1171, 1171, 1171, 1171,
     1171, 1171, 1171, 1171, 1171, 1171, 1171, 1171, 1171, 1171,
     1171, 1171, 1171, 1171, 1171, 1171, 1171, 1171, 1171, 1171,
     1171, 1171, 1171, 1171, 1171, 1171

    } ;

extern int preYY_flex_debug;
int preYY_flex_debug = 0;

static yy_state_type *yy_state_buf=0, *yy_state_ptr=0;
static char *yy_full_match;
static int yy_lp;
static int yy_looking_for_trail_begin = 0;
static int yy_full_lp;
static int *yy_full_state;
#define YY_TRAILING_MASK 0x2000
#define YY_TRAILING_HEAD_MASK 0x4000
#define REJECT \
{ \
*yy_cp = (yy_hold_char); /* undo effects of setting up preYYtext */ \
yy_cp = (yy_full_match); /* restore poss. backed-over text */ \
(yy_lp) = (yy_full_lp); /* restore orig. accepting pos. */ \
(yy_state_ptr) = (yy_full_state); /* restore orig. state */ \
yy_current_state = *(yy_state_ptr); /* restore curr. state */ \
++(yy_lp); \
goto find_rule; \
}

#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *preYYtext;
#line 1 "pre.l"
/******************************************************************************
 *
 * 
 *
 * Copyright (C) 1997-2012 by Dimitri van Heesch.
 *
 * Permission to use, copy, modify, and distribute this software and its
 * documentation under the terms of the GNU General Public License is hereby 
 * granted. No representations are made about the suitability of this software 
 * for any purpose. It is provided "as is" without express or implied warranty.
 * See the GNU General Public License for more details.
 *
 * Documents produced by Doxygen are derivative works derived from the
 * input used in their production; they are not affected by this license.
 *
 */
#line 19 "pre.l"

/*
 *	includes
 */

#include <stdio.h>
#include <assert.h>
#include <ctype.h>
#include <errno.h>

#include "qtbc.h"
#include <qarray.h>
#include <qstack.h>
#include <qfile.h>
#include <qstrlist.h>
#include <qdict.h>
#include <qregexp.h>
#include <qfileinfo.h>
#include <qdir.h>
  
#include "pre.h"
#include "constexp.h"
#include "define.h"
#include "doxygen.h"
#include "message.h"
#include "util.h"
#include "defargs.h"
#include "debug.h"
#include "bufstr.h"
#include "portable.h"
#include "bufstr.h"
#include "arguments.h"
#include "entry.h"

#define YY_NEVER_INTERACTIVE 1
  

struct FileState
{
  FileState(int size) : fileBuf(size), 
                        oldFileBuf(0), oldFileBufPos(0) {}
  int lineNr;
  BufStr fileBuf;
  BufStr *oldFileBuf;
  int oldFileBufPos;
  YY_BUFFER_STATE bufState;
  QCString fileName;
};  

/** @brief Singleton that manages the defines available while 
 *  proprocessing files. 
 */
class DefineManager
{
  /** Local class used to hold the defines for a single file */
  class DefinesPerFile
  {
    public:
      /** Creates an empty container for defines */
      DefinesPerFile() : m_defines(257), m_includedFiles(17)
      {
        m_defines.setAutoDelete(TRUE);
      }
      /** Destroys the object */
      virtual ~DefinesPerFile()
      {
      }
      /** Adds a define in the context of a file. Will replace 
       *  an existing define with the same name (redefinition)
       *  @param def The Define object to add.
       */
      void addDefine(Define *def)
      {
	Define *d = m_defines.find(def->name);
	if (d!=0) // redefine
	{
	  m_defines.remove(d->name);
	}
	m_defines.insert(def->name,def);
      }
      /** Adds an include file for this file 
       *  @param fileName The name of the include file
       */
      void addInclude(const char *fileName)
      {
	m_includedFiles.insert(fileName,(void*)0x8);
      }
      void collectDefines(DefineDict *dict,QDict<void> &includeStack);
    private:
      DefineDict m_defines;
      QDict<void> m_includedFiles;
  };

  public:
    friend class DefinesPerFile;
    /** Returns a reference to the singleton */
    static DefineManager &instance()
    {
      if (theInstance==0) theInstance = new DefineManager;
      return *theInstance;
    }
    /** Deletes the singleton */
    static void deleteInstance()
    {
      delete theInstance;
      theInstance = 0;
    }
    /** Starts a context in which defines are collected. 
     *  Called at the start of a new file that is preprocessed.
     *  @param fileName the name of the file to process.
     */
    void startContext(const char *fileName)
    {
      //printf("DefineManager::startContext()\n");
      m_contextDefines.clear();
      if (fileName==0) return;
      DefinesPerFile *dpf = m_fileMap.find(fileName);
      if (dpf==0)
      {
	//printf("New file!\n");
	dpf = new DefinesPerFile;
	m_fileMap.insert(fileName,dpf);
      }
    }
    /** Ends the context started with startContext() freeing any
     *  defines collected within in this context.
     */
    void endContext()
    {
      //printf("DefineManager::endContext()\n");
      m_contextDefines.clear();
    }
    /** Add an included file to the current context.
     *  If the file has been pre-processed already, all defines are added
     *  to the context.
     *  @param fileName The name of the include file to add to the context.
     */
    void addFileToContext(const char *fileName)
    {
      if (fileName==0) return;
      //printf("DefineManager::addFileToContext(%s)\n",fileName);
      DefinesPerFile *dpf = m_fileMap.find(fileName);
      if (dpf==0)
      {
	//printf("New file!\n");
	dpf = new DefinesPerFile;
	m_fileMap.insert(fileName,dpf);
      }
      else
      {
	//printf("existing file!\n");
	QDict<void> includeStack(17);
	dpf->collectDefines(&m_contextDefines,includeStack);
      }
    }

    /** Add a define to the manager object.
     *  @param fileName The file in which the define was found
     *  @param def The Define object to add.
     */
    void addDefine(const char *fileName,Define *def)
    {
      if (fileName==0) return;
      //printf("DefineManager::addDefine(%s,%s)\n",fileName,def->name.data());
      Define *d = m_contextDefines.find(def->name);
      if (d!=0) // redefine
      {
	m_contextDefines.remove(d->name);
      }
      m_contextDefines.insert(def->name,def);

      DefinesPerFile *dpf = m_fileMap.find(fileName);
      if (dpf==0)
      {
	dpf = new DefinesPerFile;
      }
      dpf->addDefine(def);
    }

    /** Add an include relation to the manager object.
     *  @param fromFileName file name in which the include was found.
     *  @param toFileName file name that is included.
     */
    void addInclude(const char *fromFileName,const char *toFileName)
    {
      //printf("DefineManager::addInclude(%s,%s)\n",fromFileName,toFileName);
      if (fromFileName==0 || toFileName==0) return;
      DefinesPerFile *dpf = m_fileMap.find(fromFileName);
      if (dpf==0)
      {
	dpf = new DefinesPerFile;
      }
      dpf->addInclude(toFileName);
    }
    /** Returns a Define object given its name or 0 if the Define does
     *  not exist.
     */
    Define *isDefined(const char *name) const
    {
      return m_contextDefines.find(name);
    }
    /** Returns a reference to the defines found in the current context. */
    const DefineDict &defineContext() const
    {
      return m_contextDefines;
    }
  private:
    static DefineManager *theInstance;

    /** Helper function to collect all define for a given file */
    void collectDefinesForFile(const char *fileName,DefineDict *dict)
    {
      if (fileName==0) return;
      DefinesPerFile *dpf = m_fileMap.find(fileName);
      if (dpf)
      {
	QDict<void> includeStack(17);
	dpf->collectDefines(dict,includeStack);
      }
    }

    /** Helper function to return the DefinesPerFile object for a given file name. */
    DefinesPerFile *find(const char *fileName) const
    {
      if (fileName==0) return 0;
      return m_fileMap.find(fileName);
    }

    /** Creates a new DefineManager object */
    DefineManager() : m_fileMap(1009), m_contextDefines(1009)
    {
      m_fileMap.setAutoDelete(TRUE);
    }

    /** Destroys the object */
    virtual ~DefineManager() 
    {
    }

    QDict<DefinesPerFile> m_fileMap;
    DefineDict m_contextDefines;
};

/** Singleton instance */
DefineManager *DefineManager::theInstance = 0;

/** Collects all defines for a file and all files that the file includes.
 *  This function will recursively call itself for each file.
 *  @param dict The dictionary to fill with the defines. A redefine will
 *         replace a previous definition.
 *  @param includeStack The stack of includes, used to stop recursion in
 *         case there is a cyclic include dependency.
 */
void DefineManager::DefinesPerFile::collectDefines(
                     DefineDict *dict,QDict<void> &includeStack)
{
  //printf("DefinesPerFile::collectDefines #defines=%d\n",m_defines.count());
  {
    QDictIterator<void> di(m_includedFiles);
    for (di.toFirst();(di.current());++di)
    {
      QCString incFile = di.currentKey();
      DefinesPerFile *dpf = DefineManager::instance().find(incFile);
      if (dpf && includeStack.find(incFile)==0) 
      {
        //printf("  processing include %s\n",incFile.data());
	includeStack.insert(incFile,(void*)0x8);
	dpf->collectDefines(dict,includeStack);
      }
    }
  }
  {
    QDictIterator<Define> di(m_defines);
    Define *def;
    for (di.toFirst();(def=di.current());++di)
    {
      Define *d = dict->find(def->name);
      if (d!=0) // redefine
      {
	dict->remove(d->name);
      }
      dict->insert(def->name,def);
      //printf("  adding define %s\n",def->name.data());
    }
  }
}

/* -----------------------------------------------------------------
 *
 *	scanner's state
 */

static int                g_yyLineNr   = 1;
static QCString           g_yyFileName;
static FileDef           *g_yyFileDef;
static FileDef           *g_inputFileDef;
static int                g_ifcount    = 0;
static QStrList          *g_pathList = 0;  
static QStack<FileState>  g_includeStack;
static QDict<int>        *g_argDict;
static int                g_defArgs = -1;
static QCString           g_defName;
static QCString           g_defText;
static QCString           g_defLitText;
static QCString           g_defArgsStr;
static QCString           g_defExtraSpacing;
static bool               g_defVarArgs;
static int                g_level;
static int                g_lastCContext;
static int                g_lastCPPContext;
static QArray<int>        g_levelGuard;
static BufStr            *g_inputBuf;
static int                g_inputBufPos;
static BufStr            *g_outputBuf;
static int                g_roundCount;
static bool               g_quoteArg;
static DefineDict        *g_expandedDict;
static int                g_findDefArgContext;
static bool               g_expectGuard;
static QCString           g_guardName;
static QCString           g_lastGuardName;
static QCString           g_incName;
static QCString           g_guardExpr;
static int                g_curlyCount;
static bool               g_nospaces; // add extra spaces during macro expansion

static bool               g_macroExpansion; // from the configuration
static bool               g_expandOnlyPredef; // from the configuration
static int                g_commentCount;
static bool               g_insideComment;
static bool               g_isImported;
static QCString           g_blockName;
static int                g_condCtx;
static bool               g_skip;
static QStack<bool>       g_condStack;
static bool               g_insideCS; // C# has simpler preprocessor
static bool               g_isSource;

static bool               g_lexInit = FALSE;

//DefineDict* getGlobalDefineDict() 
//{
//  return g_globalDefineDict;
//}

static void setFileName(const char *name)
{
  bool ambig;
  QFileInfo fi(name);
  g_yyFileName=convertToQCString(fi.absFilePath());
  g_yyFileDef=findFileDef(Doxygen::inputNameDict,g_yyFileName,ambig);
  if (g_yyFileDef==0) // if this is not an input file check if it is an
                      // include file
  {
    g_yyFileDef=findFileDef(Doxygen::includeNameDict,g_yyFileName,ambig);
  }
  //printf("setFileName(%s) g_yyFileName=%s g_yyFileDef=%p\n",
  //    name,g_yyFileName.data(),g_yyFileDef);
  if (g_yyFileDef && g_yyFileDef->isReference()) g_yyFileDef=0;
  g_insideCS = getLanguageFromFileName(g_yyFileName)==SrcLangExt_CSharp;
  g_isSource = guessSection(g_yyFileName);
}

static void incrLevel()
{
  g_level++;
  g_levelGuard.resize(g_level);
  g_levelGuard[g_level-1]=FALSE;
  //printf("%s line %d: incrLevel %d\n",g_yyFileName.data(),g_yyLineNr,g_level);
}

static void decrLevel()
{
  //printf("%s line %d: decrLevel %d\n",g_yyFileName.data(),g_yyLineNr,g_level);
  if (g_level > 0)
  {
    g_level--;
    g_levelGuard.resize(g_level);
  }
  else
  {
    warn(g_yyFileName,g_yyLineNr,"warning: More #endif's than #if's found.\n");
  }
}

static bool otherCaseDone()
{
  if (g_level==0)
  {
    warn(g_yyFileName,g_yyLineNr,"warning: Found an #else without a preceding #if.\n");
    return TRUE;
  }
  else
  {
    return g_levelGuard[g_level-1];
  }
}

static void setCaseDone(bool value)
{
  g_levelGuard[g_level-1]=value;
}

#if 0
static bool macroIsAccessible(Define *def)
{
  //printf("macroIsAccessible(%s) input=%s def=%s\n",
  //    def->name.data(),g_inputFileDef?g_inputFileDef->name().data():"<none>",
  //    def->fileDef ? def->fileDef->name().data() : "<none>");
  if (def && def->isPredefined) // predefined macro -> globally accessible
  {
    //printf("%s: predefined macro %s\n",g_inputFileDef->name().data(),def->name.data());
    return TRUE;
  }
  if (def && def->fileDef==g_inputFileDef)
  {
    //printf("%s: macro %s defined in this file at line %d now at %d\n",
    //	g_inputFileDef->name().data(),def->name.data(),def->lineNr,g_yyLineNr);
    return def->lineNr<=g_yyLineNr;
  }
  if (g_inputFileDef && def && def->fileDef) // check if g_inputFileDef actually includes def->fileDef
  {
    QDict<FileDef> includedFiles(257);
    bool b = g_inputFileDef->includes(def->fileDef,&includedFiles);
    //printf("%s: Checking for accessibility of define '%s' (defined in %s): result=%d\n",
    //       g_inputFileDef->name().data(),def->name.data(),def->fileDef->name().data(),b);
    return b;
  }
  if (g_inputFileDef && def && !def->fileName.isEmpty())
  {
    bool b = g_inputFileDef->includesByName(def->fileName);
    //printf("%s: Checking for accessibility of define '%s' (defined in %s): result=%d\n",
    //       g_inputFileDef->name().data(),def->name.data(),def->fileName.data(),b);
    return b;
  }
  //printf("not accessible!\n");
  return FALSE;
}

static Define *isDefined(const char *name)
{
  Define *def=0;
  if (name)
  {
    def=g_globalDefineDict->find(name);
    if (def && def->undef) def=0;
    if (def && !macroIsAccessible(def)) def=0;
  }
  //printf("isDefined(%s)=%p\n",name,def);
  return def;
}
#endif


static QDict<void> g_allIncludes(10009);

static FileState *checkAndOpenFile(const QCString &fileName,bool &alreadyIncluded)
{
  alreadyIncluded = FALSE;
  FileState *fs = 0;
  //printf("checkAndOpenFile(%s)\n",fileName.data());
  QFileInfo fi(fileName);
  if (fi.exists() && fi.isFile())
  {
    static QStrList &exclPatterns = Config_getList("EXCLUDE_PATTERNS");
    if (patternMatch(fi,&exclPatterns)) return 0;

    QCString absName = convertToQCString(fi.absFilePath());

    // global guard
    if (g_curlyCount==0) // not #include inside { ... }
    {
      if (g_allIncludes.find(absName)!=0)
      {
        alreadyIncluded = TRUE;
        //printf("  already included 1\n");
        return 0; // already done
      }
      g_allIncludes.insert(absName,(void *)0x8);
    }
    // check include stack for absName

    QStack<FileState> tmpStack;
    g_includeStack.setAutoDelete(FALSE);
    while ((fs=g_includeStack.pop()))
    {
      if (fs->fileName==absName) alreadyIncluded=TRUE;
      tmpStack.push(fs);
    }
    while ((fs=tmpStack.pop()))
    {
      g_includeStack.push(fs);
    }
    g_includeStack.setAutoDelete(TRUE);

    if (alreadyIncluded)
    {
      //printf("  already included 2\n");
      return 0;
    }
    //printf("#include %s\n",absName.data());

    fs = new FileState(fi.size()+4096);
    alreadyIncluded = FALSE;
    if (!readInputFile(absName,fs->fileBuf))
    { // error
      //printf("  error reading\n");
      delete fs;
      fs=0;
    }
    else
    {
      fs->oldFileBuf    = g_inputBuf;
      fs->oldFileBufPos = g_inputBufPos;
    }
  }
  return fs;
}

static FileState *findFile(const char *fileName,bool localInclude,bool &alreadyIncluded)
{
  //printf("** findFile(%s,%d) g_yyFileName=%s\n",fileName,localInclude,g_yyFileName.data());
  if (localInclude && !g_yyFileName.isEmpty())
  {
    QFileInfo fi(g_yyFileName);
    if (fi.exists())
    {
      QCString absName = QCString(fi.dirPath(TRUE).data())+"/"+fileName;
      FileState *fs = checkAndOpenFile(absName,alreadyIncluded);
      if (fs)
      {
	setFileName(absName);
	g_yyLineNr=1;
	return fs;
      }
      else if (alreadyIncluded)
      {
	return 0;
      }
    }
  }
  if (g_pathList==0) 
  {
    return 0;
  }
  char *s=g_pathList->first();
  while (s)
  {
    QCString absName = (QCString)s+"/"+fileName;
    //printf("  Looking for %s in %s\n",fileName,s);
    FileState *fs = checkAndOpenFile(absName,alreadyIncluded);
    if (fs)
    {
      setFileName(absName);
      g_yyLineNr=1;
      //printf("  -> found it\n");
      return fs;
    }
    else if (alreadyIncluded)
    {
      return 0;
    }

    s=g_pathList->next();
  } 
  return 0;
}

static QCString extractTrailingComment(const char *s)
{
  if (s==0) return "";
  int i=strlen(s)-1;
  while (i>=0)
  {
    char c=s[i];
    switch (c)
    {
      case '/':
	{
	  i--;
	  if (i>=0 && s[i]=='*') // end of a comment block
	  {
	    i--;
	    while (i>0 && !(s[i-1]=='/' && s[i]=='*')) i--;
	    if (i==0) 
	    {
	      i++;
	    }
	    // only /*!< or /**< are treated as a comment for the macro name,
	    // otherwise the comment is treated as part of the macro definition
	    return ((s[i+1]=='*' || s[i+1]=='!') && s[i+2]=='<') ? &s[i-1] : ""; 
	  }
	  else
	  {
	    return "";
	  }
	} 
	break;
	// whitespace or line-continuation
      case ' ':
      case '\t': 
      case '\r':
      case '\n':
      case '\\':
	break;
      default:
	return "";
    }
    i--;
  }
  return "";
}

static int getNextChar(const QCString &expr,QCString *rest,uint &pos);
static int getCurrentChar(const QCString &expr,QCString *rest,uint pos);
static void unputChar(const QCString &expr,QCString *rest,uint &pos,char c);
static void expandExpression(QCString &expr,QCString *rest,int pos);

static QCString stringize(const QCString &s)
{
  QCString result;
  uint i=0;
  bool inString=FALSE;
  bool inChar=FALSE;
  char c,pc;
  while (i<s.length())
  {
    if (!inString && !inChar)
    {
      while (i<s.length() && !inString && !inChar)
      {
	c=s.at(i++);
	if (c=='"')
	{
	  result+="\\\"";
	  inString=TRUE;
	}
	else if (c=='\'')
	{
	  result+=c;
	  inChar=TRUE;
	}
	else
	{
	  result+=c;
	}
      }
    }
    else if (inChar)
    {
      while (i<s.length() && inChar)
      {
	c=s.at(i++);
	if (c=='\'')
	{
	  result+='\'';
	  inChar=FALSE;
	}
	else if (c=='\\')
	{
	  result+="\\\\";
	}
	else
	{
	  result+=c;
	}
      }
    }
    else
    {
      pc=0;
      while (i<s.length() && inString)
      {
	char c=s.at(i++);
	if (c=='"') 
	{
	  result+="\\\"";
	  inString= pc=='\\';
	}
	else if (c=='\\')
	  result+="\\\\";
	else
	  result+=c;
	pc=c;
      }
    }
  }
  //printf("stringize `%s'->`%s'\n",s.data(),result.data());
  return result;
}

/*! Execute all ## operators in expr. 
 * If the macro name before or after the operator contains a no-rescan 
 * marker (@-) then this is removed (before the concatenated macro name
 * may be expanded again.
 */
static void processConcatOperators(QCString &expr)
{
  //printf("processConcatOperators: in=`%s'\n",expr.data());
  QRegExp r("[ \\t\\n]*##[ \\t\\n]*"); 
  int l,n,i=0;
  if (expr.isEmpty()) return;
  while ((n=r.match(expr,i,&l))!=-1)
  {
    //printf("Match: `%s'\n",expr.data()+i);
    if (n+l+1<(int)expr.length() && expr.at(n+l)=='@' && expr.at(n+l+1)=='-')
    {
      // remove no-rescan marker after ID
      l+=2;
    }
    //printf("found `%s'\n",expr.mid(n,l).data());
    // remove the ## operator and the surrounding whitespace
    expr=expr.left(n)+expr.right(expr.length()-n-l);
    int k=n-1;
    while (k>=0 && isId(expr.at(k))) k--; 
    if (k>0 && expr.at(k)=='-' && expr.at(k-1)=='@')
    {
      // remove no-rescan marker before ID
      expr=expr.left(k-1)+expr.right(expr.length()-k-1);
      n-=2;
    }
    i=n;
  }
  //printf("processConcatOperators: out=`%s'\n",expr.data());
}

static void yyunput (int c,char *buf_ptr  );
static void returnCharToStream(char c)
{
  unput(c);
}

static inline void addTillEndOfString(const QCString &expr,QCString *rest,
                                       uint &pos,char term,QCString &arg)
{
  int cc;
  while ((cc=getNextChar(expr,rest,pos))!=EOF)
  {
    if (cc=='\\') arg+=(char)cc,cc=getNextChar(expr,rest,pos);
    else if (cc==term) return;
    arg+=(char)cc;
  }
}

/*! replaces the function macro \a def whose argument list starts at
 * \a pos in expression \a expr. 
 * Notice that this routine may scan beyond the \a expr string if needed.
 * In that case the characters will be read from the input file.
 * The replacement string will be returned in \a result and the 
 * length of the (unexpanded) argument list is stored in \a len.
 */ 
static bool replaceFunctionMacro(const QCString &expr,QCString *rest,int pos,int &len,const Define *def,QCString &result)
{
  //printf("replaceFunctionMacro(expr=%s,rest=%s,pos=%d,def=%s) level=%d\n",expr.data(),rest ? rest->data() : 0,pos,def->name.data(),g_level);
  uint j=pos;
  len=0;
  result.resize(0);
  int cc;
  while ((cc=getCurrentChar(expr,rest,j))!=EOF && isspace(cc)) 
  { 
    len++; 
    getNextChar(expr,rest,j); 
  }
  if (cc!='(') 
  { 
    unputChar(expr,rest,j,' '); 
    return FALSE; 
  }
  getNextChar(expr,rest,j); // eat the `(' character

  QDict<QCString> argTable;  // list of arguments
  argTable.setAutoDelete(TRUE);
  QCString arg;
  int argCount=0;
  bool done=FALSE;
  
  // PHASE 1: read the macro arguments
  if (def->nargs==0)
  {
    while ((cc=getNextChar(expr,rest,j))!=EOF)
    {
      char c = (char)cc;
      if (c==')') break;
    }
  }
  else
  {
    while (!done && (argCount<def->nargs || def->varArgs) && 
	((cc=getNextChar(expr,rest,j))!=EOF)
	  )
    {
      char c=(char)cc;
      if (c=='(') // argument is a function => search for matching )
      {
	int level=1;
	arg+=c;
	//char term='\0';
	while ((cc=getNextChar(expr,rest,j))!=EOF)
	{
	  char c=(char)cc;
	  //printf("processing %c: term=%c (%d)\n",c,term,term);
	  if (c=='\'' || c=='\"') // skip ('s and )'s inside strings
	  {
	    arg+=c;
	    addTillEndOfString(expr,rest,j,c,arg);
	  }
	  if (c==')')
	  {
	    level--;
	    arg+=c;
	    if (level==0) break;
	  }
	  else if (c=='(')
	  {
	    level++;
	    arg+=c;
	  }
	  else
	    arg+=c;
	}
      }
      else if (c==')' || c==',') // last or next argument found
      {
	if (c==',' && argCount==def->nargs-1 && def->varArgs)
	{
	  arg=arg.stripWhiteSpace();
	  arg+=',';
	}
	else
	{
	  QCString argKey;
	  argKey.sprintf("@%d",argCount++); // key name
	  arg=arg.stripWhiteSpace();
	  // add argument to the lookup table
	  argTable.insert(argKey, new QCString(arg));
	  arg.resize(0);
	  if (c==')') // end of the argument list
	  {
	    done=TRUE;
	  }
	}
      } 
      else if (c=='\"') // append literal strings
      {
	arg+=c; 
	bool found=FALSE;
	while (!found && (cc=getNextChar(expr,rest,j))!=EOF)
	{
	  found = cc=='"';
	  if (cc=='\\')
	  {
	    c=(char)cc;	  
	    arg+=c;
	    if ((cc=getNextChar(expr,rest,j))==EOF) break;
	  }
	  c=(char)cc;	  
	  arg+=c;
	}
      }
      else if (c=='\'') // append literal characters
      {
	arg+=c;
	bool found=FALSE;
	while (!found && (cc=getNextChar(expr,rest,j))!=EOF)
	{
	  found = cc=='\'';
	  if (cc=='\\')
	  {
	    c=(char)cc;	  
	    arg+=c;
	    if ((cc=getNextChar(expr,rest,j))==EOF) break;
	  }
	  c=(char)cc;
	  arg+=c;
	}
      }	    
      else // append other characters
      {
	arg+=c;
      }
    }
  }

  // PHASE 2: apply the macro function
  if (argCount==def->nargs || 
      (argCount>def->nargs && def->varArgs)) // matching parameters lists
  {
    uint k=0;
    // substitution of all formal arguments
    QCString resExpr;
    const QCString d=def->definition.stripWhiteSpace();
    //printf("Macro definition: %s\n",d.data());
    bool inString=FALSE;
    while (k<d.length())
    {
      if (d.at(k)=='@') // maybe a marker, otherwise an escaped @
      {
	if (d.at(k+1)=='@') // escaped @ => copy it (is unescaped later)
	{
	  k+=2;
	  resExpr+="@@"; // we unescape these later
	}
	else if (d.at(k+1)=='-') // no-rescan marker
	{
	  k+=2;
	  resExpr+="@-";
	}
	else // argument marker => read the argument number
	{
	  QCString key="@";
	  QCString *subst=0;
	  bool hash=FALSE;
	  int l=k-1;
	  // search for ## backward
	  if (l>=0 && d.at(l)=='"') l--;
	  while (l>=0 && d.at(l)==' ') l--;
	  if (l>0 && d.at(l)=='#' && d.at(l-1)=='#') hash=TRUE;
	  k++;
	  // scan the number
	  while (k<d.length() && d.at(k)>='0' && d.at(k)<='9') key+=d.at(k++);
	  if (!hash) 
	  {
	    // search for ## forward
	    l=k;
	    if (l<(int)d.length() && d.at(l)=='"') l++;
	    while (l<(int)d.length() && d.at(l)==' ') l++;
	    if (l<(int)d.length()-1 && d.at(l)=='#' && d.at(l+1)=='#') hash=TRUE;
	  }
	  //printf("request key %s result %s\n",key.data(),argTable[key]->data());
	  if (key.length()>1 && (subst=argTable[key])) 
	  {
	    QCString substArg=*subst;
	    //printf("substArg=`%s'\n",substArg.data());
	    // only if no ## operator is before or after the argument
	    // marker we do macro expansion.
	    if (!hash) expandExpression(substArg,0,0);
	    if (inString)
	    {
	      //printf("`%s'=stringize(`%s')\n",stringize(*subst).data(),subst->data());

	      // if the marker is inside a string (because a # was put 
	      // before the macro name) we must escape " and \ characters
	      resExpr+=stringize(substArg);
	    }
	    else
	    {
	      if (hash && substArg.isEmpty())
	      {
		resExpr+="@E"; // empty argument will be remove later on
	      }
	      else if (g_nospaces)
	      {
	        resExpr+=substArg;
	      }
	      else
	      {
	        resExpr+=" "+substArg+" ";
	      }
	    }
	  }
	}
      }
      else // no marker, just copy
      {
	if (!inString && d.at(k)=='\"') 
	{
	  inString=TRUE; // entering a literal string
	}
	else if (inString && d.at(k)=='\"' && (d.at(k-1)!='\\' || d.at(k-2)=='\\'))
	{
	  inString=FALSE; // leaving a literal string
	}
	resExpr+=d.at(k++);
      }
    }
    len=j-pos;
    result=resExpr;
    //printf("result after substitution `%s' expr=`%s'\n",
    //       result.data(),expr.mid(pos,len).data());
    return TRUE;
  }
  return FALSE;
}


/*! returns the next identifier in string \a expr by starting at position \a p.
 * The position of the identifier is returned (or -1 if nothing is found)
 * and \a l is its length. Any quoted strings are skipping during the search.
 */
static int getNextId(const QCString &expr,int p,int *l)
{
  int n;
  while (p<(int)expr.length())
  {
    char c=expr.at(p++);
    if (isdigit(c)) // skip number
    {
      while (p<(int)expr.length() && isId(expr.at(p))) p++;
    }
    else if (isalpha(c) || c=='_') // read id
    {
      n=p-1;
      while (p<(int)expr.length() && isId(expr.at(p))) p++;
      *l=p-n;
      return n; 
    }
    else if (c=='"') // skip string
    {
      char ppc=0,pc=c;
      if (p<(int)expr.length()) c=expr.at(p);
      while (p<(int)expr.length() && (c!='"' || (pc=='\\' && ppc!='\\'))) 
	// continue as long as no " is found, but ignoring \", but not \\"
      {
	ppc=pc;
	pc=c;
	c=expr.at(p);
	p++;
      }
      if (p<(int)expr.length()) ++p; // skip closing quote
    }
    else if (c=='/') // skip C Comment
    {
      //printf("Found C comment at p=%d\n",p);
      char pc=c;
      if (p<(int)expr.length()) 
      {
	c=expr.at(p);
        if (c=='*')  // Start of C comment
        { 
	  p++;
  	  while (p<(int)expr.length() && !(pc=='*' && c=='/'))
	  {
	    pc=c;
	    c=expr.at(p++);
	  }
        }
      }
      //printf("Found end of C comment at p=%d\n",p);
    }
  }
  return -1;
}

/*! preforms recursive macro expansion on the string \a expr
 *  starting at position \a pos.
 *  May read additional characters from the input while re-scanning!
 *  If \a expandAll is \c TRUE then all macros in the expression are
 *  expanded, otherwise only the first is expanded.
 */
static void expandExpression(QCString &expr,QCString *rest,int pos)
{
  //printf("expandExpression(%s,%s)\n",expr.data(),rest ? rest->data() : 0);
  QCString macroName;
  QCString expMacro;
  bool definedTest=FALSE;
  int i=pos,l,p,len;
  while ((p=getNextId(expr,i,&l))!=-1) // search for an macro name
  {
    bool replaced=FALSE;
    macroName=expr.mid(p,l);
    //printf("macroName=%s\n",macroName.data());
    if (p<2 || !(expr.at(p-2)=='@' && expr.at(p-1)=='-')) // no-rescan marker?
    {
      if (g_expandedDict->find(macroName)==0) // expand macro
      {
	Define *def=DefineManager::instance().isDefined(macroName);
	if (definedTest) // macro name was found after defined 
	{
	  if (def) expMacro = " 1 "; else expMacro = " 0 ";
	  replaced=TRUE;
	  len=l;
	  definedTest=FALSE;
	}
	else if (def && def->nargs==-1) // simple macro
	{
	  // substitute the definition of the macro
	  //printf("macro `%s'->`%s'\n",macroName.data(),def->definition.data());
	  if (g_nospaces)
	  {
	    expMacro=def->definition.stripWhiteSpace();
	  }
	  else
	  {
	    expMacro=" "+def->definition.stripWhiteSpace()+" ";
	  }
	  //expMacro=def->definition.stripWhiteSpace();
	  replaced=TRUE;
	  len=l;
	  //printf("simple macro expansion=`%s'->`%s'\n",macroName.data(),expMacro.data());
	}
	else if (def && def->nargs>=0) // function macro
	{
	  replaced=replaceFunctionMacro(expr,rest,p+l,len,def,expMacro);
	  len+=l;
	}
        else if (macroName=="defined")
        {
  	  //printf("found defined inside macro definition '%s'\n",expr.right(expr.length()-p).data());
	  definedTest=TRUE;
        }

	if (replaced) // expand the macro and rescan the expression
	{
	    
	  //printf("replacing `%s'->`%s'\n",expr.mid(p,len).data(),expMacro.data());
	  QCString resultExpr=expMacro;
	  QCString restExpr=expr.right(expr.length()-len-p);
	  processConcatOperators(resultExpr);
	  if (def && !def->nonRecursive)
	  {
	    g_expandedDict->insert(macroName,def);
	    expandExpression(resultExpr,&restExpr,0);
	    g_expandedDict->remove(macroName);
	  }
	  expr=expr.left(p)+resultExpr+restExpr;
	  i=p;
	  //printf("new expression: %s\n",expr.data());
	}
	else // move to the next macro name
	{
	  //printf("moving to the next macro old=%d new=%d\n",i,p+l);
	  i=p+l;
	}
      }
      else // move to the next macro name
      {
	expr=expr.left(p)+"@-"+expr.right(expr.length()-p);
	//printf("macro already expanded, moving to the next macro expr=%s\n",expr.data());
	i=p+l+2;
	//i=p+l;
      }
    }
    else // no re-scan marker found, skip the macro name
    {
      //printf("skipping marked macro\n");
      i=p+l;
    }
  }
}

/*! replaces all occurrences of @@@@ in \a s by @@
 *  and removes all occurrences of @@E.
 *  All identifiers found are replaced by 0L
 */
QCString removeIdsAndMarkers(const char *s)
{
  //printf("removeIdsAndMarkers(%s)\n",s);
  const char *p=s;
  char c;
  bool inNum=FALSE;
  QCString result;
  if (p)
  {
    while ((c=*p))
    {
      if (c=='@') // replace @@ with @ and remove @E
      {
	if (*(p+1)=='@')
	{
	  result+=c; 
	}
	else if (*(p+1)=='E')
	{
	  // skip
	}
	p+=2;
      }
      else if (isdigit(c)) // number
      {
	result+=c;
	p++;
        inNum=TRUE;	
      }
      else if (c=='d' && !inNum) // identifier starting with a `d'
      {
	if (strncmp(p,"defined ",8)==0 || strncmp(p,"defined(",8)==0) 
	           // defined keyword
	{
	  p+=7; // skip defined
	}
	else
	{
	  result+="0L";
	  p++;
	  while ((c=*p) && isId(c)) p++;
	}
      }
      else if ((isalpha(c) || c=='_') && !inNum) // replace identifier with 0L
      {
	result+="0L";
	p++;
	while ((c=*p) && isId(c)) p++;
	if (*p=='(') // undefined function macro
	{
	  p++;
	  int count=1;
	  while ((c=*p++))
	  {
	    if (c=='(') count++;
	    else if (c==')')
	    {
	      count--;
	      if (count==0) break;
	    }
	    else if (c=='/')
	    {
	      char pc=c;
	      c=*++p;
	      if (c=='*') // start of C comment
	      {
		while (*p && !(pc=='*' && c=='/')) // search end of comment
		{
		  pc=c;
		  c=*++p;
		}
		p++;
	      }
	    }
	  }
	}
      }
      else if (c=='/') // skip C comments
      {
	char pc=c;
	c=*++p;
	if (c=='*') // start of C comment
	{ 
	  while (*p && !(pc=='*' && c=='/')) // search end of comment
	  {
	    pc=c;
	    c=*++p;
	  }
	  p++;
	}
	else // oops, not comment but division
	{
	  result+=pc;
	  goto nextChar;
	}
      }
      else 
      {
nextChar:
	result+=c;
	char lc=tolower(c);
	if (!isId(lc) && lc!='.' /*&& lc!='-' && lc!='+'*/) inNum=FALSE;
	p++;
      }
    }
  }
  //printf("removeIdsAndMarkers(%s)=%s\n",s,result.data());
  return result;
}

/*! replaces all occurrences of @@ in \a s by @
 *  \par assumption: 
 *   \a s only contains pairs of @@'s
 */
QCString removeMarkers(const char *s)
{
  const char *p=s;
  char c;
  QCString result;
  if (p)
  {
    while ((c=*p))
    {
      switch(c)
      {
	case '@': // replace @@ with @
	  {
	    if (*(p+1)=='@')
	    {
	      result+=c; 
	    }
	    p+=2;
	  }
	  break;
	case '/': // skip C comments
	  {
	    result+=c;
	    char pc=c;
	    c=*++p;
	    if (c=='*') // start of C comment
	    { 
	      while (*p && !(pc=='*' && c=='/')) // search end of comment
	      {
		if (*p=='@' && *(p+1)=='@') 
		  result+=c,p++;
		else 
		  result+=c;
		pc=c;
		c=*++p;
	      }
	      if (*p) result+=c,p++;
	    }
	  }
	  break;
	case '"': // skip string literals
	  {
	    result+=c;
	    char pc=c;
	    c=*++p;
	    while (*p && (c!='"' || pc=='\\')) // no end quote
	    {
	      result+=c;
	      c=*++p;
	    }
	    if (*p) result+=c,p++; 
	  }
	  break;
	case '\'': // skip char literals
	  {
	    result+=c;
	    char pc=c;
	    c=*++p;
	    while (*p && (c!='\'' || pc=='\\')) // no end quote
	    {
	      result+=c;
	      c=*++p;
	    }
	    if (*p) result+=c,p++; 
	  }
	  break;
	default:
	  {
	    result+=c;
	    p++;
	  }
	  break;
      }
    }
  }
  //printf("RemoveMarkers(%s)=%s\n",s,result.data());
  return result;
}

/*! compute the value of the expression in string \a expr.
 *  If needed the function may read additional characters from the input.
 */

bool computeExpression(const QCString &expr)
{
  QCString e=expr;
  expandExpression(e,0,0);
  //printf("after expansion `%s'\n",e.data());
  e = removeIdsAndMarkers(e);
  if (e.isEmpty()) return FALSE;
  //printf("parsing `%s'\n",e.data());
  return parseCppExpression(g_yyFileName,g_yyLineNr,e);
}

/*! expands the macro definition in \a name
 *  If needed the function may read additional characters from the input
 */

QCString expandMacro(const QCString &name)
{
  QCString n=name;
  expandExpression(n,0,0);
  n=removeMarkers(n);
  //printf("expandMacro `%s'->`%s'\n",name.data(),n.data());
  return n;
}

Define *newDefine()
{
  Define *def=new Define;
  def->name       = g_defName;
  def->definition = g_defText.stripWhiteSpace();
  def->nargs      = g_defArgs;
  def->fileName   = g_yyFileName; 
  def->fileDef    = g_yyFileDef;
  def->lineNr     = g_yyLineNr;
  def->varArgs    = g_defVarArgs;
  //printf("newDefine: %s %s file: %s\n",def->name.data(),def->definition.data(),
  //    def->fileDef ? def->fileDef->name().data() : def->fileName.data());
  //printf("newDefine: `%s'->`%s'\n",def->name.data(),def->definition.data());
  if (!def->name.isEmpty() && Doxygen::expandAsDefinedDict[def->name])
  {
    def->isPredefined=TRUE;
  }
  return def;
}

void addDefine()
{
  if (g_skip) return; // do not add this define as it is inside a 
                      // conditional section (cond command) that is disabled.
  if (!Doxygen::gatherDefines) return;

  //printf("addDefine %s %s\n",g_defName.data(),g_defArgsStr.data());
  //ArgumentList *al = new ArgumentList;
  //stringToArgumentList(g_defArgsStr,al);
  MemberDef *md=new MemberDef(
      g_yyFileName,g_yyLineNr,
      "#define",g_defName,g_defArgsStr,0,
      Public,Normal,FALSE,Member,MemberDef::Define,0,0);
  if (!g_defArgsStr.isEmpty())
  {
    ArgumentList *argList = new ArgumentList;
    //printf("addDefine() g_defName=`%s' g_defArgsStr=`%s'\n",g_defName.data(),g_defArgsStr.data());
    stringToArgumentList(g_defArgsStr,argList);
    md->setArgumentList(argList);
  }
  //printf("Setting initializer for `%s' to `%s'\n",g_defName.data(),g_defText.data());
  int l=g_defLitText.find('\n');
  if (l>0 && g_defLitText.left(l).stripWhiteSpace()=="\\")
  {
    // strip first line if it only contains a slash
    g_defLitText = g_defLitText.right(g_defLitText.length()-l-1);
  }
  else if (l>0)
  {
    // align the items on the first line with the items on the second line
    int k=l+1;
    const char *p=g_defLitText.data()+k;
    char c;
    while ((c=*p++) && (c==' ' || c=='\t')) k++;
    g_defLitText=g_defLitText.mid(l+1,k-l-1)+g_defLitText.stripWhiteSpace();
  }
  md->setInitializer(g_defLitText.stripWhiteSpace());

  //printf("pre.l: md->setFileDef(%p)\n",g_inputFileDef);
  md->setFileDef(g_inputFileDef);
  md->setDefinition("#define "+g_defName);

  MemberName *mn=Doxygen::functionNameSDict->find(g_defName);
  if (mn==0)
  {
    mn = new MemberName(g_defName);
    Doxygen::functionNameSDict->append(g_defName,mn);
  }
  mn->append(md);
  if (g_yyFileDef) 
  {
    g_yyFileDef->insertMember(md);
  }

  //Define *d;
  //if ((d=defineDict[g_defName])==0) defineDict.insert(g_defName,newDefine()); 
}

static inline void outputChar(char c)
{
  if (g_includeStack.isEmpty() || g_curlyCount>0) g_outputBuf->addChar(c);
}

static inline void outputArray(const char *a,int len)
{
  if (g_includeStack.isEmpty() || g_curlyCount>0) g_outputBuf->addArray(a,len);
}

static void readIncludeFile(const QCString &inc)
{
  static bool searchIncludes = Config_getBool("SEARCH_INCLUDES");
  if (!searchIncludes) return; // do not read include files
  uint i=0;

  // find the start of the include file name
  while (i<inc.length() &&
         (inc.at(i)==' ' || inc.at(i)=='"' || inc.at(i)=='<')
        ) i++;
  uint s=i;

  // was it a local include?
  bool localInclude = s>0 && inc.at(s-1)=='"';

  // find the end of the include file name
  while (i<inc.length() && inc.at(i)!='"' && inc.at(i)!='>') i++;

  if (s<inc.length() && i>s) // valid include file name found
  {
    // extract include path+name
    QCString incFileName=inc.mid(s,i-s).stripWhiteSpace();

    QCString dosExt = incFileName.right(4);
    if (dosExt==".exe" || dosExt==".dll" || dosExt==".tlb")
    {
      // skip imported binary files (e.g. M$ type libraries)
      return;
    }

    QCString oldFileName = g_yyFileName;
    FileDef *oldFileDef  = g_yyFileDef;
    int oldLineNr        = g_yyLineNr;
    //printf("Searching for `%s'\n",incFileName.data());

    // absIncFileName avoids difficulties for incFileName starting with "../" (bug 641336)
    QCString absIncFileName = incFileName;
    {
      static bool searchIncludes = Config_getBool("SEARCH_INCLUDES");
      QFileInfo fi(g_yyFileName);
      if (fi.exists())
      {
	QCString absName = QCString(fi.dirPath(TRUE).data())+"/"+incFileName;
        QFileInfo fi2(absName);
        if (fi2.exists())
        {
	  absIncFileName=fi2.absFilePath().utf8();
	}
	else if (searchIncludes) // search in INCLUDE_PATH as well
	{
	  QStrList &includePath = Config_getList("INCLUDE_PATH");
	  char *s=includePath.first();
	  while (s)
	  {
	    QFileInfo fi(s);
	    if (fi.exists() && fi.isDir())
	    {
	      QCString absName = QCString(fi.absFilePath().utf8())+"/"+incFileName;
	      //printf("trying absName=%s\n",absName.data());
	      QFileInfo fi2(absName);
	      if (fi2.exists())
	      {
		absIncFileName=fi2.absFilePath().utf8();
		break;
	      }
	      //printf( "absIncFileName = %s\n", absIncFileName.data() );
	    }
	    s=includePath.next();
	  }
	}
	//printf( "absIncFileName = %s\n", absIncFileName.data() );
      }
    }
    DefineManager::instance().addInclude(g_yyFileName,absIncFileName);
    DefineManager::instance().addFileToContext(absIncFileName);

    // findFile will overwrite g_yyFileDef if found
    FileState *fs;
    bool alreadyIncluded = FALSE;
    //printf("calling findFile(%s)\n",incFileName.data());
    if ((fs=findFile(incFileName,localInclude,alreadyIncluded))) // see if the include file can be found
    {
      //printf("Found include file!\n");
      if (Debug::isFlagSet(Debug::Preprocessor))
      {
        for (i=0;i<g_includeStack.count();i++) 
        {
          Debug::print(Debug::Preprocessor,0,"  ");
        }
        //msg("#include %s: parsing...\n",incFileName.data());
      }
      if (oldFileDef)
      {
        // add include dependency to the file in which the #include was found
	bool ambig;
	// change to absolute name for bug 641336 
        FileDef *incFd = findFileDef(Doxygen::inputNameDict,absIncFileName,ambig);
        oldFileDef->addIncludeDependency(ambig ? 0 : incFd,incFileName,localInclude,g_isImported,FALSE);
        // add included by dependency
        if (g_yyFileDef)
        {
          //printf("Adding include dependency %s->%s\n",oldFileDef->name().data(),incFileName.data());
          g_yyFileDef->addIncludedByDependency(oldFileDef,oldFileDef->docName(),localInclude,g_isImported);
        }
      }
      else if (g_inputFileDef)
      {
        g_inputFileDef->addIncludeDependency(0,absIncFileName,localInclude,g_isImported,TRUE);
      }
      fs->bufState = YY_CURRENT_BUFFER;
      fs->lineNr   = oldLineNr;
      fs->fileName = oldFileName;
      // push the state on the stack
      g_includeStack.push(fs);
      // set the scanner to the include file

      // Deal with file changes due to 
      // #include's within { .. } blocks
      QCString lineStr(g_yyFileName.length()+20);
      lineStr.sprintf("# 1 \"%s\" 1\n",g_yyFileName.data());
      outputArray(lineStr.data(),lineStr.length());

      //fprintf(stderr,"Switching to include file %s\n",incFileName.data());
      g_expectGuard=TRUE;
      g_inputBuf   = &fs->fileBuf;
      g_inputBufPos=0;
      preYY_switch_to_buffer(preYY_create_buffer(0,YY_BUF_SIZE));
    }
    else
    {
      //printf("  calling findFile(%s) alreadyInc=%d\n",incFileName.data(),alreadyIncluded);
      if (oldFileDef)
      {
	bool ambig;
	//QCString absPath = incFileName;
	//if (QDir::isRelativePath(incFileName))
	//{
	//  absPath = QDir::cleanDirPath(oldFileDef->getPath()+"/"+incFileName);
	//  //printf("%s + %s -> resolved path %s\n",oldFileDef->getPath().data(),incFileName.data(),absPath.data());
	//}

	// change to absolute name for bug 641336 
	FileDef *fd = findFileDef(Doxygen::inputNameDict,absIncFileName,ambig);
	//printf("%s::findFileDef(%s)=%p\n",oldFileDef->name().data(),incFileName.data(),fd);
	// add include dependency to the file in which the #include was found
	oldFileDef->addIncludeDependency(ambig ? 0 : fd,incFileName,localInclude,g_isImported,FALSE);
	// add included by dependency
        if (fd)
        {
          //printf("Adding include dependency (2) %s->%s ambig=%d\n",oldFileDef->name().data(),fd->name().data(),ambig);
          fd->addIncludedByDependency(oldFileDef,oldFileDef->docName(),localInclude,g_isImported);
        }
      }
      else if (g_inputFileDef)
      {
        g_inputFileDef->addIncludeDependency(0,absIncFileName,localInclude,g_isImported,TRUE);
      }
      if (Debug::isFlagSet(Debug::Preprocessor))
      {
	if (alreadyIncluded)
	{
          Debug::print(Debug::Preprocessor,0,"#include %s: already included! skipping...\n",incFileName.data());
	}
	else
	{
          Debug::print(Debug::Preprocessor,0,"#include %s: not found! skipping...\n",incFileName.data());
	}
        //printf("error: include file %s not found\n",preYYtext);
      }
      if (g_curlyCount>0 && !alreadyIncluded) // failed to find #include inside { ... }
      {
	warn(g_yyFileName,g_yyLineNr,"Warning: include file %s not found, perhaps you forgot to add its directory to INCLUDE_PATH?",incFileName.data());
      }
    }
  }
}

/* ----------------------------------------------------------------- */

static void startCondSection(const char *sectId)
{
  g_condStack.push(new bool(g_skip));
  if (Config_getList("ENABLED_SECTIONS").find(sectId)==-1)
  {
    g_skip=TRUE;
  }
}

static void endCondSection()
{
  if (g_condStack.isEmpty())
  {
    g_skip=FALSE;
  }
  else
  {
    bool *ctx = g_condStack.pop();
    g_skip=*ctx;
  }
}

static void forceEndCondSection()
{
  while (!g_condStack.isEmpty())
  {
    g_condStack.pop();
  }
  g_skip=FALSE;
}

static QCString escapeAt(const char *text)
{
  QCString result;
  if (text)
  {
    char c;
    const char *p=text;
    while ((c=*p++))
    {
      if (c=='@') result+="@@"; else result+=c;
    }
  }
  return result;
}

static char resolveTrigraph(char c)
{
  switch (c)
  {
    case '=': return '#';
    case '/': return '\\';
    case '\'': return '^';
    case '(': return '[';
    case ')': return ']';
    case '!': return '|';
    case '<': return '{';
    case '>': return '}';
    case '-': return '~';
  }
  return '?';
}

/* ----------------------------------------------------------------- */

#undef  YY_INPUT
#define YY_INPUT(buf,result,max_size) result=yyread(buf,max_size);

static int yyread(char *buf,int max_size)
{
  int bytesInBuf = g_inputBuf->curPos()-g_inputBufPos;
  int bytesToCopy = QMIN(max_size,bytesInBuf);
  memcpy(buf,g_inputBuf->data()+g_inputBufPos,bytesToCopy);
  g_inputBufPos+=bytesToCopy;
  return bytesToCopy;
}

/* ----------------------------------------------------------------- */

































#line 4006 "<stdout>"

#define INITIAL 0
#define Start 1
#define Command 2
#define SkipCommand 3
#define SkipLine 4
#define SkipString 5
#define CopyLine 6
#define CopyString 7
#define Include 8
#define IncludeID 9
#define EndImport 10
#define DefName 11
#define DefineArg 12
#define DefineText 13
#define SkipCPPBlock 14
#define Ifdef 15
#define Ifndef 16
#define SkipCComment 17
#define CopyCComment 18
#define SkipVerbatim 19
#define SkipCPPComment 20
#define RemoveCComment 21
#define RemoveCPPComment 22
#define Guard 23
#define DefinedExpr1 24
#define DefinedExpr2 25
#define SkipDoubleQuote 26
#define SkipSingleQuote 27
#define UndefName 28
#define IgnoreLine 29
#define FindDefineArgs 30
#define ReadString 31
#define CondLine 32

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

static int yy_init_globals (void );

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int preYYlex_destroy (void );

int preYYget_debug (void );

void preYYset_debug (int debug_flag  );

YY_EXTRA_TYPE preYYget_extra (void );

void preYYset_extra (YY_EXTRA_TYPE user_defined  );

FILE *preYYget_in (void );

void preYYset_in  (FILE * in_str  );

FILE *preYYget_out (void );

void preYYset_out  (FILE * out_str  );

yy_size_t preYYget_leng (void );

char *preYYget_text (void );

int preYYget_lineno (void );

void preYYset_lineno (int line_number  );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int preYYwrap (void );
#else
extern int preYYwrap (void );
#endif
#endif

    static void yyunput (int c,char *buf_ptr  );
    
#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT

#ifdef __cplusplus
static int yyinput (void );
#else
static int input (void );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 262144
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO fwrite( preYYtext, preYYleng, 1, preYYout )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		yy_size_t n; \
		for ( n = 0; n < max_size && \
			     (c = getc( preYYin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( preYYin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = fread(buf, 1, max_size, preYYin))==0 && ferror(preYYin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(preYYin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int preYYlex (void);

#define YY_DECL int preYYlex (void)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after preYYtext and preYYleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	if ( preYYleng > 0 ) \
		YY_CURRENT_BUFFER_LVALUE->yy_at_bol = \
				(preYYtext[preYYleng - 1] == '\n'); \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    
#line 1772 "pre.l"


#line 4226 "<stdout>"

	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

        /* Create the reject buffer large enough to save one state per allowed character. */
        if ( ! (yy_state_buf) )
            (yy_state_buf) = (yy_state_type *)preYYalloc(YY_STATE_BUF_SIZE  );
            if ( ! (yy_state_buf) )
                YY_FATAL_ERROR( "out of dynamic memory in preYYlex()" );

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! preYYin )
			preYYin = stdin;

		if ( ! preYYout )
			preYYout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			preYYensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				preYY_create_buffer(preYYin,YY_BUF_SIZE );
		}

		preYY_load_buffer_state( );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of preYYtext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
		yy_current_state += YY_AT_BOL();

		(yy_state_ptr) = (yy_state_buf);
		*(yy_state_ptr)++ = yy_current_state;

yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 1172 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			*(yy_state_ptr)++ = yy_current_state;
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 5439 );

yy_find_action:
		yy_current_state = *--(yy_state_ptr);
		(yy_lp) = yy_accept[yy_current_state];
goto find_rule; /* Shut up GCC warning -Wall */
find_rule: /* we branch to this label when backing up */
		for ( ; ; ) /* until we find what rule we matched */
			{
			if ( (yy_lp) && (yy_lp) < yy_accept[yy_current_state + 1] )
				{
				yy_act = yy_acclist[(yy_lp)];
				if ( yy_act & YY_TRAILING_HEAD_MASK ||
				     (yy_looking_for_trail_begin) )
					{
					if ( yy_act == (yy_looking_for_trail_begin) )
						{
						(yy_looking_for_trail_begin) = 0;
						yy_act &= ~YY_TRAILING_HEAD_MASK;
						break;
						}
					}
				else if ( yy_act & YY_TRAILING_MASK )
					{
					(yy_looking_for_trail_begin) = yy_act & ~YY_TRAILING_MASK;
					(yy_looking_for_trail_begin) |= YY_TRAILING_HEAD_MASK;
					(yy_full_match) = yy_cp;
					(yy_full_state) = (yy_state_ptr);
					(yy_full_lp) = (yy_lp);
					}
				else
					{
					(yy_full_match) = yy_cp;
					(yy_full_state) = (yy_state_ptr);
					(yy_full_lp) = (yy_lp);
					break;
					}
				++(yy_lp);
				goto find_rule;
				}
			--yy_cp;
			yy_current_state = *--(yy_state_ptr);
			(yy_lp) = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
case 1:
YY_RULE_SETUP
#line 1774 "pre.l"

	YY_BREAK
case 2:
YY_RULE_SETUP
#line 1775 "pre.l"

	YY_BREAK
case 3:
YY_RULE_SETUP
#line 1776 "pre.l"

	YY_BREAK
case 4:
YY_RULE_SETUP
#line 1777 "pre.l"
{ // Trigraph
  					  unput(resolveTrigraph(preYYtext[2]));
  					}
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 1780 "pre.l"
{ BEGIN(Command); }
	YY_BREAK
case 6:
/* rule 6 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up preYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up preYYtext again */
YY_RULE_SETUP
#line 1781 "pre.l"
{
 					  outputArray(preYYtext,preYYleng); 
  					  BEGIN(CopyLine); 
					}
	YY_BREAK
case 7:
/* rule 7 can match eol */
YY_RULE_SETUP
#line 1785 "pre.l"
{ // constructors?
					  int i;
					  for (i=preYYleng-1;i>=0;i--)
					  {
					    unput(preYYtext[i]);
					  }
					  BEGIN(CopyLine);
                                        }
	YY_BREAK
case 8:
/* rule 8 can match eol */
#line 1794 "pre.l"
case 9:
/* rule 9 can match eol */
YY_RULE_SETUP
#line 1794 "pre.l"
{ // function like macro
  					  static bool skipFuncMacros = Config_getBool("SKIP_FUNCTION_MACROS");
					  QCString name(preYYtext);
					  name=name.left(name.find('(')).stripWhiteSpace();

					  Define *def=0;
					  if (skipFuncMacros && 
					      name!="Q_PROPERTY" &&
					      !(
					         (g_includeStack.isEmpty() || g_curlyCount>0) &&
					         g_macroExpansion &&
					         (def=DefineManager::instance().isDefined(name)) &&
						 /*macroIsAccessible(def) &&*/
					         (!g_expandOnlyPredef || def->isPredefined)
					       )
					     )
					  {
					    outputChar('\n');
					    g_yyLineNr++;
					  }
					  else // don't skip
					  {
					    int i;
					    for (i=preYYleng-1;i>=0;i--)
					    {
					      unput(preYYtext[i]);
					    }
					    BEGIN(CopyLine);
					  }
  					}
	YY_BREAK
case 10:
/* rule 10 can match eol */
YY_RULE_SETUP
#line 1824 "pre.l"
{
                                          QCString text=preYYtext;
  					  g_yyLineNr+=text.contains('\n');
					  outputArray(preYYtext,preYYleng);
  					}
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 1829 "pre.l"
{ // count brackets inside the main file
  					  if (g_includeStack.isEmpty()) 
					  {
					    g_curlyCount++;
					  }
					  outputChar(*preYYtext);
  					}
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 1836 "pre.l"
{ // count brackets inside the main file
  					  if (g_includeStack.isEmpty() && g_curlyCount>0) 
					  {
					    g_curlyCount--;
					  }
					  outputChar(*preYYtext);
  					}
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 1843 "pre.l"
{ 
  					  outputArray(preYYtext,preYYleng);
					}
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 1846 "pre.l"
{ 
  					  outputArray(preYYtext,preYYleng);
					}
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 1849 "pre.l"
{ 
  					  outputArray(preYYtext,preYYleng);
					}
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 1852 "pre.l"
{
					  outputChar(*preYYtext);
					  BEGIN( CopyString );
					}
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 1856 "pre.l"
{
  					  outputArray(preYYtext,preYYleng);
					}
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 1859 "pre.l"
{
					  outputArray(preYYtext,preYYleng);
					}
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 1862 "pre.l"
{
					  outputChar(*preYYtext);
					  BEGIN( CopyLine );
					}
	YY_BREAK
case 20:
/* rule 20 can match eol */
YY_RULE_SETUP
#line 1866 "pre.l"
{
  					  g_expectGuard = FALSE;
  					  Define *def=0;
					  //def=g_globalDefineDict->find(preYYtext);
					  //def=DefineManager::instance().isDefined(preYYtext);
					  //printf("Search for define %s found=%d g_includeStack.isEmpty()=%d "
					  //       "g_curlyCount=%d g_macroExpansion=%d g_expandOnlyPredef=%d "
					  //	 "isPreDefined=%d\n",preYYtext,def ? 1 : 0,
					  //	 g_includeStack.isEmpty(),g_curlyCount,g_macroExpansion,g_expandOnlyPredef,
					  //	 def ? def->isPredefined : -1
					  //	);
					  if ((g_includeStack.isEmpty() || g_curlyCount>0) &&
					      g_macroExpansion &&
					      (def=DefineManager::instance().isDefined(preYYtext)) &&
				              /*(def->isPredefined || macroIsAccessible(def)) && */
					      (!g_expandOnlyPredef || def->isPredefined)
					     )
					  {
					    //printf("Found it! #args=%d\n",def->nargs);
					    g_roundCount=0;
					    g_defArgsStr=preYYtext;
					    if (def->nargs==-1) // no function macro
					    {
					      QCString result = def->isPredefined ? def->definition : expandMacro(g_defArgsStr);
					      outputArray(result,result.length());
					    }
					    else // zero or more arguments
					    {
					      g_findDefArgContext = CopyLine;
					      BEGIN(FindDefineArgs);
					    }
					  }
					  else
					  {
					    outputArray(preYYtext,preYYleng);
					  }
  					}
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 1903 "pre.l"
{
                                          Define *def=0;
  					  if ((g_includeStack.isEmpty() || g_curlyCount>0) && 
					      g_macroExpansion &&
					      (def=DefineManager::instance().isDefined(preYYtext)) &&
					      def->nargs==-1 &&
				              /*(def->isPredefined || macroIsAccessible(def)) &&*/
					      (!g_expandOnlyPredef || def->isPredefined)
					     )
					  {
					    QCString result=def->isPredefined ? def->definition : expandMacro(preYYtext); 
					    outputArray(result,result.length());
					  }
					  else
					  {
					    outputArray(preYYtext,preYYleng);
					  }
  					}
	YY_BREAK
case 22:
/* rule 22 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up preYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up preYYtext again */
YY_RULE_SETUP
#line 1921 "pre.l"
{ // strip line continuation characters
  					}
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 1923 "pre.l"
{
  					  outputChar(*preYYtext);
  					}
	YY_BREAK
case 24:
/* rule 24 can match eol */
YY_RULE_SETUP
#line 1926 "pre.l"
{
  					  outputChar('\n');
					  BEGIN(Start);
					  g_yyLineNr++;
  					}
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 1931 "pre.l"
{
  					  g_defArgsStr+='(';
  					  g_roundCount++;
  					}
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 1935 "pre.l"
{
  					  g_defArgsStr+=')';
					  g_roundCount--;
					  if (g_roundCount==0)
					  {
					    QCString result=expandMacro(g_defArgsStr);
					    //printf("g_defArgsStr=`%s'->`%s'\n",g_defArgsStr.data(),result.data());
					    if (g_findDefArgContext==CopyLine)
					    {
					      outputArray(result,result.length());
					      BEGIN(g_findDefArgContext);
					    }
					    else // g_findDefArgContext==IncludeID
					    {
					      readIncludeFile(result);
					      g_nospaces=FALSE;
					      BEGIN(Start);
					    }
					  }
  					}
	YY_BREAK
/*
<FindDefineArgs>")"{B}*"("		{
  					  g_defArgsStr+=preYYtext;
  					}
  */
case 27:
YY_RULE_SETUP
#line 1960 "pre.l"
{
  					  g_defArgsStr+=preYYtext;
  					}
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 1963 "pre.l"
{
  					  g_defArgsStr+=*preYYtext;
  					  BEGIN(ReadString);
  					}
	YY_BREAK
case 29:
/* rule 29 can match eol */
YY_RULE_SETUP
#line 1967 "pre.l"
{
  					  g_yyLineNr++;
					  outputChar('\n');
  					}
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 1971 "pre.l"
{
  					  g_defArgsStr+="@@";
  					}
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 1974 "pre.l"
{
  					  g_defArgsStr+=*preYYtext;
  					}
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 1977 "pre.l"
{
  					  g_defArgsStr+=*preYYtext;
					  BEGIN(FindDefineArgs);
  					}
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 1981 "pre.l"
{
  					  g_defArgsStr+=preYYtext;
  					}
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 1984 "pre.l"
{
  					  g_defArgsStr+=preYYtext;
  					}
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 1987 "pre.l"
{
  					  g_defArgsStr+=*preYYtext;
  					}
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 1990 "pre.l"
{
  					  g_isImported = preYYtext[1]=='m';
  					  if (g_macroExpansion) 
					    BEGIN(IncludeID);
  					}
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 1995 "pre.l"
{ 
  					  g_isImported = preYYtext[1]=='m';
					  char c[2];
					  c[0]=preYYtext[preYYleng-1];c[1]='\0';
					  g_incName=c;
  					  BEGIN(Include); 
					}
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 2002 "pre.l"
{ 
  			                  //printf("!!!DefName\n"); 
  					  BEGIN(DefName); 
					}
	YY_BREAK
case 39:
*yy_cp = (yy_hold_char); /* undo effects of setting up preYYtext */
(yy_c_buf_p) = yy_cp = yy_bp + 5;
YY_DO_BEFORE_ACTION; /* set up preYYtext again */
YY_RULE_SETUP
#line 2006 "pre.l"
{
  					  incrLevel();
					  g_guardExpr.resize(0);
  					  BEGIN(DefinedExpr2);
  					}
	YY_BREAK
case 40:
*yy_cp = (yy_hold_char); /* undo effects of setting up preYYtext */
(yy_c_buf_p) = yy_cp = yy_bp + 5;
YY_DO_BEFORE_ACTION; /* set up preYYtext again */
YY_RULE_SETUP
#line 2011 "pre.l"
{
  					  //printf("Pre.l: ifdef\n");
  					  incrLevel();
					  g_guardExpr.resize(0);
  					  BEGIN(DefinedExpr1);
  					}
	YY_BREAK
case 41:
*yy_cp = (yy_hold_char); /* undo effects of setting up preYYtext */
(yy_c_buf_p) = yy_cp = yy_bp + 6;
YY_DO_BEFORE_ACTION; /* set up preYYtext again */
YY_RULE_SETUP
#line 2017 "pre.l"
{
  					  incrLevel();
					  g_guardExpr="! ";
  					  BEGIN(DefinedExpr2);
					}
	YY_BREAK
case 42:
*yy_cp = (yy_hold_char); /* undo effects of setting up preYYtext */
(yy_c_buf_p) = yy_cp = yy_bp + 6;
YY_DO_BEFORE_ACTION; /* set up preYYtext again */
YY_RULE_SETUP
#line 2022 "pre.l"
{
  					  incrLevel();
					  g_guardExpr="! ";
  					  BEGIN(DefinedExpr1);
  					}
	YY_BREAK
case 43:
*yy_cp = (yy_hold_char); /* undo effects of setting up preYYtext */
(yy_c_buf_p) = yy_cp = yy_bp + 2;
YY_DO_BEFORE_ACTION; /* set up preYYtext again */
YY_RULE_SETUP
#line 2027 "pre.l"
{
  					  incrLevel();
					  g_guardExpr.resize(0);
					  BEGIN(Guard);
					}
	YY_BREAK
case 44:
*yy_cp = (yy_hold_char); /* undo effects of setting up preYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up preYYtext again */
YY_RULE_SETUP
#line 2032 "pre.l"
{
  					  if (!otherCaseDone())
					  {
					    g_guardExpr.resize(0);
					    BEGIN(Guard);  
					  }
					  else
					  {
					    g_ifcount=0;
					    BEGIN(SkipCPPBlock);
					  }
  					}
	YY_BREAK
case 45:
/* rule 45 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up preYYtext */
(yy_c_buf_p) = yy_cp = yy_bp + 4;
YY_DO_BEFORE_ACTION; /* set up preYYtext again */
YY_RULE_SETUP
#line 2044 "pre.l"
{
					  //printf("else g_levelGuard[%d]=%d\n",g_level-1,g_levelGuard[g_level-1]);
  					  if (otherCaseDone())
					  {
					    g_ifcount=0;
					    BEGIN(SkipCPPBlock);
					  }
					  else
					  {
					    setCaseDone(TRUE);
					    //g_levelGuard[g_level-1]=TRUE;
					  } 
  					}
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 2057 "pre.l"
{
  					  BEGIN(UndefName);
  					}
	YY_BREAK
case 47:
*yy_cp = (yy_hold_char); /* undo effects of setting up preYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up preYYtext again */
YY_RULE_SETUP
#line 2060 "pre.l"
{
  					  if (!otherCaseDone())
					  {
					    g_guardExpr.resize(0);
  					    BEGIN(Guard);
					  }
  					}
	YY_BREAK
case 48:
/* rule 48 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up preYYtext */
(yy_c_buf_p) = yy_cp = yy_bp + 5;
YY_DO_BEFORE_ACTION; /* set up preYYtext again */
YY_RULE_SETUP
#line 2067 "pre.l"
{
  					  //printf("Pre.l: #endif\n");
  					  decrLevel();
  					}
	YY_BREAK
case 49:
/* rule 49 can match eol */
YY_RULE_SETUP
#line 2071 "pre.l"
{
  					  outputChar('\n');
  					  BEGIN(Start);
					  g_yyLineNr++;
  					}
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 2076 "pre.l"
{
                                          g_expectGuard = FALSE;
                                        }
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 2079 "pre.l"
{ // unknown directive
					  BEGIN(IgnoreLine);
					}
	YY_BREAK
case 52:
/* rule 52 can match eol */
YY_RULE_SETUP
#line 2082 "pre.l"
{
  					  outputChar('\n');
					  g_yyLineNr++;
					}
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 2086 "pre.l"

	YY_BREAK
case 54:
YY_RULE_SETUP
#line 2087 "pre.l"

	YY_BREAK
case 55:
YY_RULE_SETUP
#line 2088 "pre.l"
{
  					  Define *def;
  					  if ((def=DefineManager::instance().isDefined(preYYtext)) 
					      /*&& !def->isPredefined*/
					      && !def->nonRecursive
					     )
					  {
					    //printf("undefining %s\n",preYYtext);
					    def->undef=TRUE;
					  }
					  BEGIN(Start);
  					}
	YY_BREAK
case 56:
/* rule 56 can match eol */
YY_RULE_SETUP
#line 2100 "pre.l"
{
  					  outputChar('\n');
  					  g_guardExpr+=' ';
					  g_yyLineNr++;
  					}
	YY_BREAK
case 57:
*yy_cp = (yy_hold_char); /* undo effects of setting up preYYtext */
(yy_c_buf_p) = yy_cp = yy_bp + 7;
YY_DO_BEFORE_ACTION; /* set up preYYtext again */
YY_RULE_SETUP
#line 2105 "pre.l"
{
    					  BEGIN(DefinedExpr2);
    					}
	YY_BREAK
case 58:
*yy_cp = (yy_hold_char); /* undo effects of setting up preYYtext */
(yy_c_buf_p) = yy_cp = yy_bp + 7;
YY_DO_BEFORE_ACTION; /* set up preYYtext again */
YY_RULE_SETUP
#line 2108 "pre.l"
{
    					  BEGIN(DefinedExpr1);
    					}
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 2111 "pre.l"
{ g_guardExpr+=preYYtext; }
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 2112 "pre.l"
{ g_guardExpr+=*preYYtext; }
	YY_BREAK
case 61:
/* rule 61 can match eol */
YY_RULE_SETUP
#line 2113 "pre.l"
{
  					  unput(*preYYtext);
  					  //printf("Guard: `%s'\n",
					  //    g_guardExpr.data());
					  bool guard=computeExpression(g_guardExpr);
					  setCaseDone(guard);
					  //printf("if g_levelGuard[%d]=%d\n",g_level-1,g_levelGuard[g_level-1]);
					  if (guard)
					  {
					    BEGIN(Start);
					  } 
					  else
					  {
					    g_ifcount=0;
					    BEGIN(SkipCPPBlock);
					  }
  					}
	YY_BREAK
case 62:
/* rule 62 can match eol */
YY_RULE_SETUP
#line 2130 "pre.l"
{ g_yyLineNr++; outputChar('\n'); }
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 2131 "pre.l"
{
  					  if (DefineManager::instance().isDefined(preYYtext) || g_guardName==preYYtext)
					    g_guardExpr+=" 1L ";
					  else
					    g_guardExpr+=" 0L ";
					  g_lastGuardName=preYYtext;
					  BEGIN(Guard);
  					}
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 2139 "pre.l"
{
  					  if (DefineManager::instance().isDefined(preYYtext) || g_guardName==preYYtext)
					    g_guardExpr+=" 1L ";
					  else
					    g_guardExpr+=" 0L ";
					  g_lastGuardName=preYYtext;
  					}
	YY_BREAK
case 65:
/* rule 65 can match eol */
YY_RULE_SETUP
#line 2146 "pre.l"
{ // should not happen, handle anyway
                                          g_yyLineNr++;
  					  g_ifcount=0;
 					  BEGIN(SkipCPPBlock); 
					}
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 2151 "pre.l"
{
  					  BEGIN(Guard);
  					}
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 2154 "pre.l"

	YY_BREAK
case 68:
YY_RULE_SETUP
#line 2155 "pre.l"
{ BEGIN(SkipCommand); }
	YY_BREAK
case 69:
/* rule 69 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up preYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up preYYtext again */
YY_RULE_SETUP
#line 2156 "pre.l"
{ BEGIN(SkipLine); }
	YY_BREAK
case 70:
/* rule 70 can match eol */
YY_RULE_SETUP
#line 2157 "pre.l"
{ g_yyLineNr++; outputChar('\n'); }
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 2158 "pre.l"

	YY_BREAK
case 72:
*yy_cp = (yy_hold_char); /* undo effects of setting up preYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up preYYtext again */
YY_RULE_SETUP
#line 2159 "pre.l"
{ 
  					  incrLevel();
                                          g_ifcount++; 
  					  //printf("#if... depth=%d\n",g_ifcount);
					}
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 2164 "pre.l"
{
					  //printf("Else! g_ifcount=%d otherCaseDone=%d\n",g_ifcount,otherCaseDone());
  					  if (g_ifcount==0 && !otherCaseDone())
					  {
					    setCaseDone(TRUE);
  					    //outputChar('\n');
					    BEGIN(Start);
					  }
  					}
	YY_BREAK
case 74:
*yy_cp = (yy_hold_char); /* undo effects of setting up preYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up preYYtext again */
YY_RULE_SETUP
#line 2173 "pre.l"
{
  					  if (g_ifcount==0) 
					  {
  					    if (!otherCaseDone())
					    {
					      g_guardExpr.resize(0);
					      g_lastGuardName.resize(0);
  					      BEGIN(Guard);
					    }
					    else
					    {
					      BEGIN(SkipCPPBlock);
					    }
					  }
					}
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 2188 "pre.l"
{ 
					  g_expectGuard = FALSE;
  					  decrLevel();
  				          if (--g_ifcount<0)
  					  {
  					    //outputChar('\n');
					    BEGIN(Start);
					  }
					}
	YY_BREAK
case 76:
/* rule 76 can match eol */
YY_RULE_SETUP
#line 2197 "pre.l"
{ 
  					  outputChar('\n');
  					  g_yyLineNr++; 
					  BEGIN(SkipCPPBlock);
					}
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 2202 "pre.l"
{ // unknown directive 
  					  BEGIN(SkipLine); 
					}
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 2205 "pre.l"

	YY_BREAK
case 79:
YY_RULE_SETUP
#line 2206 "pre.l"

	YY_BREAK
case 80:
YY_RULE_SETUP
#line 2207 "pre.l"
{ }
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 2208 "pre.l"
{
					  BEGIN(SkipString);
					}
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 2211 "pre.l"

	YY_BREAK
case 83:
*yy_cp = (yy_hold_char); /* undo effects of setting up preYYtext */
(yy_c_buf_p) = yy_cp = yy_bp + 2;
YY_DO_BEFORE_ACTION; /* set up preYYtext again */
YY_RULE_SETUP
#line 2212 "pre.l"
{ 
                                        }
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 2214 "pre.l"
{
  					  g_lastCPPContext=YY_START;
  					  BEGIN(RemoveCPPComment);
					}
	YY_BREAK
case 85:
*yy_cp = (yy_hold_char); /* undo effects of setting up preYYtext */
(yy_c_buf_p) = yy_cp = yy_bp + 2;
YY_DO_BEFORE_ACTION; /* set up preYYtext again */
YY_RULE_SETUP
#line 2218 "pre.l"
{ 
                                        }
	YY_BREAK
case 86:
*yy_cp = (yy_hold_char); /* undo effects of setting up preYYtext */
(yy_c_buf_p) = yy_cp = yy_bp + 2;
YY_DO_BEFORE_ACTION; /* set up preYYtext again */
YY_RULE_SETUP
#line 2220 "pre.l"
{
					  g_lastCContext=YY_START;
  					  BEGIN(RemoveCComment);
  					}
	YY_BREAK
case 87:
/* rule 87 can match eol */
YY_RULE_SETUP
#line 2224 "pre.l"
{
  					  outputChar('\n');
					  g_yyLineNr++;  
					  BEGIN(SkipCPPBlock);
					}
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 2229 "pre.l"
{ }
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 2230 "pre.l"
{ }
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 2231 "pre.l"
{
  					  BEGIN(SkipLine);
  					}
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 2234 "pre.l"
{ }
	YY_BREAK
case 92:
*yy_cp = (yy_hold_char); /* undo effects of setting up preYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up preYYtext again */
YY_RULE_SETUP
#line 2235 "pre.l"
{
  					  g_nospaces=TRUE;
				          g_roundCount=0;
					  g_defArgsStr=preYYtext;
					  g_findDefArgContext = IncludeID;
					  BEGIN(FindDefineArgs);
					}
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 2242 "pre.l"
{
  					  g_nospaces=TRUE;
                                          readIncludeFile(expandMacro(preYYtext));
					  BEGIN(Start);
  					}
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 2247 "pre.l"
{ 
					  g_incName+=preYYtext;
					  readIncludeFile(g_incName);
					  if (g_isImported)
					  {
					    BEGIN(EndImport);
					  }
					  else
					  {
					    BEGIN(Start);
					  }
  					}
	YY_BREAK
case 95:
/* rule 95 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up preYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up preYYtext again */
YY_RULE_SETUP
#line 2259 "pre.l"
{
  					  BEGIN(Start);
  					}
	YY_BREAK
case 96:
/* rule 96 can match eol */
YY_RULE_SETUP
#line 2262 "pre.l"
{ 
					  outputChar('\n');
					  g_yyLineNr++;
					}
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 2266 "pre.l"
{
  					}
	YY_BREAK
case 98:
/* rule 98 can match eol */
YY_RULE_SETUP
#line 2268 "pre.l"
{ // define with argument
  					  //printf("Define() `%s'\n",preYYtext);
					  g_argDict = new QDict<int>(31);
					  g_argDict->setAutoDelete(TRUE);
					  g_defArgs = 0; 
                                          g_defArgsStr.resize(0);
					  g_defText.resize(0);
					  g_defLitText.resize(0);
					  g_defName = preYYtext;
					  g_defVarArgs = FALSE;
					  g_defExtraSpacing.resize(0);
					  BEGIN(DefineArg);
  					}
	YY_BREAK
case 99:
/* rule 99 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up preYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up preYYtext again */
YY_RULE_SETUP
#line 2281 "pre.l"
{ // special case: define with 1 -> can be "guard"
  					  //printf("Define `%s'\n",preYYtext);
  					  g_argDict = 0;
					  g_defArgs = -1;
                                          g_defArgsStr.resize(0);
					  g_defName = preYYtext;
					  g_defName = g_defName.left(g_defName.length()-1).stripWhiteSpace();
					  g_defVarArgs = FALSE;
					  //printf("Guard check: %s!=%s || %d\n",
					  //    g_defName.data(),g_lastGuardName.data(),g_expectGuard);
					  if ( g_defName!=g_lastGuardName || !g_expectGuard)
					  { // define may appear in the output
					    QCString tmp=(QCString)"#define "+g_defName;
					    outputArray(tmp.data(),tmp.length());
					    g_quoteArg=FALSE;
					    g_insideComment=FALSE;
					    g_lastGuardName.resize(0);
				            g_defText="1"; 
					    g_defLitText="1"; 
					    BEGIN(DefineText); 
					  }
					  else // define is a guard => hide
					  {
					    //printf("Found a guard %s\n",preYYtext);
					    g_defText.resize(0);
					    g_defLitText.resize(0);
					    BEGIN(Start);
					  }
					  g_expectGuard=FALSE;
  					}
	YY_BREAK
case 100:
/* rule 100 can match eol */
YY_RULE_SETUP
#line 2311 "pre.l"
{ // empty define
  					  g_argDict = 0;
					  g_defArgs = -1;
					  g_defName = preYYtext;
                                          g_defArgsStr.resize(0);
					  g_defText.resize(0);
					  g_defLitText.resize(0);
					  g_defVarArgs = FALSE;
					  //printf("Guard check: %s!=%s || %d\n",
					  //    g_defName.data(),g_lastGuardName.data(),g_expectGuard);
					  if ( g_defName!=g_lastGuardName || !g_expectGuard)
					  { // define may appear in the output
					    QCString tmp=(QCString)"#define "+g_defName;
					    outputArray(tmp.data(),tmp.length());
					    g_quoteArg=FALSE;
					    g_insideComment=FALSE;
					    if (g_insideCS) g_defText="1"; // for C#, use "1" as define text
					    BEGIN(DefineText);
					  }
					  else // define is a guard => hide
					  {
					    //printf("Found a guard %s\n",preYYtext);
					    g_guardName = preYYtext;
					    g_lastGuardName.resize(0);
					    BEGIN(Start);
					  }
					  g_expectGuard=FALSE;
  					}
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 2339 "pre.l"
{ // define with content
  					  //printf("Define `%s'\n",preYYtext);
  					  g_argDict = 0;
					  g_defArgs = -1;
                                          g_defArgsStr.resize(0);
					  g_defText.resize(0);
					  g_defLitText.resize(0);
					  g_defName = preYYtext;
					  g_defVarArgs = FALSE;
					  QCString tmp=(QCString)"#define "+g_defName+g_defArgsStr;
					  outputArray(tmp.data(),tmp.length());
					  g_quoteArg=FALSE;
					  g_insideComment=FALSE;
					  BEGIN(DefineText); 
  					}
	YY_BREAK
case 102:
/* rule 102 can match eol */
YY_RULE_SETUP
#line 2354 "pre.l"
{
  					  g_defExtraSpacing+="\n";
					  g_yyLineNr++;
                                        }
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 2358 "pre.l"
{ g_defArgsStr+=preYYtext; }
	YY_BREAK
case 104:
YY_RULE_SETUP
#line 2359 "pre.l"
{ g_defArgsStr+=preYYtext; }
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 2360 "pre.l"
{
                                          g_defArgsStr+=preYYtext; 
					  QCString tmp=(QCString)"#define "+g_defName+g_defArgsStr+g_defExtraSpacing;
					  outputArray(tmp.data(),tmp.length());
					  g_quoteArg=FALSE;
					  g_insideComment=FALSE;
  					  BEGIN(DefineText);
  					}
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 2368 "pre.l"
{ // Variadic macro
					  g_defVarArgs = TRUE;
					  g_defArgsStr+=preYYtext;
					  g_argDict->insert("__VA_ARGS__",new int(g_defArgs));
					  g_defArgs++;
  					}
	YY_BREAK
case 107:
YY_RULE_SETUP
#line 2374 "pre.l"
{
  					  //printf("Define addArg(%s)\n",preYYtext);
  					  QCString argName=preYYtext;
  					  g_defVarArgs = preYYtext[preYYleng-1]=='.';
					  if (g_defVarArgs) // strip ellipsis
					  {
					    argName=argName.left(argName.length()-3);
					  }
					  argName = argName.stripWhiteSpace();
                                          g_defArgsStr+=preYYtext;
					  g_argDict->insert(argName,new int(g_defArgs)); 
					  g_defArgs++;
  					}
	YY_BREAK
/*
<DefineText>"/ **"|"/ *!"			{
  					  g_defText+=preYYtext;
					  g_defLitText+=preYYtext;
					  g_insideComment=TRUE;
  					}
<DefineText>"* /"			{
  					  g_defText+=preYYtext;
					  g_defLitText+=preYYtext;
					  g_insideComment=FALSE;
  					}
  */
case 108:
YY_RULE_SETUP
#line 2399 "pre.l"
{
					  g_defText+=preYYtext;
					  g_defLitText+=preYYtext;
					  g_lastCContext=YY_START;
					  g_commentCount=1;
  					  BEGIN(CopyCComment);
  					}
	YY_BREAK
case 109:
YY_RULE_SETUP
#line 2406 "pre.l"
{
  					  outputArray(preYYtext,preYYleng);
  					  g_lastCPPContext=YY_START;
					  g_defLitText+=' ';
  					  BEGIN(SkipCPPComment);
  					}
	YY_BREAK
case 110:
YY_RULE_SETUP
#line 2412 "pre.l"
{
  					  if (preYYtext[0]=='/') outputChar('/');
  					  outputChar('*');outputChar('/');
					  if (--g_commentCount<=0)
					  {
					    if (g_lastCContext==Start) 
					      // small hack to make sure that ^... rule will
					      // match when going to Start... Example: "/*...*/ some stuff..."
					    {
					      YY_CURRENT_BUFFER->yy_at_bol=1;
					    }
  					    BEGIN(g_lastCContext);  
					  }
  					}
	YY_BREAK
case 111:
YY_RULE_SETUP
#line 2426 "pre.l"
{
  					  outputArray(preYYtext,preYYleng);
  					}
	YY_BREAK
case 112:
YY_RULE_SETUP
#line 2429 "pre.l"
{
  					  outputChar('/');outputChar('*');
					  //g_commentCount++;
  					}
	YY_BREAK
case 113:
YY_RULE_SETUP
#line 2433 "pre.l"
{
  					  outputArray(preYYtext,preYYleng);
  					}
	YY_BREAK
case 114:
/* rule 114 can match eol */
YY_RULE_SETUP
#line 2436 "pre.l"
{
  					  outputArray(preYYtext,preYYleng);
  					  g_yyLineNr+=QCString(preYYtext).contains('\n');
  					}
	YY_BREAK
case 115:
/* rule 115 can match eol */
YY_RULE_SETUP
#line 2440 "pre.l"
{
  					  outputArray(preYYtext,preYYleng);
  					  g_yyLineNr+=QCString(preYYtext).contains('\n');
					  if (preYYtext[1]=='f')
					  {
					    g_blockName="f";
					  }
					  else
					  {
					    g_blockName=QCString(&preYYtext[1]).stripWhiteSpace();
					  }
					  BEGIN(SkipVerbatim);
  					}
	YY_BREAK
case 116:
YY_RULE_SETUP
#line 2453 "pre.l"
{ // conditional section
  					  g_condCtx = YY_START;
  					  outputArray(preYYtext,preYYleng);
  					  BEGIN(CondLine);
  					}
	YY_BREAK
case 117:
YY_RULE_SETUP
#line 2458 "pre.l"
{
  				          startCondSection(preYYtext);
  					  outputArray(preYYtext,preYYleng);
  					  BEGIN(g_condCtx);
  					}
	YY_BREAK
case 118:
/* rule 118 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up preYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up preYYtext again */
YY_RULE_SETUP
#line 2463 "pre.l"
{
  					  g_condCtx = YY_START;
  					  outputArray(preYYtext,preYYleng);
  					}
	YY_BREAK
case 119:
YY_RULE_SETUP
#line 2467 "pre.l"
{
  					  unput(*preYYtext);
  					  startCondSection(" ");
					  BEGIN(g_condCtx);
  					}
	YY_BREAK
case 120:
/* rule 120 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up preYYtext */
(yy_c_buf_p) = yy_cp = yy_bp + 8;
YY_DO_BEFORE_ACTION; /* set up preYYtext again */
YY_RULE_SETUP
#line 2472 "pre.l"
{
  					  outputArray(preYYtext,preYYleng);
  					  endCondSection();
  					}
	YY_BREAK
case 121:
YY_RULE_SETUP
#line 2476 "pre.l"
{ /* end of verbatim block */
  					  outputArray(preYYtext,preYYleng);
					  if (preYYtext[1]=='f' && g_blockName=="f")
					  {
					    BEGIN(SkipCComment);
					  }
					  else if (&preYYtext[4]==g_blockName)
					  {
					    BEGIN(SkipCComment);
					  }
  					}
	YY_BREAK
case 122:
YY_RULE_SETUP
#line 2487 "pre.l"
{
  					  outputArray(preYYtext,preYYleng);
  					}
	YY_BREAK
case 123:
YY_RULE_SETUP
#line 2490 "pre.l"
{
  					  outputArray(preYYtext,preYYleng);
  					}
	YY_BREAK
case 124:
/* rule 124 can match eol */
YY_RULE_SETUP
#line 2493 "pre.l"
{ 
  					  g_yyLineNr++;
  					  outputChar('\n');
  					}
	YY_BREAK
case 125:
YY_RULE_SETUP
#line 2497 "pre.l"
{
  					  outputChar(*preYYtext);
  					}
	YY_BREAK
case 126:
YY_RULE_SETUP
#line 2500 "pre.l"
{
					  g_defLitText+=preYYtext;
					  g_defText+=escapeAt(preYYtext);
  					}
	YY_BREAK
case 127:
YY_RULE_SETUP
#line 2504 "pre.l"
{
					  g_defLitText+=preYYtext;
					  g_defText+=preYYtext;
  					  BEGIN(g_lastCContext);
  					}
	YY_BREAK
case 128:
/* rule 128 can match eol */
YY_RULE_SETUP
#line 2509 "pre.l"
{ 
  					  g_yyLineNr++;
					  g_defLitText+=preYYtext;
					  g_defText+=' ';
  					}
	YY_BREAK
case 129:
YY_RULE_SETUP
#line 2514 "pre.l"
{ // see bug 594021 for a usecase for this rule
                                          if (g_lastCContext==SkipCPPBlock)
					  {
					    BEGIN(SkipCommand);
					  }
					  else
					  {
					    REJECT;
					  }
					}
	YY_BREAK
case 130:
YY_RULE_SETUP
#line 2524 "pre.l"
{ BEGIN(g_lastCContext); }
	YY_BREAK
case 131:
YY_RULE_SETUP
#line 2525 "pre.l"

	YY_BREAK
case 132:
YY_RULE_SETUP
#line 2526 "pre.l"

	YY_BREAK
case 133:
YY_RULE_SETUP
#line 2527 "pre.l"

	YY_BREAK
case 134:
/* rule 134 can match eol */
YY_RULE_SETUP
#line 2528 "pre.l"
{ g_yyLineNr++; outputChar('\n'); }
	YY_BREAK
case 135:
YY_RULE_SETUP
#line 2529 "pre.l"

	YY_BREAK
case 136:
YY_RULE_SETUP
#line 2530 "pre.l"
{
  					  outputArray(preYYtext,preYYleng);
  					}
	YY_BREAK
case 137:
/* rule 137 can match eol */
YY_RULE_SETUP
#line 2533 "pre.l"
{
  					  unput(*preYYtext);
  					  BEGIN(g_lastCPPContext);
  					}
	YY_BREAK
case 138:
YY_RULE_SETUP
#line 2537 "pre.l"
{
  					  outputChar('/');outputChar('*');
  					}
	YY_BREAK
case 139:
YY_RULE_SETUP
#line 2540 "pre.l"
{
  					  outputChar('/');outputChar('/');
  					}
	YY_BREAK
case 140:
YY_RULE_SETUP
#line 2543 "pre.l"
{
  					  outputArray(preYYtext,preYYleng);
  					}
	YY_BREAK
case 141:
YY_RULE_SETUP
#line 2546 "pre.l"
{
  					  outputChar(*preYYtext);
  					}
	YY_BREAK
case 142:
YY_RULE_SETUP
#line 2549 "pre.l"

	YY_BREAK
case 143:
YY_RULE_SETUP
#line 2550 "pre.l"

	YY_BREAK
case 144:
YY_RULE_SETUP
#line 2551 "pre.l"

	YY_BREAK
case 145:
YY_RULE_SETUP
#line 2552 "pre.l"

	YY_BREAK
case 146:
YY_RULE_SETUP
#line 2553 "pre.l"
{
  					  g_quoteArg=TRUE;
					  g_defLitText+=preYYtext;
  					}
	YY_BREAK
case 147:
YY_RULE_SETUP
#line 2557 "pre.l"
{
					  g_defLitText+=preYYtext;
  					  if (g_quoteArg)
					  {
					    g_defText+="\"";
					  }
					  if (g_defArgs>0)
					  {
					    int *n;
					    if ((n=(*g_argDict)[preYYtext]))
					    {
					      //if (!g_quoteArg) g_defText+=' ';
					      g_defText+='@';
					      QCString numStr;
					      numStr.sprintf("%d",*n);
					      g_defText+=numStr;
					      //if (!g_quoteArg) g_defText+=' ';
					    }
					    else
					    {
					      g_defText+=preYYtext;
					    }
					  }
					  else
					  {
					    g_defText+=preYYtext;
					  }
					  if (g_quoteArg)
					  {
					    g_defText+="\"";
					  }
					  g_quoteArg=FALSE;
  					}
	YY_BREAK
case 148:
YY_RULE_SETUP
#line 2590 "pre.l"
{
					  g_defLitText+=preYYtext;
					  g_defText+=preYYtext;
  					}
	YY_BREAK
case 149:
/* rule 149 can match eol */
YY_RULE_SETUP
#line 2594 "pre.l"
{ 
					  g_defLitText+=preYYtext;
					  outputChar('\n');
  					  g_defText += ' '; g_yyLineNr++; 
					}
	YY_BREAK
case 150:
/* rule 150 can match eol */
YY_RULE_SETUP
#line 2599 "pre.l"
{
					  QCString comment=extractTrailingComment(g_defLitText);
					  g_defLitText+=preYYtext;
					  if (!comment.isEmpty())
					  {
					    outputArray(comment,comment.length());
					    g_defLitText=g_defLitText.left(g_defLitText.length()-comment.length()-1);
					  }
  					  outputChar('\n');
  					  Define *def=0;
					  //printf("Define name=`%s' text=`%s' litTexti=`%s'\n",g_defName.data(),g_defText.data(),g_defLitText.data());
					  if (g_includeStack.isEmpty() || g_curlyCount>0) 
					  {
					    addDefine();
					  }
					  def=DefineManager::instance().isDefined(g_defName);
					  if (def==0) // new define
					  {
					    //printf("new define '%s'!\n",g_defName.data());
					    Define *nd = newDefine();
					    DefineManager::instance().addDefine(g_yyFileName,nd);

					    // also add it to the local file list if it is a source file
					    //if (g_isSource && g_includeStack.isEmpty())
					    //{
					    //  g_fileDefineDict->insert(g_defName,nd);
					    //}
					  }
					  else if (def /*&& macroIsAccessible(def)*/)
					       // name already exists
					  {
					    //printf("existing define!\n");
					    //printf("define found\n");
					    if (def->undef) // undefined name
					    {
					      def->undef = FALSE;
					      def->name = g_defName;
					      def->definition = g_defText.stripWhiteSpace();
					      def->nargs = g_defArgs;
					      def->fileName = g_yyFileName.copy(); 
					      def->lineNr = g_yyLineNr;
					    }
					    else
					    {
					      //printf("error: define %s is defined more than once!\n",g_defName.data());
					    }
					  }
					  delete g_argDict; g_argDict=0;
					  g_yyLineNr++;
					  g_lastGuardName.resize(0);
					  BEGIN(Start);
  					}
	YY_BREAK
case 151:
YY_RULE_SETUP
#line 2651 "pre.l"
{ g_defText += ' '; g_defLitText+=preYYtext; }
	YY_BREAK
case 152:
YY_RULE_SETUP
#line 2652 "pre.l"
{ g_defText += "##"; g_defLitText+=preYYtext; }
	YY_BREAK
case 153:
YY_RULE_SETUP
#line 2653 "pre.l"
{ g_defText += "@@"; g_defLitText+=preYYtext; }
	YY_BREAK
case 154:
YY_RULE_SETUP
#line 2654 "pre.l"
{ 
                                          g_defText += *preYYtext; 
  					  g_defLitText+=preYYtext; 
					  if (!g_insideComment)
					  {
					    BEGIN(SkipDoubleQuote);
					  }
  					}
	YY_BREAK
case 155:
YY_RULE_SETUP
#line 2662 "pre.l"
{ g_defText += *preYYtext;
  					  g_defLitText+=preYYtext; 
					  if (!g_insideComment)
					  {
  					    BEGIN(SkipSingleQuote);
					  }
					}
	YY_BREAK
case 156:
YY_RULE_SETUP
#line 2669 "pre.l"
{ g_defText += preYYtext; g_defLitText+=preYYtext; }
	YY_BREAK
case 157:
YY_RULE_SETUP
#line 2670 "pre.l"
{ g_defText += preYYtext; g_defLitText+=preYYtext; }
	YY_BREAK
case 158:
YY_RULE_SETUP
#line 2671 "pre.l"
{
  					  g_defText += *preYYtext; g_defLitText+=preYYtext; 
					  BEGIN(DefineText);
  					}
	YY_BREAK
case 159:
YY_RULE_SETUP
#line 2675 "pre.l"
{
  					  g_defText += preYYtext; g_defLitText+=preYYtext;
					}
	YY_BREAK
case 160:
YY_RULE_SETUP
#line 2678 "pre.l"
{
  					  g_defText += *preYYtext; g_defLitText+=preYYtext;
					  BEGIN(DefineText);
  					}
	YY_BREAK
case 161:
YY_RULE_SETUP
#line 2682 "pre.l"
{ g_defText += *preYYtext; g_defLitText+=preYYtext; }
	YY_BREAK
case 162:
YY_RULE_SETUP
#line 2683 "pre.l"
{ g_defText += *preYYtext; g_defLitText+=preYYtext; }
	YY_BREAK
case 163:
YY_RULE_SETUP
#line 2684 "pre.l"
{ g_defText += *preYYtext; g_defLitText+=preYYtext; }
	YY_BREAK
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(Start):
case YY_STATE_EOF(Command):
case YY_STATE_EOF(SkipCommand):
case YY_STATE_EOF(SkipLine):
case YY_STATE_EOF(SkipString):
case YY_STATE_EOF(CopyLine):
case YY_STATE_EOF(CopyString):
case YY_STATE_EOF(Include):
case YY_STATE_EOF(IncludeID):
case YY_STATE_EOF(EndImport):
case YY_STATE_EOF(DefName):
case YY_STATE_EOF(DefineArg):
case YY_STATE_EOF(DefineText):
case YY_STATE_EOF(SkipCPPBlock):
case YY_STATE_EOF(Ifdef):
case YY_STATE_EOF(Ifndef):
case YY_STATE_EOF(SkipCComment):
case YY_STATE_EOF(CopyCComment):
case YY_STATE_EOF(SkipVerbatim):
case YY_STATE_EOF(SkipCPPComment):
case YY_STATE_EOF(RemoveCComment):
case YY_STATE_EOF(RemoveCPPComment):
case YY_STATE_EOF(Guard):
case YY_STATE_EOF(DefinedExpr1):
case YY_STATE_EOF(DefinedExpr2):
case YY_STATE_EOF(SkipDoubleQuote):
case YY_STATE_EOF(SkipSingleQuote):
case YY_STATE_EOF(UndefName):
case YY_STATE_EOF(IgnoreLine):
case YY_STATE_EOF(FindDefineArgs):
case YY_STATE_EOF(ReadString):
case YY_STATE_EOF(CondLine):
#line 2685 "pre.l"
{
                                          //fprintf(stderr,"End of include file\n");
					  //printf("Include stack depth=%d\n",g_includeStack.count());
  					  if (g_includeStack.isEmpty())
					  {
					    //fprintf(stderr,"Terminating scanner!\n");
					    yyterminate();
					  }
					  else
					  {
					    FileState *fs=g_includeStack.pop();
					    //fileDefineCache->merge(g_yyFileName,fs->fileName);
					    YY_BUFFER_STATE oldBuf = YY_CURRENT_BUFFER;
					    preYY_switch_to_buffer(fs->bufState );
					    preYY_delete_buffer(oldBuf );
					    g_yyLineNr    = fs->lineNr;
                                            //preYYin = fs->oldYYin;
                                            g_inputBuf    = fs->oldFileBuf;
					    g_inputBufPos = fs->oldFileBufPos;
					    setFileName(fs->fileName);
					    //fprintf(stderr,"######## FileName %s\n",g_yyFileName.data());
					    
                                            // Deal with file changes due to 
                                            // #include's within { .. } blocks
                                            QCString lineStr(15+g_yyFileName.length());
                                            lineStr.sprintf("# %d \"%s\" 2",g_yyLineNr,g_yyFileName.data());
                                            outputArray(lineStr.data(),lineStr.length());
					    
					    delete fs; fs=0;
					  }
  					}
	YY_BREAK
case 164:
*yy_cp = (yy_hold_char); /* undo effects of setting up preYYtext */
(yy_c_buf_p) = yy_cp = yy_bp + 2;
YY_DO_BEFORE_ACTION; /* set up preYYtext again */
#line 2717 "pre.l"
case 165:
YY_RULE_SETUP
#line 2717 "pre.l"
{
					  outputArray(preYYtext,preYYleng);
  					  g_lastCContext=YY_START;
					  g_commentCount=1;
					  if (preYYleng==3) g_lastGuardName.resize(0); // reset guard in case the #define is documented!
					  BEGIN(SkipCComment);
  					}
	YY_BREAK
case 166:
YY_RULE_SETUP
#line 2724 "pre.l"
{
					  outputArray(preYYtext,preYYleng);
  					  g_lastCPPContext=YY_START;
					  if (preYYleng==3) g_lastGuardName.resize(0); // reset guard in case the #define is documented!
					  BEGIN(SkipCPPComment);
					}
	YY_BREAK
case 167:
/* rule 167 can match eol */
YY_RULE_SETUP
#line 2730 "pre.l"
{ 
  					  outputChar('\n');
  					  g_yyLineNr++; 
					}
	YY_BREAK
case 168:
YY_RULE_SETUP
#line 2734 "pre.l"
{
  					  g_expectGuard = FALSE;
  					  outputChar(*preYYtext);
  					}
	YY_BREAK
case 169:
YY_RULE_SETUP
#line 2739 "pre.l"
ECHO;
	YY_BREAK
#line 6126 "<stdout>"

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed preYYin at a new source and called
			 * preYYlex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = preYYin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( preYYwrap( ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * preYYtext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of preYYlex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (void)
{
    	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = (yytext_ptr);
	register int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			yy_size_t num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			YY_FATAL_ERROR(
"input buffer overflow, can't enlarge buffer because scanner uses REJECT" );

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			preYYrestart(preYYin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yy_size_t) ((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) preYYrealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (void)
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    
	yy_current_state = (yy_start);
	yy_current_state += YY_AT_BOL();

	(yy_state_ptr) = (yy_state_buf);
	*(yy_state_ptr)++ = yy_current_state;

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 57);
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 1172 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		*(yy_state_ptr)++ = yy_current_state;
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state )
{
	register int yy_is_jam;
    
	register YY_CHAR yy_c = 57;
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 1172 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 1171);
	if ( ! yy_is_jam )
		*(yy_state_ptr)++ = yy_current_state;

	return yy_is_jam ? 0 : yy_current_state;
}

    static void yyunput (int c, register char * yy_bp )
{
	register char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up preYYtext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register yy_size_t number_to_move = (yy_n_chars) + 2;
		register char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		register char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (void)
#else
    static int input  (void)
#endif

{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			yy_size_t offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					preYYrestart(preYYin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( preYYwrap( ) )
						return 0;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve preYYtext */
	(yy_hold_char) = *++(yy_c_buf_p);

	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = (c == '\n');

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void preYYrestart  (FILE * input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        preYYensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            preYY_create_buffer(preYYin,YY_BUF_SIZE );
	}

	preYY_init_buffer(YY_CURRENT_BUFFER,input_file );
	preYY_load_buffer_state( );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void preYY_switch_to_buffer  (YY_BUFFER_STATE  new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		preYYpop_buffer_state();
	 *		preYYpush_buffer_state(new_buffer);
     */
	preYYensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	preYY_load_buffer_state( );

	/* We don't actually know whether we did this switch during
	 * EOF (preYYwrap()) processing, but the only time this flag
	 * is looked at is after preYYwrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

static void preYY_load_buffer_state  (void)
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	preYYin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE preYY_create_buffer  (FILE * file, int  size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) preYYalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in preYY_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) preYYalloc(b->yy_buf_size + 2  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in preYY_create_buffer()" );

	b->yy_is_our_buffer = 1;

	preYY_init_buffer(b,file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with preYY_create_buffer()
 * 
 */
    void preYY_delete_buffer (YY_BUFFER_STATE  b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		preYYfree((void *) b->yy_ch_buf  );

	preYYfree((void *) b  );
}

#ifndef __cplusplus
extern int isatty (int );
#endif /* __cplusplus */
    
/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a preYYrestart() or at EOF.
 */
    static void preYY_init_buffer  (YY_BUFFER_STATE  b, FILE * file )

{
	int oerrno = errno;
    
	preYY_flush_buffer(b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then preYY_init_buffer was _probably_
     * called from preYYrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void preYY_flush_buffer (YY_BUFFER_STATE  b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		preYY_load_buffer_state( );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void preYYpush_buffer_state (YY_BUFFER_STATE new_buffer )
{
    	if (new_buffer == NULL)
		return;

	preYYensure_buffer_stack();

	/* This block is copied from preYY_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from preYY_switch_to_buffer. */
	preYY_load_buffer_state( );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void preYYpop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	preYY_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		preYY_load_buffer_state( );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void preYYensure_buffer_stack (void)
{
	yy_size_t num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		(yy_buffer_stack) = (struct yy_buffer_state**)preYYalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in preYYensure_buffer_stack()" );
								  
		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)preYYrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in preYYensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * 
 * @return the newly allocated buffer state object. 
 */
YY_BUFFER_STATE preYY_scan_buffer  (char * base, yy_size_t  size )
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) preYYalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in preYY_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	preYY_switch_to_buffer(b  );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to preYYlex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * 
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       preYY_scan_bytes() instead.
 */
YY_BUFFER_STATE preYY_scan_string (yyconst char * yystr )
{
    
	return preYY_scan_bytes(yystr,strlen(yystr) );
}

/** Setup the input buffer state to scan the given bytes. The next call to preYYlex() will
 * scan from a @e copy of @a bytes.
 * @param bytes the byte buffer to scan
 * @param len the number of bytes in the buffer pointed to by @a bytes.
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE preYY_scan_bytes  (yyconst char * yybytes, yy_size_t  _yybytes_len )
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n, i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = _yybytes_len + 2;
	buf = (char *) preYYalloc(n  );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in preYY_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = preYY_scan_buffer(buf,n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in preYY_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yy_fatal_error (yyconst char* msg )
{
    	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up preYYtext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		preYYtext[preYYleng] = (yy_hold_char); \
		(yy_c_buf_p) = preYYtext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		preYYleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the current line number.
 * 
 */
int preYYget_lineno  (void)
{
        
    return preYYlineno;
}

/** Get the input stream.
 * 
 */
FILE *preYYget_in  (void)
{
        return preYYin;
}

/** Get the output stream.
 * 
 */
FILE *preYYget_out  (void)
{
        return preYYout;
}

/** Get the length of the current token.
 * 
 */
yy_size_t preYYget_leng  (void)
{
        return preYYleng;
}

/** Get the current token.
 * 
 */

char *preYYget_text  (void)
{
        return preYYtext;
}

/** Set the current line number.
 * @param line_number
 * 
 */
void preYYset_lineno (int  line_number )
{
    
    preYYlineno = line_number;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param in_str A readable stream.
 * 
 * @see preYY_switch_to_buffer
 */
void preYYset_in (FILE *  in_str )
{
        preYYin = in_str ;
}

void preYYset_out (FILE *  out_str )
{
        preYYout = out_str ;
}

int preYYget_debug  (void)
{
        return preYY_flex_debug;
}

void preYYset_debug (int  bdebug )
{
        preYY_flex_debug = bdebug ;
}

static int yy_init_globals (void)
{
        /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from preYYlex_destroy(), so don't allocate here.
     */

    (yy_buffer_stack) = 0;
    (yy_buffer_stack_top) = 0;
    (yy_buffer_stack_max) = 0;
    (yy_c_buf_p) = (char *) 0;
    (yy_init) = 0;
    (yy_start) = 0;

    (yy_state_buf) = 0;
    (yy_state_ptr) = 0;
    (yy_full_match) = 0;
    (yy_lp) = 0;

/* Defined in main.c */
#ifdef YY_STDINIT
    preYYin = stdin;
    preYYout = stdout;
#else
    preYYin = (FILE *) 0;
    preYYout = (FILE *) 0;
#endif

    /* For future reference: Set errno on error, since we are called by
     * preYYlex_init()
     */
    return 0;
}

/* preYYlex_destroy is for both reentrant and non-reentrant scanners. */
int preYYlex_destroy  (void)
{
    
    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		preYY_delete_buffer(YY_CURRENT_BUFFER  );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		preYYpop_buffer_state();
	}

	/* Destroy the stack itself. */
	preYYfree((yy_buffer_stack) );
	(yy_buffer_stack) = NULL;

    preYYfree ( (yy_state_buf) );
    (yy_state_buf)  = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * preYYlex() is called, initialization will occur. */
    yy_init_globals( );

    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *preYYalloc (yy_size_t  size )
{
	return (void *) malloc( size );
}

void *preYYrealloc  (void * ptr, yy_size_t  size )
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void preYYfree (void * ptr )
{
	free( (char *) ptr );	/* see preYYrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 2739 "pre.l"



/*@ ----------------------------------------------------------------------------
 */

static int getNextChar(const QCString &expr,QCString *rest,uint &pos)
{
  //printf("getNextChar(%s,%s,%d)\n",expr.data(),rest ? rest->data() : 0,pos);
  if (pos<expr.length())
  {
    //printf("%c=expr()\n",expr.at(pos));
    return expr.at(pos++);
  }
  else if (rest && !rest->isEmpty())
  {
    int cc=rest->at(0);
    *rest=rest->right(rest->length()-1);
    //printf("%c=rest\n",cc);
    return cc;
  }
  else
  {
    int cc=yyinput();
    //printf("%c=yyinput()\n",cc);
    return cc;
  }
}
 
static int getCurrentChar(const QCString &expr,QCString *rest,uint pos)
{
  //printf("getCurrentChar(%s,%s,%d)\n",expr.data(),rest ? rest->data() : 0,pos);
  if (pos<expr.length())
  {
    //printf("%c=expr()\n",expr.at(pos));
    return expr.at(pos);
  }
  else if (rest && !rest->isEmpty())
  {
    int cc=rest->at(0);
    //printf("%c=rest\n",cc);
    return cc;
  }
  else
  {
    int cc=yyinput();
    returnCharToStream(cc);
    //unput((char)cc);
    //printf("%c=yyinput()\n",cc);
    return cc;
  }
}

static void unputChar(const QCString &expr,QCString *rest,uint &pos,char c)
{
  //printf("unputChar(%s,%s,%d,%c)\n",expr.data(),rest ? rest->data() : 0,pos,c);
  if (pos<expr.length())
  {
    pos++;
  }
  else if (rest)
  {
    //printf("Prepending to rest!\n");
    char cs[2];cs[0]=c;cs[1]='\0';
    rest->prepend(cs);
  }
  else
  {
    //unput(c);
    returnCharToStream(c);
  }
  //printf("result: unputChar(%s,%s,%d,%c)\n",expr.data(),rest ? rest->data() : 0,pos,c);
}

void addSearchDir(const char *dir)
{
  QFileInfo fi(dir);
  if (fi.isDir()) g_pathList->append(fi.absFilePath().utf8());
} 

void initPreprocessor()
{
  g_pathList = new QStrList;
  addSearchDir(".");
  g_expandedDict = new DefineDict(17);
}

void cleanUpPreprocessor()
{
  delete g_expandedDict; g_expandedDict=0;
  delete g_pathList; g_pathList=0;
  DefineManager::deleteInstance();
}


void preprocessFile(const char *fileName,BufStr &input,BufStr &output)
{
  uint orgOffset=output.curPos();
  //printf("##########################\n%s\n####################\n",
  //    input.data());

  g_macroExpansion = Config_getBool("MACRO_EXPANSION");
  g_expandOnlyPredef = Config_getBool("EXPAND_ONLY_PREDEF");
  g_curlyCount=0;
  g_nospaces=FALSE;
  g_inputBuf=&input;
  g_inputBufPos=0;
  g_outputBuf=&output;
  g_includeStack.setAutoDelete(TRUE);
  g_includeStack.clear();
  g_expandedDict->setAutoDelete(FALSE);
  g_expandedDict->clear();
  g_condStack.clear();
  g_condStack.setAutoDelete(TRUE);
  //g_fileDefineDict->clear();

  setFileName(fileName);
  g_inputFileDef = g_yyFileDef;
  DefineManager::instance().startContext(g_yyFileName);
  
  static bool firstTime=TRUE;
  if (firstTime)
  {
    // add predefined macros
    char *defStr;
    QStrList &predefList = Config_getList("PREDEFINED");
    QStrListIterator sli(predefList);
    for (sli.toFirst();(defStr=sli.current());++sli)
    {
      QCString ds = defStr;
      int i_equals=ds.find('=');
      int i_obrace=ds.find('(');
      int i_cbrace=ds.find(')');
      bool nonRecursive = i_equals>0 && ds.at(i_equals-1)==':';

      if (i_obrace==0) continue; // no define name

      if (i_obrace<i_equals && i_cbrace<i_equals && 
	  i_obrace!=-1      && i_cbrace!=-1      && 
	  i_obrace<i_cbrace
	 ) // predefined function macro definition
      {
	//printf("predefined function macro '%s'\n",defStr);
	QRegExp reId("[a-z_A-Z][a-z_A-Z0-9]*"); // regexp matching an id
	QDict<int> argDict(17);
	argDict.setAutoDelete(TRUE);
	int i=i_obrace+1,p,l,count=0;
	// gather the formal arguments in a dictionary 
	while (i<i_cbrace && (p=reId.match(ds,i,&l)))
	{
	  argDict.insert(ds.mid(p,l),new int(count++));
	  i=p+l;
	}
	// strip definition part
	QCString tmp=ds.right(ds.length()-i_equals-1);
	QCString definition;
	i=0;
	// substitute all occurrences of formal arguments by their 
	// corresponding markers
	while ((p=reId.match(tmp,i,&l))!=-1)
	{
	  if (p>i) definition+=tmp.mid(i,p-i);
	  int *argIndex;
	  if ((argIndex=argDict[tmp.mid(p,l)])!=0)
	  {
	    QCString marker;
	    marker.sprintf(" @%d ",*argIndex);
	    definition+=marker;
	  }
	  else
	  {
	    definition+=tmp.mid(p,l);
	  }
	  i=p+l;
	}
	if (i<(int)tmp.length()) definition+=tmp.mid(i,tmp.length()-i);

	// add define definition to the dictionary of defines for this file
	QCString dname = ds.left(i_obrace);
	if (!dname.isEmpty())
	{
	  Define *def = new Define;
	  def->name         = dname;
	  def->definition   = definition; 
	  def->nargs        = count;
	  def->isPredefined = TRUE;
	  def->nonRecursive = nonRecursive;
	  def->fileDef      = g_yyFileDef;
	  def->fileName     = fileName;
	  DefineManager::instance().addDefine(g_yyFileName,def);
	}

	//printf("#define `%s' `%s' #nargs=%d\n",
	//  def->name.data(),def->definition.data(),def->nargs);
      }
      else if ((i_obrace==-1 || i_obrace>i_equals) &&
	  (i_cbrace==-1 || i_cbrace>i_equals) &&
	  !ds.isEmpty() && (int)ds.length()>i_equals
	  ) // predefined non-function macro definition
      {
	//printf("predefined normal macro '%s'\n",defStr);
	Define *def = new Define;
	if (i_equals==-1) // simple define without argument
	{
	  def->name = ds;
	  def->definition = "1"; // substitute occurrences by 1 (true)
	}
	else // simple define with argument
	{
	  int ine=i_equals - (nonRecursive ? 1 : 0);
	  def->name = ds.left(ine);
	  def->definition = ds.right(ds.length()-i_equals-1);
	}
	if (!def->name.isEmpty())
	{
	  def->nargs = -1;
	  def->isPredefined = TRUE;
	  def->nonRecursive = nonRecursive;
	  def->fileDef      = g_yyFileDef;
	  def->fileName     = fileName;
	  DefineManager::instance().addDefine(g_yyFileName,def);
	}
	else
	{
	  delete def;
	}

	//printf("#define `%s' `%s' #nargs=%d\n",
	//  def->name.data(),def->definition.data(),def->nargs);
      }
    }
    //firstTime=FALSE;
  }
 
  g_yyLineNr = 1;
  g_level    = 0;
  g_ifcount  = 0;

  BEGIN( Start );
  
  g_expectGuard = guessSection(fileName)==Entry::HEADER_SEC;
  g_guardName.resize(0);
  g_lastGuardName.resize(0);
  g_guardExpr.resize(0);
  
  preYYlex();
  g_lexInit=TRUE;

  // make sure we don't extend a \cond with missing \endcond over multiple files (see bug 624829)
  forceEndCondSection();

  // remove locally defined macros so they can be redefined in another source file
  //if (g_fileDefineDict->count()>0)
  //{
  //  QDictIterator<Define> di(*g_fileDefineDict);
  //  Define *d;
  //  for (di.toFirst();(d=di.current());++di)
  //  {
  //    g_globalDefineDict->remove(di.currentKey());
  //  }
  //  g_fileDefineDict->clear();
  //}

  if (Debug::isFlagSet(Debug::Preprocessor))
  {
    char *orgPos=output.data()+orgOffset;
    char *newPos=output.data()+output.curPos();
    Debug::print(Debug::Preprocessor,0,"Preprocessor output (size: %d bytes):\n",newPos-orgPos);
    int line=1;
    Debug::print(Debug::Preprocessor,0,"---------\n00001 ");
    while (orgPos<newPos) 
    {
      putchar(*orgPos);
      if (*orgPos=='\n') Debug::print(Debug::Preprocessor,0,"%05d ",++line);
      orgPos++;
    }
    Debug::print(Debug::Preprocessor,0,"\n---------\n");
    if (DefineManager::instance().defineContext().count()>0)
    {
      Debug::print(Debug::Preprocessor,0,"Macros accessible in this file:\n");
      Debug::print(Debug::Preprocessor,0,"---------\n");
      QDictIterator<Define> di(DefineManager::instance().defineContext());
      Define *def;
      for (di.toFirst();(def=di.current());++di)
      {
        Debug::print(Debug::Preprocessor,0,"%s ",def->name.data());
      }
      Debug::print(Debug::Preprocessor,0,"\n---------\n");
    }
    else
    {
      Debug::print(Debug::Preprocessor,0,"No macros accessible in this file.\n");
    }
  }
  DefineManager::instance().endContext();
}

void preFreeScanner()
{
#if defined(YY_FLEX_SUBMINOR_VERSION) 
  if (g_lexInit)
  {
    preYYlex_destroy();
  }
#endif
}

#if !defined(YY_FLEX_SUBMINOR_VERSION) 
extern "C" { // some bogus code to keep the compiler happy
//  int  preYYwrap() { return 1 ; }
  void preYYdummy() { yy_flex_realloc(0,0); } 
}
#endif


