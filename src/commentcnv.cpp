
#line 3 "<stdout>"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define yy_create_buffer commentcnvYY_create_buffer
#define yy_delete_buffer commentcnvYY_delete_buffer
#define yy_flex_debug commentcnvYY_flex_debug
#define yy_init_buffer commentcnvYY_init_buffer
#define yy_flush_buffer commentcnvYY_flush_buffer
#define yy_load_buffer_state commentcnvYY_load_buffer_state
#define yy_switch_to_buffer commentcnvYY_switch_to_buffer
#define yyin commentcnvYYin
#define yyleng commentcnvYYleng
#define yylex commentcnvYYlex
#define yylineno commentcnvYYlineno
#define yyout commentcnvYYout
#define yyrestart commentcnvYYrestart
#define yytext commentcnvYYtext
#define yywrap commentcnvYYwrap
#define yyalloc commentcnvYYalloc
#define yyrealloc commentcnvYYrealloc
#define yyfree commentcnvYYfree

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 35
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;
#endif /* ! C99 */

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! FLEXINT_H */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE commentcnvYYrestart(commentcnvYYin  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#define YY_BUF_SIZE 262144
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

extern yy_size_t commentcnvYYleng;

extern FILE *commentcnvYYin, *commentcnvYYout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    #define YY_LESS_LINENO(n)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up commentcnvYYtext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up commentcnvYYtext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	yy_size_t yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via commentcnvYYrestart()), so that the user can continue scanning by
	 * just pointing commentcnvYYin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* Stack of input buffers. */
static size_t yy_buffer_stack_top = 0; /**< index of top of stack. */
static size_t yy_buffer_stack_max = 0; /**< capacity of stack. */
static YY_BUFFER_STATE * yy_buffer_stack = 0; /**< Stack as an array. */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* yy_hold_char holds the character lost when commentcnvYYtext is formed. */
static char yy_hold_char;
static yy_size_t yy_n_chars;		/* number of characters read into yy_ch_buf */
yy_size_t commentcnvYYleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 0;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow commentcnvYYwrap()'s to do buffer switches
 * instead of setting up a fresh commentcnvYYin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void commentcnvYYrestart (FILE *input_file  );
void commentcnvYY_switch_to_buffer (YY_BUFFER_STATE new_buffer  );
YY_BUFFER_STATE commentcnvYY_create_buffer (FILE *file,int size  );
void commentcnvYY_delete_buffer (YY_BUFFER_STATE b  );
void commentcnvYY_flush_buffer (YY_BUFFER_STATE b  );
void commentcnvYYpush_buffer_state (YY_BUFFER_STATE new_buffer  );
void commentcnvYYpop_buffer_state (void );

static void commentcnvYYensure_buffer_stack (void );
static void commentcnvYY_load_buffer_state (void );
static void commentcnvYY_init_buffer (YY_BUFFER_STATE b,FILE *file  );

#define YY_FLUSH_BUFFER commentcnvYY_flush_buffer(YY_CURRENT_BUFFER )

YY_BUFFER_STATE commentcnvYY_scan_buffer (char *base,yy_size_t size  );
YY_BUFFER_STATE commentcnvYY_scan_string (yyconst char *yy_str  );
YY_BUFFER_STATE commentcnvYY_scan_bytes (yyconst char *bytes,yy_size_t len  );

void *commentcnvYYalloc (yy_size_t  );
void *commentcnvYYrealloc (void *,yy_size_t  );
void commentcnvYYfree (void *  );

#define yy_new_buffer commentcnvYY_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        commentcnvYYensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            commentcnvYY_create_buffer(commentcnvYYin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        commentcnvYYensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            commentcnvYY_create_buffer(commentcnvYYin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define commentcnvYYwrap(n) 1
#define YY_SKIP_YYWRAP

typedef unsigned char YY_CHAR;

FILE *commentcnvYYin = (FILE *) 0, *commentcnvYYout = (FILE *) 0;

typedef int yy_state_type;

extern int commentcnvYYlineno;

int commentcnvYYlineno = 1;

extern char *commentcnvYYtext;
#define yytext_ptr commentcnvYYtext

static yy_state_type yy_get_previous_state (void );
static yy_state_type yy_try_NUL_trans (yy_state_type current_state  );
static int yy_get_next_buffer (void );
static void yy_fatal_error (yyconst char msg[]  );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up commentcnvYYtext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	commentcnvYYleng = (size_t) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;

#define YY_NUM_RULES 77
#define YY_END_OF_BUFFER 78
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_acclist[293] =
    {   0,
        1,    1,   36,   36,   24,   24,   24,   24,   63,   63,
       78,   77,    1,   18,   77,    6,   77,   18,   77,    4,
       18,   77,   11,   18,   77,    5,   18,   77,   18,   77,
       18,   77,   18,   77,   30,   77,   31,   77,   29,   30,
       77,   30,   77,   34,   77,   35,   77,   33,   34,   77,
       34,   77,   57,   77,   77,   77,   36,   44,   77,   39,
       77,   44,   77,   44,   77,   37,   44,   77,   44,   77,
       44,   77,   24,   27,   77,   25,   77,   27,   77,   27,
       77,   24,   27,   77,   27,   77,   27,   77,   20,   27,
       77,   21,   27,   77,   24,   27,   77,   27,   77,   76,

       77,   58,   77,   76,   77,   65,   77,   63,   65,   77,
       62,   65,   77,   70,   75,   77,   72,   77,   75,   77,
       71,   75,   77,   73,   75,   77,   74,   75,   77,   70,
       75,   77,   70,   75,   77,    1,    3,   13,   11,   10,
       28,   32,   36,   41,   42,   43,   41,   42,   43,   41,
       42,   42,   43,   41,   43,   37,   37,   40,   66,   66,
       66,   66,   66,   66,   66,   66,   66,   66,   66,   24,
       24,   24,   23,   58,   63,   62,   70,   69,   70,   70,
       70,   12,   10,    9,16391,   49,   38,   59,   66,   67,
       66,   66,   66,   16,   16,   67,   66,   66,   66,   66,

       66,   66,   66,   19,   26,   23,   23,   26,   70,16452,
        2,16391,    9,   52,16435,16434,16439,16431,   45,   59,
       59,   66,   66,   66,   66,   16,   66,   66,   66,   66,
       66,   66, 8260,   70, 8260,16438,16437,16440,16432,   46,
     8243, 8242, 8247, 8239,   66,   15,   15,   67,   66,   66,
       66,   66,   66,   66,   66, 8246, 8245, 8248, 8240,   60,
       64,   66,   66,   66,   66,   66,   66,   66,   66,   66,
       66,   66,   66,   66,   66,   14,   22, 8199,   66,   66,
       66,   66,   66,   61,   61,   67,   66,   17,   17,   67,
        8,    9

    } ;

static yyconst flex_int16_t yy_accept[331] =
    {   0,
        1,    1,    1,    2,    3,    3,    3,    3,    3,    3,
        3,    4,    5,    6,    7,    8,    9,    9,    9,   10,
       11,   11,   11,   12,   13,   16,   18,   20,   23,   26,
       29,   31,   33,   35,   37,   39,   42,   44,   46,   48,
       51,   53,   55,   56,   57,   60,   62,   64,   66,   69,
       71,   73,   76,   78,   80,   82,   85,   87,   89,   92,
       95,   98,  100,  102,  104,  106,  108,  111,  114,  117,
      119,  121,  124,  127,  130,  133,  136,  137,  139,  139,
      140,  140,  141,  141,  142,  143,  143,  143,  143,  143,
      143,  144,  147,  150,  152,  154,  156,  156,  157,  158,

      159,  159,  160,  161,  162,  163,  164,  165,  166,  167,
      168,  169,  170,  170,  171,  171,  171,  172,  172,  172,
      172,  173,  173,  174,  174,  175,  176,  177,  178,  179,
      180,  181,  182,  182,  183,  184,  184,  185,  186,  186,
      186,  187,  187,  187,  188,  189,  190,  191,  192,  193,
      194,  195,  197,  198,  199,  200,  201,  202,  203,  204,
      204,  204,  205,  206,  206,  207,  209,  211,  212,  213,
      214,  214,  215,  215,  215,  216,  217,  218,  219,  220,
      220,  221,  222,  223,  224,  225,  226,  227,  228,  229,
      230,  231,  232,  233,  233,  233,  233,  235,  236,  236,

      236,  236,  237,  238,  239,  240,  241,  241,  241,  242,
      242,  243,  243,  244,  244,  245,  246,  247,  249,  250,
      251,  252,  253,  254,  255,  256,  256,  256,  256,  256,
      256,  256,  256,  256,  256,  256,  256,  256,  256,  257,
      257,  258,  258,  259,  259,  260,  261,  262,  262,  263,
      264,  265,  266,  267,  268,  269,  269,  269,  269,  269,
      269,  269,  269,  269,  269,  269,  269,  269,  270,  271,
      272,  273,  274,  275,  276,  277,  277,  277,  277,  277,
      277,  277,  277,  278,  279,  279,  280,  281,  282,  283,
      284,  284,  284,  284,  284,  284,  284,  284,  285,  287,

      288,  289,  291,  291,  291,  291,  291,  291,  291,  291,
      291,  291,  291,  291,  291,  291,  291,  291,  291,  291,
      291,  291,  291,  291,  291,  291,  291,  291,  293,  293
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    4,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    5,    6,    7,    8,    1,    1,    9,    1,
        1,   10,    1,    1,   11,   12,   13,   14,   14,   14,
       14,   14,   14,   14,   14,   14,   14,    1,    1,   15,
        1,   16,    1,   17,   18,   18,   18,   19,   18,   18,
       18,   18,   18,   18,   18,   18,   18,   18,   18,   18,
       18,   18,   18,   18,   18,   18,   18,   18,   18,   18,
       20,   21,   22,    1,   18,    1,   23,   24,   25,   26,

       27,   28,   29,   30,   31,   29,   29,   32,   33,   34,
       35,   29,   29,   36,   37,   38,   39,   40,   29,   41,
       42,   29,   43,    1,   44,   45,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst flex_int32_t yy_meta[46] =
    {   0,
        1,    2,    3,    1,    4,    5,    6,    1,    6,    7,
        8,    9,   10,   11,    1,    1,   12,   13,   13,    1,
       14,    1,   15,   15,   15,   15,   15,   15,   15,   15,
       15,   15,   15,   15,   15,   15,   15,   15,   15,   15,
       15,   15,   16,   17,   18
    } ;

static yyconst flex_int16_t yy_base[370] =
    {   0,
        0,    0,    0,   19,   12,   13,   14,   28, 1185,   39,
       50,   91,   26,  133,   33,  176,   41,   42,  220,    0,
       62,  264, 1187, 1189,    0, 1189, 1170, 1179, 1177, 1189,
     1172,   38, 1189, 1189, 1189, 1189,    0, 1189, 1189, 1189,
        0,   25,   55, 1169,    0,   73, 1189, 1175,   51,  292,
     1163,    0, 1189, 1189,   46,   77, 1166, 1151, 1189, 1189,
       79, 1164, 1173, 1189,    0, 1189, 1173,    0,    0, 1189,
     1161, 1189, 1189, 1189,   85, 1160,    0, 1189, 1166, 1189,
     1166,   81,    7, 1189, 1189,   86, 1157,   87, 1156,   97,
        0, 1189,  109, 1189, 1189, 1189, 1162,   72,  105, 1189,

        0, 1124,   60,   74,   79,   99,   83,  100,  101,   87,
      102,   94, 1141,    0, 1131,  125,  126, 1151, 1150, 1128,
      138, 1148,  136, 1157, 1189, 1157,    0,    0, 1189,  146,
     1119,  147, 1030, 1189, 1189,  924, 1189,  906,    1,  148,
      890,  896,  153, 1189,  899,  857, 1189,  131,  120,  138,
     1189,    0,  129,  130,  137,  142,  147,  148,  151,  864,
      872, 1189, 1189,  871, 1189, 1189,  258, 1189,  893,  185,
      167,  880,  887,  179,  833,  831,  828,  827, 1189,  192,
      826,  805,  161,  170,  334,  174,    0,  168,  175,  166,
      171,  245,  172,  780,  240,  257,  338,    0,  273,  791,

      268,  794,  790,  786,  784, 1189,  281,  782, 1189,  775,
     1189,  773, 1189,  760, 1189,  358, 1189, 1189,  173,  252,
      169,  255,  257,  269,  262,  735,  722,  735,  733,  711,
      717,  709,  705,  698,  694,  301,  349,  705, 1189,  703,
     1189,  701, 1189,  696, 1189,  361, 1189,  364,  337,  341,
      348,  261,  326,  347,  344,  129,  664,  658,  661,  649,
      623,  620,  622,  608,  619,    0,  350,  360,  356,  359,
      330,  352,  361,  354, 1189,  611,  615,  606,  456,  466,
      454,  460, 1189, 1189,  367,  404,  380,  386,  449,  394,
      451,  444,  450,  449,  459,  447,  436, 1189, 1189,  388,

     1189, 1189,  446,  444,  446,  445,  437,  414,  433,  411,
      407,  398,  393,  403,  390,  395,  386,  325,  266,  465,
      255,  435,  441,  439,  442,  275,  200, 1189, 1189,  494,
      512,  530,  548,  566,  584,  602,  620,  638,  656,  674,
      692,  710,  728,  746,  764,  775,  790,  808,  814,  822,
      838,  856,  874,  891,   51,  906,  924,  942,  960,  978,
      996, 1014, 1032, 1050, 1068, 1086, 1104, 1122, 1140
    } ;

static yyconst flex_int16_t yy_def[370] =
    {   0,
      330,  330,  331,  331,  332,  332,  333,  333,  330,  330,
      334,  334,  335,  335,  335,  335,  336,  336,  329,   19,
      337,  337,  329,  329,  338,  329,  329,  329,  329,  329,
      329,  329,  329,  329,  329,  329,  339,  329,  329,  329,
      340,  329,  329,  329,  341,  342,  329,  329,  343,  329,
      329,  344,  329,  329,  329,  344,  329,  329,  329,  329,
      344,  329,  345,  329,   50,  329,  329,  346,  347,  329,
      329,  329,  329,  329,  347,  347,  338,  329,  329,  329,
      329,  329,  348,  329,  329,  329,  329,  329,  329,  329,
      341,  329,  342,  329,  329,  329,  329,  343,  343,  329,

      349,  350,  350,  350,  350,  350,  350,  350,  350,  350,
      350,  350,  329,  344,  329,  329,  344,  329,  329,  329,
      344,  329,  329,  345,  329,  329,  346,  347,  329,  347,
      347,  347,  329,  329,  329,  348,  329,  351,  348,  329,
      352,  329,  353,  329,  354,  350,  329,  350,  350,  350,
      329,  355,  350,  350,  350,  350,  350,  350,  350,  329,
      329,  329,  329,  329,  329,  329,  356,  329,  351,  329,
      348,  357,  329,  358,  359,  360,  361,  362,  329,  329,
      329,  354,  350,  350,  350,  350,  355,  350,  350,  350,
      350,  350,  350,  329,  329,  329,  356,  363,  329,  329,

      348,  364,  365,  366,  367,  329,  329,  359,  329,  360,
      329,  361,  329,  362,  329,  350,  329,  329,  350,  350,
      350,  350,  350,  350,  350,  329,  329,  329,  329,  329,
      329,  329,  329,  329,  329,  329,  348,  364,  329,  365,
      329,  366,  329,  367,  329,  329,  329,  329,  350,  350,
      350,  350,  350,  350,  350,  329,  329,  329,  329,  329,
      329,  329,  329,  329,  329,  368,  348,  350,  350,  350,
      350,  350,  350,  350,  329,  329,  329,  329,  329,  329,
      329,  329,  329,  329,  348,  350,  350,  350,  350,  350,
      329,  329,  329,  329,  329,  329,  348,  329,  329,  350,

      329,  329,  329,  329,  329,  329,  329,  329,  348,  329,
      329,  329,  329,  329,  329,  348,  329,  329,  329,  348,
      329,  348,  348,  348,  348,  369,  369,  329,    0,  329,
      329,  329,  329,  329,  329,  329,  329,  329,  329,  329,
      329,  329,  329,  329,  329,  329,  329,  329,  329,  329,
      329,  329,  329,  329,  329,  329,  329,  329,  329,  329,
      329,  329,  329,  329,  329,  329,  329,  329,  329
    } ;

static yyconst flex_int16_t yy_nxt[1235] =
    {   0,
      329,  329,   26,  137,   27,   28,   29,  171,   30,  137,
       31,  138,   32,  139,   35,   35,   39,   36,   36,  138,
       33,   26,   40,   27,   28,   29,   86,   30,   53,   31,
       39,   32,   37,   37,   41,   53,   40,   87,   54,   33,
       43,   42,   55,   64,   64,   54,   55,   82,   41,   58,
       83,   44,   46,   58,   47,   48,   88,   65,   65,   49,
       99,   65,   65,  100,   70,  187,   50,   89,   54,   54,
       50,   71,  115,  116,   93,   59,   60,   94,  117,   95,
      121,  329,   72,   96,  329,  135,  130,   86,   88,  118,
      135,  122,   51,   46,  148,   47,   48,  131,   87,   89,

       49,  141,  147,  142,   73,   74,  151,   50,  149,  143,
       93,   50,  150,   94,   99,   95,  147,  100,  151,   96,
      153,  147,  154,  155,  157,  147,  159,  117,  158,  147,
      275,  275,  162,   51,   56,   53,  147,  156,  118,  121,
      165,  152,  147,  147,  147,   57,  162,  130,  166,   55,
      122,  167,  172,   55,  173,  179,  183,  185,  131,  167,
      174,  188,  147,  186,  184,  180,  185,  189,  162,  137,
      190,  147,  147,  147,  191,   54,   54,   61,   53,  147,
      147,  206,  193,  192,  147,  201,  199,  185,   62,  147,
      147,  207,   58,  147,  179,  216,   58,  200,  219,  220,

      222,  221,  328,  147,  180,  223,  225,  249,  147,  251,
      147,  147,  147,  147,  147,  147,  147,  147,   59,   60,
       66,   67,   24,   66,   66,   66,   66,   66,   66,   66,
       66,   66,   66,   66,   66,   66,   66,   68,   68,   66,
       66,   66,   68,   68,   68,   68,   68,   68,   68,   68,
       68,   68,   68,   68,   68,   68,   68,   68,   68,   68,
       68,   68,   66,   66,   66,   75,   70,  198,  224,  227,
      137,  228,  229,   71,  199,  230,   76,  328,  198,  231,
      232,  233,  234,  206,   72,  200,  250,  147,  252,  235,
      253,  254,  271,  207,  147,  255,  162,  147,  162,  147,

      198,  198,  237,  147,  147,  266,   73,   74,  101,  102,
      102,  147,  101,  266,  102,  102,  103,  104,  105,  106,
      102,  107,  102,  108,  109,  102,  102,  110,  102,  102,
      102,  111,  112,  102,  217,  217,  217,  217,  217,  217,
      217,  217,  217,  217,  217,  217,  217,  198,  217,  217,
      217,  137,  137,  217,  217,  217,  321,  272,  198,  246,
      247,  248,  246,  247,  248,  248,  247,  248,  147,  137,
      268,  289,  147,  267,  269,  274,  218,  217,  217,  147,
      198,  198,  270,  147,  273,  286,  147,  287,  285,  147,
      147,  290,  288,  289,  147,  289,  147,  137,  147,  297,

      147,  147,  147,  147,  298,  298,  298,  298,  298,  298,
      298,  298,  298,  298,  298,  298,  298,  300,  298,  298,
      298,  289,  147,  298,  298,  298,  289,  162,  147,  289,
      147,  162,  320,  319,  162,  137,  147,  137,  137,  162,
      318,  137,  317,  137,  137,  315,  299,  298,  298,  301,
      301,  301,  301,  301,  301,  301,  301,  301,  301,  301,
      301,  301,  309,  301,  301,  301,  316,  137,  301,  301,
      301,  324,  323,  325,  314,  326,  313,  312,  311,  310,
      308,  307,  306,  305,  304,  303,  283,  322,  296,  295,
      294,  302,  301,  301,   24,   24,   24,   24,   24,   24,

       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   25,   25,   25,   25,   25,   25,   25,   25,
       25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
       34,   34,   34,   34,   34,   34,   34,   34,   34,   34,
       34,   34,   34,   34,   34,   34,   34,   34,   38,   38,
       38,   38,   38,   38,   38,   38,   38,   38,   38,   38,
       38,   38,   38,   38,   38,   38,   45,   45,   45,   45,
       45,   45,   45,   45,   45,   45,   45,   45,   45,   45,
       45,   45,   45,   45,   52,   52,   52,   52,   52,   52,
       52,   52,   52,   52,   52,   52,   52,   52,   52,   52,

       52,   52,   63,   63,   63,   63,   63,   63,   63,   63,
       63,   63,   63,   63,   63,   63,   63,   63,   63,   63,
       69,   69,   69,   69,   69,   69,   69,   69,   69,   69,
       69,   69,   69,   69,   69,   69,   69,   69,   77,   77,
      293,  292,  291,  283,   77,  283,   77,  282,   77,   77,
       77,  281,   77,   77,   77,   77,   84,   84,  280,   84,
       84,   84,   84,   84,   84,   84,   84,   84,   84,   84,
       84,   84,   84,   84,   85,   85,  279,   85,   85,   85,
       85,   85,   85,   85,   85,   85,   85,   85,   85,   85,
       85,   85,   91,   91,  278,  277,  276,   91,  245,   91,

       91,   91,   91,  243,   91,  241,   91,  239,   91,   91,
       92,   92,   92,   92,   92,   92,   92,   92,   92,   92,
       92,   92,   92,   92,   92,   92,   92,   92,   98,   98,
      265,   98,  264,   98,   98,   98,   98,   98,   98,  263,
       98,  262,   98,  261,   98,   98,  114,  114,  260,  114,
      114,  114,  114,  114,  114,  259,  114,  258,  114,  257,
      114,  256,  215,  114,  124,  124,  124,  124,  124,  124,
      124,  124,  124,  124,  124,  213,  124,  211,  124,  124,
      124,  124,  127,  127,  209,  127,  245,  127,  243,  127,
      128,  128,  241,  128,  128,  128,  239,  128,  128,  128,

      128,  128,  128,  236,  128,  226,  181,  128,  136,  136,
      136,  136,  136,  136,  136,  136,  136,  136,  136,  136,
      136,  136,  136,  136,  136,  136,  145,  181,  145,  215,
      213,  145,  146,  211,  146,  209,  146,  146,  169,  169,
      169,  169,  169,  169,  169,  169,  169,  169,  169,  169,
      169,  169,  169,  169,  169,  169,  175,  175,  175,  175,
      175,  175,  175,  175,  175,  175,  175,  175,  175,  175,
      175,  175,  175,  175,  178,  178,  178,  178,  178,  178,
      178,  178,  178,  178,  178,  178,  178,  178,  178,  178,
      178,  178,  182,  204,  203,  170,  196,  195,  194,  147,

      181,  182,  177,  182,  176,  182,  197,  197,  170,  197,
      197,  197,  197,  197,  197,  197,  197,  197,  197,  197,
      197,  197,  197,  197,  202,  202,  137,  202,  202,  202,
      202,  202,  202,  202,  202,  202,  202,  202,  202,  202,
      202,  202,  205,  205,  205,  205,  205,  205,  205,  205,
      205,  205,  205,  205,  205,  205,  205,  205,  205,  205,
      208,  208,  208,  208,  208,  208,  208,  208,  208,  208,
      208,  208,  208,  208,  208,  208,  208,  208,  210,  210,
      210,  210,  210,  210,  210,  210,  210,  210,  210,  210,
      210,  210,  210,  210,  210,  210,  212,  212,  212,  212,

      212,  212,  212,  212,  212,  212,  212,  212,  212,  212,
      212,  212,  212,  212,  214,  214,  214,  214,  214,  214,
      214,  214,  214,  214,  214,  214,  214,  214,  214,  214,
      214,  214,  198,  198,  168,  198,  198,  198,  198,  198,
      198,  198,  198,  198,  198,  198,  198,  198,  198,  198,
      238,  238,  238,  238,  238,  238,  238,  238,  238,  238,
      238,  238,  238,  238,  238,  238,  238,  238,  240,  240,
      240,  240,  240,  240,  240,  240,  240,  240,  240,  240,
      240,  240,  240,  240,  240,  240,  242,  242,  242,  242,
      242,  242,  242,  242,  242,  242,  242,  242,  242,  242,

      242,  242,  242,  242,  244,  244,  244,  244,  244,  244,
      244,  244,  244,  244,  244,  244,  244,  244,  244,  244,
      244,  244,  284,  284,  284,  284,  284,  284,  284,  284,
      284,  132,  284,  284,  284,  284,  284,  284,  284,  284,
      327,  327,  327,  327,  327,  327,  327,  327,  327,  327,
      327,  327,  327,  327,  327,  327,  327,  327,  126,  125,
      123,  164,  163,  119,  161,  160,  147,  144,   90,  140,
      134,  133,  132,  129,  126,  125,  123,  120,  119,  113,
       97,   90,   81,   80,   79,   78,  329,   42,   23,  329,
      329,  329,  329,  329,  329,  329,  329,  329,  329,  329,

      329,  329,  329,  329,  329,  329,  329,  329,  329,  329,
      329,  329,  329,  329,  329,  329,  329,  329,  329,  329,
      329,  329,  329,  329,  329,  329,  329,  329,  329,  329,
      329,  329,  329,  329
    } ;

static yyconst flex_int16_t yy_chk[1235] =
    {   0,
        0,    0,    3,  139,    3,    3,    3,  139,    3,   83,
        3,   83,    3,   83,    5,    6,    7,    5,    6,   83,
        3,    4,    7,    4,    4,    4,   42,    4,   13,    4,
        8,    4,    5,    6,    7,   15,    8,   42,   13,    4,
       10,   10,   13,   17,   18,   15,   13,   32,    8,   15,
       32,   10,   11,   15,   11,   11,   43,   17,   18,   11,
       49,   17,   18,   49,   21,  355,   11,   43,   13,   13,
       11,   21,   55,   55,   46,   15,   15,   46,   56,   46,
       61,   98,   21,   46,   98,   82,   75,   86,   88,   56,
       82,   61,   11,   12,  103,   12,   12,   75,   86,   88,

       12,   90,  103,   90,   21,   21,  106,   12,  104,   90,
       93,   12,  105,   93,   99,   93,  104,   99,  106,   93,
      107,  105,  108,  109,  110,  107,  112,  117,  111,  110,
      256,  256,  116,   12,   14,   14,  112,  109,  117,  121,
      123,  106,  108,  109,  111,   14,  116,  130,  123,   14,
      121,  132,  140,   14,  140,  143,  148,  149,  130,  132,
      140,  153,  149,  150,  148,  143,  156,  154,  116,  171,
      155,  153,  154,  148,  157,   14,   14,   16,   16,  155,
      150,  174,  159,  158,  156,  171,  170,  183,   16,  157,
      158,  174,   16,  159,  180,  184,   16,  170,  186,  188,

      190,  189,  327,  183,  180,  191,  193,  219,  190,  221,
      188,  221,  184,  191,  193,  219,  186,  189,   16,   16,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   22,   22,  167,  192,  195,
      201,  195,  195,   22,  199,  195,   22,  326,  167,  195,
      195,  196,  196,  207,   22,  199,  220,  192,  222,  196,
      223,  224,  252,  207,  220,  225,  321,  222,  319,  223,

      167,  167,  201,  252,  225,  236,   22,   22,   50,   50,
       50,  224,   50,  236,   50,   50,   50,   50,   50,   50,
       50,   50,   50,   50,   50,   50,   50,   50,   50,   50,
       50,   50,   50,   50,  185,  185,  185,  185,  185,  185,
      185,  185,  185,  185,  185,  185,  185,  197,  185,  185,
      185,  237,  267,  185,  185,  185,  318,  253,  197,  216,
      216,  216,  246,  246,  246,  248,  248,  248,  253,  285,
      249,  271,  271,  237,  250,  255,  185,  185,  185,  249,
      197,  197,  251,  250,  254,  268,  255,  269,  267,  254,
      251,  273,  270,  272,  272,  274,  274,  316,  269,  285,

      216,  270,  268,  273,  286,  286,  286,  286,  286,  286,
      286,  286,  286,  286,  286,  286,  286,  288,  286,  286,
      286,  287,  287,  286,  286,  286,  290,  317,  288,  300,
      300,  315,  316,  314,  313,  309,  290,  322,  297,  312,
      311,  324,  310,  323,  325,  308,  286,  286,  286,  289,
      289,  289,  289,  289,  289,  289,  289,  289,  289,  289,
      289,  289,  297,  289,  289,  289,  309,  320,  289,  289,
      289,  323,  322,  324,  307,  325,  306,  305,  304,  303,
      296,  295,  294,  293,  292,  291,  282,  320,  281,  280,
      279,  289,  289,  289,  330,  330,  330,  330,  330,  330,

      330,  330,  330,  330,  330,  330,  330,  330,  330,  330,
      330,  330,  331,  331,  331,  331,  331,  331,  331,  331,
      331,  331,  331,  331,  331,  331,  331,  331,  331,  331,
      332,  332,  332,  332,  332,  332,  332,  332,  332,  332,
      332,  332,  332,  332,  332,  332,  332,  332,  333,  333,
      333,  333,  333,  333,  333,  333,  333,  333,  333,  333,
      333,  333,  333,  333,  333,  333,  334,  334,  334,  334,
      334,  334,  334,  334,  334,  334,  334,  334,  334,  334,
      334,  334,  334,  334,  335,  335,  335,  335,  335,  335,
      335,  335,  335,  335,  335,  335,  335,  335,  335,  335,

      335,  335,  336,  336,  336,  336,  336,  336,  336,  336,
      336,  336,  336,  336,  336,  336,  336,  336,  336,  336,
      337,  337,  337,  337,  337,  337,  337,  337,  337,  337,
      337,  337,  337,  337,  337,  337,  337,  337,  338,  338,
      278,  277,  276,  265,  338,  264,  338,  263,  338,  338,
      338,  262,  338,  338,  338,  338,  339,  339,  261,  339,
      339,  339,  339,  339,  339,  339,  339,  339,  339,  339,
      339,  339,  339,  339,  340,  340,  260,  340,  340,  340,
      340,  340,  340,  340,  340,  340,  340,  340,  340,  340,
      340,  340,  341,  341,  259,  258,  257,  341,  244,  341,

      341,  341,  341,  242,  341,  240,  341,  238,  341,  341,
      342,  342,  342,  342,  342,  342,  342,  342,  342,  342,
      342,  342,  342,  342,  342,  342,  342,  342,  343,  343,
      235,  343,  234,  343,  343,  343,  343,  343,  343,  233,
      343,  232,  343,  231,  343,  343,  344,  344,  230,  344,
      344,  344,  344,  344,  344,  229,  344,  228,  344,  227,
      344,  226,  214,  344,  345,  345,  345,  345,  345,  345,
      345,  345,  345,  345,  345,  212,  345,  210,  345,  345,
      345,  345,  346,  346,  208,  346,  205,  346,  204,  346,
      347,  347,  203,  347,  347,  347,  202,  347,  347,  347,

      347,  347,  347,  200,  347,  194,  182,  347,  348,  348,
      348,  348,  348,  348,  348,  348,  348,  348,  348,  348,
      348,  348,  348,  348,  348,  348,  349,  181,  349,  178,
      177,  349,  350,  176,  350,  175,  350,  350,  351,  351,
      351,  351,  351,  351,  351,  351,  351,  351,  351,  351,
      351,  351,  351,  351,  351,  351,  352,  352,  352,  352,
      352,  352,  352,  352,  352,  352,  352,  352,  352,  352,
      352,  352,  352,  352,  353,  353,  353,  353,  353,  353,
      353,  353,  353,  353,  353,  353,  353,  353,  353,  353,
      353,  353,  354,  173,  172,  169,  164,  161,  160,  146,

      145,  354,  142,  354,  141,  354,  356,  356,  138,  356,
      356,  356,  356,  356,  356,  356,  356,  356,  356,  356,
      356,  356,  356,  356,  357,  357,  136,  357,  357,  357,
      357,  357,  357,  357,  357,  357,  357,  357,  357,  357,
      357,  357,  358,  358,  358,  358,  358,  358,  358,  358,
      358,  358,  358,  358,  358,  358,  358,  358,  358,  358,
      359,  359,  359,  359,  359,  359,  359,  359,  359,  359,
      359,  359,  359,  359,  359,  359,  359,  359,  360,  360,
      360,  360,  360,  360,  360,  360,  360,  360,  360,  360,
      360,  360,  360,  360,  360,  360,  361,  361,  361,  361,

      361,  361,  361,  361,  361,  361,  361,  361,  361,  361,
      361,  361,  361,  361,  362,  362,  362,  362,  362,  362,
      362,  362,  362,  362,  362,  362,  362,  362,  362,  362,
      362,  362,  363,  363,  133,  363,  363,  363,  363,  363,
      363,  363,  363,  363,  363,  363,  363,  363,  363,  363,
      364,  364,  364,  364,  364,  364,  364,  364,  364,  364,
      364,  364,  364,  364,  364,  364,  364,  364,  365,  365,
      365,  365,  365,  365,  365,  365,  365,  365,  365,  365,
      365,  365,  365,  365,  365,  365,  366,  366,  366,  366,
      366,  366,  366,  366,  366,  366,  366,  366,  366,  366,

      366,  366,  366,  366,  367,  367,  367,  367,  367,  367,
      367,  367,  367,  367,  367,  367,  367,  367,  367,  367,
      367,  367,  368,  368,  368,  368,  368,  368,  368,  368,
      368,  131,  368,  368,  368,  368,  368,  368,  368,  368,
      369,  369,  369,  369,  369,  369,  369,  369,  369,  369,
      369,  369,  369,  369,  369,  369,  369,  369,  126,  124,
      122,  120,  119,  118,  115,  113,  102,   97,   89,   87,
       81,   79,   76,   71,   67,   63,   62,   58,   57,   51,
       48,   44,   31,   29,   28,   27,   23,    9,  329,  329,
      329,  329,  329,  329,  329,  329,  329,  329,  329,  329,

      329,  329,  329,  329,  329,  329,  329,  329,  329,  329,
      329,  329,  329,  329,  329,  329,  329,  329,  329,  329,
      329,  329,  329,  329,  329,  329,  329,  329,  329,  329,
      329,  329,  329,  329
    } ;

extern int commentcnvYY_flex_debug;
int commentcnvYY_flex_debug = 0;

static yy_state_type *yy_state_buf=0, *yy_state_ptr=0;
static char *yy_full_match;
static int yy_lp;
static int yy_looking_for_trail_begin = 0;
static int yy_full_lp;
static int *yy_full_state;
#define YY_TRAILING_MASK 0x2000
#define YY_TRAILING_HEAD_MASK 0x4000
#define REJECT \
{ \
*yy_cp = (yy_hold_char); /* undo effects of setting up commentcnvYYtext */ \
yy_cp = (yy_full_match); /* restore poss. backed-over text */ \
(yy_lp) = (yy_full_lp); /* restore orig. accepting pos. */ \
(yy_state_ptr) = (yy_full_state); /* restore orig. state */ \
yy_current_state = *(yy_state_ptr); /* restore curr. state */ \
++(yy_lp); \
goto find_rule; \
}

#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *commentcnvYYtext;
#line 1 "commentcnv.l"
/*****************************************************************************
 *
 * $Id: commentcnv.l,v 1.80 2001/03/19 19:27:41 root Exp $
 *
 * Copyright (C) 1997-2012 by Dimitri van Heesch.
 *
 * Permission to use, copy, modify, and distribute this software and its
 * documentation under the terms of the GNU General Public License is hereby 
 * granted. No representations are made about the suitability of this software 
 * for any purpose. It is provided "as is" without express or implied warranty.
 * See the GNU General Public License for more details.
 *
 * Documents produced by Doxygen are derivative works derived from the
 * input used in their production; they are not affected by this license.
 *
 */
#line 19 "commentcnv.l"

#define YY_NEVER_INTERACTIVE 1
  
#include <stdio.h>
#include <stdlib.h>

#include <qstack.h>
#include <qregexp.h>
#include <qtextstream.h>
#include <qglobal.h>

#include "bufstr.h"
#include "debug.h"
#include "message.h"
#include "config.h"
#include "doxygen.h"
#include "util.h"

#include <assert.h>

#define ADDCHAR(c)    g_outBuf->addChar(c)
#define ADDARRAY(a,s) g_outBuf->addArray(a,s)
  
struct CondCtx
{
  CondCtx(int line,QCString id,bool b) 
    : lineNr(line),sectionId(id), skip(b) {}
  int lineNr;
  QCString sectionId;
  bool skip;
};
  
static BufStr * g_inBuf;
static BufStr * g_outBuf;
static int      g_inBufPos;
static int      g_col;
static int      g_blockHeadCol;
static bool     g_mlBrief;
static int      g_readLineCtx;
static bool     g_skip;
static QCString g_fileName;
static int      g_lineNr;
static int      g_condCtx;
static QStack<CondCtx> g_condStack;
static QCString g_blockName;
static int      g_lastCommentContext;
static bool     g_inSpecialComment;
static bool     g_inRoseComment;
static int      g_stringContext;
static int      g_charContext;
static int      g_javaBlock;
static bool     g_specialComment;

static QCString g_aliasString;
static int      g_blockCount;
static bool     g_lastEscaped;
static int      g_lastBlockContext;
static bool     g_pythonDocString;


static SrcLangExt g_lang;

static void replaceCommentMarker(const char *s,int len)
{
  const char *p=s;
  char c;
  // copy leading blanks
  while ((c=*p) && (c==' ' || c=='\t' || c=='\n')) 
  {
    ADDCHAR(c);
    g_lineNr += c=='\n';
    p++;
  }
  // replace start of comment marker by blanks and the last character by a *
  int blanks=0;
  while ((c=*p) && (c=='/' || c=='!' || c=='#')) 
  {
    blanks++;
    p++;
    if (*p=='<') // comment-after-item marker 
    { 
      blanks++;
      p++; 
    }
    if (c=='!') // end after first !
    {
      break;
    }
  }
  if (blanks>0)
  {
    while (blanks>2)
    {
      ADDCHAR(' ');
      blanks--;
    }
    if (blanks>1) ADDCHAR('*');
    ADDCHAR(' ');
  }
  // copy comment line to output
  ADDARRAY(p,len-(p-s));
}

static inline int computeIndent(const char *s)
{
  int col=0;
  static int tabSize=Config_getInt("TAB_SIZE");
  const char *p=s;
  char c;
  while ((c=*p++))
  {
    if (c==' ') col++;
    else if (c=='\t') col+=tabSize-(col%tabSize); 
    else break;
  }
  return col;
}

static inline void copyToOutput(const char *s,int len)
{
  int i;
  if (g_skip) // only add newlines.
  {
    for (i=0;i<len;i++) 
    {
      if (s[i]=='\n') 
      {
	ADDCHAR('\n');
	//fprintf(stderr,"---> skip %d\n",g_lineNr);
	g_lineNr++;
      }
    }
  }
  else if (len>0)
  {
    ADDARRAY(s,len);
    static int tabSize=Config_getInt("TAB_SIZE");
    for (i=0;i<len;i++) 
    {
      switch (s[i])
      {
	case '\n': g_col=0; 
	           //fprintf(stderr,"---> copy %d\n",g_lineNr);
		   g_lineNr++; break;
	case '\t': g_col+=tabSize-(g_col%tabSize); break;
	default:   g_col++; break;
      }
    }
  }
}

static void startCondSection(const char *sectId)
{
  g_condStack.push(new CondCtx(g_lineNr,sectId,g_skip));
  if (Config_getList("ENABLED_SECTIONS").find(sectId)!=-1)
  {
    //printf("*** Section is enabled!\n");
  }
  else
  {
    //printf("*** Section is disabled!\n");
    g_skip=TRUE;
  }
}

static void endCondSection()
{
  if (g_condStack.isEmpty())
  {
    warn(g_fileName,g_lineNr,"Found \\endcond command without matching \\cond");
    g_skip=FALSE;
  }
  else
  {
    CondCtx *ctx = g_condStack.pop();
    g_skip=ctx->skip;
  }
}

/** copies string \a s with length \a len to the output, while 
 *  replacing any alias commands found in the string.
 */
static void replaceAliases(const char *s)
{
  QCString result = resolveAliasCmd(s);
  //printf("replaceAliases(%s)->'%s'\n",s,result.data());
  copyToOutput(result,result.length());
}


#undef  YY_INPUT
#define YY_INPUT(buf,result,max_size) result=yyread(buf,max_size);

static int yyread(char *buf,int max_size)
{
  int bytesInBuf = g_inBuf->curPos()-g_inBufPos;
  int bytesToCopy = QMIN(max_size,bytesInBuf);
  memcpy(buf,g_inBuf->data()+g_inBufPos,bytesToCopy);
  g_inBufPos+=bytesToCopy;
  return bytesToCopy;
}

void replaceComment(int offset);











#line 1138 "<stdout>"

#define INITIAL 0
#define Scan 1
#define SkipString 2
#define SkipChar 3
#define SComment 4
#define CComment 5
#define Verbatim 6
#define VerbatimCode 7
#define ReadLine 8
#define CondLine 9
#define ReadAliasArgs 10

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

static int yy_init_globals (void );

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int commentcnvYYlex_destroy (void );

int commentcnvYYget_debug (void );

void commentcnvYYset_debug (int debug_flag  );

YY_EXTRA_TYPE commentcnvYYget_extra (void );

void commentcnvYYset_extra (YY_EXTRA_TYPE user_defined  );

FILE *commentcnvYYget_in (void );

void commentcnvYYset_in  (FILE * in_str  );

FILE *commentcnvYYget_out (void );

void commentcnvYYset_out  (FILE * out_str  );

yy_size_t commentcnvYYget_leng (void );

char *commentcnvYYget_text (void );

int commentcnvYYget_lineno (void );

void commentcnvYYset_lineno (int line_number  );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int commentcnvYYwrap (void );
#else
extern int commentcnvYYwrap (void );
#endif
#endif

    static void yyunput (int c,char *buf_ptr  );
    
#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT

#ifdef __cplusplus
static int yyinput (void );
#else
static int input (void );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 262144
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO fwrite( commentcnvYYtext, commentcnvYYleng, 1, commentcnvYYout )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		yy_size_t n; \
		for ( n = 0; n < max_size && \
			     (c = getc( commentcnvYYin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( commentcnvYYin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = fread(buf, 1, max_size, commentcnvYYin))==0 && ferror(commentcnvYYin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(commentcnvYYin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int commentcnvYYlex (void);

#define YY_DECL int commentcnvYYlex (void)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after commentcnvYYtext and commentcnvYYleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	if ( commentcnvYYleng > 0 ) \
		YY_CURRENT_BUFFER_LVALUE->yy_at_bol = \
				(commentcnvYYtext[commentcnvYYleng - 1] == '\n'); \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    
#line 238 "commentcnv.l"


#line 1336 "<stdout>"

	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

        /* Create the reject buffer large enough to save one state per allowed character. */
        if ( ! (yy_state_buf) )
            (yy_state_buf) = (yy_state_type *)commentcnvYYalloc(YY_STATE_BUF_SIZE  );
            if ( ! (yy_state_buf) )
                YY_FATAL_ERROR( "out of dynamic memory in commentcnvYYlex()" );

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! commentcnvYYin )
			commentcnvYYin = stdin;

		if ( ! commentcnvYYout )
			commentcnvYYout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			commentcnvYYensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				commentcnvYY_create_buffer(commentcnvYYin,YY_BUF_SIZE );
		}

		commentcnvYY_load_buffer_state( );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of commentcnvYYtext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
		yy_current_state += YY_AT_BOL();

		(yy_state_ptr) = (yy_state_buf);
		*(yy_state_ptr)++ = yy_current_state;

yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 330 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			*(yy_state_ptr)++ = yy_current_state;
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 1189 );

yy_find_action:
		yy_current_state = *--(yy_state_ptr);
		(yy_lp) = yy_accept[yy_current_state];
goto find_rule; /* Shut up GCC warning -Wall */
find_rule: /* we branch to this label when backing up */
		for ( ; ; ) /* until we find what rule we matched */
			{
			if ( (yy_lp) && (yy_lp) < yy_accept[yy_current_state + 1] )
				{
				yy_act = yy_acclist[(yy_lp)];
				if ( yy_act & YY_TRAILING_HEAD_MASK ||
				     (yy_looking_for_trail_begin) )
					{
					if ( yy_act == (yy_looking_for_trail_begin) )
						{
						(yy_looking_for_trail_begin) = 0;
						yy_act &= ~YY_TRAILING_HEAD_MASK;
						break;
						}
					}
				else if ( yy_act & YY_TRAILING_MASK )
					{
					(yy_looking_for_trail_begin) = yy_act & ~YY_TRAILING_MASK;
					(yy_looking_for_trail_begin) |= YY_TRAILING_HEAD_MASK;
					(yy_full_match) = yy_cp;
					(yy_full_state) = (yy_state_ptr);
					(yy_full_lp) = (yy_lp);
					}
				else
					{
					(yy_full_match) = yy_cp;
					(yy_full_state) = (yy_state_ptr);
					(yy_full_lp) = (yy_lp);
					break;
					}
				++(yy_lp);
				goto find_rule;
				}
			--yy_cp;
			yy_current_state = *--(yy_state_ptr);
			(yy_lp) = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
case 1:
YY_RULE_SETUP
#line 240 "commentcnv.l"
{ /* eat anything that is not " / or \n */ 
                                     copyToOutput(commentcnvYYtext,(int)commentcnvYYleng); 
				   }
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 243 "commentcnv.l"
{ /* start of python long comment */
                                     if (g_lang!=SrcLangExt_Python)
				     {
				       REJECT;
				     }
				     else
				     {
                                       g_pythonDocString = TRUE;
                                       copyToOutput(commentcnvYYtext,(int)commentcnvYYleng); 
				       BEGIN(CComment);
				     }
                                   }
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 255 "commentcnv.l"
{
  			             if (g_lang!=SrcLangExt_Fortran)
				     {
				       REJECT;
				     }
				     else
				     {
                                       copyToOutput(commentcnvYYtext,(int)commentcnvYYleng); 
				       BEGIN(CComment);
				     }
                                   }
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 266 "commentcnv.l"
{ /* start of a string */ 
                                     copyToOutput(commentcnvYYtext,(int)commentcnvYYleng); 
				     g_stringContext = YY_START;
				     BEGIN(SkipString); 
                                   }
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 271 "commentcnv.l"
{
                                     copyToOutput(commentcnvYYtext,(int)commentcnvYYleng); 
				     g_charContext = YY_START;
				     BEGIN(SkipChar);
  				   }
	YY_BREAK
case 6:
/* rule 6 can match eol */
YY_RULE_SETUP
#line 276 "commentcnv.l"
{ /* new line */ 
                                     copyToOutput(commentcnvYYtext,(int)commentcnvYYleng); 
                                   }
	YY_BREAK
case 7:
/* rule 7 can match eol */
YY_RULE_SETUP
#line 279 "commentcnv.l"
{ /* start C++ style special comment block */
  				     if (g_mlBrief) 
				     {
				       REJECT; // bail out if we do not need to convert
				     }
				     else
				     {
				       int i=3;
				       if (commentcnvYYtext[2]=='/')
				       {
					 while (i<(int)commentcnvYYleng && commentcnvYYtext[i]=='/') i++;
				       }
				       g_blockHeadCol=g_col;
				       copyToOutput("/**",3); 
				       replaceAliases(commentcnvYYtext+i);
				       g_inSpecialComment=TRUE;
				       BEGIN(SComment); 
				     }
                                   }
	YY_BREAK
case 8:
/* rule 8 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up commentcnvYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up commentcnvYYtext again */
YY_RULE_SETUP
#line 298 "commentcnv.l"
{ /* Start of Rational Rose ANSI C++ comment block */
                                     if (g_mlBrief) REJECT;
                                     int i=17; //=strlen("//##Documentation");
				     g_blockHeadCol=g_col;
				     copyToOutput("/**",3);
				     replaceAliases(commentcnvYYtext+i);
				     g_inRoseComment=TRUE;
				     BEGIN(SComment);
  				   }
	YY_BREAK
case 9:
/* rule 9 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up commentcnvYYtext */
(yy_c_buf_p) = yy_cp = yy_bp + 2;
YY_DO_BEFORE_ACTION; /* set up commentcnvYYtext again */
YY_RULE_SETUP
#line 307 "commentcnv.l"
{ /* one line C++ comment */ 
  				     copyToOutput(commentcnvYYtext,(int)commentcnvYYleng); 
				     g_readLineCtx=YY_START;
				     BEGIN(ReadLine);
				   }
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 312 "commentcnv.l"
{ /* start of a C comment */
  			             g_specialComment=(int)commentcnvYYleng==3;
                                     copyToOutput(commentcnvYYtext,(int)commentcnvYYleng); 
				     BEGIN(CComment); 
                                   }
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 317 "commentcnv.l"
{
                                     if (g_lang!=SrcLangExt_Python)
				     {
				       REJECT;
				     }
				     else
				     {
                                       copyToOutput(commentcnvYYtext,(int)commentcnvYYleng); 
				       BEGIN(CComment);
				     }
  				   }
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 328 "commentcnv.l"
{
                                     if (g_lang!=SrcLangExt_VHDL)
				     {
				       REJECT;
				     }
				     else
				     {
                                       copyToOutput(commentcnvYYtext,(int)commentcnvYYleng); 
				       BEGIN(CComment);
				     }
  				   }
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 339 "commentcnv.l"
{
                                     if (g_lang!=SrcLangExt_Fortran)
				     {
				       REJECT;
				     }
				     else
				     {
                                       copyToOutput(commentcnvYYtext,(int)commentcnvYYleng); 
				       BEGIN(CComment);
				     }
  				   }
	YY_BREAK
case 14:
/* rule 14 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up commentcnvYYtext */
(yy_c_buf_p) = yy_cp = yy_bp + 6;
YY_DO_BEFORE_ACTION; /* set up commentcnvYYtext again */
YY_RULE_SETUP
#line 350 "commentcnv.l"
{
                                     copyToOutput("@code",5); 
				     g_lastCommentContext = YY_START;
				     g_javaBlock=1;
				     g_blockName=&commentcnvYYtext[1];
                                     BEGIN(VerbatimCode);
  				   }
	YY_BREAK
case 15:
/* rule 15 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up commentcnvYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up commentcnvYYtext again */
YY_RULE_SETUP
#line 357 "commentcnv.l"
{ /* start of a verbatim block */
                                     copyToOutput(commentcnvYYtext,(int)commentcnvYYleng); 
				     g_lastCommentContext = YY_START;
				     g_javaBlock=0;
				     g_blockName=&commentcnvYYtext[1];
                                     BEGIN(VerbatimCode);
  				   }
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 364 "commentcnv.l"
{
                                     copyToOutput(commentcnvYYtext,(int)commentcnvYYleng); 
				     g_blockName=&commentcnvYYtext[1];
				     if (g_blockName.at(1)=='[')
				     {
				       g_blockName.at(1)=']';
				     }
				     else if (g_blockName.at(1)=='{')
				     {
				       g_blockName.at(1)='}';
				     }
				     g_lastCommentContext = YY_START;
				     BEGIN(Verbatim);
  			           }
	YY_BREAK
case 17:
/* rule 17 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up commentcnvYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up commentcnvYYtext again */
YY_RULE_SETUP
#line 378 "commentcnv.l"
{ /* start of a verbatim block */
                                     copyToOutput(commentcnvYYtext,(int)commentcnvYYleng); 
				     g_blockName=&commentcnvYYtext[1];
				     g_lastCommentContext = YY_START;
                                     BEGIN(Verbatim);
                                   }
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 384 "commentcnv.l"
{ /* any other character */
                                     copyToOutput(commentcnvYYtext,(int)commentcnvYYleng); 
                                   }
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 387 "commentcnv.l"
{ /* end of verbatim block */
                                     copyToOutput(commentcnvYYtext,(int)commentcnvYYleng);
				     if (commentcnvYYtext[1]=='f') // end of formula
				     {
				       BEGIN(g_lastCommentContext);
				     }
				     else if (&commentcnvYYtext[4]==g_blockName)
				     {
				       BEGIN(g_lastCommentContext);
				     }
                                   }
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 398 "commentcnv.l"
{
                                     if (g_javaBlock==0)
				     {
				       REJECT;
				     }
				     else
				     {
				       g_javaBlock++;
                                       copyToOutput(commentcnvYYtext,(int)commentcnvYYleng);
				     }
                                   }
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 409 "commentcnv.l"
{
                                     if (g_javaBlock==0)
				     {
				       REJECT;
				     }
				     else
				     {
				       g_javaBlock--;
				       if (g_javaBlock==0)
				       {
                                         copyToOutput(" @endcode ",10);
				         BEGIN(g_lastCommentContext);
				       }
				       else
				       {
                                         copyToOutput(commentcnvYYtext,(int)commentcnvYYleng);
				       }
				     }
  				   }
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 428 "commentcnv.l"
{ /* end of verbatim block */
                                     copyToOutput(commentcnvYYtext,(int)commentcnvYYleng);
				     if (&commentcnvYYtext[4]==g_blockName)
				     {
				       BEGIN(g_lastCommentContext);
				     }
                                   }
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 435 "commentcnv.l"
{ /* skip leading comments */
  				     if (!g_inSpecialComment)
				     {
                                       copyToOutput(commentcnvYYtext,(int)commentcnvYYleng); 
				     }
  				   }
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 441 "commentcnv.l"
{ /* any character not a backslash or new line or } */
                                     copyToOutput(commentcnvYYtext,(int)commentcnvYYleng); 
                                   }
	YY_BREAK
case 25:
/* rule 25 can match eol */
YY_RULE_SETUP
#line 444 "commentcnv.l"
{ /* new line in verbatim block */
                                     copyToOutput(commentcnvYYtext,(int)commentcnvYYleng); 
                                   }
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 447 "commentcnv.l"
{
  				     if (g_blockName=="dot" || g_blockName=="msc" || g_blockName.at(0)=='f')
				     {
				       // see bug 487871, strip /// from dot images and formulas.
				       copyToOutput("   ",3);
				     }
				     else // even slashes are verbatim (e.g. \verbatim, \code)
				     {
				       REJECT;
				     }
  				   }
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 458 "commentcnv.l"
{ /* any other character */
                                     copyToOutput(commentcnvYYtext,(int)commentcnvYYleng); 
                                   }
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 461 "commentcnv.l"
{ /* escaped character in string */
                                     copyToOutput(commentcnvYYtext,(int)commentcnvYYleng); 
                                   }
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 464 "commentcnv.l"
{ /* end of string */ 
                                     copyToOutput(commentcnvYYtext,(int)commentcnvYYleng); 
				     BEGIN(g_stringContext); 
                                   }
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 468 "commentcnv.l"
{ /* any other string character */ 
                                     copyToOutput(commentcnvYYtext,(int)commentcnvYYleng); 
                                   }
	YY_BREAK
case 31:
/* rule 31 can match eol */
YY_RULE_SETUP
#line 471 "commentcnv.l"
{ /* new line inside string (illegal for some compilers) */ 
                                     copyToOutput(commentcnvYYtext,(int)commentcnvYYleng); 
                                   }
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 474 "commentcnv.l"
{ /* escaped character */
                                     copyToOutput(commentcnvYYtext,(int)commentcnvYYleng); 
                                   }
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 477 "commentcnv.l"
{ /* end of character literal */ 
                                     copyToOutput(commentcnvYYtext,(int)commentcnvYYleng); 
                                     BEGIN(g_charContext);
                                   }
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 481 "commentcnv.l"
{ /* any other string character */ 
                                     copyToOutput(commentcnvYYtext,(int)commentcnvYYleng); 
                                   }
	YY_BREAK
case 35:
/* rule 35 can match eol */
YY_RULE_SETUP
#line 484 "commentcnv.l"
{ /* new line character */
                                     copyToOutput(commentcnvYYtext,(int)commentcnvYYleng); 
                                   }
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 488 "commentcnv.l"
{ /* anything that is not a '*' or command */ 
                                     copyToOutput(commentcnvYYtext,(int)commentcnvYYleng); 
                                   }
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 491 "commentcnv.l"
{ /* stars without slashes */
                                     copyToOutput(commentcnvYYtext,(int)commentcnvYYleng); 
                                   }
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 494 "commentcnv.l"
{ /* end of Python docstring */
                                     if (g_lang!=SrcLangExt_Python)
				     {
				       REJECT;
				     }
				     else
				     {
                                       g_pythonDocString = FALSE;
				       copyToOutput(commentcnvYYtext,(int)commentcnvYYleng);
				       BEGIN(Scan);
				     }
  				   }
	YY_BREAK
case 39:
/* rule 39 can match eol */
YY_RULE_SETUP
#line 506 "commentcnv.l"
{ /* new line in comment */
                                     copyToOutput(commentcnvYYtext,(int)commentcnvYYleng); 
                                   }
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 509 "commentcnv.l"
{ /* end of C comment */
                                     if (g_lang==SrcLangExt_Python)
				     {
				       REJECT;
				     }
				     else
				     {
				       copyToOutput(commentcnvYYtext,(int)commentcnvYYleng);
				       BEGIN(Scan);
				     }
                                   }
	YY_BREAK
case 41:
/* rule 41 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up commentcnvYYtext */
(yy_c_buf_p) = yy_cp = yy_bp + 1;
YY_DO_BEFORE_ACTION; /* set up commentcnvYYtext again */
YY_RULE_SETUP
#line 520 "commentcnv.l"
{ /* end of Python comment */
                                     if (g_lang!=SrcLangExt_Python || g_pythonDocString)
				     {
				       REJECT;
				     }
				     else
				     {
				       copyToOutput(commentcnvYYtext,(int)commentcnvYYleng);
				       BEGIN(Scan);
				     }
  				   }
	YY_BREAK
case 42:
/* rule 42 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up commentcnvYYtext */
(yy_c_buf_p) = yy_cp = yy_bp + 1;
YY_DO_BEFORE_ACTION; /* set up commentcnvYYtext again */
YY_RULE_SETUP
#line 531 "commentcnv.l"
{ /* end of VHDL comment */
                                     if (g_lang!=SrcLangExt_VHDL)
				     {
				       REJECT;
				     }
				     else
				     {
				       copyToOutput(commentcnvYYtext,(int)commentcnvYYleng);
				       BEGIN(Scan);
				     }
  				   }
	YY_BREAK
case 43:
/* rule 43 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up commentcnvYYtext */
(yy_c_buf_p) = yy_cp = yy_bp + 1;
YY_DO_BEFORE_ACTION; /* set up commentcnvYYtext again */
YY_RULE_SETUP
#line 542 "commentcnv.l"
{ /* end of Fortran comment */
  				     if (g_lang!=SrcLangExt_Fortran)
				     {
				       REJECT;
				     }
				     else
				     {
				       copyToOutput(commentcnvYYtext,(int)commentcnvYYleng);
				       BEGIN(Scan);
				     }
  				   }
	YY_BREAK
/* removed for bug 674842 (bug was introduced in rev 768)
<CComment>"'"			   {
  			             g_charContext = YY_START;
				     copyToOutput(commentcnvYYtext,(int)commentcnvYYleng);
				     BEGIN(SkipChar);
  				   }
<CComment>"\""			   {
  			             g_stringContext = YY_START;
				     copyToOutput(commentcnvYYtext,(int)commentcnvYYleng);
				     BEGIN(SkipString);
  				   }
   */
case 44:
YY_RULE_SETUP
#line 565 "commentcnv.l"
{
                                     copyToOutput(commentcnvYYtext,(int)commentcnvYYleng); 
  				   }
	YY_BREAK
case 45:
/* rule 45 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up commentcnvYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up commentcnvYYtext again */
YY_RULE_SETUP
#line 568 "commentcnv.l"
{
  				     replaceComment(0);
  				   }
	YY_BREAK
case 46:
/* rule 46 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up commentcnvYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up commentcnvYYtext again */
YY_RULE_SETUP
#line 571 "commentcnv.l"
{
                                     replaceComment(1); 
                                   }
	YY_BREAK
case 47:
/* rule 47 can match eol */
YY_RULE_SETUP
#line 574 "commentcnv.l"
{ 
  				     replaceComment(0);
				     g_readLineCtx=YY_START;
				     BEGIN(ReadLine);
  				   }
	YY_BREAK
case 48:
/* rule 48 can match eol */
YY_RULE_SETUP
#line 579 "commentcnv.l"
{ 
                                     replaceComment(1); 
				     g_readLineCtx=YY_START;
				     BEGIN(ReadLine);
  				   }
	YY_BREAK
case 49:
#line 585 "commentcnv.l"
case 50:
/* rule 50 can match eol */
#line 586 "commentcnv.l"
case 51:
/* rule 51 can match eol */
YY_RULE_SETUP
#line 586 "commentcnv.l"
{    // or   //!something
  				     replaceComment(0);
				     g_readLineCtx=YY_START;
				     BEGIN(ReadLine);
                                   }
	YY_BREAK
case 52:
/* rule 52 can match eol */
#line 592 "commentcnv.l"
case 53:
/* rule 53 can match eol */
#line 593 "commentcnv.l"
case 54:
/* rule 54 can match eol */
YY_RULE_SETUP
#line 593 "commentcnv.l"
{ 
                                     replaceComment(1); 
				     g_readLineCtx=YY_START;
				     BEGIN(ReadLine);
                                   }
	YY_BREAK
case 55:
/* rule 55 can match eol */
YY_RULE_SETUP
#line 598 "commentcnv.l"
{
                                     if (!g_inRoseComment)
				     {
				       REJECT;
				     }
				     else
				     {
  				       replaceComment(0);
				       g_readLineCtx=YY_START;
				       BEGIN(ReadLine);
				     }
                                   }
	YY_BREAK
case 56:
/* rule 56 can match eol */
YY_RULE_SETUP
#line 610 "commentcnv.l"
{
                                     if (!g_inRoseComment)
				     {
				       REJECT;
				     }
				     else
				     {
                                       replaceComment(1); 
				       g_readLineCtx=YY_START;
				       BEGIN(ReadLine);
				     }
                                   }
	YY_BREAK
case 57:
/* rule 57 can match eol */
YY_RULE_SETUP
#line 622 "commentcnv.l"
{ /* end of special comment */
                                     copyToOutput(" */",3); 
				     copyToOutput(commentcnvYYtext,(int)commentcnvYYleng); 
				     g_inSpecialComment=FALSE;
				     g_inRoseComment=FALSE;
				     BEGIN(Scan); 
                                   }
	YY_BREAK
case 58:
/* rule 58 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up commentcnvYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up commentcnvYYtext again */
YY_RULE_SETUP
#line 629 "commentcnv.l"
{
  				     copyToOutput(commentcnvYYtext,(int)commentcnvYYleng);
                                     BEGIN(g_readLineCtx);
  				   }
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 633 "commentcnv.l"
{ // escaped command
				     copyToOutput(commentcnvYYtext,(int)commentcnvYYleng);
  				   }
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 636 "commentcnv.l"
{ // conditional section
  				     g_condCtx = YY_START; 
  				     BEGIN(CondLine);
  				   }
	YY_BREAK
case 61:
/* rule 61 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up commentcnvYYtext */
(yy_c_buf_p) = yy_cp = yy_bp + 8;
YY_DO_BEFORE_ACTION; /* set up commentcnvYYtext again */
YY_RULE_SETUP
#line 640 "commentcnv.l"
{ // end of conditional section
  				     bool oldSkip=g_skip;
  				     endCondSection();
				     if (YY_START==CComment && oldSkip && !g_skip) 
    			             {
				       //printf("** Adding start of comment!\n");
				       if (g_lang!=SrcLangExt_Python &&
					   g_lang!=SrcLangExt_VHDL &&
					   g_lang!=SrcLangExt_Fortran)
				       {
 				         ADDCHAR('/');
     				         ADDCHAR('*');
					 if (g_specialComment)
					 {
					   ADDCHAR('*');
					 }
				       }
    				     }
				    }
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 659 "commentcnv.l"
{
  				     bool oldSkip=g_skip;
                                     startCondSection(commentcnvYYtext);
				     if (g_condCtx==CComment && !oldSkip && g_skip) 
    			             {
				       //printf("** Adding terminator for comment!\n");
				       if (g_lang!=SrcLangExt_Python &&
					   g_lang!=SrcLangExt_VHDL &&
					   g_lang!=SrcLangExt_Fortran)
				       {
 				         ADDCHAR('*');
     				         ADDCHAR('/');
				       }
    				     }
  				     BEGIN(g_condCtx);
  				   }
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 675 "commentcnv.l"

	YY_BREAK
case 64:
/* rule 64 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up commentcnvYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up commentcnvYYtext again */
#line 677 "commentcnv.l"
case 65:
/* rule 65 can match eol */
YY_RULE_SETUP
#line 677 "commentcnv.l"
{ // forgot section id?
  				     if (YY_START!=CondLine) g_condCtx=YY_START;
  				     bool oldSkip=g_skip;
  				     startCondSection(" "); // fake section id causing the section to be hidden unconditionally
				     if (g_condCtx==CComment && !oldSkip && g_skip) 
    			             {
				       //printf("** Adding terminator for comment!\n");
				       if (g_lang!=SrcLangExt_Python &&
					   g_lang!=SrcLangExt_VHDL)
				       {
 				         ADDCHAR('*');
     				         ADDCHAR('/');
				       }
    				     }
				     if (*commentcnvYYtext=='\n') g_lineNr++;
				     BEGIN(g_condCtx);
  				   }
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 694 "commentcnv.l"
{ // expand alias without arguments
				     replaceAliases(commentcnvYYtext);
  				   }
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 697 "commentcnv.l"
{ // expand alias with arguments
                                     g_lastBlockContext=YY_START;
				     g_blockCount=1;
				     g_aliasString=commentcnvYYtext;
				     g_lastEscaped=0;
				     BEGIN( ReadAliasArgs );
  				   }
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 704 "commentcnv.l"
{ // skip leading special comments (see bug 618079)
  				   }
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 706 "commentcnv.l"
{ // oops, end of comment in the middle of an alias?
                                     if (g_lang==SrcLangExt_Python)
				     {
				       REJECT;
				     }
				     else // abort the alias, restart scanning
				     {
				       copyToOutput(g_aliasString,g_aliasString.length());
				       copyToOutput(commentcnvYYtext,(int)commentcnvYYleng);
				       BEGIN(Scan);
				     }
  				   }
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 718 "commentcnv.l"
{
                                     g_aliasString+=commentcnvYYtext;
				     g_lastEscaped=FALSE;
  				   }
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 722 "commentcnv.l"
{
                                     if (g_lastEscaped)  g_lastEscaped=FALSE;
                                     else                g_lastEscaped=TRUE;
                                     g_aliasString+=commentcnvYYtext;
                                   }
	YY_BREAK
case 72:
/* rule 72 can match eol */
YY_RULE_SETUP
#line 727 "commentcnv.l"
{
                                     g_aliasString+=commentcnvYYtext;
                                     g_lineNr++;
				     g_lastEscaped=FALSE;
  				   }
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 732 "commentcnv.l"
{
                                     g_aliasString+=commentcnvYYtext;
                                     if (!g_lastEscaped) g_blockCount++;
				     g_lastEscaped=FALSE;
                                   }
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 737 "commentcnv.l"
{
                                     g_aliasString+=commentcnvYYtext;
				     if (!g_lastEscaped) g_blockCount--;
				     if (g_blockCount==0)
				     {
				       replaceAliases(g_aliasString);
				       BEGIN( g_lastBlockContext );
				     }
				     g_lastEscaped=FALSE;
  			           }
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 747 "commentcnv.l"
{
                                     g_aliasString+=commentcnvYYtext;
				     g_lastEscaped=FALSE;
  				   }
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 751 "commentcnv.l"
{
  				     copyToOutput(commentcnvYYtext,(int)commentcnvYYleng);
  				   }
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 755 "commentcnv.l"
ECHO;
	YY_BREAK
#line 2330 "<stdout>"
			case YY_STATE_EOF(INITIAL):
			case YY_STATE_EOF(Scan):
			case YY_STATE_EOF(SkipString):
			case YY_STATE_EOF(SkipChar):
			case YY_STATE_EOF(SComment):
			case YY_STATE_EOF(CComment):
			case YY_STATE_EOF(Verbatim):
			case YY_STATE_EOF(VerbatimCode):
			case YY_STATE_EOF(ReadLine):
			case YY_STATE_EOF(CondLine):
			case YY_STATE_EOF(ReadAliasArgs):
				yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed commentcnvYYin at a new source and called
			 * commentcnvYYlex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = commentcnvYYin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( commentcnvYYwrap( ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * commentcnvYYtext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of commentcnvYYlex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (void)
{
    	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = (yytext_ptr);
	register int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			yy_size_t num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			YY_FATAL_ERROR(
"input buffer overflow, can't enlarge buffer because scanner uses REJECT" );

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			commentcnvYYrestart(commentcnvYYin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yy_size_t) ((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) commentcnvYYrealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (void)
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    
	yy_current_state = (yy_start);
	yy_current_state += YY_AT_BOL();

	(yy_state_ptr) = (yy_state_buf);
	*(yy_state_ptr)++ = yy_current_state;

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 330 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		*(yy_state_ptr)++ = yy_current_state;
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state )
{
	register int yy_is_jam;
    
	register YY_CHAR yy_c = 1;
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 330 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 329);
	if ( ! yy_is_jam )
		*(yy_state_ptr)++ = yy_current_state;

	return yy_is_jam ? 0 : yy_current_state;
}

    static void yyunput (int c, register char * yy_bp )
{
	register char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up commentcnvYYtext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register yy_size_t number_to_move = (yy_n_chars) + 2;
		register char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		register char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (void)
#else
    static int input  (void)
#endif

{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			yy_size_t offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					commentcnvYYrestart(commentcnvYYin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( commentcnvYYwrap( ) )
						return 0;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve commentcnvYYtext */
	(yy_hold_char) = *++(yy_c_buf_p);

	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = (c == '\n');

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void commentcnvYYrestart  (FILE * input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        commentcnvYYensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            commentcnvYY_create_buffer(commentcnvYYin,YY_BUF_SIZE );
	}

	commentcnvYY_init_buffer(YY_CURRENT_BUFFER,input_file );
	commentcnvYY_load_buffer_state( );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void commentcnvYY_switch_to_buffer  (YY_BUFFER_STATE  new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		commentcnvYYpop_buffer_state();
	 *		commentcnvYYpush_buffer_state(new_buffer);
     */
	commentcnvYYensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	commentcnvYY_load_buffer_state( );

	/* We don't actually know whether we did this switch during
	 * EOF (commentcnvYYwrap()) processing, but the only time this flag
	 * is looked at is after commentcnvYYwrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

static void commentcnvYY_load_buffer_state  (void)
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	commentcnvYYin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE commentcnvYY_create_buffer  (FILE * file, int  size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) commentcnvYYalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in commentcnvYY_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) commentcnvYYalloc(b->yy_buf_size + 2  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in commentcnvYY_create_buffer()" );

	b->yy_is_our_buffer = 1;

	commentcnvYY_init_buffer(b,file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with commentcnvYY_create_buffer()
 * 
 */
    void commentcnvYY_delete_buffer (YY_BUFFER_STATE  b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		commentcnvYYfree((void *) b->yy_ch_buf  );

	commentcnvYYfree((void *) b  );
}

#ifndef __cplusplus
extern int isatty (int );
#endif /* __cplusplus */
    
/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a commentcnvYYrestart() or at EOF.
 */
    static void commentcnvYY_init_buffer  (YY_BUFFER_STATE  b, FILE * file )

{
	int oerrno = errno;
    
	commentcnvYY_flush_buffer(b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then commentcnvYY_init_buffer was _probably_
     * called from commentcnvYYrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void commentcnvYY_flush_buffer (YY_BUFFER_STATE  b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		commentcnvYY_load_buffer_state( );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void commentcnvYYpush_buffer_state (YY_BUFFER_STATE new_buffer )
{
    	if (new_buffer == NULL)
		return;

	commentcnvYYensure_buffer_stack();

	/* This block is copied from commentcnvYY_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from commentcnvYY_switch_to_buffer. */
	commentcnvYY_load_buffer_state( );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void commentcnvYYpop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	commentcnvYY_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		commentcnvYY_load_buffer_state( );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void commentcnvYYensure_buffer_stack (void)
{
	yy_size_t num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		(yy_buffer_stack) = (struct yy_buffer_state**)commentcnvYYalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in commentcnvYYensure_buffer_stack()" );
								  
		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)commentcnvYYrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in commentcnvYYensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * 
 * @return the newly allocated buffer state object. 
 */
YY_BUFFER_STATE commentcnvYY_scan_buffer  (char * base, yy_size_t  size )
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) commentcnvYYalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in commentcnvYY_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	commentcnvYY_switch_to_buffer(b  );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to commentcnvYYlex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * 
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       commentcnvYY_scan_bytes() instead.
 */
YY_BUFFER_STATE commentcnvYY_scan_string (yyconst char * yystr )
{
    
	return commentcnvYY_scan_bytes(yystr,strlen(yystr) );
}

/** Setup the input buffer state to scan the given bytes. The next call to commentcnvYYlex() will
 * scan from a @e copy of @a bytes.
 * @param bytes the byte buffer to scan
 * @param len the number of bytes in the buffer pointed to by @a bytes.
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE commentcnvYY_scan_bytes  (yyconst char * yybytes, yy_size_t  _yybytes_len )
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n, i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = _yybytes_len + 2;
	buf = (char *) commentcnvYYalloc(n  );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in commentcnvYY_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = commentcnvYY_scan_buffer(buf,n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in commentcnvYY_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yy_fatal_error (yyconst char* msg )
{
    	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up commentcnvYYtext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		commentcnvYYtext[commentcnvYYleng] = (yy_hold_char); \
		(yy_c_buf_p) = commentcnvYYtext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		commentcnvYYleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the current line number.
 * 
 */
int commentcnvYYget_lineno  (void)
{
        
    return commentcnvYYlineno;
}

/** Get the input stream.
 * 
 */
FILE *commentcnvYYget_in  (void)
{
        return commentcnvYYin;
}

/** Get the output stream.
 * 
 */
FILE *commentcnvYYget_out  (void)
{
        return commentcnvYYout;
}

/** Get the length of the current token.
 * 
 */
yy_size_t commentcnvYYget_leng  (void)
{
        return commentcnvYYleng;
}

/** Get the current token.
 * 
 */

char *commentcnvYYget_text  (void)
{
        return commentcnvYYtext;
}

/** Set the current line number.
 * @param line_number
 * 
 */
void commentcnvYYset_lineno (int  line_number )
{
    
    commentcnvYYlineno = line_number;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param in_str A readable stream.
 * 
 * @see commentcnvYY_switch_to_buffer
 */
void commentcnvYYset_in (FILE *  in_str )
{
        commentcnvYYin = in_str ;
}

void commentcnvYYset_out (FILE *  out_str )
{
        commentcnvYYout = out_str ;
}

int commentcnvYYget_debug  (void)
{
        return commentcnvYY_flex_debug;
}

void commentcnvYYset_debug (int  bdebug )
{
        commentcnvYY_flex_debug = bdebug ;
}

static int yy_init_globals (void)
{
        /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from commentcnvYYlex_destroy(), so don't allocate here.
     */

    (yy_buffer_stack) = 0;
    (yy_buffer_stack_top) = 0;
    (yy_buffer_stack_max) = 0;
    (yy_c_buf_p) = (char *) 0;
    (yy_init) = 0;
    (yy_start) = 0;

    (yy_state_buf) = 0;
    (yy_state_ptr) = 0;
    (yy_full_match) = 0;
    (yy_lp) = 0;

/* Defined in main.c */
#ifdef YY_STDINIT
    commentcnvYYin = stdin;
    commentcnvYYout = stdout;
#else
    commentcnvYYin = (FILE *) 0;
    commentcnvYYout = (FILE *) 0;
#endif

    /* For future reference: Set errno on error, since we are called by
     * commentcnvYYlex_init()
     */
    return 0;
}

/* commentcnvYYlex_destroy is for both reentrant and non-reentrant scanners. */
int commentcnvYYlex_destroy  (void)
{
    
    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		commentcnvYY_delete_buffer(YY_CURRENT_BUFFER  );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		commentcnvYYpop_buffer_state();
	}

	/* Destroy the stack itself. */
	commentcnvYYfree((yy_buffer_stack) );
	(yy_buffer_stack) = NULL;

    commentcnvYYfree ( (yy_state_buf) );
    (yy_state_buf)  = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * commentcnvYYlex() is called, initialization will occur. */
    yy_init_globals( );

    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *commentcnvYYalloc (yy_size_t  size )
{
	return (void *) malloc( size );
}

void *commentcnvYYrealloc  (void * ptr, yy_size_t  size )
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void commentcnvYYfree (void * ptr )
{
	free( (char *) ptr );	/* see commentcnvYYrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 755 "commentcnv.l"



void replaceComment(int offset)
{
  if (g_mlBrief)
  {
    copyToOutput(commentcnvYYtext,(int)commentcnvYYleng);
  }
  else
  {
    //printf("replaceComment(%s)\n",commentcnvYYtext);
    int i=computeIndent(&commentcnvYYtext[offset]);
    if (i==g_blockHeadCol)
    {
      replaceCommentMarker(commentcnvYYtext,(int)commentcnvYYleng);
    }
    else
    {
      copyToOutput(" */",3);
      int i;for (i=(int)commentcnvYYleng-1;i>=0;i--) unput(commentcnvYYtext[i]);
      g_inSpecialComment=FALSE;
      BEGIN(Scan);                                            
    }                                                         
  }
}

/*! This function does three things:
 *  -# It converts multi-line C++ style comment blocks (that are aligned)
 *     to C style comment blocks (if MULTILINE_CPP_IS_BRIEF is set to NO).
 *  -# It replaces aliases with their definition (see ALIASES)
 *  -# It handles conditional sections (cond...endcond blocks)
 */
void convertCppComments(BufStr *inBuf,BufStr *outBuf,const char *fileName)
{
  //printf("convertCppComments(%s)\n",fileName);
  g_inBuf    = inBuf;
  g_outBuf   = outBuf;
  g_inBufPos = 0;
  g_col      = 0;
  g_mlBrief = Config_getBool("MULTILINE_CPP_IS_BRIEF");
  g_skip     = FALSE;
  g_fileName = fileName;
  g_lang = getLanguageFromFileName(fileName);
  g_pythonDocString = FALSE;
  g_lineNr   = 1;
  g_condStack.clear();
  g_condStack.setAutoDelete(TRUE);
  if (g_lang==SrcLangExt_Markdown)
  {
    BEGIN(CComment);
  }
  else
  {
    BEGIN(Scan);
  }
  commentcnvYYlex();
  while (!g_condStack.isEmpty())
  {
    CondCtx *ctx = g_condStack.pop();
    QCString sectionInfo = " ";
    if (ctx->sectionId!=" ") sectionInfo.sprintf(" with label %s ",ctx->sectionId.data()); 
    warn(g_fileName,ctx->lineNr,"Conditional section%sdoes not have "
	"a corresponding \\endcond command within this file.",sectionInfo.data());
  }
  if (Debug::isFlagSet(Debug::CommentCnv))
  {
    g_outBuf->at(g_outBuf->curPos())='\0';
    msg("-------------\n%s\n-------------\n",g_outBuf->data());
  }
}


//----------------------------------------------------------------------------
#if !defined(YY_FLEX_SUBMINOR_VERSION) 
extern "C" { // some bogus code to keep the compiler happy
    void commentcnvYYdummy() { yy_flex_realloc(0,0); } 
}
#endif


