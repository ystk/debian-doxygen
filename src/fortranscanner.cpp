
#line 3 "<stdout>"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define yy_create_buffer fscanYY_create_buffer
#define yy_delete_buffer fscanYY_delete_buffer
#define yy_flex_debug fscanYY_flex_debug
#define yy_init_buffer fscanYY_init_buffer
#define yy_flush_buffer fscanYY_flush_buffer
#define yy_load_buffer_state fscanYY_load_buffer_state
#define yy_switch_to_buffer fscanYY_switch_to_buffer
#define yyin fscanYYin
#define yyleng fscanYYleng
#define yylex fscanYYlex
#define yylineno fscanYYlineno
#define yyout fscanYYout
#define yyrestart fscanYYrestart
#define yytext fscanYYtext
#define yywrap fscanYYwrap
#define yyalloc fscanYYalloc
#define yyrealloc fscanYYrealloc
#define yyfree fscanYYfree

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 35
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;
#endif /* ! C99 */

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! FLEXINT_H */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE fscanYYrestart(fscanYYin  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#define YY_BUF_SIZE 262144
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

extern yy_size_t fscanYYleng;

extern FILE *fscanYYin, *fscanYYout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    #define YY_LESS_LINENO(n)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up fscanYYtext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up fscanYYtext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	yy_size_t yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via fscanYYrestart()), so that the user can continue scanning by
	 * just pointing fscanYYin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* Stack of input buffers. */
static size_t yy_buffer_stack_top = 0; /**< index of top of stack. */
static size_t yy_buffer_stack_max = 0; /**< capacity of stack. */
static YY_BUFFER_STATE * yy_buffer_stack = 0; /**< Stack as an array. */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* yy_hold_char holds the character lost when fscanYYtext is formed. */
static char yy_hold_char;
static yy_size_t yy_n_chars;		/* number of characters read into yy_ch_buf */
yy_size_t fscanYYleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 0;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow fscanYYwrap()'s to do buffer switches
 * instead of setting up a fresh fscanYYin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void fscanYYrestart (FILE *input_file  );
void fscanYY_switch_to_buffer (YY_BUFFER_STATE new_buffer  );
YY_BUFFER_STATE fscanYY_create_buffer (FILE *file,int size  );
void fscanYY_delete_buffer (YY_BUFFER_STATE b  );
void fscanYY_flush_buffer (YY_BUFFER_STATE b  );
void fscanYYpush_buffer_state (YY_BUFFER_STATE new_buffer  );
void fscanYYpop_buffer_state (void );

static void fscanYYensure_buffer_stack (void );
static void fscanYY_load_buffer_state (void );
static void fscanYY_init_buffer (YY_BUFFER_STATE b,FILE *file  );

#define YY_FLUSH_BUFFER fscanYY_flush_buffer(YY_CURRENT_BUFFER )

YY_BUFFER_STATE fscanYY_scan_buffer (char *base,yy_size_t size  );
YY_BUFFER_STATE fscanYY_scan_string (yyconst char *yy_str  );
YY_BUFFER_STATE fscanYY_scan_bytes (yyconst char *bytes,yy_size_t len  );

void *fscanYYalloc (yy_size_t  );
void *fscanYYrealloc (void *,yy_size_t  );
void fscanYYfree (void *  );

#define yy_new_buffer fscanYY_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        fscanYYensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            fscanYY_create_buffer(fscanYYin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        fscanYYensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            fscanYY_create_buffer(fscanYYin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define fscanYYwrap(n) 1
#define YY_SKIP_YYWRAP

typedef unsigned char YY_CHAR;

FILE *fscanYYin = (FILE *) 0, *fscanYYout = (FILE *) 0;

typedef int yy_state_type;

extern int fscanYYlineno;

int fscanYYlineno = 1;

extern char *fscanYYtext;
#define yytext_ptr fscanYYtext

static yy_state_type yy_get_previous_state (void );
static yy_state_type yy_try_NUL_trans (yy_state_type current_state  );
static int yy_get_next_buffer (void );
static void yy_fatal_error (yyconst char msg[]  );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up fscanYYtext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	fscanYYleng = (size_t) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;

#define YY_NUM_RULES 77
#define YY_END_OF_BUFFER 78
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_acclist[2218] =
    {   0,
       64,   64,   43,   43,   47,   47,   72,   72,   70,   70,
       78,   76,   77,   75,   77,   76,   77,    6,   76,   77,
       76,   77,   76,   77,    1,   75,   77,   76,   77,    6,
       76,   77,   76,   77,   64,   76,   77,   65,   76,   77,
       64,   76,   77,   65,   76,   77,   76,   77,   76,   77,
       76,   77,   76,   77,   76,   77,   76,   77,   76,   77,
       76,   77,   76,   77,   67,   75,   77,   76,   77,   76,
       77,    1,   67,   75,   77,   76,   77,   76,   77,   41,
       76,   77,   41,   76,   77,   41,   76,   77,   41,   76,
       77,   41,   76,   77,   41,   76,   77,   41,   76,   77,

       41,   76,   77,   41,   76,   77,   41,   76,   77,   41,
       76,   77,   76,   77,   76,   77,   38,   41,   76,   77,
       38,   41,   76,   77,   38,   41,   76,   77,   38,   41,
       76,   77,   38,   41,   76,   77,   38,   41,   76,   77,
       38,   41,   76,   77,   38,   41,   76,   77,   38,   41,
       76,   77,   38,   41,   76,   77,   38,   41,   76,   77,
       38,   41,   76,   77,   38,   41,   76,   77,   38,   41,
       76,   77,   38,   41,   76,   77,   76,   77,   76,   77,
       76,   77,   76,   77,   76,   77,   76,   77,   76,   77,
       76,   77,   76,   77,   76,   77,   76,   77,   76,   77,

       41,   76,   77,   41,   76,   77,   41,   76,   77,   76,
       77,   38,   41,   76,   77,   38,   41,   76,   77,   38,
       41,   76,   77,   38,   41,   76,   77,   38,   41,   76,
       77,   38,   41,   76,   77,   28,   76,   77,   28,   76,
       77,   29,   76,   77,   29,   76,   77,   41,   76,   77,
       76,   77,   38,   41,   76,   77,   38,   41,   76,   77,
       76,   77,   76,   77,   46,   76,   77,   43,   46,   76,
       77,   46,   76,   77,    6,   46,   76,   77,   42,   46,
       76,   77,   46,   76,   77,   46,   76,   77,   46,   76,
       77,   46,   76,   77,   46,   76,   77,   46,   76,   77,

       46,   76,   77,   46,   76,   77,   46,   76,   77,   46,
       76,   77,   46,   76,   77,   43,   46,   76,   77,   46,
       76,   77,    6,   46,   76,   77,   42,   46,   76,   77,
       46,   76,   77,   46,   76,   77,   46,   76,   77,   46,
       76,   77,   46,   76,   77,   46,   76,   77,   46,   76,
       77,   46,   76,   77,   46,   76,   77,   46,   76,   77,
       47,   76,   77,   52,   75,   77,   76,   77,   48,   76,
       77,   76,   77,   50,   76,   77,   51,   76,   77,   47,
       76,   77,    1,   52,   75,   77,   76,   77,   48,   76,
       77,   76,   77,   50,   76,   77,   51,   76,   77,   60,

       76,   77,   60,   76,   77,   59,   75,   77,   59,   60,
       76,   77,    6,   60,   76,   77,   56,   60,   76,   77,
       57,   60,   76,   77,   58,   60,   76,   77,   60,   76,
       77,   60,   76,   77,   60,   76,   77,    1,   59,   75,
       77,   59,   60,   76,   77,    6,   60,   76,   77,   56,
       60,   76,   77,   57,   60,   76,   77,   58,   60,   76,
       77,   60,   76,   77,   55,   76,   77,   55,   76,   77,
        6,   55,   76,   77,   55,   76,   77,   55,   76,   77,
       55,   76,   77,   55,   76,   77,   55,   76,   77,    6,
       55,   76,   77,   55,   76,   77,   55,   76,   77,   55,

       76,   77,   34,   76,   77,   34,   76,   77,   34,   76,
       77,   34,   76,   77,   76,   77,   38,   41,   76,   77,
       38,   41,   76,   77,   38,   41,   76,   77,   38,   41,
       76,   77,   38,   41,   76,   77,   38,   41,   76,   77,
       38,   41,   76,   77,   38,   41,   76,   77,   38,   41,
       76,   77,   22,   76,   77,   22,   76,   77,    6,   22,
       76,   77,   22,   76,   77,   22,   76,   77,   22,   76,
       77,   22,   76,   77,   22,   76,   77,    6,   22,   76,
       77,   22,   76,   77,   22,   76,   77,   22,   76,   77,
       22,   76,   77,   22,   76,   77,   22,   76,   77,   22,

       76,   77,   22,   76,   77,   22,   76,   77,   22,   76,
       77,   22,   76,   77,   22,   76,   77,   22,   76,   77,
        9,   76,   77,    8,   75,   77,    9,   76,   77,    6,
        9,   76,   77,    9,   76,   77,    9,   76,   77,    1,
        8,   75,   77,    9,   76,   77,    6,    9,   76,   77,
        9,   76,   77,    5,   76,   77,    5,   76,   77,    4,
        5,    6,   76,   77,    5,   76,   77,    5,   76,   77,
        5,   76,   77,    4,    5,    6,   76,   77,    5,   76,
       77,   16,   75,   77,   11,   76,   77,   76,   77,    1,
       16,   75,   77,   11,   76,   77,   76,   77,   76,   77,

       15,   76,   77,   14,   76,   77,   76,   77,   15,   76,
       77,   14,   76,   77,   21,   75,   77,   20,   76,   77,
        1,   21,   75,   77,   20,   76,   77,   72,   76,   77,
       74,   75,   77,   72,   76,   77,    6,   72,   76,   77,
       72,   76,   77,   72,   76,   77,    1,   74,   75,   77,
       72,   76,   77,    6,   72,   76,   77,   72,   76,   77,
       70,   76,   77,   70,   76,   77,    6,   70,   76,   77,
       70,   76,   77,   70,   76,   77,   70,   76,   77,    6,
       70,   76,   77,   70,   76,   77,    7,    3,    2,    1,
        7,    3,    2,   64,   65,   65,   65,   64,   65,   65,

       65,   67,   66,    1,   67,    1,   66,   71,   41,   41,
       41,   41,   41,   41,   41,   41,   41,   41,   41,   41,
       41,   41,   41,   41,   38,   38,   38,   38,   38,   38,
       38,   38,   38,   38,   38,   38,   71,   38,   41,   38,
       41,   38,   41,   38,   41,   38,   41,   38,   41,   38,
       41,   38,   41,   38,   41,   38,   41,   38,   41,   38,
       41,   38,   41,   38,   41,   38,   41,   38,   41,   38,
       41,   38,   41,   38,   41,   38,   41,   38,   41,   38,
       41,   38,   41,   38,   41,   38,   41,   38,   41,   41,
       41,   41,   38,   38,   38,   41,   38,   41,   38,   41,

       38,   41,   38,   41,   38,   41,   28,   28,   28,   28,
       28,   28,   29,   29,   29,   29,   29,   29,   41,   41,
       38,   38,   41,   38,   41,   38,   41,   43,   42,   42,
       45,   43,   42,   42,   45,   47,   50,   51,   69,   48,
       48,   48,   49,   50,   47,   50,   51,   69,   48,   48,
       48,    1,   49,   50,   58,   53,   58,   58,   53,   58,
       54,   54,   34,   34,   34,   34,   34,   34,   34,   34,
       34,   34,   38,   38,   38,   38,   38,   38,   38,   38,
       41,   38,   41,   38,   41,   38,   41,   38,   41,   38,
       41,   38,   41,   38,   41,   38,   41,    8,    1,    8,

       11,   12,   11,   11,   11,   12,   11,   11,   14,   15,
       15,   15,   14,   14,   15,   15,   15,   14,   20,   20,
       20,   20,   20,   20,   72,    7,   72,    3,   72,    2,
       72,   72,    7,   72,    3,   72,    2,   72,   70,    7,
       70,    3,   70,    2,   70,   70,    7,   70,    3,   70,
        2,   70,   41,   41,   41,   41,   41,   41,   41,   41,
       41,   41,   41,   41,   41,   38,   38,   38,   38,   38,
       38,   38,   38,   38,   38,   38,   38,   38,   38,   38,
        1,   38,   38,   41,   38,   41,   38,   41,   38,   41,
       38,   41,   38,   41,   38,   41,   38,   41,   38,   41,

    16420,   38,   41,   38,   41,   38,   41,   38,   41,   38,
       41,   38,   41,   38,   41,   38,   41,   38,   41,   38,
       41,   38,   41,   38,   41,   38,   41,   38,   41,   38,
       41,   38,   41,   38,   41,   38,   41,16420,   41,   41,
       41,   38,   38,   38,   41,   38,   41,16411,   38,   41,
       38,   41,   38,   41,   41,   41,   38,   38,   41,   38,
       41,   38,   41,16411,   34,   34,   34,   34,   38,   38,
       38,   38,   38,   38,   38,   38,   38,   41,   38,   41,
       38,   41,   38,   41,   38,   41,   38,   41,   38,   41,
       38,   41,16402,   73,   73,   41,   41,   41,   41,   41,

       41,   41,   41,   41,   41,   41,   41,16423,16424,   41,
       10,   38,   38,   38,   38,   38,   38,   38,16420,   38,
       38,   38,   38,   38,   38,   38,   38,   38,   38,   41,
       38,   41,   38,   41,   38,   41,   38,   41,   38,   41,
       38,   41,   38,   41,16420,    1, 8228, 8228,   38,   41,
       38,   41,   38,   41,   38,   41,   38,   41,   38,   41,
       38,   41,   38,   41,   38,   41,   38,   41,   38,   41,
       38,   41,   38,   41,   38,   41,   38,   41,16445,   38,
       41,   38,   41,   38,   41,16423,16424,   38,   41,   38,
       41,   38,   41,   10,16420,16445,   41,   41,   41,   38,

       38,16411,   38,   41,16411,    1, 8219, 8219,   38,   41,
       38,   41,   38,   41,   38,   41,   38,   41,   41,   41,
       38,   38,   41,   38,   41,   38,   41,16411,   44,   44,
       34,   34,   34,   34,   38,   38,   38,   38,   38,   38,
       38,   38,   38,   41,   38,   41,   38,   41,   38,   41,
       38,   41,   38,   41,   38,   41,   38,   41,16402,    1,
     8210, 8210,   41,   41,   41,   41,   41,   41,   41,   41,
       41,   41,   41,   41,   38,   38,   38,   38,   38,   38,
       38,   38,   38,   38,   38,   38,   38,   38,16445,   38,
       38,   38,   38,   41,   38,   41,   38,   41,   38,   41,

       38,   41,   38,   41,   38,   41,   38,   41,   38,   41,
       38,   41,   38,   41,   38,   41,   38,   41,   38,   41,
       38,   41,   38,   41,   38,   41,   38,   41,   38,   41,
       38,   41,   38,   41,   38,   41,   38,   41,   37,16445,
       37,   38,   41,   38,   41,   38,   41,   38,   41,   38,
       41,   38,   41,   38,   41,16445,   41,   41,   32,   38,
       38,   38,   38,   41,   38,   41,   38,   41,   38,   41,
       38,   41,   32,   41,   41,   38,   38,   41,   38,   41,
       38,   41,   34,   34,   34,   34,   38,   38,   38,   38,
       38,   38,   38,   38,   38,   41,   38,   41,   38,   41,

       38,   41,   38,   41,   38,   41,   37,   13,   13,   62,
       62,   41,   41,   41,   41,   41,   41,   41,   41,   41,
       41,16423,16424,   41, 8231, 8232,   41,16423,16424,   38,
       38,   38,   38,   38,   38,   38,   38,   38,   38,   38,
       38,   38,   38,   38,   38,   38,   38,   38,   41,   63,
       38,   41,   38,   41,   38,   41,   38,   41,   38,   41,
       38,   41,   38,   41,   38,   41,   38,   41,   38,   41,
       38,   41,   38,   41,   38,   41,   38,   41,   38,   41,
       38,   41,   38,   41,   38,   41,   38,   41,   38,   41,
       38,   41,16423,16424,16445,    1,   38,16445,16445,   38,

       41,   38,   41,   38,   41,   38,   41,   38,   41, 8231,
     8232,   38,   41,   38,   41,16423,16424,    1,   63,    1,
    16445,16445,    1,   26,   41,   41,   38,   38,   38,   38,
       41,   38,   41,   38,   41,   26,   38,   41,   38,   41,
       41,   41,16423,16424,   38,   38,   41,   38,   41,   38,
       41,16423,16424,   44,   44,   44,   44,   34,   33,   34,
       34,   33,   34,   38,   38,   38,   38,   38,   38,   38,
       41,   38,   41,   38,   41,   38,   41,   38,   41,   38,
       41,    1,   38,    1,   41,   41,   41,   41,   41,   41,
       41,16423,16424,   41,16423,16424, 8231, 8231,   38,   38,

       38,   38,   38,   38,   38,   38,   38,   38,   38,   38,
       38,   38,   38,   38,   38,   38,   41,   38,   41,   38,
       41,16445,   38,   41,   38,   41,   38,   41,   38,   41,
       38,   41,   38,   41,   38,   41,   38,   41,   38,   41,
    16445,   38,   41,   38,   41,   38,   41,16445,   38,   41,
       38,   41,   38,   41,16423,16424,   38,   41,16423,16424,
       38,16445,   37,16445,   38,   41,   38,   41,   38,   41,
       38,   41, 8231, 8231,   38,   41,16445,16445,16445,16445,
    16445,   41,   38,   38,   38,   38,   41,   38,   41,   38,
       41,   38,   41,   41,16423,16424,   31,   38,   38,   41,

       38,   41,16423,16424,    1,   31,   31,   44,   44,   44,
       44,   33,   34,   33,   34,   38,   38,   38,   38,   38,
       38,   38,   41,   38,   41,   38,   41,16419,   38,   41,
       38,   41,   38,   41,   41,   41,16423,16424,   41,   41,
    16423,16424,   41,   68,   38,   38,16445,   38,   38,   38,
       38,   38,   38,   38,16445,   38,   38,16445,   38,   38,
       38,   38,   38,   38,   41,   38,   41, 8217,   38,   41,
    16409,   38,   41,   38,   41,   38,   41,16420,   38,   41,
       38,   41,   38,   41,16423,16424,   38,   41,   38,   41,
       38,   41,   38,   41,16423,16424,   38,   41,   37,16445,

       37,   38,   41,   38,   41,   38,   41,   38,   41,   68,
       38,   41,16420,16445,   26,   38,   38,   38, 8215,   38,
       41,16407,   38,   41,   38,   41,   26,   30,   38, 8216,
       38,   41,16408,    1,   30,   30,   44,   44,   44,   44,
       38,   38,   38,16419,   38,   38,   38,   41,16419,16419,
        1, 8227, 8227,   41,   41,16423,16424,   41,16423,16424,
       41,16423,16424,   68,   68,   38, 8217,   38,16409,   38,
       38,16420,   38,   38,   38,   38,   38,   38,   38,   38,
       38,   38,   41,   38,   41,16445, 8217,    1, 8217, 8217,
       38,   41,16423,16424,   38,   41,16420,   38,   41,   38,

       41,   38,   41,16401,   38,   41,16423,16424,   38,   41,
    16423,16424,   38,   41,   38,   41,   38,   41,   38,   41,
       68,   68,   38,   41,16445,16420, 8215,   38,16407,   38,
       38, 8215,    1, 8215, 8215,   38,   41,16411,   38,   41,
     8216,   38,16408, 8216,    1, 8216, 8216,16411,   44,   44,
       44,   44,   38,   38,   41,16419,16419,   41,16423,16424,
       38,16445,   38,   38,   38,   38,16401,   38,   38,   38,
       38,   38,   38,   41,   37,16445,16420,   38,   41,   38,
       41,   38,16423,16424,    1, 8209, 8209, 8253,   38,   41,
       38,   41,   38,   41,16445, 8253,   38,16411,   38,16411,

       38,   41,16411,16411,16411,   44,   44,   38,   37,16419,
    16419,16419,   41,16423,16424,   38,   38,   38,   38,   38,
       38,   41,16423,16424,16445,    1,   38,16445,16445,    1,
    16420,16420,16420,   38,   41,16420,   38,   41,16401,   38,
       41,   38,   41,    1,16445,16445,16420,   32,   38,16411,
    16411,   32,    1,    1,   38,   38,16420,   38,   38,   38,
       38,16445,    1,16445,   38,16423,16424,   38,   41,16401,
    16401,   38,   41,   38,   41,16445,    1,16445,   32,16411,
    16411,16411,   32,   38,    1,16402,   38,   38,   38,16445,
       38,   41,16420,    1, 8253,   38,   41,16445,16420,16402,

       38,16420,   38,16401,16401,   38,   41,16402,   38, 8209,
       19,16402,16402,16402,   19,16445,16445
    } ;

static yyconst flex_int16_t yy_accept[1967] =
    {   0,
        1,    1,    1,    2,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    4,    5,    6,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    8,    9,   10,   11,   11,   11,   12,   14,   16,
       18,   21,   23,   25,   28,   30,   33,   35,   38,   41,
       44,   47,   49,   51,   53,   55,   57,   59,   61,   63,
       65,   68,   70,   72,   76,   78,   80,   83,   86,   89,
       92,   95,   98,  101,  104,  107,  110,  113,  115,  117,

      121,  125,  129,  133,  137,  141,  145,  149,  153,  157,
      161,  165,  169,  173,  177,  179,  181,  183,  185,  187,
      189,  191,  193,  195,  197,  199,  201,  204,  207,  210,
      212,  216,  220,  224,  228,  232,  236,  239,  242,  245,
      248,  251,  253,  257,  261,  263,  265,  268,  272,  275,
      279,  283,  286,  289,  292,  295,  298,  301,  304,  307,
      310,  313,  316,  320,  323,  327,  331,  334,  337,  340,
      343,  346,  349,  352,  355,  358,  361,  364,  367,  369,
      372,  374,  377,  380,  383,  387,  389,  392,  394,  397,
      400,  403,  406,  409,  413,  417,  421,  425,  429,  432,

      435,  438,  442,  446,  450,  454,  458,  462,  465,  468,
      471,  475,  478,  481,  484,  487,  490,  494,  497,  500,
      503,  506,  509,  512,  515,  517,  521,  525,  529,  533,
      537,  541,  545,  549,  553,  556,  559,  563,  566,  569,
      572,  575,  578,  582,  585,  588,  591,  594,  597,  600,
      603,  606,  609,  612,  615,  618,  621,  624,  627,  630,
      634,  637,  640,  644,  647,  651,  654,  657,  660,  665,
      668,  671,  674,  679,  682,  685,  688,  690,  694,  697,
      699,  701,  704,  707,  709,  712,  715,  718,  721,  725,
      728,  731,  734,  737,  741,  744,  747,  751,  754,  758,

      761,  764,  767,  771,  774,  777,  780,  784,  787,  788,
      789,  790,  790,  791,  792,  793,  794,  795,  796,  797,
      798,  799,  800,  801,  802,  802,  802,  802,  802,  802,
      802,  802,  802,  802,  802,  802,  802,  802,  802,  802,
      803,  803,  803,  804,  804,  806,  806,  806,  807,  808,
      809,  810,  811,  812,  813,  814,  815,  816,  817,  818,
      819,  820,  821,  822,  823,  824,  825,  825,  826,  827,
      828,  829,  830,  831,  832,  833,  834,  835,  836,  837,
      838,  838,  840,  840,  842,  844,  846,  848,  850,  852,
      854,  856,  858,  860,  862,  864,  866,  868,  870,  872,

      874,  876,  878,  880,  882,  884,  886,  888,  890,  890,
      890,  890,  890,  890,  890,  890,  890,  890,  890,  890,
      890,  890,  890,  890,  890,  890,  890,  890,  890,  890,
      890,  890,  890,  890,  891,  892,  893,  893,  894,  895,
      897,  899,  901,  903,  905,  907,  908,  909,  910,  911,
      912,  913,  914,  915,  916,  917,  918,  919,  920,  921,
      921,  922,  924,  926,  928,  928,  928,  928,  929,  930,
      931,  932,  932,  932,  932,  932,  932,  932,  932,  932,
      932,  932,  932,  933,  934,  935,  936,  936,  936,  936,
      936,  936,  936,  936,  936,  936,  936,  936,  937,  937,

      938,  939,  940,  941,  942,  943,  943,  944,  945,  946,
      946,  947,  948,  949,  950,  951,  952,  952,  953,  954,
      955,  955,  956,  957,  958,  958,  959,  960,  961,  962,
      963,  964,  965,  966,  967,  968,  969,  970,  971,  972,
      973,  973,  974,  975,  976,  977,  978,  979,  980,  982,
      984,  986,  988,  990,  992,  994,  996,  998,  998,  998,
      998,  998,  998,  999, 1001, 1002, 1003, 1004, 1005, 1005,
     1005, 1006, 1007, 1008, 1009, 1009, 1009, 1009, 1010, 1011,
     1012, 1013, 1014, 1014, 1015, 1016, 1017, 1018, 1019, 1020,
     1021, 1022, 1023, 1024, 1025, 1026, 1026, 1026, 1028, 1030,

     1032, 1033, 1035, 1037, 1039, 1040, 1042, 1044, 1046, 1047,
     1049, 1051, 1053, 1053, 1053, 1053, 1053, 1053, 1053, 1054,
     1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064,
     1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074,
     1075, 1076, 1077, 1078, 1079, 1080, 1081, 1081, 1082, 1083,
     1085, 1087, 1089, 1091, 1093, 1095, 1097, 1099, 1102, 1104,
     1106, 1108, 1110, 1112, 1114, 1116, 1118, 1120, 1122, 1124,
     1126, 1128, 1130, 1132, 1134, 1136, 1138, 1138, 1138, 1138,
     1138, 1138, 1139, 1139, 1139, 1139, 1139, 1139, 1139, 1139,
     1139, 1140, 1141, 1142, 1143, 1144, 1146, 1149, 1151, 1153,

     1155, 1156, 1157, 1158, 1160, 1162, 1164, 1165, 1165, 1165,
     1165, 1165, 1165, 1165, 1165, 1165, 1165, 1165, 1165, 1165,
     1165, 1165, 1165, 1165, 1165, 1165, 1165, 1165, 1165, 1165,
     1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175,
     1176, 1177, 1179, 1181, 1183, 1185, 1187, 1189, 1191, 1193,
     1193, 1194, 1194, 1194, 1194, 1195, 1196, 1196, 1196, 1196,
     1196, 1196, 1196, 1197, 1198, 1199, 1200, 1201, 1202, 1203,
     1204, 1205, 1206, 1207, 1210, 1211, 1212, 1213, 1214, 1215,
     1216, 1217, 1218, 1220, 1221, 1222, 1223, 1224, 1225, 1226,
     1227, 1228, 1228, 1229, 1231, 1233, 1235, 1237, 1239, 1241,

     1243, 1245, 1246, 1248, 1249, 1251, 1253, 1255, 1257, 1259,
     1261, 1263, 1265, 1267, 1269, 1271, 1273, 1275, 1277, 1280,
     1282, 1284, 1288, 1290, 1292, 1294, 1295, 1295, 1295, 1295,
     1295, 1295, 1296, 1296, 1296, 1296, 1296, 1296, 1296, 1296,
     1297, 1297, 1297, 1297, 1298, 1299, 1300, 1301, 1303, 1305,
     1306, 1308, 1309, 1311, 1313, 1315, 1317, 1319, 1320, 1321,
     1322, 1324, 1326, 1328, 1329, 1329, 1329, 1329, 1329, 1329,
     1329, 1329, 1329, 1329, 1329, 1329, 1329, 1330, 1330, 1330,
     1330, 1330, 1330, 1330, 1330, 1330, 1330, 1330, 1330, 1331,
     1331, 1332, 1333, 1334, 1335, 1336, 1337, 1338, 1339, 1340,

     1341, 1342, 1343, 1345, 1347, 1349, 1349, 1351, 1353, 1355,
     1357, 1359, 1359, 1360, 1362, 1363, 1363, 1363, 1363, 1363,
     1363, 1363, 1363, 1363, 1363, 1363, 1364, 1365, 1366, 1367,
     1368, 1369, 1370, 1371, 1372, 1373, 1374, 1374, 1374, 1375,
     1376, 1377, 1378, 1379, 1380, 1381, 1382, 1383, 1384, 1385,
     1386, 1387, 1388, 1390, 1391, 1392, 1393, 1395, 1397, 1399,
     1401, 1403, 1405, 1407, 1409, 1411, 1413, 1415, 1417, 1419,
     1421, 1423, 1425, 1427, 1429, 1431, 1433, 1435, 1437, 1439,
     1439, 1441, 1441, 1441, 1442, 1444, 1446, 1448, 1450, 1452,
     1452, 1452, 1454, 1456, 1456, 1456, 1456, 1456, 1456, 1456,

     1456, 1456, 1456, 1456, 1456, 1456, 1456, 1456, 1457, 1457,
     1457, 1457, 1457, 1457, 1457, 1457, 1457, 1457, 1458, 1459,
     1460, 1460, 1461, 1462, 1463, 1465, 1467, 1469, 1471, 1473,
     1474, 1474, 1475, 1476, 1477, 1479, 1481, 1483, 1483, 1483,
     1483, 1483, 1483, 1483, 1483, 1483, 1483, 1483, 1483, 1483,
     1483, 1483, 1483, 1483, 1483, 1483, 1483, 1483, 1483, 1483,
     1483, 1483, 1484, 1485, 1486, 1487, 1488, 1489, 1490, 1491,
     1492, 1493, 1494, 1495, 1497, 1499, 1501, 1501, 1503, 1505,
     1507, 1508, 1508, 1508, 1508, 1508, 1508, 1508, 1508, 1509,
     1510, 1511, 1511, 1511, 1512, 1512, 1512, 1513, 1514, 1515,

     1516, 1517, 1518, 1519, 1520, 1521, 1524, 1525, 1526, 1527,
     1530, 1531, 1532, 1533, 1534, 1535, 1536, 1537, 1538, 1539,
     1540, 1541, 1542, 1543, 1544, 1545, 1546, 1547, 1548, 1550,
     1551, 1553, 1555, 1557, 1559, 1561, 1563, 1565, 1567, 1569,
     1571, 1573, 1575, 1577, 1579, 1581, 1583, 1585, 1587, 1589,
     1591, 1595, 1595, 1595, 1595, 1595, 1596, 1596, 1597, 1599,
     1599, 1600, 1602, 1604, 1606, 1608, 1610, 1611, 1612, 1614,
     1618, 1618, 1619, 1620, 1620, 1620, 1620, 1620, 1620, 1620,
     1620, 1620, 1620, 1620, 1620, 1621, 1622, 1622, 1623, 1623,
     1623, 1623, 1623, 1623, 1623, 1624, 1626, 1627, 1627, 1627,

     1628, 1629, 1630, 1632, 1634, 1636, 1639, 1641, 1641, 1641,
     1642, 1645, 1646, 1648, 1650, 1654, 1654, 1654, 1654, 1654,
     1654, 1654, 1654, 1654, 1654, 1654, 1654, 1655, 1656, 1656,
     1656, 1656, 1656, 1656, 1656, 1656, 1656, 1656, 1657, 1658,
     1659, 1661, 1662, 1664, 1665, 1666, 1667, 1668, 1669, 1670,
     1672, 1674, 1676, 1676, 1678, 1680, 1682, 1682, 1682, 1683,
     1684, 1684, 1684, 1684, 1685, 1685, 1685, 1685, 1685, 1685,
     1685, 1685, 1686, 1687, 1688, 1688, 1688, 1689, 1690, 1691,
     1694, 1697, 1697, 1697, 1698, 1699, 1700, 1701, 1702, 1703,
     1704, 1705, 1706, 1707, 1708, 1709, 1710, 1711, 1712, 1713,

     1714, 1715, 1716, 1718, 1720, 1723, 1725, 1727, 1727, 1729,
     1731, 1733, 1735, 1737, 1739, 1742, 1742, 1742, 1744, 1746,
     1749, 1751, 1753, 1757, 1761, 1761, 1761, 1761, 1761, 1761,
     1763, 1765, 1767, 1769, 1771, 1773, 1773, 1773, 1774, 1775,
     1777, 1777, 1777, 1778, 1778, 1778, 1778, 1778, 1778, 1778,
     1779, 1780, 1780, 1781, 1782, 1782, 1782, 1782, 1782, 1782,
     1782, 1783, 1783, 1783, 1784, 1785, 1786, 1788, 1790, 1792,
     1794, 1794, 1794, 1797, 1797, 1798, 1799, 1801, 1805, 1805,
     1807, 1808, 1808, 1808, 1808, 1808, 1808, 1808, 1808, 1808,
     1808, 1808, 1809, 1810, 1810, 1810, 1810, 1810, 1810, 1810,

     1810, 1810, 1811, 1812, 1814, 1816, 1817, 1818, 1819, 1820,
     1821, 1822, 1824, 1826, 1826, 1826, 1829, 1831, 1833, 1833,
     1834, 1834, 1834, 1834, 1834, 1834, 1834, 1834, 1834, 1834,
     1834, 1835, 1836, 1839, 1839, 1839, 1839, 1840, 1843, 1844,
     1844, 1845, 1846, 1848, 1849, 1850, 1851, 1852, 1853, 1854,
     1856, 1857, 1859, 1860, 1861, 1862, 1863, 1864, 1866, 1868,
     1872, 1874, 1874, 1876, 1879, 1881, 1883, 1887, 1889, 1889,
     1889, 1889, 1891, 1893, 1897, 1899, 1899, 1899, 1899, 1899,
     1901, 1902, 1902, 1902, 1902, 1904, 1906, 1908, 1910, 1910,
     1911, 1913, 1913, 1913, 1913, 1914, 1914, 1914, 1914, 1915,

     1915, 1915, 1915, 1915, 1915, 1916, 1916, 1916, 1917, 1918,
     1919, 1923, 1925, 1927, 1928, 1928, 1928, 1928, 1929, 1930,
     1934, 1934, 1936, 1937, 1937, 1937, 1937, 1937, 1938, 1938,
     1938, 1938, 1938, 1939, 1939, 1939, 1939, 1940, 1940, 1940,
     1940, 1940, 1941, 1941, 1942, 1943, 1945, 1946, 1947, 1949,
     1949, 1950, 1951, 1953, 1954, 1954, 1954, 1954, 1954, 1954,
     1955, 1958, 1958, 1958, 1961, 1964, 1965, 1966, 1967, 1970,
     1971, 1973, 1974, 1975, 1976, 1977, 1978, 1979, 1980, 1981,
     1982, 1984, 1987, 1988, 1990, 1991, 1995, 1995, 1997, 1998,
     2000, 2002, 2002, 2002, 2005, 2009, 2013, 2013, 2013, 2013,

     2013, 2013, 2013, 2013, 2015, 2017, 2019, 2021, 2022, 2023,
     2025, 2026, 2026, 2026, 2027, 2027, 2027, 2027, 2027, 2027,
     2027, 2027, 2027, 2027, 2030, 2031, 2032, 2033, 2035, 2036,
     2039, 2041, 2041, 2041, 2044, 2045, 2047, 2048, 2049, 2049,
     2049, 2049, 2049, 2049, 2050, 2051, 2051, 2051, 2051, 2051,
     2052, 2053, 2054, 2056, 2056, 2057, 2058, 2058, 2058, 2058,
     2058, 2058, 2059, 2059, 2059, 2059, 2061, 2061, 2061, 2063,
     2064, 2065, 2066, 2068, 2069, 2070, 2071, 2072, 2073, 2075,
     2077, 2077, 2077, 2077, 2077, 2077, 2077, 2078, 2080, 2082,
     2082, 2085, 2085, 2085, 2085, 2087, 2088, 2088, 2088, 2088,

     2088, 2088, 2088, 2088, 2089, 2091, 2093, 2093, 2095, 2096,
     2096, 2096, 2096, 2096, 2096, 2096, 2097, 2097, 2097, 2097,
     2097, 2097, 2097, 2099, 2100, 2101, 2104, 2104, 2104, 2105,
     2106, 2106, 2106, 2106, 2106, 2107, 2107, 2107, 2107, 2107,
     2107, 2107, 2108, 2108, 2108, 2109, 2110, 2110, 2110, 2110,
     2111, 2112, 2113, 2113, 2113, 2113, 2116, 2116, 2116, 2116,
     2117, 2118, 2119, 2120, 2121, 2125, 2126, 2126, 2127, 2129,
     2129, 2129, 2130, 2130, 2131, 2131, 2132, 2133, 2134, 2137,
     2139, 2139, 2139, 2139, 2140, 2140, 2140, 2140, 2140, 2140,
     2140, 2140, 2140, 2142, 2144, 2144, 2145, 2146, 2146, 2146,

     2147, 2147, 2148, 2148, 2148, 2148, 2148, 2149, 2151, 2152,
     2152, 2153, 2153, 2153, 2153, 2153, 2154, 2154, 2154, 2154,
     2154, 2155, 2156, 2156, 2156, 2156, 2156, 2156, 2156, 2156,
     2156, 2158, 2159, 2160, 2161, 2161, 2163, 2163, 2164, 2165,
     2165, 2168, 2168, 2170, 2170, 2170, 2170, 2171, 2172, 2172,
     2172, 2172, 2172, 2172, 2172, 2172, 2172, 2174, 2176, 2176,
     2177, 2177, 2178, 2179, 2179, 2179, 2179, 2179, 2180, 2181,
     2182, 2183, 2184, 2184, 2184, 2184, 2185, 2185, 2186, 2186,
     2186, 2186, 2187, 2187, 2188, 2189, 2190, 2190, 2191, 2191,
     2194, 2194, 2194, 2195, 2195, 2195, 2195, 2195, 2195, 2196,

     2196, 2196, 2198, 2198, 2199, 2199, 2200, 2200, 2200, 2200,
     2200, 2200, 2201, 2201, 2203, 2204, 2204, 2204, 2205, 2205,
     2205, 2206, 2206, 2206, 2206, 2206, 2206, 2206, 2206, 2208,
     2208, 2208, 2208, 2208, 2209, 2209, 2210, 2210, 2210, 2210,
     2211, 2211, 2211, 2211, 2211, 2211, 2211, 2211, 2211, 2212,
     2213, 2214, 2215, 2216, 2217, 2217, 2217, 2217, 2218, 2218,
     2218, 2218, 2218, 2218, 2218, 2218
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    4,    5,    1,    1,    6,    1,    7,    8,
        9,   10,    1,   11,    1,    1,   12,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   14,    1,   15,
       16,   17,    1,    1,   18,   19,   20,   21,   22,   23,
       24,   25,   26,   27,   28,   29,   30,   31,   32,   33,
       27,   34,   35,   36,   37,   38,   27,   39,   40,   27,
        1,   41,    1,    1,   27,    1,   42,   43,   44,   45,

       46,   47,   48,   49,   50,   27,   51,   52,   53,   54,
       55,   56,   27,   57,   58,   59,   60,   61,   27,   62,
       63,   27,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst flex_int32_t yy_meta[64] =
    {   0,
        1,    2,    3,    1,    1,    4,    1,    5,    1,    1,
        6,    1,    7,    8,    9,    1,    9,   10,   10,   10,
       10,   10,   10,   10,   10,   10,   10,   10,   10,   10,
       10,   10,   10,   10,   10,   10,   10,   10,   10,   10,
        1,   10,   10,   10,   10,   10,   10,   10,   10,   10,
       10,   10,   10,   10,   10,   10,   10,   10,   10,   10,
       10,   10,   10
    } ;

static yyconst flex_int16_t yy_base[2140] =
    {   0,
        0,    5,   46,   87,  127,  184,   11,   23,  242,  305,
       29,  367,   80,  425,   35,   64,  484,  525,  566,  607,
       50,   91,   74,  118,  647,  705,  764,  805,  149,  173,
      189,  425,  846,  902,    9,  957,  449, 1016,  138,  195,
      374,  402, 1079, 1120, 1161, 1202, 1243, 1284,  431, 1324,
      470,  502,  509,  514,  544,    0, 4139,10251,10251,    0,
    10251,   67, 4097,10251,   20, 4086,  120, 4082,   11,   18,
     1383,  643,   97,  111,  135,  926,  180,  379,  381,  202,
    10251, 4045,  209,10251,  109, 4011,   16,  370,  454,  551,
      367,  539, 1419,  540,  502,  583,  629, 1479,  152, 1542,

     1583,  177,  604,  605,  682,  662,  187,  615,  532, 1618,
      652,  848,  902,  642, 1677,  643,  693,  727,  839,  603,
      500,  730,  751,  780,  767,  789,  867,  181,  825,  928,
      846,  908,  953, 1719,  706, 1289,   67, 1779,   69, 1820,
     1081, 1137, 1281, 1844,  418,  935,10251,    0,    0,10251,
     4001, 3986,  413,  187,  564,  573,  572, 1384,  426,  428,
      390, 3995,  446,  205, 3982,   42,  220,  894,  931,  681,
      838,  938, 1607,  714,  781,  553,  785,10251, 3920,  153,
     3901, 3892,10251,  787,10251,  218, 1904,  382,  448, 3870,
    10251,  589,10251,    0,10251, 3848,10251, 3855,  634, 3814,

      822,10251,  507, 3806,  590, 3802,  460, 1099,10251,    0,
    10251, 3771, 3765,  823, 3761,  869, 3760,  673,  589, 1102,
      470, 1277, 1945, 1986, 2045, 1283, 1378, 1169, 1168, 1209,
     2087, 1138, 1393, 1394,10251, 3730,10251,  900, 1103, 3731,
      966,  879, 3686,  923, 1317, 1094, 1398, 1082, 1273, 1376,
     1410, 1189, 1179, 1279, 1239, 1109, 3675,10251, 3672, 3670,
     1148, 3641,10251, 1096, 3639, 1188,10251,    0,10251, 1147,
     3637, 1260, 3602, 1225,10251,  826, 1322,10251, 2147, 1417,
      713,  868, 3534,  833, 2188,  922,10251,  870,10251, 2229,
        0,  115,  148,    0, 1228, 3531,  222, 1302, 3522, 1560,

        0,  377,    0, 1229, 3521, 1306, 3519, 1561,10251,10251,
    10251, 3517,10251, 3487, 3486, 3482, 3479,  927,    0,  950,
      993, 2270, 2311, 2352, 1611, 1127, 1202, 1243, 1308, 1324,
      544, 1836, 1411, 1406, 1566, 1572, 1574, 1435, 1265,10251,
     3471, 3434,10251, 1456,10251,  629,  736, 3398, 3402,10251,
      993,    0, 1174, 1609, 1603, 1659, 1671, 1679, 1668, 1713,
     1749, 1754, 1605, 1568, 1744, 1695,    0, 2393, 2434, 1717,
     1616, 1662, 1812, 1716, 1811, 1815, 1585, 1817, 1828, 3401,
     1465, 1418,  788, 2486, 1419, 1590, 1871, 1986, 1911, 1914,
     1977, 1637, 1987, 1981, 1953, 1982, 1680, 1983, 1813, 2023,

     2032, 2002, 2065, 2070, 2034, 2081, 2085, 2084, 2526, 1702,
     2427, 1842, 2425, 1740, 2293, 2423, 2108, 2047, 2109, 2184,
     2426, 1967, 2430, 2420, 2162, 2027, 2468, 1617, 2203, 2428,
     2208, 1879, 2481, 2122, 2525, 2500, 2246, 2487, 2277, 2319,
     2489, 2529, 2560, 2559, 2359, 1259,    0, 1265, 2615, 2656,
     2697, 1268,    0, 1449, 2738, 2779, 2820, 2160, 2164, 2247,
     2813, 2360, 2514, 2820, 2074, 2812, 2330,  925, 3400, 3370,
    10251, 1873, 2235, 2271, 2273, 2471, 2475,  703, 1325, 1589,
     2483, 2533, 1183,  995, 1008, 3361, 2562, 2639, 2733, 2808,
     2810, 2813, 2845, 2847, 2291, 2814, 2848, 1796, 3354, 3349,

    10251,10251, 1565,    0, 1566, 3271,10251, 3276, 1800,  791,
     1098, 3235, 3233, 2905, 2946, 2987,  831, 3224, 3188, 1143,
     1354, 3185,10251, 3160, 1559, 1145, 3143, 1359,10251, 3089,
     1567,    0, 1681, 2587, 2166, 3028, 3069, 3110, 1714, 1841,
     3150, 2849, 2622, 2624, 2664, 2705, 2913, 3101, 3113, 2745,
     3030, 3111, 2824, 2667, 3114, 3116, 2912, 2325, 2754, 3151,
     2714, 2881,10251,10251, 1804,10251, 3042, 1845, 3104, 2621,
     3209, 3016, 3250, 3291, 3105, 3136, 1362, 3012, 1746,    0,
     1752, 2979, 1803, 1403, 3332, 3373, 3414, 1816, 1879,    0,
     1882, 3455, 3496, 3537,    0,  595,  626,    0,    0,    0,

     2889, 2852, 2837, 2799,    0,    0,    0,    0, 2769, 2765,
     2760, 2755, 2491, 2543, 2744, 2883, 2963, 3141, 3231, 2963,
     2964, 3549, 2874, 2591, 3355, 3471, 3175, 3520, 3000, 2919,
     1922, 3606, 2827, 2995, 3540, 3035, 3527, 3538, 3544, 3216,
     3534, 3261, 3547, 3606, 3600, 3298, 1466, 2720, 2646, 3217,
     3605, 3599, 3462, 3539, 3608, 3612, 2996, 3663, 3616, 3641,
     3650, 3341, 3382, 3645, 3258, 3642, 2953, 3659, 3039, 3662,
     3671, 3687, 3661, 3688, 3697, 3675, 3308, 3144, 3717, 3352,
     3698, 3742, 3393, 3430, 3633, 3432, 3624, 3101, 3721, 3470,
     3719, 3388, 3735, 3738, 3708, 3723, 3768, 3747, 3706, 3758,

     3780, 3782, 3783, 3767, 3777, 3076, 3828, 3216, 2877, 2962,
     3794, 3124, 3311, 3338, 3413, 3465, 3513, 3537, 3791, 3822,
     3830, 3840, 3819, 3824, 3836, 3844, 3846, 3850, 3847, 3842,
     3850, 3536, 3548, 3836, 3862, 3848, 3872, 3870, 3835, 3889,
     3880, 3882, 3890, 3901, 3919, 3904, 3899, 3617, 3918, 3852,
     3955, 3867, 3908, 3940, 2637,10251, 3917, 3916, 3922, 3959,
     3960, 3962, 3960, 3966, 3961, 3970, 3976, 3980, 3978, 3993,
     4003, 4001, 4009, 1925, 4017, 2597, 4005, 4003, 4013, 4007,
     4021, 4018, 4072, 4033, 4050, 4054, 4059, 3959, 4057, 4064,
     4068, 2587,10251, 4079, 4084, 4100, 3961, 4104, 4096, 4004,

     4112, 4163,10251, 2565, 4015, 4103, 4108, 4120, 4133, 4159,
     4144, 4160, 4147, 4171, 4179, 4185, 4191, 4145, 4242, 4205,
     4058, 4216, 4196, 4218, 4234, 1966, 4075, 4251, 4206, 4226,
     4135, 4272, 4230, 4223, 4243, 4125, 4263, 4038, 1887, 4329,
     4264, 4269, 1969, 4275, 4284, 2049, 4270, 4332, 4291, 4347,
    10251, 2522, 4273, 4311, 4244, 4337, 4315, 4340, 4373, 4345,
     4341, 4372, 4366, 4403, 4366, 4339, 3718, 4371, 4374, 4378,
     3716, 4379, 4382, 4379, 4050, 4125,10251, 4173, 4407, 4388,
     4410, 4414, 4423, 4425, 4417, 4419, 4434, 4427, 2520, 4426,
     4448, 4437, 4266, 4266, 4412, 4429, 4446, 4472, 4457, 4462,

     4431, 4470, 4453, 4455, 4465, 4494, 4471, 4489, 4506, 4534,
     4517, 4475, 4552,10251, 2505, 4507, 4518, 4466, 4512, 2467,
     4288, 4491, 1927, 4546, 4529, 4558, 4527, 4561, 4567, 4575,
     4577, 4571, 4588, 4585, 4591, 4601,  226, 2439, 4603, 4590,
     4594, 4530, 4609, 4570, 4603, 4576, 4611, 4616, 4614, 4630,
     4636, 4618, 4687, 4650, 4662, 4667, 4663, 4656, 4680, 4689,
     4694, 4696, 4704, 4707, 4708, 4718, 4723, 4722, 4729, 4740,
     4728, 4742, 4753, 4749, 4754, 4766, 4768, 4764, 4782, 4833,
     4891, 1573, 2210, 2429, 4638, 4767, 4780, 4786, 4813, 4949,
     2010, 4821, 4846, 1973, 1614, 1930, 4683, 4800, 4825, 4830,

     4842, 4857, 4884, 4883, 4893, 4795, 1649, 4989, 1679, 2212,
     4796, 4909, 4910, 4860, 4918, 2124, 1884, 4894, 4930, 2123,
     4940, 4953, 4948, 4950, 4959, 4965, 4986, 4952, 4998, 2251,
     4973, 5007, 4924, 5004, 4999, 4985, 5010, 5031, 5016, 4336,
     4867, 4875, 4872, 4891, 5004, 4611, 4682, 5006, 4884, 5009,
     5052, 5028, 5050, 5023, 5054, 5057, 5061, 5069, 5064, 5058,
     5070, 5074, 5083, 5033, 4897, 5072, 5045, 5046, 5076, 5088,
     5093, 5124, 5091, 5121, 5096, 5122, 5106, 5123, 5125, 5141,
     2172, 1970, 2374, 2214, 2252, 5073, 5127, 5158,10251, 2418,
     2415, 5117, 5119, 1934, 5155, 5154, 5175, 5176, 5178, 2372,

     5179, 5188, 5192, 5202, 5194, 2459, 2414, 2165,10251, 2592,
     5193, 5183, 5195, 5192, 5203, 5200, 5214, 5219, 5234, 5231,
     5236, 5233, 5249, 5209, 5235, 5247, 5261, 5260, 5264, 2255,
     5269, 5263, 5275, 5282, 5301, 5281, 5302, 5306, 5307, 5319,
     5310, 5315, 5316, 5334, 5322, 5314, 5352, 5346, 5326, 5355,
     5371, 5366, 5353, 5384, 5386, 5431, 2286, 2375, 5488, 2502,
     5545, 5359, 5368, 5373, 5367, 5407, 5603, 2342, 5392, 5424,
     2294, 2327, 2023, 5376, 5407, 2054, 5421, 5428, 5440, 5424,
     5439, 5449, 5434, 2295, 2255, 5485, 2632, 5514, 5464, 5444,
     5442, 5453, 5446, 2296, 2251, 2329, 5509, 5462, 5516, 5484,

     5500, 5522, 5511, 5538, 5531, 5441, 5541, 5593, 5588, 5615,
     2718, 5601, 5600, 5610, 5655, 5541, 5599, 5441, 5173, 5191,
     2335, 5466, 5252, 5530, 5606, 5292,10251,10251, 5630, 5638,
     5582, 2336, 5632, 5652, 5639, 5640, 5657, 2253, 2178, 5659,
     2373, 5446,    0, 5648, 5649, 5658, 5673, 5686, 5667, 5682,
     5683, 5684, 5643, 5694, 5692, 5621, 2636, 2415, 2167, 2759,
     2677, 2926, 2416, 2131, 5681, 5717, 5725, 5693, 5447, 5728,
     5727, 5737, 5748, 5754, 2462, 5740, 5758, 5762, 5756, 2634,
     3049, 2466, 2096,    0, 2511, 5757, 5758, 5763, 5771, 5760,
     5778, 5784, 5792, 5795, 5800, 5813, 5704, 5806, 5808, 5824,

     5819, 5804, 5841, 5844,    0, 5839, 5843, 5876, 5859, 5852,
     5853, 5870, 5722, 5856,    0, 2679, 5904, 5894, 5889,    0,
     5736, 5897, 5915, 5919, 5928, 5913, 5937, 5942, 2078, 5950,
     5975, 5936, 5943, 5962, 5954, 2681, 6033, 6074, 6115, 5973,
     2061, 6006, 6155, 5998, 5924, 5925, 5782, 5972, 5745, 6212,
     6269, 2035, 6136, 6141, 6009, 6048, 5948, 5897, 6013, 2013,
     2797, 5488, 5674, 6041, 6110, 6085, 6117, 5961, 6116, 6058,
     6146, 6054, 3226, 2763,10251, 6082, 6151, 6204, 6327,10251,
     1980, 6137, 6148, 5783, 5971, 5978, 2518, 6191, 6006, 6042,
     6131,10251,10251, 6182, 6184, 6192, 2725, 6208, 6178, 6198,

     6145, 1977, 1975, 2589,    0, 6190, 6214, 6223, 6208, 6228,
     6083, 6245, 6297, 6292, 6287, 6317, 6343, 6348, 1925, 3009,
     1844, 6291, 6204, 6349, 6358, 6352, 1848, 6214, 2216, 6233,
     6360, 6357, 3229, 6372, 6242, 6241, 6358, 3312, 6374, 1846,
     2637, 6353, 6430, 6355, 6383, 6364, 6410, 6365, 6414,    0,
     6390,    0, 6404, 6408, 6429, 6426, 6441, 6428, 6445, 6481,
     6461, 6469, 6254, 6492, 6472, 6471, 6503, 6487, 6509, 6511,
     6516, 6505, 6508, 6534, 6509, 6526, 6527, 6537, 6543, 6548,
    10251, 6447, 6508, 6510, 6549, 6533, 6552, 6553, 6607, 6648,
     6614, 6610, 6635, 6643, 2298, 6644, 6636, 2218, 6674, 6671,

     6639, 6668, 6679, 6674, 1811, 6564, 6650, 6652, 6651, 6654,
     6710, 6697, 6689, 2804, 6712, 6705, 3095,10251, 6695, 6734,
     2379,10251, 1806, 6713, 6433, 6246, 6698,10251, 6738, 6702,
     6705, 6266,10251, 6710, 6279, 6717, 1741, 6752, 6743, 6748,
     6755, 1687, 6757, 6754, 6801, 6792, 6808, 6818, 6802, 6789,
     2855, 6870,10251, 1683, 6713, 6758, 6769, 6343, 6795, 6836,
     3436, 6836, 6730, 3473, 3517,    0, 2717, 6805, 6890, 6761,
     6893, 6814, 6796, 6775, 6877, 6861, 6869, 6872, 6880, 6879,
     6806, 2883, 2806,10251, 1640, 6932, 6913, 6901, 6984, 6886,
     6908, 6947, 6911, 6961, 6952, 7001, 6936, 2338, 6914, 6949,

     6919, 6924, 6407, 7003, 6981, 6982, 7006, 7058, 7099, 6992,
     7139, 7006, 2464, 7197, 7024, 7021, 2551, 7045, 7017, 2605,
     7075, 6412, 6546, 7115, 6994, 7104, 2886,10251, 1618, 7121,
     7099, 6858, 7127, 7132, 2928,10251, 1557, 2969, 7090, 6928,
     2686, 7136, 6982,10251,10251, 7128, 2972, 7161, 7124, 1474,
     1457, 7137, 7213, 7173, 7265, 7306, 6992, 7136, 7152, 1415,
     2683, 7212, 3274, 1339, 7228, 1401, 6985, 2762, 3050, 7188,
     7197, 7203, 7242, 7234, 7235, 7191, 7296, 7304, 7305, 7356,
     2887, 3271, 3013, 2935, 7285, 7413, 7472, 7202, 7302, 7333,
     3396, 7293, 3091, 7513,10251, 1319, 7134, 7338, 7297, 7334,

     7006, 7159, 7135, 3093, 7338, 7309, 1238, 7360, 7553, 3009,
     3480, 7360, 3127, 7346, 7370, 2723, 7373, 7338, 3273, 2802,
     7265, 7215, 7379, 7357, 7611, 7415, 7498, 7382, 7652, 3313,
     7376, 3275, 1228, 7436,10251, 7341, 3052, 7408, 3354, 3321,
     7503, 1224, 7392, 3356, 7530, 3437, 3357, 6056, 7420, 3317,
     7693, 7734, 7391, 7487, 7497, 6094, 1215, 7391, 3190, 7508,
     7516, 7518, 7535, 7546, 7551, 7774, 3394, 1187, 7831, 6585,
     3397, 7888, 3512, 1149, 7543, 3525, 7946, 7987, 7581, 7550,
     6624, 7670, 6096, 8028, 7571, 7549, 7530, 7632, 7728, 7415,
     7550, 7574, 7618, 7661, 3563, 1108, 7760, 6627, 3585, 7767,

     7755, 3599, 7586, 7754, 7761, 7586,10251, 7763, 8069, 7628,
     1100, 1089, 7612, 3232, 3799,  958, 7753, 6682, 7079, 4150,
      944, 4921, 7083, 4621, 7675, 7770, 7630, 7752, 7785, 3439,
     7797, 7806, 7807, 7815,  942, 7829, 4674,  912, 8109,  880,
     3175, 7769, 7817, 6966, 7287, 7490, 8167, 8208, 7673, 7825,
     7848, 7730, 7819,  843, 7666, 7693, 7827, 7844,  777, 7881,
     4690,  748, 8090, 7850, 7881, 2816, 7878,10251, 4827, 8249,
     8290,  746, 3444, 7081,  550, 7239, 4848,  514, 7911, 7859,
     7734, 6063, 7883, 7866, 7890, 7953,  395, 8103, 7918, 8087,
     7494, 7634, 3630, 7907, 8065, 7923, 7963, 7964,  373, 7838,

     7870, 8075,  164, 8306, 8093, 6099, 8003,  129, 7710, 8103,
     7881, 8364, 8097, 8233, 8112, 8104, 7290, 6311, 5075, 5158,
     6848, 2931, 8005, 2976, 3054, 3100, 7910, 7702, 8113, 8148,
     3146, 8277, 8000, 8405, 8144, 8133, 8279, 7506, 7642,10251,
     8445, 8280, 8427,  120,   83, 7993, 8281, 8283,10251, 7681,
     8504, 8545,   62, 8585, 8127, 8184, 8004, 8566, 7969, 8045,
     8186,    4, 8284, 3320,10251, 8643, 8653, 8663, 8673, 8683,
     8693, 8703, 8713, 8723, 8733, 8743, 8753, 8763, 8773, 8783,
     8793, 8803, 8813, 8823, 8833, 8843, 8853, 8863, 8873, 8883,
     8893, 8903, 8913, 8923, 8933, 8943, 8953, 8963, 8973, 8983,

     8993, 9000, 9010, 9020, 9030, 9037, 9047, 9054, 9064, 9071,
     9081, 9088, 9098, 9108, 9118, 9125, 9135, 9142, 9152, 9159,
     9169, 9176, 9186, 9196, 9206, 9216, 9226, 9236, 9246, 9256,
     9266, 9273, 9277, 9287, 9297, 9307, 9317, 9324, 9328, 9338,
     9348, 9358, 9365, 9369, 9379, 9389, 9396, 9400, 9410, 9420,
     9430, 9437, 9441, 9451, 9461, 9471, 9478, 9482, 9492, 9502,
     9509, 9514, 9524, 9534, 9541, 9545, 9555, 9565, 9572, 9576,
     9586, 9596, 9606, 9616, 9626, 9636, 9643, 9653, 9663, 9673,
     9680, 9689, 9699, 9709, 9719, 9729, 9739, 9749, 9759, 9766,
     9776, 9786, 9796, 9806, 9816, 9826, 9836, 9845, 9849, 9859,

     9869, 9876, 9886, 9896, 9900, 9910, 9920, 9930, 9940, 9950,
     9960, 9970, 9980, 9990,10000,10010,10020,10030,10040,10050,
    10060,10070,10080,10090,10100,10110,10120,10130,10140,10150,
    10160,10170,10180,10190,10200,10210,10220,10230,10240
    } ;

static yyconst flex_int16_t yy_def[2140] =
    {   0,
     1966, 1967, 1968, 1969, 1966, 1967, 1966, 1967, 1965, 1965,
     1966, 1967,    9,   10, 1966, 1967, 1970, 1971, 1972, 1973,
        9,   14, 1966,   12, 1974, 1975, 1976, 1977, 1978, 1979,
     1980, 1981, 1982, 1983,    9,   10, 1984, 1965, 1985, 1986,
     1987, 1988, 1989, 1990, 1991, 1992, 1993, 1994, 1966,   12,
     1995, 1996, 1997, 1998, 1966,   50, 1965, 1965, 1965, 1999,
     1965, 1965, 2000, 1965, 2001, 2000, 2000, 1965, 2002, 2000,
     2003, 1965, 1965, 1965, 1965, 2000, 2000, 2000, 2000, 1965,
     1965, 2004, 2000, 1965, 2005, 1999, 2006, 2006, 2006, 2006,
     2006, 2006, 2006, 2006, 2006, 2006, 2006, 1965, 2001, 2007,

     2007,  101,  101,  101,  101,  101,  101,  101,  101,  101,
      101,  101,  101,  101, 2000, 2000, 2000, 2000, 2000, 2000,
     2000, 2000, 2000, 2000, 2000, 2000, 2006,   93, 2006,   98,
      101,  101,  101,  101,  101,  101, 2008, 2009, 2010, 2011,
       93,   98,  101,  101,  115, 2000, 1965, 1965, 1999, 1965,
     1965, 1965, 1965, 1965, 1965, 1965, 1965, 1965, 1965, 1965,
     1965, 2000, 2000, 2001, 2000, 2000, 2000, 2000, 2000, 2000,
     2000, 2000, 2000, 2000, 2000, 2000, 1965, 1965, 1999, 2012,
     2013, 1965, 1965, 2000, 1965, 2001, 2014, 2015, 2000, 2000,
     1965, 1965, 1965, 1999, 1965, 1965, 1965, 1965, 1965, 2000,

     2000, 1965, 2001, 2000, 2000, 2000, 2000, 2000, 1965, 1999,
     1965, 1965, 1965, 1965, 2000, 2001, 2000, 2000, 2000, 2000,
     2016, 2016, 2017, 2017,   98,  101,  101,  101,  101,  101,
      101,  101,  101,  101, 1965, 1999, 1965, 1965, 1965, 2000,
      115, 2001, 2000, 2000, 2000, 2000, 2000, 2000, 2000, 2000,
     2000, 2000, 2000, 2000, 2000, 2000, 1965, 1965, 1999, 1965,
     1965, 2000, 1965, 2001, 2000, 2000, 1965, 1999, 1965, 1965,
     2000, 2001, 2000, 2000, 1965, 2018, 1965, 1965, 2019, 2000,
     1965, 2020, 1965, 2000, 2021, 2000, 1965, 2022, 1965, 2023,
     2024, 1965, 2025, 2024, 2024, 2026, 1965, 2027, 2026, 2026,

     2028, 2029, 2028, 2028, 2030, 2031, 2030, 2030, 1965, 1965,
     1965, 2000, 1965, 2000, 2000, 2000, 1965, 2032, 2033, 2032,
     2000, 2034, 2035, 2034, 1965, 1965, 1965, 1965, 1965, 1965,
     1965, 2000, 2000, 2000, 2000, 2000, 2000, 2000, 1965, 1965,
     2036, 2036, 1965, 2000, 1965, 2037, 2037, 2036, 2000, 1965,
     2038, 2039, 2038, 2038, 2038, 2038, 2038, 2038, 2038, 2038,
     2038, 2038, 2038, 2038, 2038, 2038,   98, 2040, 2040,  369,
      369,  369,  369,  369,  369,  369,  369,  369,  369, 2000,
     2000,  101, 2041, 2042,  101,  101,  101,  101,  101,  101,
      101,  101,  101,  101,  101,  101,  101,  101,  101,  101,

      101,  101,  101,  101,  101,  101,  101,  101, 2000, 2000,
     2000, 2000, 2000, 2000, 2000, 2000, 2000, 2000, 2000, 2000,
     2000, 2000, 2000, 2000, 2000, 2000, 2000, 2000, 2000, 2000,
     2000, 2000, 2000, 2038, 2038, 2038,   98,  369,  369,  101,
      101,  101,  101,  101,  101, 2043, 2044, 2043, 2045, 2046,
     2045, 2047, 2048, 2047, 2049, 2050, 2049, 2038, 2038,   98,
      369,  101,  101,  101,  409, 2000, 2000, 1965, 1965, 1965,
     1965, 1965, 1965, 1965, 1965, 1965, 1965, 1965, 1965, 1965,
     1965, 1965, 2000, 2000, 2000, 2000, 2000, 2000, 2000, 2000,
     2000, 2000, 2000, 2000, 2000, 2000, 2000, 1965, 2051, 1965,

     1965, 1965, 2052, 2053, 2052, 2051, 1965, 1965, 2000, 2054,
     2000, 2000, 2000, 2055, 2056, 2055, 2054, 2051, 2000, 2000,
     1965, 1965, 1965, 1965, 2000, 2000, 2000, 2000, 1965, 2000,
     2057, 2058, 2057, 2057, 2057, 2059, 2060, 2059,  538,  538,
       98,  369,  369,  369,  369,  369,  369,  369,  101,  101,
      101,  101,  101,  101,  101,  101,  101, 1965,  409, 2000,
     2000, 2000, 1965, 1965, 2061, 1965, 2062, 2061, 1965, 1965,
     2063, 2000, 2064, 2063, 2000, 2000, 1965, 1965, 2065, 2066,
     2065, 1965, 2000, 2000, 2067, 2068, 2067, 2000, 2069, 2070,
     2069, 2071, 2072, 2071, 2073, 1965, 1965, 2073, 2073, 2073,

     2074, 2074, 2074, 2074, 2075, 2075, 2075, 2075, 2076, 2076,
     2076, 2076, 1965, 1965, 1965, 2000, 2000, 2000, 2077, 2077,
     2077, 2077, 2077, 2077, 2077, 2077, 2077, 2077, 2077, 2077,
     2077, 2078,  369,  369,  369,  369,  369,  369,  369,  369,
      369,  369,  369,  369,  369,  369, 2079, 2080, 2000,  101,
      101,  101,  101,  101,  101,  101,  101,  101,  101,  101,
      101,  101,  101,  101,  101,  101,  101,  101,  101,  101,
      101,  101,  101,  101,  101,  101, 2000, 2000, 2000, 2000,
     2000, 2000, 2000, 2000, 2000, 2000, 2000, 2000, 2000, 2000,
     2077, 2077, 2077,  369,  369,  101,  101,  101,  101,  101,

     2077, 2077,  369,  101,  101,  101, 2000, 1965, 1965, 1965,
     1965, 1965, 1965, 1965, 1965, 1965, 1965, 1965, 2000, 2000,
     2000, 2000, 2000, 2000, 2000, 2000, 2000, 2000, 2000, 2081,
     2081,  538,  538,  369,  369,  369,  369,  369,  369,  369,
      369,  101,  101,  101,  101,  101,  101,  101,  101, 1965,
     2000, 2000, 1965, 2000, 1965, 1965, 1965, 1965, 1965, 2000,
     2000, 2000, 2077, 2077, 2077, 2077, 2077, 2077, 2077, 2077,
     2077, 2077, 2077, 2077, 2077, 1965,  369,  369,  369,  369,
      369,  369,  369,  369,  369,  369,  369,  369,  369,  369,
      369, 2080, 1965,  101,  101,  101,  101,  101,  101,  101,

      101, 2000, 1965, 2000,  101,  101,  101,  101,  101,  101,
      101,  101,  101,  101,  101,  101,  101,  101,  101,  101,
      101,  101,  101,  101,  101, 2000, 2000, 2000, 2000, 2000,
     2000, 2000, 2000, 2000, 2000, 2000, 2000, 2000, 2000, 2000,
     2000, 2000, 2000, 2077, 2077, 2077,  369,  369,  101, 2000,
     1965, 2000,  101,  101,  101,  101,  101, 2077, 2077,  369,
      101,  101,  101, 2000, 2000, 2000, 1965, 1965, 1965, 1965,
     1965, 1965, 1965, 1965, 1965, 1965, 1965, 1965, 2000, 2000,
     2000, 2000, 2000, 2000, 2000, 2000, 2000, 2000, 2000, 2000,
     2081, 2081,  538,  538,  369,  369,  369,  369,  369,  369,

      369,  369,  101,  101,  101, 2000,  101,  101,  101,  101,
      101, 1965, 2000, 1965, 2000, 2000, 2000, 1965, 2000, 1965,
     1965, 1965, 2000, 2000, 2000, 2077, 2077, 2077, 2077, 2077,
     2077, 2077, 2077, 2077, 2077, 2077, 2082, 1965, 2077,  369,
      369,  369,  369,  369,  369,  369,  369,  369,  369,  369,
      369,  369,  369,  369,  369,  369,  101,  101,  101,  101,
      101,  101,  101,  101,  101,  101,  101,  101,  101,  101,
      101,  101,  101,  101,  101,  101,  101,  101,  101, 2000,
     2000, 2083, 2000, 2000,  101,  101,  101,  101,  101, 2084,
     2000,  101,  101, 2000, 2085, 2000, 2000, 2000, 2000, 2000,

     2000, 2000, 2000, 2000, 2000, 2000,  980, 2000, 2086, 2000,
     2000, 2000, 2000, 2000, 2000, 2000, 2087, 2077, 2077, 1965,
     1965,  369,  369,  369,  101,  101,  101,  101,  101, 2000,
     2000, 2077, 2077,  369,  101,  101,  101, 2000, 2000, 1965,
     1965, 1965, 1965, 1965, 1965, 1965, 1965, 1965, 1965, 1965,
     2000, 2000, 2000, 2000, 2000, 2000, 2000, 2000, 2000, 2000,
     2000, 2081, 2081,  538,  538,  369,  369,  369,  369,  369,
      369,  369,  369,  101,  101,  101, 2000,  101,  101,  101,
     2000, 2088, 2000, 2000, 2089, 1965, 2000, 2000, 1965, 2000,
     1965, 1965, 1965, 2000, 2000, 2000, 2077, 2077, 2077, 2077,

     2077, 2077, 2077, 2077, 2077, 2077, 2077, 2090, 1965, 2077,
      369,  369,  369,  369,  369,  369,  369,  369,  369,  369,
      369,  369,  369,  369,  369,  369,  369,  369,  101, 2000,
      101,  101,  101,  101,  101,  101,  101,  101,  101,  101,
      101,  101,  101,  101,  101,  101,  101,  101,  101,  101,
      101, 2000, 2000, 2000, 2000, 2000, 2083, 2091, 2000, 2000,
     2000,  101,  101,  101,  101,  101, 2092, 2000,  101,  101,
     2085, 2093, 2000, 2000, 2000, 2000, 2000, 2000, 2000, 2000,
     2000, 2000, 2000, 2086, 2094, 2000, 2000, 2000, 2000, 2000,
     2000, 2000, 2000, 2087, 2095, 2077, 2077, 1965, 1965,  369,

      369,  369,  101,  101,  101,  101,  101, 2000, 2000, 2077,
     2077,  369,  101,  101,  101, 2000, 2000, 1965, 1965, 1965,
     1965, 1965, 1965, 1965, 1965, 1965, 1965, 1965, 2000, 2000,
     2000, 2000, 2000, 2000, 2000, 2000, 2000, 2000, 2000, 2081,
     2081,  538,  538,  369,  369,  369,  369,  369,  369,  101,
      101,  101, 2000,  101,  101,  101, 2000, 2088, 2096, 2000,
     2000, 2000, 2089, 2097, 1965, 2000, 2000, 1965, 1965, 2000,
     2000, 2077, 2077, 2077, 1965, 1965, 2077, 2077, 2077, 2077,
     2077, 1965, 2098, 2099, 2090,  369,  369,  369,  369,  369,
      369,  369,  369,  369,  369,  369,  369,  369,  369,  369,

      369,  369,  101,  101,  819,  101,  101, 2000,  101,  101,
      101,  101,  101,  101,  819, 2000, 2079,  101,  101,  819,
      101,  101,  101,  101, 2000, 2000, 2000, 2000, 2091, 1965,
     2000,  101,  101,  101,  101, 2000, 2100, 2101, 2092,  101,
     2093, 2000, 2000, 2000, 2000, 2000, 2000, 2000, 2000, 2000,
     2000, 2094, 1965, 2000, 2000, 2000, 2000, 2000, 2000, 2095,
     2077, 1965, 1965,  369,  369,  369,  101,  101,  101,  101,
     2000, 2000, 2077, 2082, 1965,  369,  101,  101, 2084, 1965,
     2000, 2000, 2000, 1965, 1965, 1965, 1965, 1965, 1965, 1965,
     1965, 1965, 1965, 2000, 2000, 2000, 2000, 2000, 2000, 2000,

     2000, 2000, 2000, 2081,  538,  369,  369,  369,  369,  369,
      369,  101,  101, 2000, 2000,  101,  101,  101, 2096, 1965,
     2097, 1965, 1965, 2000, 2000, 2000, 1965, 1965, 2000, 2000,
     2077, 2077, 2077, 1965, 1965, 1965, 2077, 2077, 2077, 2098,
     2102,  369,  369,  369,  369,  369,  369,  369,  369, 1443,
      369, 1443,  369,  369,  369,  369,  369,  101,  101,  101,
      101, 2000,  101,  101,  101,  101,  101,  101, 2079, 2079,
     2079,  101,  101,  101,  101, 2000, 2000, 2000, 2000, 1965,
     1965, 1965, 1965, 1965,  101,  101,  101,  101, 2100, 2103,
      101, 2000, 2000, 2000, 2000, 2000, 2000, 2000, 1965, 2000,

     2000, 2000, 2000, 2000, 1965, 1965, 1965,  369,  369,  369,
      101,  101,  101, 2000, 2000, 2000, 2082, 1965,  369,  101,
     1379, 1965, 2000, 2000, 2000, 1965, 1965, 1965, 1965, 1965,
     1965, 1965, 1965, 1965, 2000, 2000, 2000, 2000, 2000, 2000,
     2000, 2000, 2000,  369,  369,  369,  369,  369,  101, 2000,
     2000, 2104, 1965, 2000, 1965, 2000, 2000, 1965, 2000, 2077,
     2077, 1965, 1965, 2077, 2077, 2105, 2102,  369,  369,  369,
      369,  369,  369,  369,  369,  369,  369,  369,  369,  369,
      101,  819, 2000, 1965, 2000,  101, 2000,  101, 2106,  101,
      101, 2079, 2079,  101,  101,  101, 2000, 2000, 2000, 2000,

     1965, 1965, 1965,  101,  101,  101,  101, 2107, 2103,  101,
     2000, 2000, 2000, 2106, 2000, 2000, 2000, 2000, 2000, 2000,
     2000, 1965, 1965,  369,  369,  369, 2000, 1965, 2000,  101,
      101, 2000, 2000,  369, 2000, 1965, 2000, 2000, 2000, 1965,
     1965, 1965, 1965, 1965, 1965, 2000, 2000, 2000, 2000, 2000,
     2000,  369,  101, 2000, 2104, 2108, 1965, 2000, 2000, 1965,
     2000, 2077, 2082, 2109, 1965, 1965, 1965, 1965, 1443,  369,
      369,  369,  369,  369,  369,  369,  369,  369,  101, 2000,
     2110, 2000, 1379, 2111, 2000, 2000, 2112,  101,  101, 2079,
     2000, 2079, 2079, 2113, 1965, 2000, 2000, 1686, 2000, 2000,

     1965, 1965, 1965, 2000,  101,  101, 1686,  101, 2000, 2114,
     2000, 2000, 1686, 2000, 2000, 2000, 2000, 2000, 1686, 2000,
     1965, 1965,  369,  369, 2115,  101, 2000, 2000, 2115, 2000,
     1965, 1965, 2116, 1965, 1965, 1965, 1965, 2000, 2000, 2117,
     2000, 2000, 2000, 2000,  369, 2000, 2118, 2000, 2000, 2000,
     2119, 2108, 1965, 2000, 2000, 2077, 2109, 1965, 1965,  369,
      369,  369,  369,  369,  101, 2000, 2110, 2120, 2000, 2000,
     2121, 2000, 2111, 2122, 2000, 2000, 2123, 2112,  101,  101,
     1379, 2079, 2079, 2124, 2000, 2000, 2000, 2000, 2000, 1965,
     1965, 1965,  101,  101, 2114, 2125, 2000, 2000, 2126, 2000,

     2000, 2000, 2000, 2000, 2000, 1965, 1965,  369, 2127, 2000,
     2000, 2116, 1965, 1965, 2117, 2116, 2000, 2000, 2000, 2118,
     2128, 2000, 2000, 2129, 2000, 2000, 1965, 2000, 2000, 1965,
      369,  369,  369,  369, 2120, 1965, 2121, 2130, 2000, 2122,
     1965, 2000,  101, 2079, 2000, 2131, 2132, 2124, 2000, 2000,
     2000, 2000, 2000, 1965, 1965, 1965,  101,  101, 2125, 1965,
     2126, 2133, 2000, 2000, 2000, 2000, 2000, 1965, 2000, 2134,
     2127, 2000, 1965, 2000, 2128, 1965, 2129, 2135, 2000, 2000,
     1965, 2000, 2000,  369,  369,  369, 2130, 1965, 2000,  101,
     2131, 2131, 2136, 2000, 2000, 2000, 2000, 2000, 1965, 1965,

     1965,  101, 2133, 1965, 2000, 2000, 2000, 2135, 1965, 2000,
     1965, 2137, 2000,  369,  369, 2000, 2000, 2000, 2136, 1965,
     1965, 2000, 2000, 2000, 2000, 2000, 1965, 1965,  101, 2000,
     2000, 2000, 1965, 2138, 2000,  369, 2000, 2000, 1965, 1965,
     2000, 2000, 1941, 1941, 1965, 1965, 2000, 2000, 1965, 2000,
     2139, 2138, 2000, 2000, 2000, 2000, 1965, 2000, 2000, 2000,
     2000, 1965, 2000, 2000,    0, 1965, 1965, 1965, 1965, 1965,
     1965, 1965, 1965, 1965, 1965, 1965, 1965, 1965, 1965, 1965,
     1965, 1965, 1965, 1965, 1965, 1965, 1965, 1965, 1965, 1965,
     1965, 1965, 1965, 1965, 1965, 1965, 1965, 1965, 1965, 1965,

     1965, 1965, 1965, 1965, 1965, 1965, 1965, 1965, 1965, 1965,
     1965, 1965, 1965, 1965, 1965, 1965, 1965, 1965, 1965, 1965,
     1965, 1965, 1965, 1965, 1965, 1965, 1965, 1965, 1965, 1965,
     1965, 1965, 1965, 1965, 1965, 1965, 1965, 1965, 1965, 1965,
     1965, 1965, 1965, 1965, 1965, 1965, 1965, 1965, 1965, 1965,
     1965, 1965, 1965, 1965, 1965, 1965, 1965, 1965, 1965, 1965,
     1965, 1965, 1965, 1965, 1965, 1965, 1965, 1965, 1965, 1965,
     1965, 1965, 1965, 1965, 1965, 1965, 1965, 1965, 1965, 1965,
     1965, 1965, 1965, 1965, 1965, 1965, 1965, 1965, 1965, 1965,
     1965, 1965, 1965, 1965, 1965, 1965, 1965, 1965, 1965, 1965,

     1965, 1965, 1965, 1965, 1965, 1965, 1965, 1965, 1965, 1965,
     1965, 1965, 1965, 1965, 1965, 1965, 1965, 1965, 1965, 1965,
     1965, 1965, 1965, 1965, 1965, 1965, 1965, 1965, 1965, 1965,
     1965, 1965, 1965, 1965, 1965, 1965, 1965, 1965, 1965
    } ;

static yyconst flex_int16_t yy_nxt[10315] =
    {   0,
     1965,  468,   59,   60,   61, 1899,   61,   64,   65,   66,
      469,   66,   80,   81,   60,   61,  318,   61,   82,  321,
      313,  351,  313,  319,   83,   84,   65,   66,  352,   66,
       85,   59,   86,   61,  312,   61,  312,   59,   60,   61,
       62,   61,   87,  485,  313,   67,   58,   68,   59,   60,
       61,   62,   61,   58,   58,   58,   58,   58,   58,   58,
       58,   58,   58,   67,  313,   87,   64,   65,   66,   62,
       66,  310,  446,  310,  452,   62,   59,   86,   61,  447,
       61,  453,  141,   87, 1899,  129,   62,   63,   70,   64,
       65,   66,  142,   66,   63,   63,   63,   63,   63,   63,

       63,   63,   63,   63,   67,  141,   87,  311,  129,  127,
      143,  348,  128,   87,   62,  129,  596,  349,  597,  145,
      100, 1944,  313,  144,  315,  329,  315,   67,   72,   59,
       60,   61,  127,   61,  143,  128,   87, 1909,  129,  146,
      258,  259,  260,  100,  260,   73,  144,  330,  329,   74,
      192,  193,  194,  195,  313,  195,  196,  197,  503,  198,
      316,   75,  595,  146,  595,  504,  312,   62,  380,   73,
      330,  331, 1904,   74,  201,  202,  203,  204,  261,  204,
      205,  206,  313,  207,   75,   76,   64,   65,   66,  199,
       66,   59,  210,  211,  331,  211,  212,  263,  264,  265,

      213,  265,   77,  339,  340,  387,   78,  313,  336,  341,
      344,  345,  473,  208,  435,  385,  346,  396,   79,  312,
      313,  312,  313,  596,   67,  597,   77,  937,  387,  214,
       78,  336,  513,  486,  312,  266,  473,  435,  385,  938,
      396,   79,   58,   58,   59,   86,   61,   87,   61,   58,
       58,   58,   58,   58,   58,   58,   58,   58,   58,   88,
       87,   87,   89,   90,   87,   87,   87,   91,   87,   87,
       87,   87,   87,   92,   93,   94,   95,   96,   97,   87,
       87,   87,   62,   88,   87,   87,   89,   90,   87,   87,
       87,   91,   87,   87,   87,   87,   92,   93,   94,   95,

       96,   97,   87,   87,   87,   63,   98,   64,   99,   66,
      100,   66,   63,   63,   63,   63,   63,   63,   63,   63,
       63,   63,  101,  102,  103,  104,  105,  106,  100,  100,
      107,  100,  100,  108,  100,  100,  109,  110,  111,  112,
      113,  114,  100,  100,  100,   67,  101,  102,  103,  104,
      105,  106,  100,  100,  107,  100,  108,  100,  100,  109,
      110,  111,  112,  113,  114,  100,  100,  100,  115,   64,
       99,   66,  351,   66, 1899,  351,   59,  268,  269,  352,
      269,  313,  352,  313,  518,  116,  117,  118,  119,  120,
      519,  605,  121,  605,  310,  122,  310,  357,  354,  123,

      124,  125,  126, 1888,   64,  272,  273,   67,  273,  116,
      117,  118,  119,  120,  270,  337,  121,  338,  122,  465,
      357,  354,  123,  124,  125,  126,  130,   64,  216,  217,
      311,  217,  218,   59,   60,   61,  219,   61,  337,  466,
      338,  472,  274,  481,  131,  482,  132,  483,  313,  520,
      313,   59,  236,  237,  133,  237,  484,  134,  135,  351,
      136,  528,  313,  466,  472,  220,  352,  481,  131,  482,
      132,   62,  292,  293,  294,  531,  294,  133,  238,  355,
      134,  135,  532,  136,   58,   58,   59,   60,   61,  239,
       61,   58,   58,   58,   58,   58,   58,   58,   58,   58,

       58,  238,  313,  355,  297,  298,  299,  351,  299,  313,
      295,   59,  302,  303,  352,  303,   64,  306,  307,  364,
      307,  312, 1909,  312,   62,   63,   63,   64,   65,   66,
      428,   66,   63,   63,   63,   63,   63,   63,   63,   63,
       63,   63,  300,  364,  351,  351,   59,   60,   61,  304,
       61,  352,  352,  428,  308,  313,  351,  315, 1876,  315,
      385,  363,  615,  352,  398,   67,   58,   58,   59,   60,
       61,  358,   61,   58,   58,   58,   58,   58,   58,   58,
       58,   58,   58,  385,   62,  363,  615,  398,  351,  356,
      521,  313,  313,  316,  358,  352,  596,  530,  597,  522,

      365,  527,  474,  475,  476,  313,   62,   63,   63,   64,
       65,   66,  356,   66,   63,   63,   63,   63,   63,   63,
       63,   63,   63,   63,  365,  474,  475,  476,  388,  755,
      390,  348,  385,  385,  351,  389,  391,  349,  310,  427,
      310,  352,  756,  385,  325,  313,  397,   67,  148,   59,
      149,  150,  388,  150,  390,  385,  385,  151,  389,  391,
      152,  326,  427,  366,  153,  327,  385,  154,  155,  397,
      385,  421,  156,  403,  311,  313,  408,  328,  157,  158,
      385,  159,  160,  313,  527,  326,  366,  161,  153,  327,
      385,  154,  155,  385,  421,  313,  156,  403,  395,  408,

      328,  157,  158,  385,  159,  160,  163,   64,  164,  165,
      392,  165,  393,  385,  577,  166,  313,  422,  167,  489,
      394,  395,  168,  578,  423,  169,  170,  444,  714,  313,
      171,  496,  313,  392,  385,  393,  172,  173,  348,  174,
      175,  422,  489,  394,  349,  176,  168,  423,  313,  169,
      170,  444,  714,  313,  171,  496, 1904,  385,  424,  172,
      173,  429,  174,  175,   58,  177,  178,  179,   61,  313,
       61,  181,   58,   58,  182,   58,   58,   58,   58,  183,
       58,  424,  313,  313,  429, 1860,  498,  430,  509,  313,
      648,  313,  499,  518,  510,  500,  649,  511,  497,  519,

      501,  431,  512,  432,   62,   63,  184,  185,  186,   66,
      430,   66,  188,   63,   63,  189,   63,   63,   63,   63,
      190,   63,  497,  525,  313,  431,  432,  310,  433,  310,
      351,  565,  526,  518,  583,  313,  566,  352,  567,  519,
      313,  313,  365,  584, 1899,   67,   58,   58,   59,   60,
       61,  433,   61,   58,   58,   58,   58,   58,   58,   58,
       58,   58,   58,  311,  436,  404,  365,  425,  490,  426,
      388,  313,  351,  579,  385,  589,  385,  440,  222,  352,
      580,  313,  590,  312,  405,  312,   62,  436, 1841,  404,
      425,  490,  426,  312,  388,  380,  313,  385,  434,  385,

      440,  222,   63,   63,   64,   65,   66,  405,   66,   63,
       63,   63,   63,   63,   63,   63,   63,   63,   63,  406,
     1888,  434,  487,  588,  313,  313,  468,  332,  313,  437,
      385,  558,  318,  313,  224,  469,  392,  313,  441,  319,
      313,  407,   67,  406,  333,  487,  394,  438,  334,  439,
     1836,  421, 1876,  385,  558,  318,  488,  224,  225,  392,
      335,  441,  319,  425,  407,  467, 1735,  559,  333,  394,
      491,  438,  334,  439,  421,  100,  226,  227,  228,  100,
      488,  385,  229,  335,  442,  230,  425,  560,  467,  231,
      232,  233,  234,  491,  321,  313,  485,  313,  351,  100,

      226,  227,  228,  100,  385,  352,  229,  442,  230,  485,
      313,  560,  231,  232,  233,  234,  240,  241,   64,  242,
      243,  240,  243,  240,  240,  240,  240,  240,  240,  240,
      240,  240,  240,  240,  244,  245,  246,  247,  248,  240,
      240,  249,  240,  240,  250,  251,  240,  240,  252,  253,
      254,  255,  240,  240,  240,  240,  256,  240,  244,  245,
      246,  247,  248,  240,  240,  249,  240,  250,  251,  240,
      240,  252,  253,  254,  255,  240,  240,  240,  240,   58,
       58,  275,   60,   61,  313,   61,   58,   58,   58,  277,
       58,   58,   58,   58,   58,   58,  313, 1735,  564,  520,

      313,  313,  313,  315,  313,  315,  315,  310,  315,  310,
      312,  313,  312,  315,  458,  315, 1860,  459,  427,   62,
       63,   63,  278,   65,   66,  424,   66,   63,   63,   63,
      280,   63,   63,   63,   63,   63,   63,  458,  460,  316,
      459,  427,  316,  311,  520,  313,  528,  313,  424,  316,
      563,  310,  310,  310,  310,  329,  461, 1841,  439,  556,
       67,   58,  281,  275,   60,   61,  385,   61,   58,   58,
       58,  283,   58,   58,   58,   58,   58,   58,  329,  351,
      461,  313,  439,  556,  483,  313,  352,  311,  311,  385,
      564,  313,  315,  484,  315, 1836,  385,  385,  553,  552,

      431,   62,   63,  284,  278,   65,   66,  394,   66,   63,
       63,   63,  286,   63,   63,   63,   63,   63,   63,  385,
      385,  553,  552, 1666,  431,  430,  313,  313,  316,  315,
      394,  315,  599,  607,  599,  607, 1735,  385,  330, 1707,
      554,  313,   67,   58,   58,  287,   60,   61,  430,   61,
       58,   58,   58,   58,   58,   58,   58,   58,   58,   58,
      385,  330,  313,  554,  446,  316,  339,  340,  600,  608,
      446,  447,  341,  452,  312,  313,  312,  447,  433,  331,
      453,  313,  531,   62,   63,   63,  289,   65,   66,  532,
       66,   63,   63,   63,   63,   63,   63,   63,   63,   63,

       63,  433,  331,  428,  313,  388,  406,  549,  313,  385,
      534,  385,  462,  535,  550,  432,  601,  385,  601,  313,
      609,  313,  609,  569,   67,   63,  428,   65,  445,  388,
      406,  549,  385,  534,  385,  462,  535,  550,  432,  613,
      385,  422,   63,   63,   63,   63,   63, 1666,  423,   63,
      715,  445,   63,  570,  614,  521,   63,   63,   63,   63,
      528,  313,  613,  577,  522,  422,   63,   63,   63,   63,
       63,  423,  578,   63,  715,   63,  570,  614,  313,   63,
       63,   63,   63,  312,  312,  313,  312,  312,  322,  312,
      312,  312,  312,  312,  312,  323,  312,  312,  312,  312,

      313,  477,  937,  390,  588,  313,  385,  429,  313,  551,
      404,  406,  313,  313,  938,  478, 1091,  479,  575,  313,
      480,  385,  385,  312,  351,  477,  425,  390,  561,  385,
      429,  352,  551,  557,  404,  406,  359,  313,  478,  336,
      479,  562,  337,  480,  385,  385,  385,  385,  576,  425,
      360,  561,  361,  618,  452,  362,  557,  344,  345,  313,
      359,  453,  336,  346,  562,  337,  381,  313,  648,  385,
      385,  576,  383,  360,  649,  361,  313,  618,  362,  312,
      367,  313,  312,  312,  368,  312,  312,  312,  312,  312,
      312,  312,  312,  312,  312,  312,  368,  369,  370,  371,

      372,  373,  368,  368,  374,  368,  368,  375,  368,  368,
      368,  376,  377,  378,  379,  368,  368,  368,  368,  312,
      368,  369,  370,  371,  372,  373,  368,  368,  374,  368,
      375,  368,  368,  368,  376,  377,  378,  379,  368,  368,
      368,  368,  312,  381,  313,  312,  312,  382,  312,  383,
      312,  312,  312,  312,  384,  312,  312,  312,  312,  313,
      525,  313,  313,  313,  603,  611,  603,  611,  313,  526,
      503,  503,  531,  351,  313, 1158,  313,  504,  504,  532,
      352, 1159,  312,  312,  381,  313,  312,  312,  382,  312,
      383,  312,  312,  312,  312,  384,  312,  312,  312,  312,

      604,  612,  338,  616,  617,  629,  644,  716,  351,  313,
      351,  386,  325,  633,  351,  352, 1172,  352,  650,  313,
      313,  352, 1159,  312,  492,  338,  616,  617,  629,  326,
      644,  716,  620,  327,  386,  399,  633,  619,  493,  628,
      494,  650,  313,  495,  633,  328,  385,  637,  492,  400,
     1007,  401,  684,  326,  402,  620,  312,  327,  657,  399,
      619,  493,  628,  494,  351,  385,  495,  633,  328,  385,
      637,  352,  400,  351,  401,  684,  351,  402,  409,  313,
      352, 1185,  657,  352,  351,  313,  531, 1186,  385,  313,
      638,  352,  639,  532,  621,  410,  411,  412,  413,  414,

      351,  624,  415,  662,  313,  416,  622,  352,  385,  417,
      418,  419,  420,  638,  623,  639,  631,  621,  351,  410,
      411,  412,  413,  414,  624,  352,  415,  662,  416,  622,
      421,  385,  417,  418,  419,  420,  399,  623,  625,  732,
      631,  635,  313,  313,  633,  633,  641,  385,  636,  351,
      400,  579,  443,  421,  351,  402,  352,  579,  580,  351,
      399,  352,  625,  732,  580,  635,  352,  633,  633,  641,
      385,  636,  627,  400,  626,  443,  427,  630,  402,  312,
      312,  313,  312,  312,  449,  312,  312,  312,  312,  312,
      312,  450,  312,  312,  312,  312,  627,  498,  626,  427,

      630,  509,  313,  499,  583,  313,  500,  510,  313,  565,
      511,  501, 1505,  584,  566,  512,  567,  588,  313,  312,
      312,  312,  313,  312,  312,  455,  312,  312,  312,  312,
      312,  312,  456,  312,  312,  312,  312,  332,  313,  633,
      633,  385,  642,  633,  313,  633,  664, 1440,  640, 1091,
      565,  643, 1420,  645,  333,  566,  633,  567,  334,  733,
      312,  399,  633,  633,  385,  642,  633,  646,  633,  664,
      335,  640,  385,  424,  643,  400,  645,  463,  333,  633,
      464,  313,  334,  733,  589,  399, 1195,  589, 1007,  313,
      646,  590, 1186,  335,  590,  385,  424,  689,  400,  385,

      463,  708,  651,  464,  312,  312,  313,  312,  312,  514,
      312,  312,  312,  312,  312,  312,  515,  312,  312,  312,
      312,  689,  385,  776,  708,  651,  937,  351, 1094,  313,
      351, 1173,  313, 1420,  352, 1094,  313,  352,  938,  385,
      653,  654,  385,  655,  312,  312,  312,  313,  312,  312,
      536,  312,  312,  312,  312,  312,  312,  537,  312,  312,
      312,  312,  385,  653,  654,  385,  655,  826,  313,  313,
     1016,  313, 1259,  383,  994,  313, 1017,  313, 1260,  313,
      995,  385,  313,  660,  678,  312,  312,  312,  313,  312,
      312,  536,  312,  312,  312,  312,  312,  312,  537,  312,

      312,  312,  312,  652,  385,  385,  660,  658,  678,  385,
      385,  385,  313,  656,  385,  385,  659,  661,  663,  539,
      667, 1353,  540, 1168, 1173,  313,  312,  652,  385,  313,
      385,  658,  385,  385,  385,  668,  656,  385,  385,  659,
      661,  663,  539, 1353,  667,  540,  541,  682,  665,  313,
     1020,  385,  673,  385,  351, 1344,  313,  666,  668, 1021,
      385,  352,  385,  368,  542,  543,  544,  368,  431, 1330,
      545,  682,  665,  546,  385,  465,  673,  368,  547,  368,
      548,  666,  669,  385,  670,  385, 1330,  368,  542,  543,
      544,  368,  431,  385,  545,  466,  546, 1440,  385,  671,

      368,  547,  368,  548,  399,  676,  669,  672,  670,  385,
      313,  313,  385,  385,  674,  385,  385,  675,  400,  466,
      401,  385,  671,  555, 1020, 1016,  313,  351,  399,  676,
      672, 1017,  385, 1021,  352,  385,  385,  674,  385, 1420,
      675,  400,  691,  401,  430,  432,  555,  312,  312,  313,
      312,  312,  571,  312,  312,  312,  312,  572,  312,  573,
      312,  312,  312,  312,  313,  351,  691,  430,  432,  351,
     1108,  531,  352, 1257,  313, 1420,  352, 1284,  532, 1082,
      313, 1083,  702,  681,  731,  701,  313,  312,  312,  312,
      313,  312,  312,  585,  312,  312,  312,  312,  312,  312,

      586,  312,  312,  312,  312,  313,  702,  681,  731,  701,
      313, 1160,  313, 1187,  313, 1084,  313, 1094,  313, 1173,
      313, 1085, 1161,  433, 1188,  687,  685,  688,  312,  312,
      312,  313,  312,  312,  592,  312,  312,  312,  312,  312,
      312,  593,  312,  312,  312,  312,  433,  437,  460,  687,
      685,  688, 1030,  313, 1264,  313, 1130,  313,  995, 1353,
     1260, 1031,  383, 1353,  709,  438,  461,  439,  439,  312,
      312,  312,  313,  312,  312,  322,  312,  312,  312,  312,
      312,  312,  323,  312,  312,  312,  312,  709, 1158,  438,
      461,  439,  439,  313, 1159,  313, 1172, 1185, 1195, 1614,

      803,  804, 1159, 1186, 1186,  638,  710,  695,  711,  727,
      312,  312,  312,  313,  312,  312,  312,  312,  312,  312,
      312,  312,  312,  428,  312,  312,  312,  312,  638,  710,
      695,  711,  313,  727,  351, 1330, 1387, 1397,  313, 1698,
      313,  352, 1388, 1398,  313,  750,  428,  385,  653,  696,
      707,  312,  312,  312,  313,  312,  312,  322,  312,  312,
      312,  312,  312,  312,  323,  312,  312,  312,  312,  750,
      385,  653,  696, 1275,  707, 1261,  313,  351,  531, 1276,
     1521, 1522, 1523, 1330,  352,  532, 1262,  385,  385,  653,
      704,  700,  312,  312,  381,  313,  312,  312,  368,  312,

      383,  312,  312,  312,  312,  632,  312,  312,  312,  312,
      385,  385,  653,  704,  700, 1282, 1091, 1259, 1264,  351,
      313, 1283,  313, 1260, 1260,  313,  352,  313,  313,  313,
      313,  313,  313,  312,  312,  381,  313,  312,  312,  368,
      312,  383,  312,  312,  312,  312,  632,  312,  312,  312,
      312,  422, 1109,  425,  429,  426,  680,  677,  423,  679,
      937,  686,  634, 1275,  351, 1713,  313, 1282, 1091, 1276,
      313,  352,  938, 1283,  312,  422,  425,  429,  426,  680,
      677,  423,  679,  313,  686,  634,  312,  381,  313,  312,
      312,  312,  312,  383,  312,  312,  312,  312,  683,  312,

      312,  312,  312, 1160,  313,  351,  712,  313,  713,  697,
      757,  635,  352,  690, 1161,  633, 1108,  385,  694, 1387,
      717,  683,  313, 1284,  313, 1388,  312,  409,  313,  712,
      351,  713,  693,  697,  757,  635,  690,  352,  633,  705,
      385,  694,  385,  717,  410,  411,  412,  413,  414,  698,
      626,  415, 1716,  313,  416,  693,  692,  385,  417,  418,
      419,  420,  758,  705,  313,  385,  718,  313,  410,  411,
      412,  413,  414,  698,  626,  415,  669,  416,  670,  692,
      385,  417,  418,  419,  420,  666,  758,  385,  385,  718,
      719,  699,  531,  937,  531,  793,  351,  351,  776,  532,

      669,  532,  670,  352,  352,  938, 1719,  313,  769,  666,
      385,  385,  730,  719,  699,  312,  312,  313,  312,  312,
      449,  312,  312,  312,  312,  312,  312,  450,  312,  312,
      312,  312,  769, 1187,  313,  937,  730, 1257,  313,  351,
      755,  313, 1441, 1082, 1188, 1083,  352,  938,  313, 1566,
      633,  753,  633,  736,  737,  312,  312,  312,  313,  312,
      312,  312,  312,  312,  312,  312,  312,  312,  720,  312,
      312,  312,  312,  633,  753,  633,  736,  737, 1261,  313,
     1316,  313, 1336,  313, 1094,  313, 1317, 1732, 1337, 1262,
      747,  720,  633, 1733,  738,  385,  312,  312,  312,  313,

      312,  312,  449,  312,  312,  312,  312,  312,  312,  450,
      312,  312,  312,  312,  747,  633,  313,  738,  385, 1374,
     1375, 1375, 1441,  351, 1716,  313, 1397,  313,  793, 1566,
      352,  938, 1398,  633,  751,  313,  739,  312,  312,  312,
      313,  312,  312,  455,  312,  312,  312,  312,  312,  312,
      456,  312,  312,  312,  312,  559,  633,  313,  751,  739,
      984,  313,  313, 1759, 1374, 1375, 1375,  313,  721,  984,
     1666,  313,  984,  385,  743,  560,  938,  759,  312,  312,
      312,  313,  312,  312,  312,  312,  312,  312,  312,  312,
      312,  721,  312,  312,  312,  312,  385,  743, 1505,  560,

      759,  313,  351, 1173,  313, 1514,  313, 1583,  313,  352,
      313,  383,  313,  383,  313,  313,  313, 1716,  313,  312,
      312,  312,  313,  312,  312,  455,  312,  312,  312,  312,
      312,  312,  456,  312,  312,  312,  312,  635,  706,  313,
      425,  633,  467,  722,  703,  723,  724,  313,  385,  313,
      313,  728,  385,  668,  313,  633, 1655, 1553, 1554,  746,
      312,  635,  706,  425,  633,  467,  722,  703,  723,  724,
      725,  385,  726,  734,  728,  385,  668,  633,  633,  351,
      735,  729,  746,  313, 1680,  313,  352, 1627,  313, 1768,
     1681,  313, 1682,  383,  725, 1769,  726,  734,  868,  768,

      633,  752,  760,  735,  729,  312,  312,  313,  312,  312,
      514,  312,  312,  312,  312,  312,  312,  515,  312,  312,
      312,  312,  868,  768,  351,  752,  760,  984,  313, 1635,
      313,  352, 1941,  313,  740,  383,  984, 1774, 1262,  984,
      385,  633,  775, 1691,  749,  312,  312,  312,  313,  312,
      312,  312,  312,  312,  312,  312,  312,  312,  740,  312,
      312,  312,  312,  385,  633,  313,  775,  749,  351,  351,
     1729,  851,  852, 1739,  313,  352,  352, 1943,  313, 1740,
      582,  817,  761,  869,  764,  765,  312,  312,  312,  313,
      312,  312,  514,  312,  312,  312,  312,  312,  312,  515,

      312,  312,  312,  312,  817,  351,  761,  869,  764,  765,
     1481, 1796,  352,  582, 1683,  313,  312, 1797,  313, 1481,
     1684,  774, 1481,  633,  385,  801,  777,  312,  312,  312,
      313,  312,  312,  536,  312,  312,  312,  312,  312,  312,
      537,  312,  312,  312,  312,  774,  633,  385,  801,  777,
      937, 1680,  566, 1814,  351, 1944,  313, 1681,  385, 1682,
     1735,  352,  938,  633,  779,  780,  744,  819,  312,  312,
      312,  313,  312,  312,  312,  312,  312,  312,  312,  312,
      312,  385,  312,  312,  312,  312,  633,  779,  780,  744,
      819,  313, 1783,  648, 1704,  313, 1517, 1518, 1518, 1691,

      383, 1943,  313,  313,  863,  569,  575,  313,  938,  312,
      312,  312,  313,  312,  312,  536,  312,  312,  312,  312,
      312,  312,  537,  312,  312,  312,  312,  863, 1713,  633,
      742,  745,  667,  748,  312,  570,  576,  841,  313,  385,
      741,  385,  385,  313,  385,  313,  313, 1716,  313,  872,
      312,  541,  633,  313,  742,  745,  667,  748,  570,  576,
      841,  524,  385,  741,  385,  385,  754,  385,  368,  542,
      543,  544,  368,  872,  762,  545,  937,  828,  546,  425,
      351,  561,  368,  547,  368,  548,  524,  352,  938,  754,
      313, 1759,  368,  542,  543,  544,  368,  762, 1666,  545,

      828,  546,  425,  772,  561,  368,  547,  368,  548,  312,
      312,  313,  312,  312,  571,  312,  312,  312,  312,  572,
      312,  573,  312,  312,  312,  312,  772, 1517, 1518, 1518,
      937,  351,  507, 1814,  351,  313,  351,  313,  352,  938,
     1735,  352,  938,  352,  633,  385,  784,  867,  794,  312,
      312,  312,  313,  312,  312,  312,  312,  312,  312,  312,
      572,  312,  763,  312,  312,  312,  312,  633,  385,  784,
      867,  794, 1770,  313, 1719, 1663, 1732,  508, 1771,  507,
      312, 1664, 1733, 1772,  786,  763,  385,  938,  815,  633,
      312,  312,  312,  313,  312,  312,  571,  312,  312,  312,

      312,  572,  312,  573,  312,  312,  312,  312,  786,  385,
      313,  815,  633,  937, 1729,  851,  852,  351, 1750, 1553,
     1554, 1943,  313, 1816,  352,  938,  633,  827,  873, 1742,
      791,  312,  312,  312,  313,  312,  312,  585,  312,  312,
      312,  312,  312,  312,  586,  312,  312,  312,  312,  633,
      508,  827,  873,  791,  313, 1739,  313, 1818,  313, 1821,
      351, 1740,  507,  313, 1742, 1822,  812,  352,  874,  385,
      830,  470,  312,  312,  312,  313,  312,  312,  312,  312,
      312,  312,  312,  312,  312,  770,  312,  312,  312,  312,
      812,  874,  385,  351,  830,  313, 1768, 1781,  313, 1838,

      352,  470, 1769,  313,  313, 1839,  343,  813,  770,  991,
      385,  845,  836,  312,  312,  312,  313,  312,  312,  585,
      312,  312,  312,  312,  312,  312,  586,  312,  312,  312,
      312,  813,  313,  385,  313,  845,  836, 1663, 1819,  313,
     1759,  351,  343, 1664, 1747, 1814, 1748, 1666,  352,  938,
      875,  837, 1735,  839,  312,  312,  312,  313,  312,  312,
      592,  312,  312,  312,  312,  312,  312,  593,  312,  312,
      312,  312,  313,  875,  937,  837,  351,  839,  351,  343,
      317, 1798,  313,  352,  313,  352,  938, 1799,  313,  313,
      385,  843, 1800,  876,  797,  312,  312,  312,  313,  312,

      312,  312,  312,  312,  312,  312,  312,  312,  771,  312,
      312,  312,  312,  385, 1774,  843,  876,  797,  937,  313,
     1691,  313,  351,  313,  313,  351, 1776,  803,  804,  352,
      938,  771,  352,  313,  877,  582,  312,  312,  312,  313,
      312,  312,  592,  312,  312,  312,  312,  312,  312,  593,
      312,  312,  312,  312,  351,  633,  773,  778,  877,  782,
      878,  352,  633,  781,  783, 1796,  633,  385,  633,  785,
      766, 1797,  633,  893,  798,  633,  894,  312,  633,  773,
      787,  778,  767,  782,  878,  633,  781, 1862,  783,  633,
      385,  633,  785, 1863,  766,  633,  893,  798,  633,  894,

     1614,  803,  804,  787,  313,  767,  312,  381,  313,  312,
      312,  312,  312,  383,  312,  312,  312,  312,  790,  312,
      312,  312,  312,  788,  795,  789,  313,  385,  633,  799,
      800, 1920,  796,  385,  633,  313,  385,  808, 1921,  313,
      385,  564,  790,  564,  385,  910,  312,  788,  795,  789,
      385,  633,  840,  799,  800,  796,  385,  633,  838,  385,
      809,  808,  814,  385,  802,  803,  804,  385,  910,  385,
      385,  810,  563,  385,  563,  840,  826,  563,  385,  816,
      818,  805,  838,  811,  809,  806,  814,  385,  313,  385,
      385,  385,  385,  385,  823,  810,  385,  807,  820,  385,

      313,  385,  816,  385,  818,  805,  811,  821,  822,  806,
      385,  824,  385,  385,  385,  385,  385,  823,  825,  313,
      807,  820,  385,  313,  351,  385,  385,  831,  848,  856,
      821,  352,  822,  313,  385,  824,  633, 1040,  385,  385,
      351, 1044,  825,  832,  803,  804,  350,  352,  385,  829,
      831,  385,  848,  856,  842,  844,  846,  385,  849,  633,
      833, 1040,  313,  313,  834, 1044,  633,  779,  847,  850,
      851,  852,  829,  529,  385,  385,  835,  842,  844,  857,
      846,  849,  523,  855,  833,  351,  385,  351,  834,  633,
      779,  847,  352,  313,  352,  385,  385,  853,  385,  835,

      854, 1816,  861,  857,  313,  385,  855, 1742,  313,  385,
      859,  633,  779,  860,  862,  870,  313,  858,  385,  385,
      853,  313,  879,  854,  313,  861,  313,  871,  385,  864,
      851,  852,  313,  859,  633,  779,  860,  862,  313,  870,
      858,  885,  313,  880,  884,  879,  313,  531,  313,  313,
      871,  881,  313,  895,  532,  531,  524,  865,  900,  523,
      866,  882,  532,  633,  633,  885,  886,  880,  884,  313,
      890,  889,  313,  883,  888,  881,  633,  895,  892,  891,
      865,  887,  900,  866,  897,  882,  633,  633,  912,  886,
      633,  896,  898,  508,  890,  889,  883,  888,  633,  633,

      633,  892,  891,  917,  887,  899,  901,  897,  633,  507,
      385,  912,  902,  633,  896,  903,  898,  633,  385,  905,
      906,  633,  904,  633,  909,  908,  917,  385,  899,  385,
      901,  633,  385,  385,  502,  902,  918,  811,  903,  911,
      633,  385,  313,  905,  920,  904,  385,  385,  909,  908,
      385,  921,  385,  922,  907,  385,  913,  914,  915,  918,
      811,  313,  313,  911,  313,  351,  351,  920,  919,  385,
      385,  351,  352,  352,  921,  351,  922,  907,  352,  926,
      916,  351,  352,  351,  313,  351,  923,  953,  352,  960,
      352,  919,  352,  925,  928,  924,  927,  313,  351,  471,

      929,  930,  470,  926,  916,  352,  351,  932,  351,  923,
      953,  931,  960,  352,  351,  352,  925,  928,  924,  927,
      934,  352,  351,  929,  940,  930,  935,  350,  933,  352,
      932,  633,  963,  633,  931,  633,  941,  936,  939,  944,
      313,  633,  943,  965,  934,  942,  633,  945,  940,  633,
      935,  933,  949,  343,  633,  963,  633, 1006,  633,  941,
      936,  633,  939,  944,  633,  943,  965, 1048,  942,  633,
      945,  950,  633,  802,  803,  804,  949,  313,  633,  951,
      952, 1006,  633,  317,  633,  633,  989,  633,  313,  956,
      946, 1048,  633,  954,  947,  950,  633,  955,  957,  313,

      633,  633,  996,  951,  952,  633,  948,  385,  633,  989,
      633,  958,  385,  956,  946,  633,  954,  959,  947,  633,
      955,  961,  957,  633,  385,  996,  962,  313,  385,  948,
      385,  385,  385,  964,  958,  385,  385,  313, 1965,  966,
      385,  959, 1965, 1965,  967,  961,  980,  385,  385,  962,
     1049,  385, 1821,  968,  385,  385, 1000,  964, 1822,  385,
     1004,  385,  966,  385,  802,  803,  804,  967,  969,  973,
      383,  385,  385,  385, 1049,  385,  968, 1965,  975,  974,
     1000,  833,  970, 1004,  385,  834, 1965,  385,  385,  971,
     1965,  969,  972,  973, 1050,  385,  385,  835,  385,  385,

      976,  975,  978,  974, 1965,  833,  970,  385,  313,  834,
      385,  385,  971,  385,  977,  972,  979,  990, 1050,  385,
      835, 1965,  385,  976,  385,  313,  978,  992,  313,  991,
      385, 1965,  313,  385,  998,  994,  385,  977,  988,  993,
      979,  995,  385,  981,  385,  313,  385,  385, 1965,  982,
      992,  983,  984,  313,  999,  984,  385,  998, 1001, 1002,
      985,  988,  385,  993,  986,  313,  313,  385,  997,  385,
      385,  313, 1028,  832,  803,  804,  987,  999, 1965, 1003,
      351, 1001, 1002, 1064,  985,  385, 1005,  352,  986,  351,
      833, 1065,  997,  385,  834, 1028,  352, 1014,  633,  987,

     1015,  385, 1003, 1018, 1026, 1022,  835, 1064, 1025, 1965,
     1005, 1965, 1965, 1092,  833, 1065, 1030, 1019,  834,  385,
     1014,  633,  995, 1015,  385, 1031, 1018, 1026, 1022,  835,
     1008,  313, 1025,  850,  851,  852, 1009, 1092, 1010,  385,
     1019,  313,  385,  385, 1027,  351, 1965, 1011,  850,  851,
      852, 1012,  352, 1218,  383, 1965, 1965, 1032, 1035, 1965,
      633, 1023,  385, 1013, 1024,  385,  385, 1027,  313,  385,
     1029, 1011, 1039,  633, 1965, 1012,  865, 1218,  351,  866,
     1034, 1032, 1035,  633, 1023,  352, 1013, 1024,  385, 1036,
      313, 1037,  385, 1029,  385, 1039,  633, 1038, 1033,  865,

      385, 1041,  866, 1034,  864,  851,  852, 1042, 1043,  313,
     1045, 1046,  313, 1036, 1047, 1037,  313,  385, 1052,  313,
     1038,  313, 1033,  385, 1041,  313, 1051,  313,  313,  313,
     1042, 1043,  865, 1045, 1046,  866,  313, 1047, 1965, 1965,
      633, 1052,  531, 1053, 1054, 1066, 1057, 1061, 1055,  532,
     1051, 1059, 1060,  531, 1058,  865, 1056,  633,  866, 1072,
      532, 1067, 1063,  633, 1068, 1062, 1053, 1054, 1066, 1057,
     1074, 1061, 1055,  906,  633, 1059, 1060, 1058, 1070, 1056,
      633,  385, 1072, 1075, 1067,  633, 1063, 1071, 1068, 1062,
      633, 1073, 1965, 1076, 1074,  906,  313,  633,  633,  385,

      633,  383, 1070, 1086,  385, 1089, 1075, 1069,  633,  313,
     1078, 1071, 1079,  633,  313, 1073, 1076,  385, 1084,  971,
      313,  633,  385,  633, 1085, 1080, 1086, 1093, 1089, 1077,
     1069,  313,  351, 1078,  385, 1081, 1079, 1087, 1965,  352,
      385, 1082,  971, 1083,  984,  385, 1088,  984,  313, 1080,
     1093, 1090, 1077,  913,  914,  915, 1965,  385, 1113, 1965,
     1087, 1098,  385,  351, 1965, 1096,  351, 1965,  385, 1088,
      352, 1095,  351,  352, 1090, 1097,  351,  916, 1965,  352,
      351, 1113,  351,  352, 1098,  385, 1965,  352, 1096,  352,
      351, 1099, 1103,  351, 1965, 1095,  351,  352, 1115, 1097,

      352,  916, 1100,  352, 1117, 1101,  351, 1102,  351, 1104,
     1106, 1112, 1965,  352, 1099,  352, 1103, 1111,  633,  980,
     1105, 1115,  633, 1878, 1116, 1100, 1114, 1117, 1101, 1879,
     1102,  633, 1224, 1104, 1106, 1112, 1107,  633, 1110,  633,
     1111,  633,  633, 1105,  633,  633,  633, 1118, 1116, 1120,
     1114, 1965, 1119, 1121,  633, 1123, 1224, 1130,  633, 1107,
      633, 1110,  633, 1122,  633,  633, 1162,  633,  994,  633,
     1118, 1965, 1120, 1965,  995, 1119, 1838, 1121,  633, 1123,
     1129,  633, 1839, 1127,  385,  313, 1122,  633,  981, 1162,
      633,  385, 1862, 1128,  982,  633,  983,  984, 1863, 1131,

      984,  633, 1174, 1225, 1129, 1124, 1127,  385,  385, 1125,
     1132, 1965, 1965,  633,  385,  633, 1128,  385,  633, 1133,
     1965, 1126,  385, 1131,  385, 1135, 1174, 1225, 1965, 1124,
     1134,  385,  385, 1125, 1132,  385,  385, 1136,  633, 1137,
      385, 1139, 1965, 1133, 1126,  385,  385,  385, 1138, 1135,
      385,  385, 1140, 1134, 1141,  385,  385,  385,  385,  385,
     1136, 1142, 1137, 1143, 1144, 1139, 1146, 1965,  385,  385,
      385, 1138, 1965,  385,  385, 1140, 1965,  385, 1141,  385,
      385,  385,  385, 1145, 1147, 1142, 1143, 1148, 1144, 1149,
     1146,  385,  385,  385,  385,  385,  385,  313,  313, 1150,

      385, 1151,  313, 1163,  385,  385, 1145, 1147,  385, 1965,
      385, 1148, 1183, 1149,  385,  385, 1164,  385,  385,  385,
     1165, 1175, 1150, 1965, 1189, 1151, 1163,  313, 1869,  851,
      852,  385,  313,  385,  980,  313, 1183,  385, 1965, 1164,
      383,  385, 1965, 1165,  313, 1175, 1176, 1189, 1166,  385,
     1878,  410,  411,  412, 1152,  414, 1879, 1169,  415,  313,
     1177,  416,  313, 1965,  385, 1153, 1154,  419,  420, 1965,
     1176, 1166,  385, 1178,  385,  410,  411,  412, 1152,  414,
     1169, 1170,  415, 1177,  416,  313,  313, 1179, 1153, 1155,
      419,  420, 1156,  313, 1192,  313, 1178,  385,  982,  351,

      983, 1219, 1180, 1227, 1170, 1220,  352, 1221, 1181, 1011,
     1179,  313,  313, 1012, 1182, 1196, 1243, 1192, 1965, 1965,
      313, 1222,  984,  313, 1219, 1013, 1180, 1227, 1220,  351,
     1221,  984, 1181, 1011,  984,  351,  352, 1012, 1182, 1196,
     1243, 1198,  352, 1211, 1222, 1190, 1191, 1197, 1013,  312,
      990,  313,  312,  312, 1193,  312,  383,  312,  312,  312,
      312,  312,  991,  312,  312,  312, 1965, 1211, 1190, 1191,
     1200, 1197, 1199, 1206, 1208,  313,  633, 1193,  633, 1201,
      385,  633, 1965, 1202, 1203, 1204, 1965,  385, 1965,  312,
     1008,  313, 1965,  385, 1200, 1199, 1009, 1206, 1010,  633,

     1965,  633, 1201,  385,  633, 1209, 1202, 1011, 1203, 1204,
      385, 1012,  351,  385,  385, 1207,  385, 1205,  313,  352,
     1214, 1212, 1965, 1013, 1213,  313,  385,  385, 1209, 1215,
      313, 1011,  633,  313, 1223, 1012,  385,  385,  385, 1207,
     1205, 1226, 1210, 1214, 1228, 1212, 1013, 1217, 1213,  385,
      385, 1216,  313, 1215,  313,  633,  313, 1223, 1232,  313,
      313,  385, 1230,  313, 1226, 1210,  313, 1228, 1242, 1229,
     1217,  313,  313, 1245, 1246, 1216, 1920, 1238, 1965,  531,
     1231, 1232, 1235, 1921, 1233, 1230,  532, 1234,  531, 1244,
     1236, 1242, 1084, 1229, 1265,  532, 1245, 1246, 1085, 1237,

      633, 1238, 1241, 1231,  633, 1239, 1235, 1233,  313, 1240,
     1234, 1248, 1249, 1244, 1236, 1247,  633, 1251, 1265,  633,
     1965,  633, 1237,  633,  385, 1081, 1241,  633, 1239,  313,
     1965, 1082, 1240, 1083,  984, 1248, 1249,  984, 1247,  633,
     1250, 1251,  633, 1252,  633, 1253, 1255,  385, 1268,  385,
      385,  385,  633,  385, 1269, 1254,  313,  313, 1256, 1920,
      313, 1965, 1266, 1965, 1250, 1965, 1921, 1252, 1253,  385,
     1255, 1268,  385,  385,  385,  633,  385, 1269, 1254, 1267,
      351,  351, 1256,  351,  351, 1266, 1270,  352,  352, 1271,
      352,  352,  385,  351, 1130, 1274, 1965,  351, 1385,  351,

      352, 1273, 1286, 1267,  352, 1278,  352,  351, 1386, 1270,
     1272,  633, 1271, 1277,  352, 1281, 1287, 1288, 1965, 1274,
      633,  633, 1385,  633, 1289, 1273, 1286, 1279,  633, 1278,
     1290,  633, 1386, 1272,  633, 1280, 1277, 1298, 1965, 1281,
     1287, 1288,  633,  633,  633, 1291,  633,  633, 1289, 1292,
     1279,  633, 1293, 1290,  633, 1296, 1294, 1295, 1280,  633,
     1298,  633,  633,  633,  633,  633, 1297, 1965, 1291, 1390,
      633, 1299, 1292, 1965, 1965,  633, 1293,  633, 1965, 1296,
     1294, 1295,  633, 1300,  633,  633,  633,  633,  633,  633,
     1297,  385,  385, 1390, 1299, 1301, 1302,  385,  633, 1303,

      633, 1305, 1308,  385, 1304, 1306, 1300, 1307, 1965,  385,
      385,  633,  633, 1393,  385,  385, 1309, 1316, 1301, 1302,
      385, 1310, 1303, 1317, 1305, 1311,  385, 1304, 1306,  385,
      385, 1307,  385,  385,  385,  385, 1313, 1393,  385, 1309,
     1312, 1314, 1320,  385,  385, 1310, 1965,  385, 1315, 1311,
      385, 1318,  385,  385,  385,  313, 1319,  385,  385, 1323,
     1313,  385,  385, 1312, 1314, 1320,  385,  385,  313, 1321,
      385, 1315,  990,  385,  385, 1318, 1324,  385,  313, 1319,
      385, 1322, 1323,  385,  991,  385,  313,  385,  313, 1326,
     1332, 1334, 1335, 1321, 1325,  385,  385,  385, 1333,  385,

     1324,  385, 1965,  385, 1322, 1327,  385, 1328, 1336,  313,
      385, 1342, 1326, 1332, 1337, 1334, 1335, 1325,  385,  385,
      385, 1333,  385,  313,  385,  990,  313, 1340, 1965, 1327,
      313, 1328, 1156,  313, 1342,  385,  313,  991,  982, 1965,
      983,  313,  313,  385,  313, 1343,  313, 1346,  313, 1011,
     1340,  313,  385, 1012, 1965,  313, 1345, 1348,  385, 1347,
     1357, 1965, 1351, 1198, 1965, 1013,  313, 1405, 1343,  385,
     1349, 1346, 1428, 1011, 1356,  385, 1384, 1012, 1358, 1345,
     1348, 1359, 1350, 1347, 1357, 1351, 1354,  313, 1013, 1331,
      313, 1405,  385, 1349, 1199, 1355, 1428, 1356,  984, 1384,

     1389,  984, 1358, 1011, 1359, 1350, 1011, 1012, 1965, 1364,
     1012, 1965,  633, 1506,  351, 1354,  313, 1199, 1355, 1013,
     1365,  352, 1013, 1389, 1965, 1965, 1188, 1011,  633, 1965,
     1011, 1012, 1011, 1364, 1012,  633, 1012, 1506, 1361,  385,
     1965, 1367, 1013,  313, 1365, 1013, 1331,  313, 1013, 1362,
      633,  633, 1363, 1366, 1369,  984, 1011, 1161,  984,  385,
     1012, 1361,  385, 1011, 1367, 1391,  385, 1012, 1965,  385,
     1370, 1013, 1362,  633, 1368, 1363, 1366, 1382, 1369, 1013,
     1965, 1965,  385, 1965,  313, 1965, 1965, 1011, 1391,  385,
      313, 1012,  385, 1370, 1208,  313, 1965, 1368, 1965, 1396,

     1382,  313, 1013,  312,  312,  313,  312,  312, 1167,  312,
      312,  312,  312,  312,  312, 1338,  312,  312,  312,  312,
      351, 1371, 1383, 1396, 1372, 1209, 1376,  352,  385,  633,
     1377, 1378,  313, 1965,  313, 1965, 1373, 1965,  385, 1392,
      313,  313,  313,  312, 1371,  313, 1383, 1372, 1209, 1418,
     1376,  385,  633, 1377,  313, 1378, 1379, 1380, 1381,  313,
     1373,  385, 1392, 1395,  531, 1394, 1399, 1406,  991, 1400,
     1407,  532, 1418, 1402, 1401, 1415,  633,  633, 1403, 1408,
     1404, 1965, 1422,  385, 1411, 1414,  633, 1395, 1394, 1399,
     1965, 1406, 1507, 1400, 1407,  633, 1402, 1401, 1415,  633,

      633,  633, 1403, 1408, 1404, 1409,  385, 1410, 1411,  633,
      385,  385,  385, 1423,  633, 1416, 1507, 1412,  633,  313,
      385, 1413,  385, 1427,  633, 1417, 1425,  313, 1409,  313,
      313, 1410, 1452,  385,  385,  385, 1423,  633, 1424, 1416,
     1412, 1434,  351,  385, 1413,  385, 1427,  313, 1417,  352,
     1467, 1965, 1430,  351, 1431, 1452, 1965, 1426, 1429,  351,
      352,  351, 1424,  351, 1474, 1435,  352,  351,  352, 1965,
      352, 1436, 1308, 1467,  352, 1498, 1430, 1439, 1431, 1432,
     1426, 1429, 1433, 1437,  313,  633,  633, 1474,  633, 1435,
     1438,  633, 1442, 1444, 1436, 1445, 1443, 1446, 1498,  633,

     1526, 1439, 1432, 1447, 1965, 1433,  633, 1437,  633,  633,
     1965,  633,  633, 1438,  633, 1442, 1444, 1496, 1445, 1443,
      633, 1446,  633,  633, 1526, 1448, 1449, 1447,  633,  633,
     1451, 1965,  633, 1450,  633,  633,  633, 1453, 1454, 1457,
     1496,  633, 1455,  633, 1456, 1965,  633,  633, 1448, 1449,
     1965,  633,  633, 1965, 1451,  633, 1450,  633, 1458,  633,
     1453, 1454, 1457, 1965,  633, 1459, 1455,  385, 1456,  385,
      633,  385,  385, 1460, 1461,  633, 1463, 1308,  313, 1464,
      385,  385, 1458,  383,  385, 1965, 1468,  385, 1465, 1459,
      385, 1965,  385, 1965,  385,  385, 1460, 1461,  385,  313,

     1463, 1466, 1464,  385,  385, 1469,  648,  385, 1462, 1468,
      385, 1465,  649, 1472, 1473,  313,  990,  385, 1475, 1965,
      990,  385,  385, 1965, 1466,  385,  313,  313,  991, 1470,
      313, 1462,  991, 1965, 1503, 1471, 1965, 1472, 1473,  313,
      385, 1494, 1475,  385,  313,  385, 1477,  385,  385, 1476,
      313, 1480, 1495, 1470,  687, 1485, 1478, 1503, 1471,  687,
     1481, 1479, 1486, 1481,  385, 1494,  385, 1965, 1482, 1477,
      385,  385, 1483, 1476,  313, 1495, 1354,  313,  687, 1485,
     1478, 1502,  385,  687, 1484, 1479, 1486,  385, 1965, 1512,
      385, 1488, 1482, 1011,  385, 1487, 1483, 1012, 1491, 1344,

      313,  385, 1527, 1497, 1502,  385, 1528, 1484,  313, 1013,
     1965,  313, 1512,  385, 1488,  313, 1965, 1011, 1487, 1965,
     1965, 1012, 1491, 1965,  385, 1527, 1497, 1492, 1500, 1528,
     1493, 1532, 1013,  647, 1489,  648,  647,  647, 1504,  647,
      647,  649,  647,  647,  647,  647,  647,  647,  647,  647,
      313, 1492, 1500, 1493, 1965, 1532,  313, 1823,  313, 1514,
     1965, 1965, 1504, 1824, 1912,  914,  915, 1501, 1825,  633,
     1533, 1508, 1516,  647,  312,  312,  313,  312,  312,  312,
      312,  312,  312,  312,  312,  312,  385,  312,  312,  312,
      312, 1501,  633, 1533, 1508,  937, 1516, 1783,  648,  351,

     1614,  803,  804, 1965, 1691, 1965,  352,  938, 1510,  385,
      633, 1548, 1519,  633,  312,  312,  312,  313,  312,  312,
     1167,  312,  312,  312,  312,  312,  312, 1338,  312,  312,
      312,  312, 1510,  633, 1548, 1519,  633, 1499,  633,  313,
     1965, 1965, 1354,  313,  385,  385, 1509,  313,  313, 1513,
      313, 1511, 1534, 1965, 1482,  312, 1008,  313, 1483, 1011,
     1965,  633, 1009, 1012, 1010, 1524, 1543,  385,  385, 1509,
     1484, 1515, 1513, 1011, 1511, 1013, 1534, 1012, 1482,  385,
      313, 1525, 1483, 1011,  313, 1520,  313, 1012, 1524, 1013,
     1543, 1965, 1529, 1484,  313, 1515, 1965, 1011, 1013, 1535,

      313, 1012,  385, 1541, 1525, 1521, 1522, 1523, 1520, 1538,
      313, 1965, 1013, 1008,  313, 1536, 1530,  991,  633, 1009,
     1537, 1010, 1531, 1535, 1414, 1544, 1542, 1541, 1965, 1546,
     1011, 1965,  385, 1539, 1012,  313,  633, 1555, 1536, 1540,
     1530,  633,  633, 1537, 1558, 1531, 1013, 1965, 1544, 1542,
     1965,  633, 1545, 1546, 1011,  385,  633, 1539, 1012,  633,
     1555, 1547, 1540, 1559, 1640,  633, 1549, 1558, 1965, 1013,
     1008,  313, 1562,  385,  633, 1545, 1009, 1563, 1010,  633,
     1965,  313, 1588, 1965, 1547, 1644, 1559, 1011, 1640,  313,
     1549, 1012, 1422, 1414,  313, 1562,  385, 1646, 1081,  383,

     1563, 1965, 1965, 1013, 1082, 1588, 1083,  984, 1551, 1644,
      984, 1011, 1938, 1695, 1696, 1012, 1965, 1965, 1552, 1553,
     1554, 1646, 1965, 1423, 1550,  385, 1013,  312, 1379, 1380,
     1381,  312, 1551,  312,  383,  312,  312,  312,  312,  312,
      991,  312,  312,  312, 1081,  385, 1423, 1550,  385, 1081,
     1082,  313, 1083,  984,  313, 1082,  984, 1083,  984, 1425,
      313,  984,  351,  351, 1660,  351, 1965,  312,  385,  352,
      352,  385,  352, 1434, 1568, 1965,  385, 1564, 1560,  351,
     1965,  633, 1556,  633, 1965, 1557,  352, 1561, 1660, 1569,
     1426, 1571,  633,  633,  385, 1965, 1573, 1435, 1568,  385,

     1570, 1564, 1560, 1436,  633, 1556,  633, 1565, 1557, 1575,
     1561,  633, 1569, 1426, 1571,  633,  633, 1965,  633, 1573,
     1965, 1435, 1965, 1576, 1570, 1703, 1436, 1577, 1965, 1721,
     1565,  981,  633, 1575,  633,  313,  633,  982,  633,  983,
      984,  633,  633,  984, 1574, 1572, 1581, 1576, 1124, 1703,
     1639, 1577, 1125, 1721,  633,  633,  385,  633,  633,  633,
     1965,  633, 1578, 1579, 1126,  633, 1580, 1574, 1572,  633,
     1581,  313, 1124,  385, 1639, 1601, 1125,  633, 1582,  385,
      633,  633, 1583, 1584, 1585, 1578, 1579, 1126, 1130,  385,
     1580, 1586,  633, 1589,  803,  804,  385, 1590, 1601,  385,

      385, 1582, 1587, 1965,  990, 1965, 1965, 1591, 1965,  385,
     1469,  648,  385,  648, 1586,  385,  991,  649,  648,  649,
      385, 1590,  385,  385,  649, 1587, 1594, 1595,  313,  313,
     1591,  385,  385,  385, 1470,  990,  385,  385,  385,  313,
     1471, 1592, 1596,  385, 1602,  313, 1603,  991, 1598, 1499,
     1594, 1595, 1593, 1965,  385, 1597,  385, 1965, 1470,  385,
      385,  385,  385, 1471, 1592, 1596, 1482, 1602, 1605, 1603,
     1483, 1722, 1598, 1599, 1607, 1593, 1604,  385, 1597, 1600,
      385,  385, 1484, 1606,  385,  385, 1770,  313, 1965, 1965,
     1482, 1605, 1771, 1965, 1483, 1722, 1599, 1772, 1607, 1604,

      385, 1622, 1600,  385,  385, 1484, 1606,  647, 1489,  648,
      647,  647,  313,  647,  647,  649,  647,  647,  647,  647,
      647,  647,  647,  647, 1622, 1781,  313,  312, 1798,  313,
     1965,  312, 1965, 1965, 1799, 1965, 1965,  313,  313, 1800,
     1965,  313,  385, 1611, 1610,  313,  313,  647,  647,  647,
      648,  647,  647, 1490,  647,  647,  649,  647,  647,  647,
     1608,  647,  647,  647,  647,  385, 1611, 1610, 1612, 1615,
      313, 1613, 1616,  313, 1618, 1499,  313, 1965, 1623, 1625,
      633,  313,  633, 1818,  313, 1965, 1624, 1626,  647, 1965,
     1742, 1612, 1482, 1615, 1613, 1616, 1483, 1618, 1617, 1619,

     1620, 1623, 1625,  633, 1621,  633, 1631,  313, 1484, 1624,
     1626, 1627, 1628, 1629,  313,  313, 1482,  385, 1630,  313,
     1483, 1617, 1619,  633, 1620,  385, 1965, 1621, 1641, 1634,
     1631, 1484, 1642, 1633, 1638, 1635, 1636, 1637,  385, 1529,
      385, 1643, 1630, 1645, 1657,  313,  633, 1647,  385, 1632,
      313, 1641, 1634, 1538,  313, 1642, 1633,  313, 1638,  313,
      313,  385,  385, 1530, 1643, 1668, 1645, 1657, 1965, 1531,
     1647,  313, 1632, 1648, 1650, 1652, 1130, 1539, 1965, 1965,
     1658, 1965,  633, 1540, 1649,  385, 1965, 1530, 1668, 1670,
     1651,  313, 1531, 1552, 1553, 1554, 1648,  313, 1650, 1652,

     1659, 1539, 1081,  633, 1658,  633, 1540, 1649, 1082, 1081,
     1083,  984, 1670, 1651,  984, 1082, 1661, 1083,  984, 1081,
      633,  984, 1654, 1659,  633, 1082,  633, 1083,  984,  633,
      385,  984, 1672,  633, 1679, 1653,  633, 1665, 1669, 1671,
     1661,  351,  633,  633, 1666, 1654,  633,  633,  352, 1939,
     1940, 1940,  633,  385, 1965, 1672,  633, 1679, 1653,  633,
      313, 1669, 1965, 1671, 1662,  633, 1965, 1667, 1965,  633,
      312, 1552, 1553, 1554,  312, 1727,  312,  383,  312,  312,
      312,  312,  312,  312,  312,  312,  312, 1662, 1674,  633,
     1667, 1583, 1584, 1585, 1589,  803,  804,  633, 1673, 1727,

      633, 1677, 1686, 1676, 1675,  633, 1965,  633,  633, 1678,
      312, 1674,  633,  648,  385,  313,  313, 1688,  633,  649,
      633,  633, 1673,  633, 1965, 1677, 1676, 1675,  633,  385,
      633,  633, 1678, 1683, 1685, 1965,  385,  385,  313, 1684,
     1688,  633, 1965, 1689,  633,  991, 1693, 1699, 1690,  648,
     1701,  313,  385,  990, 1702, 1691, 1731, 1697, 1685,  385,
      385, 1965, 1694, 1695, 1696,  991, 1689, 1783,  648, 1693,
     1699, 1965, 1965, 1701, 1691, 1965, 1965, 1702, 1692, 1731,
      385, 1697, 1700,  385,  312, 1589,  803,  804,  312,  385,
      312,  383,  312,  312,  312,  312,  312,  312,  312,  312,

      312, 1692,  990,  385, 1704, 1700, 1705, 1707,  313,  385,
      385, 1753,  385, 1708,  991, 1723, 1965, 1737, 1706,  313,
      385, 1758,  633,  313,  312, 1790,  313, 1712, 1965,  385,
     1705,  385,  385,  385,  385, 1753, 1965, 1708, 1965, 1723,
     1737, 1706, 1965,  385, 1758,  633, 1965,  313, 1965, 1790,
     1965, 1712,  385, 1718,  385, 1714, 1715,  385,  647,  647,
      648,  647,  647,  647,  647,  647,  649,  647,  647,  647,
     1717,  647,  647,  647,  647, 1965, 1718,  313, 1714, 1715,
     1819,  313, 1818,  313, 1823,  313, 1747, 1965, 1748, 1742,
     1824, 1965,  313, 1965, 1717, 1825, 1720, 1965,  647,  647,

      647,  648,  647,  647, 1490,  647,  647,  649,  647,  647,
      647, 1608,  647,  647,  647,  647, 1627, 1628, 1629, 1730,
     1720, 1724, 1725,  851,  852, 1965,  313,  385, 1726,  313,
      313, 1965,  633, 1635, 1636, 1637,  313, 1734,  313,  647,
     1709,  313, 1730,  633, 1735, 1724, 1710, 1965, 1711,  385,
      385, 1726, 1728, 1754,  313,  633, 1738, 1011, 1965, 1744,
      633, 1012, 1741,  313, 1785,  633,  633, 1736, 1792, 1742,
     1745, 1755,  385, 1013, 1965,  313, 1728, 1754, 1791, 1738,
     1965, 1011, 1744,  633, 1965, 1012, 1965, 1785,  633, 1686,
     1736, 1792, 1743, 1745, 1749, 1755, 1013,  312, 1614,  803,

      804,  312, 1791,  312,  312,  312,  312,  312,  312,  312,
      312,  312,  312,  312, 1746, 1743,  633,  351, 1749,  633,
     1747, 1965, 1748,  984,  352,  633,  984, 1763, 1760, 1665,
      385,  633, 1779, 1756, 1807, 1704, 1666,  312, 1761,  633,
     1481,  385,  633, 1694, 1695, 1696, 1965, 1965,  633, 1481,
     1763, 1760, 1481,  385,  633, 1779, 1965, 1756, 1807, 1667,
     1762, 1761,  633,  633,  385,  312, 1655, 1553, 1554,  312,
      633,  312,  312,  312,  312,  312,  312,  312,  312,  312,
      312,  312, 1667, 1965, 1762,  633,  633,  313, 1845, 1695,
     1696, 1917,  313,  633, 1846,  648, 1965, 1707, 1918,  313,

     1806,  649, 1965, 1965, 1775,  312,  312, 1750, 1553, 1554,
      312, 1656,  312,  312,  312,  312,  312,  312, 1751,  312,
      312,  312,  312, 1806,  633, 1764, 1765, 1780, 1775, 1782,
      385, 1788,  633,  385, 1690,  648,  313,  385, 1965, 1698,
      313, 1691, 1965, 1965, 1794,  312,  312,  633,  313, 1764,
     1765, 1780, 1782,  385, 1788,  633,  385, 1766,  313, 1786,
      385, 1130,  313, 1681, 1692, 1682,  385, 1794, 1789, 1793,
     1787, 1155,  313, 1805, 1011,  313, 1802, 1813, 1012, 1801,
     1725,  851,  852, 1786,  313,  633, 1808, 1692,  385,  385,
     1013, 1789, 1793, 1787,  313, 1803, 1805, 1735, 1011, 1802,

     1813, 1811, 1012, 1801, 1804, 1965, 1965,  633,  633, 1808,
      313,  385, 1827, 1013, 1686,  313, 1725,  851,  852, 1803,
      383, 1735,  313, 1965, 1965, 1811, 1830, 1804, 1817, 1742,
      633,  410,  411,  412, 1152,  414, 1827, 1734,  415, 1826,
     1965,  416, 1854,  385, 1735, 1153, 1154,  419,  420, 1830,
     1965, 1817, 1965, 1742, 1965,  410,  411,  412, 1152,  414,
     1965, 1965,  415, 1826,  416, 1854,  385, 1736, 1153, 1155,
      419,  420,  312, 1776,  803,  804,  312, 1687,  312,  312,
      312,  312,  312,  312, 1777,  312,  312,  312,  312,  313,
     1736, 1892, 1893, 1965, 1965, 1917, 1893,  312,  312,  313,

      313,  312, 1918, 1965, 1741,  313, 1828, 1938, 1695, 1696,
     1965, 1742,  312,  312, 1694, 1695, 1696,  312, 1829,  312,
      383,  312,  312,  312,  312,  312,  312,  312,  312,  312,
     1828, 1746,  313, 1810, 1743, 1965,  633, 1747, 1831, 1748,
      984, 1832, 1829,  984,  633,  313,  633, 1130, 1965, 1833,
     1965,  313,  990,  312, 1709,  313, 1810, 1743,  633,  633,
     1710, 1831, 1711,  633,  991, 1832, 1851,  633, 1842,  633,
     1834, 1011, 1833,  313,  633, 1012, 1965, 1850,  385,  385,
     1843,  633, 1589,  803,  804, 1855,  633, 1013,  313, 1851,
     1965, 1965, 1842, 1834, 1965, 1011, 1965,  633, 1965, 1012,

     1850,  385,  385, 1843, 1965, 1856, 1849, 1868, 1855,  385,
     1013,  312, 1725,  851,  852,  312, 1865,  312,  383,  312,
      312,  312,  312,  312,  312,  312,  312,  312, 1856, 1849,
      313, 1868,  385, 1965,  313, 1892, 1893, 1965, 1965, 1865,
     1965,  312,  312, 1939, 1940, 1940,  385, 1873, 1857, 1872,
     1881,  312,  312, 1729,  851,  852,  312, 1852,  312,  312,
      312,  312,  312,  312,  312,  312,  312,  312,  312,  385,
     1873, 1857,  648, 1872, 1881,  313,  984,  313,  649, 1965,
     1965, 1852, 1950,  914,  915,  984, 1858, 1825,  984,  385,
     1894, 1900,  312,  312, 1750, 1553, 1554,  312,  312,  312,

      312,  312,  312,  312,  312, 1844,  312,  312,  312,  312,
     1858, 1481,  385, 1965, 1894, 1900, 1965, 1965, 1965, 1965,
     1481, 1965, 1965, 1481, 1965, 1965, 1965, 1946, 1844, 1901,
      313, 1965,  313,  312,  312, 1750, 1553, 1554,  312, 1656,
      312,  312,  312,  312,  312,  312, 1751,  312,  312,  312,
      312, 1946, 1901, 1853,  313,  313,  313,  313, 1965, 1965,
     1965, 1354,  313,  313, 1725,  851,  852, 1897, 1354,  313,
     1911,  313,  313, 1882,  312, 1766,  313, 1853, 1011, 1800,
     1864, 1681, 1012, 1682, 1866, 1011, 1867,  313, 1874, 1012,
     1897,  633, 1011, 1911, 1013, 1880, 1012, 1882, 1589,  803,

      804, 1013, 1011, 1889, 1864, 1883, 1012, 1866, 1013, 1011,
     1867, 1874, 1965, 1012,  633, 1965, 1011, 1013, 1965, 1880,
     1012,  313, 1965, 1965, 1013,  633, 1889,  313, 1704, 1883,
     1480, 1013, 1331,  313,  633,  633, 1884, 1885, 1890, 1481,
     1886,  984, 1481,  633,  984,  385, 1895, 1482,  633, 1011,
      313, 1483,  313, 1012, 1965,  385, 1898,  633,  633, 1884,
     1885,  313, 1890, 1484, 1886, 1013,  633, 1965,  385, 1927,
     1895, 1482,  385, 1011, 1902, 1483, 1965, 1012,  385, 1898,
      313, 1896, 1499,  313, 1905,  313, 1484, 1914, 1013, 1331,
      313, 1704, 1927, 1910,  633,  385, 1965, 1902,  984, 1482,

     1772,  984, 1906, 1483, 1896, 1928, 1011, 1905, 1907,  313,
     1012, 1914,  984,  313, 1933, 1484, 1910,  633,  633, 1913,
      313,  984, 1013, 1482,  984,  313, 1906, 1483, 1928, 1965,
     1011, 1907, 1965, 1965, 1012, 1922, 1965, 1933, 1484, 1965,
     1945,  633, 1913, 1916, 1924, 1013,  312, 1776,  803,  804,
      312,  312,  312,  312,  312,  312,  312,  312, 1922,  312,
      312,  312,  312, 1945, 1965,  313,  313, 1916, 1924, 1965,
      984,  313, 1965, 1965, 1965, 1965, 1965, 1965, 1965,  984,
     1965,  633,  984, 1915, 1925, 1926,  312,  312, 1776,  803,
      804,  312, 1687,  312,  312,  312,  312,  312,  312, 1777,

      312,  312,  312,  312,  633,  313, 1915,  313, 1925, 1926,
     1965, 1965, 1965, 1965, 1965, 1965, 1965, 1965, 1965, 1965,
     1965, 1949, 1965, 1957, 1931, 1962, 1942,  312,  312, 1845,
     1695, 1696,  312, 1784,  312, 1846,  312,  312,  312,  312,
     1847,  312,  312,  312,  312, 1949, 1957,  313, 1931, 1962,
     1942, 1965, 1965, 1965, 1965, 1965, 1965, 1965, 1965, 1965,
     1965, 1965, 1963, 1965, 1965, 1965, 1965,  313,  312,  312,
     1869,  851,  852,  312, 1809,  312,  312,  312,  312,  312,
      312, 1870,  312,  312,  312,  312, 1963, 1965, 1589,  803,
      804, 1354,  313, 1965, 1923,  313, 1929, 1965, 1965,  313,

     1965, 1965, 1965,  385, 1480,  313,  313, 1965, 1011,  312,
     1331,  313, 1012, 1481, 1704,  385, 1481, 1923, 1930,  984,
     1929, 1482,  984, 1965, 1013, 1483,  385, 1011, 1932,  313,
     1935, 1012, 1011, 1936, 1704, 1937, 1012, 1484,  385, 1965,
      633,  385, 1930, 1013, 1965, 1482,  313, 1013, 1965, 1483,
      313, 1011, 1932, 1935, 1965, 1012, 1965, 1936, 1937, 1965,
     1484,  633, 1960,  633,  385, 1953, 1013,  312, 1845, 1695,
     1696,  312,  312,  312, 1846,  312,  312,  312,  312, 1947,
      312,  312,  312,  312,  633, 1960,  313, 1965,  313, 1953,
     1965, 1965, 1965, 1965, 1965, 1965, 1965, 1965, 1965, 1965,

     1965, 1965, 1947,  687, 1965, 1961, 1965,  312,  312, 1845,
     1695, 1696,  312, 1784,  312, 1846,  312,  312,  312,  312,
     1847,  312,  312,  312,  312, 1965, 1965,  687, 1965, 1961,
     1965, 1965, 1965, 1965, 1589,  803,  804, 1965, 1965, 1965,
     1965, 1965, 1965, 1965, 1965, 1965, 1965, 1965,  312,  312,
     1869,  851,  852,  312,  312,  312,  312,  312,  312,  312,
      312,  633,  312,  312,  312,  312, 1965, 1965, 1965, 1965,
     1965, 1965, 1965, 1965, 1965, 1965, 1965, 1965, 1965,  313,
     1965,  313,  313,  313,  633,  313,  313, 1965, 1965,  312,
      312, 1869,  851,  852,  312, 1809,  312,  312,  312,  312,

      312,  312, 1870,  312,  312,  312,  312, 1499, 1948, 1954,
     1955, 1958, 1964, 1959, 1965, 1965, 1965, 1965, 1965, 1965,
     1965, 1965, 1965, 1965, 1482, 1965, 1965, 1965, 1483, 1965,
      312, 1948, 1954, 1955, 1958, 1964, 1959, 1965, 1965, 1965,
     1484, 1965, 1965, 1965, 1965, 1965, 1965, 1965, 1482, 1965,
     1965, 1965, 1483, 1965, 1965, 1965, 1965, 1965, 1965, 1965,
     1965, 1965, 1965, 1484,  312, 1912,  914,  915,  312, 1965,
      312,  312,  312,  312,  312,  312,  312,  312,  312,  312,
      312, 1965, 1965, 1965, 1965, 1965, 1965, 1965, 1965, 1965,
     1965, 1965, 1965, 1965, 1965, 1965, 1965, 1965, 1965, 1965,

     1965, 1965, 1965, 1965,  312,  312, 1950,  914,  915,  312,
     1934,  312,  312,  312,  312,  312,  312, 1951,  312,  312,
      312,  312, 1965, 1965, 1965, 1965, 1965, 1965, 1943, 1965,
     1965, 1965, 1965, 1965, 1965, 1965, 1965, 1965, 1965, 1965,
     1965, 1965, 1965, 1965, 1965,  312, 1941,  313,  312, 1965,
     1965, 1965, 1965, 1965, 1965, 1965, 1965, 1965, 1965,  312,
     1956, 1965, 1965,  410,  411,  412, 1786,  414, 1965, 1965,
      415, 1965,  312,  416, 1965, 1965, 1965, 1787, 1155,  419,
      420, 1965,  312, 1956, 1965, 1965, 1965,  410,  411,  412,
     1786,  414, 1965, 1965,  415, 1965,  416, 1965, 1965, 1965,

     1787, 1155,  419,  420,  312, 1950,  914,  915,  312,  312,
      312,  312,  312,  312,  312,  312, 1965,  312,  312,  312,
      312, 1965, 1965, 1965, 1965, 1965, 1965, 1965, 1965, 1965,
     1965, 1965, 1965, 1965, 1965, 1965, 1965, 1965, 1965, 1965,
     1965, 1965, 1965, 1965,  312,  312, 1950,  914,  915,  312,
     1934,  312,  312,  312,  312,  312,  312, 1951,  312,  312,
      312,  312, 1965, 1965, 1965, 1965, 1965, 1354,  313, 1965,
     1965, 1965, 1965, 1965, 1965, 1965, 1965, 1965, 1965, 1965,
     1965, 1965, 1965, 1965, 1011,  312, 1331,  313, 1012, 1965,
     1965, 1965, 1965, 1965, 1965,  984, 1965, 1965,  984, 1965,

     1013, 1965, 1965, 1011, 1965, 1965, 1965, 1012, 1011, 1965,
     1965, 1965, 1012, 1965, 1965, 1965, 1965, 1965, 1965, 1013,
     1965, 1965, 1965, 1013, 1965, 1965, 1965, 1011, 1965, 1965,
     1965, 1012, 1965, 1965, 1965, 1965, 1965, 1965, 1965, 1965,
     1965, 1965, 1013,   58,   58,   58,   58,   58,   58,   58,
       58,   58,   58,   63,   63,   63,   63,   63,   63,   63,
       63,   63,   63,   69,   69,   69,   69,   69,   69,   69,
       69,   69,   69,   71,   71,   71,   71,   71,   71,   71,
       71,   71,   71,  137,  137,  137,  137,  137,  137,  137,
      137,  137,  137,  138,  138,  138,  138,  138,  138,  138,

      138,  138,  138,  139,  139,  139,  139,  139,  139,  139,
      139,  139,  139,  140,  140,  140,  140,  140,  140,  140,
      140,  140,  140,  147,  147,  147,  147,  147,  147,  147,
      147,  147,  147,  162,  162,  162,  162,  162,  162,  162,
      162,  162,  162,  180,  180,  180,  180,  180,  180,  180,
      180,  180,  180,  187,  187,  187,  187,  187,  187,  187,
      187,  187,  187,  191,  191,  191,  191,  191,  191,  191,
      191,  191,  191,  200,  200,  200,  200,  200,  200,  200,
      200,  200,  200,  209,  209,  209,  209,  209,  209,  209,
      209,  209,  209,  215,  215,  215,  215,  215,  215,  215,

      215,  215,  215,  221,  221,  221,  221,  221,  221,  221,
      221,  221,  221,  223,  223,  223,  223,  223,  223,  223,
      223,  223,  223,  235,  235,  235,  235,  235,  235,  235,
      235,  235,  235,  257,  257,  257,  257,  257,  257,  257,
      257,  257,  257,  262,  262,  262,  262,  262,  262,  262,
      262,  262,  262,  267,  267,  267,  267,  267,  267,  267,
      267,  267,  267,  271,  271,  271,  271,  271,  271,  271,
      271,  271,  271,  276,  276,  276,  276,  276,  276,  276,
      276,  276,  276,  279,  279,  279,  279,  279,  279,  279,
      279,  279,  279,  282,  282,  282,  282,  282,  282,  282,

      282,  282,  282,  285,  285,  285,  285,  285,  285,  285,
      285,  285,  285,  288,  288,  288,  288,  288,  288,  288,
      288,  288,  288,  290,  290,  290,  290,  290,  290,  290,
      290,  290,  290,  291,  291,  291,  291,  291,  291,  291,
      291,  291,  291,  296,  296,  296,  296,  296,  296,  296,
      296,  296,  296,  301,  301,  301,  301,  301,  301,  301,
      301,  301,  301,  305,  305,  305,  305,  305,  305,  305,
      305,  305,  305,  309,  309, 1965,  309,  309,  309,  309,
      309, 1965,  309,  312,  312,  312,  312,  312,  312,  312,
      312,  312,  312,  314,  314,  314,  314,  314,  314,  314,

      314,  314,  314,  320, 1965, 1965,  320, 1965, 1965,  320,
      324,  324,  324,  324,  324,  324,  324,  324,  324,  324,
      342,  342,  342,  342,  342,  342,  342,  342,  342,  342,
      347,  347,  347,  347,  347,  347,  347,  347,  347,  347,
      353, 1965, 1965,  353, 1965, 1965,  353,  385,  385,  385,
      385,  385,  385,  385,  385,  385,  385,  448, 1965, 1965,
      448, 1965, 1965,  448,  451,  451,  451,  451,  451,  451,
      451,  451,  451,  451,  454, 1965, 1965,  454, 1965, 1965,
      454,  457,  457,  457,  457,  457,  457,  457,  457,  457,
      457,  505, 1965, 1965,  505, 1965, 1965,  505,  506,  506,

      506,  506,  506,  506,  506,  506,  506,  506,  516,  516,
      516,  516,  516,  516,  516,  516,  516,  516,  517,  517,
      517,  517,  517,  517,  517,  517,  517,  517,  533, 1965,
     1965,  533, 1965, 1965,  533,  538,  538,  538,  538,  538,
      538,  538,  538,  538,  538,  568, 1965,  568,  568, 1965,
     1965,  568,  574,  574,  574,  574,  574,  574,  574,  574,
      574,  574,  581, 1965, 1965,  581, 1965, 1965,  581,  587,
      587,  587,  587,  587,  587,  587,  587,  587,  587,  591,
     1965, 1965,  591, 1965, 1965,  591,  594,  594,  594,  594,
      594,  594,  594,  594,  594,  594,  595,  595, 1965,  595,

      595,  595,  595,  595,  595,  595,  598,  598, 1965,  598,
      598,  598,  598,  598,  598,  598,  601,  601,  601,  601,
      601,  601,  601,  601,  601,  601,  602,  602,  602,  602,
      602,  602,  602,  602,  602,  602,  605,  605, 1965,  605,
      605,  605,  605,  605,  605,  605,  606,  606, 1965,  606,
      606,  606,  606,  606,  606,  606,  609,  609,  609,  609,
      609,  609,  609,  609,  609,  609,  610,  610,  610,  610,
      610,  610,  610,  610,  610,  610,  320, 1965, 1965,  320,
     1965, 1965,  320,  319, 1965, 1965,  319,  324,  324,  324,
      324,  324,  324,  324,  324,  324,  324,  323,  323,  323,

      323,  323,  323,  323,  323,  323,  323,  342,  342,  342,
      342,  342,  342,  342,  342,  342,  342,  347,  347,  347,
      347,  347,  347,  347,  347,  347,  347,  353, 1965, 1965,
      353, 1965, 1965,  353,  352, 1965, 1965,  352,  633,  633,
      633,  633,  633,  633,  633,  633,  633,  633,  647,  647,
      647,  647,  647,  647,  647,  647,  647,  647,  384,  384,
      384,  384,  384,  384,  384,  384,  384,  384,  448, 1965,
     1965,  448, 1965, 1965,  448,  447, 1965, 1965,  447,  451,
      451,  451,  451,  451,  451,  451,  451,  451,  451,  450,
      450,  450,  450,  450,  450,  450,  450,  450,  450,  454,

     1965, 1965,  454, 1965, 1965,  454,  453, 1965, 1965,  453,
      457,  457,  457,  457,  457,  457,  457,  457,  457,  457,
      456,  456,  456,  456,  456,  456,  456,  456,  456,  456,
      506,  506,  506,  506,  506,  506,  506,  506,  506,  506,
      505, 1965, 1965,  505, 1965, 1965,  505,  504, 1965, 1965,
      504,  517,  517,  517,  517,  517,  517,  517,  517,  517,
      517,  516,  516,  516,  516,  516,  516,  516,  516,  516,
      516,  515,  515,  515,  515,  515,  515,  515,  515,  515,
      515,  533, 1965, 1965,  533, 1965, 1965,  533,  532, 1965,
     1965,  532,  538,  538,  538,  538,  538,  538,  538,  538,

      538,  538,  537,  537,  537,  537,  537,  537,  537,  537,
      537,  537,  568, 1965,  568,  568, 1965, 1965,  568,  567,
      567, 1965, 1965,  567,  574,  574,  574,  574,  574,  574,
      574,  574,  574,  574,  573,  573,  573,  573,  573,  573,
      573,  573,  573,  573,  581, 1965, 1965,  581, 1965, 1965,
      581,  580, 1965, 1965,  580,  587,  587,  587,  587,  587,
      587,  587,  587,  587,  587,  586,  586,  586,  586,  586,
      586,  586,  586,  586,  586,  591, 1965, 1965,  591, 1965,
     1965,  591,  590, 1965, 1965,  590,  594,  594,  594,  594,
      594,  594,  594,  594,  594,  594,  593,  593,  593,  593,

      593,  593,  593,  593,  593,  593,  595,  595, 1965,  595,
      595,  595,  595,  595,  595,  595,  601,  601,  601,  601,
      601,  601,  601,  601,  601,  601,  605,  605, 1965,  605,
      605,  605,  605,  605,  605,  605,  609,  609,  609,  609,
      609,  609,  609,  609,  609,  609,  353, 1965, 1965,  353,
     1965, 1965,  353,  632,  632,  632,  632,  632,  632,  632,
      632,  632,  632,  647,  647,  647,  647,  647,  647,  647,
      647,  647,  647,  792,  792,  792,  792,  792,  792,  792,
      792,  792,  792,  533, 1965, 1965,  533, 1965, 1965,  533,
     1108, 1965, 1108, 1965, 1965, 1965, 1108, 1965, 1108, 1157,

     1157, 1157, 1157, 1157, 1157, 1157, 1157, 1157, 1157, 1167,
     1167, 1167, 1167, 1167, 1167, 1167, 1167, 1167, 1167, 1171,
     1171, 1171, 1171, 1171, 1171, 1171, 1171, 1171, 1171, 1184,
     1184, 1184, 1184, 1184, 1184, 1184, 1184, 1184, 1184, 1194,
     1194, 1194, 1194, 1194, 1194, 1194, 1194, 1194, 1194, 1258,
     1258, 1258, 1258, 1258, 1258, 1258, 1258, 1258, 1258, 1263,
     1263, 1263, 1263, 1263, 1263, 1263, 1263, 1263, 1263, 1285,
     1965, 1965, 1285, 1965, 1965, 1285, 1329, 1329, 1329, 1329,
     1329, 1329, 1329, 1329, 1329, 1329, 1339, 1339, 1339, 1339,
     1339, 1339, 1339, 1339, 1339, 1339, 1341, 1341, 1341, 1341,

     1341, 1341, 1341, 1341, 1341, 1341, 1352, 1352, 1352, 1352,
     1352, 1352, 1352, 1352, 1352, 1352, 1360, 1360, 1360, 1360,
     1360, 1360, 1360, 1360, 1360, 1360, 1419, 1419, 1419, 1419,
     1419, 1419, 1419, 1419, 1419, 1419, 1421, 1421, 1421, 1421,
     1421, 1421, 1421, 1421, 1421, 1421, 1441, 1965, 1441, 1965,
     1965, 1965, 1965, 1965, 1441, 1284, 1965, 1965, 1284, 1490,
     1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1338,
     1338, 1338, 1338, 1338, 1338, 1338, 1338, 1338, 1338, 1567,
     1965, 1965, 1567, 1965, 1965, 1567, 1609, 1609, 1609, 1609,
     1609, 1609, 1609, 1609, 1609, 1609, 1656, 1656, 1656, 1656,

     1656, 1656, 1656, 1656, 1656, 1656, 1566, 1965, 1965, 1566,
     1687, 1687, 1687, 1687, 1687, 1687, 1687, 1687, 1687, 1687,
     1608, 1608, 1608, 1608, 1608, 1608, 1608, 1608, 1608, 1608,
     1752, 1752, 1752, 1752, 1752, 1752, 1752, 1752, 1752, 1752,
     1757, 1757, 1757, 1757, 1757, 1757, 1757, 1757, 1757, 1757,
     1767, 1767, 1767, 1767, 1767, 1767, 1767, 1767, 1767, 1767,
     1773, 1773, 1773, 1773, 1773, 1773, 1773, 1773, 1773, 1773,
     1778, 1778, 1778, 1778, 1778, 1778, 1778, 1778, 1778, 1778,
     1784, 1784, 1784, 1784, 1784, 1784, 1784, 1784, 1784, 1784,
     1795, 1795, 1795, 1795, 1795, 1795, 1795, 1795, 1795, 1795,

     1809, 1809, 1809, 1809, 1809, 1809, 1809, 1809, 1809, 1809,
     1812, 1812, 1812, 1812, 1812, 1812, 1812, 1812, 1812, 1812,
     1815, 1815, 1815, 1815, 1815, 1815, 1815, 1815, 1815, 1815,
     1820, 1820, 1820, 1820, 1820, 1820, 1820, 1820, 1820, 1820,
     1751, 1751, 1751, 1751, 1751, 1751, 1751, 1751, 1751, 1751,
     1835, 1835, 1835, 1835, 1835, 1835, 1835, 1835, 1835, 1835,
     1837, 1837, 1837, 1837, 1837, 1837, 1837, 1837, 1837, 1837,
     1840, 1840, 1840, 1840, 1840, 1840, 1840, 1840, 1840, 1840,
     1777, 1777, 1777, 1777, 1777, 1777, 1777, 1777, 1777, 1777,
     1848, 1848, 1848, 1848, 1848, 1848, 1848, 1848, 1848, 1848,

     1859, 1859, 1859, 1859, 1859, 1859, 1859, 1859, 1859, 1859,
     1861, 1861, 1861, 1861, 1861, 1861, 1861, 1861, 1861, 1861,
     1871, 1871, 1871, 1871, 1871, 1871, 1871, 1871, 1871, 1871,
     1875, 1875, 1875, 1875, 1875, 1875, 1875, 1875, 1875, 1875,
     1877, 1877, 1877, 1877, 1877, 1877, 1877, 1877, 1877, 1877,
     1887, 1887, 1887, 1887, 1887, 1887, 1887, 1887, 1887, 1887,
     1891, 1891, 1891, 1891, 1891, 1891, 1891, 1891, 1891, 1891,
     1847, 1847, 1847, 1847, 1847, 1847, 1847, 1847, 1847, 1847,
     1903, 1903, 1903, 1903, 1903, 1903, 1903, 1903, 1903, 1903,
     1870, 1870, 1870, 1870, 1870, 1870, 1870, 1870, 1870, 1870,

     1908, 1908, 1908, 1908, 1908, 1908, 1908, 1908, 1908, 1908,
     1919, 1919, 1919, 1919, 1965, 1919, 1919, 1919, 1919, 1919,
     1934, 1934, 1934, 1934, 1934, 1934, 1934, 1934, 1934, 1934,
     1952, 1952, 1952, 1952, 1952, 1952, 1952, 1952, 1952, 1952,
     1951, 1951, 1951, 1951, 1951, 1951, 1951, 1951, 1951, 1951,
       57, 1965, 1965, 1965, 1965, 1965, 1965, 1965, 1965, 1965,
     1965, 1965, 1965, 1965, 1965, 1965, 1965, 1965, 1965, 1965,
     1965, 1965, 1965, 1965, 1965, 1965, 1965, 1965, 1965, 1965,
     1965, 1965, 1965, 1965, 1965, 1965, 1965, 1965, 1965, 1965,
     1965, 1965, 1965, 1965, 1965, 1965, 1965, 1965, 1965, 1965,

     1965, 1965, 1965, 1965, 1965, 1965, 1965, 1965, 1965, 1965,
     1965, 1965, 1965, 1965
    } ;

static yyconst flex_int16_t yy_chk[10315] =
    {   0,
        0,  148,    1,    1,    1, 1962,    1,    2,    2,    2,
      148,    2,    7,    7,    7,    7,   69,    7,    7,   70,
       70,   87,   65,   69,    8,    8,    8,    8,   87,    8,
        8,   11,   11,   11,   65,   11,   65,   15,   15,   15,
        1,   15,   35,  166,  166,    2,    3,    3,    3,    3,
        3,    7,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    8, 1953,   35,   16,   16,   16,   11,
       16,   62,  137,   62,  139,   15,   23,   23,   23,  137,
       23,  139,   21,   21, 1945,   21,    3,    4,    4,    4,
        4,    4,   22,    4,    4,    4,    4,    4,    4,    4,

        4,    4,    4,    4,   16,   21,   21,   62,   21,   13,
       22,   85,   13,   13,   23,   13,  292,   85,  292,   24,
       22, 1944,   67,   22,   67,   73,   67,    4,    5,    5,
        5,    5,   13,    5,   22,   13,   13, 1908,   13,   24,
       39,   39,   39,   22,   39,    5,   22,   74,   73,    5,
       29,   29,   29,   29,   99,   29,   29,   29,  180,   29,
       67,    5,  293,   24,  293,  180,   99,    5,   99,    5,
       74,   75, 1903,    5,   30,   30,   30,   30,   39,   30,
       30,   30,   77,   30,    5,    6,    6,    6,    6,   29,
        6,   31,   31,   31,   75,   31,   31,   40,   40,   40,

       31,   40,    6,   80,   80,  102,    6,  164,   77,   80,
       83,   83,  154,   30,  128,  107,   83,  107,    6,  164,
      186,  164,  167,  297,    6,  297,    6,  937,  102,   31,
        6,   77,  186,  167,  186,   40,  154,  128,  107,  937,
      107,    6,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,

        9,    9,    9,    9,    9,   10,   10,   10,   10,   10,
       10,   10,   10,   10,   10,   10,   10,   10,   10,   10,
       10,   10,   10,   10,   10,   10,   10,   10,   10,   10,
       10,   10,   10,   10,   10,   10,   10,   10,   10,   10,
       10,   10,   10,   10,   10,   10,   10,   10,   10,   10,
       10,   10,   10,   10,   10,   10,   10,   10,   10,   10,
       10,   10,   10,   10,   10,   10,   10,   10,   12,   12,
       12,   12,   91,   12, 1899,   88,   41,   41,   41,   91,
       41,   78,   88,   79,  188,   12,   12,   12,   12,   12,
      188,  302,   12,  302,  161,   12,  161,   91,   88,   12,

       12,   12,   12, 1887,   42,   42,   42,   12,   42,   12,
       12,   12,   12,   12,   41,   78,   12,   79,   12,  145,
       91,   88,   12,   12,   12,   12,   14,   32,   32,   32,
      161,   32,   32,   49,   49,   49,   32,   49,   78,  145,
       79,  153,   42,  159,   14,  160,   14,  163,  163,  189,
      189,   37,   37,   37,   14,   37,  163,   14,   14,   89,
       14,  207,  207,  145,  153,   32,   89,  159,   14,  160,
       14,   49,   51,   51,   51,  221,   51,   14,   37,   89,
       14,   14,  221,   14,   17,   17,   17,   17,   17,   37,
       17,   17,   17,   17,   17,   17,   17,   17,   17,   17,

       17,   37,  121,   89,   52,   52,   52,   95,   52,  203,
       51,   53,   53,   53,   95,   53,   54,   54,   54,   95,
       54,  203, 1878,  203,   17,   18,   18,   18,   18,   18,
      121,   18,   18,   18,   18,   18,   18,   18,   18,   18,
       18,   18,   52,   95,   92,   94,   55,   55,   55,   53,
       55,   92,   94,  121,   54,  176,   90,  176, 1875,  176,
      109,   94,  331,   90,  109,   18,   19,   19,   19,   19,
       19,   92,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,  109,   55,   94,  331,  109,   96,   90,
      192,  219,  205,  176,   92,   96,  596,  219,  596,  192,

       96,  205,  155,  156,  157,  120,   19,   20,   20,   20,
       20,   20,   90,   20,   20,   20,   20,   20,   20,   20,
       20,   20,   20,   20,   96,  155,  156,  157,  103,  597,
      104,  346,  103,  104,   97,  103,  104,  346,  199,  120,
      199,   97,  597,  108,   72,  116,  108,   20,   25,   25,
       25,   25,  103,   25,  104,  103,  104,   25,  103,  104,
       25,   72,  120,   97,   25,   72,  108,   25,   25,  108,
      114,  116,   25,  111,  199,  218,  114,   72,   25,   25,
      111,   25,   25,  170,  218,   72,   97,   25,   25,   72,
      106,   25,   25,  114,  116,  117,   25,  111,  106,  114,

       72,   25,   25,  111,   25,   25,   26,   26,   26,   26,
      105,   26,  105,  106,  281,   26,  174,  117,   26,  170,
      105,  106,   26,  281,  117,   26,   26,  135,  478,  118,
       26,  174,  122,  105,  135,  105,   26,   26,  347,   26,
       26,  117,  170,  105,  347,   26,   26,  117, 1872,   26,
       26,  135,  478,  123,   26,  174, 1862,  135,  118,   26,
       26,  122,   26,   26,   27,   27,   27,   27,   27,  125,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,  118,  124,  175,  122, 1859,  177,  123,  184,  184,
      383,  126,  177,  510,  184,  177,  383,  184,  175,  510,

      177,  124,  184,  125,   27,   28,   28,   28,   28,   28,
      123,   28,   28,   28,   28,   28,   28,   28,   28,   28,
       28,   28,  175,  201,  201,  124,  125,  214,  126,  214,
      129,  276,  201,  517,  284,  284,  276,  129,  276,  517,
      171,  119,  129,  284, 1854,   28,   33,   33,   33,   33,
       33,  126,   33,   33,   33,   33,   33,   33,   33,   33,
       33,   33,   33,  214,  129,  112,  129,  119,  171,  119,
      131,  216,  127,  282,  131,  288,  112,  131,   33,  127,
      282,  242,  288,  216,  112,  216,   33,  129, 1840,  112,
      119,  171,  119,  242,  131,  242,  168,  131,  127,  112,

      131,   33,   34,   34,   34,   34,   34,  112,   34,   34,
       34,   34,   34,   34,   34,   34,   34,   34,   34,  113,
     1838,  127,  168,  286,  286,  244,  468,   76,   76,  130,
      113,  238,  318,  169,   34,  468,  132,  146,  132,  318,
      172,  113,   34,  113,   76,  168,  132,  130,   76,  130,
     1835,  244, 1821,  113,  238,  320,  169,   34,   36,  132,
       76,  132,  320,  146,  113,  146, 1816,  241,   76,  132,
      172,  130,   76,  130,  244,   36,   36,   36,   36,   36,
      169,  133,   36,   76,  133,   36,  146,  241,  146,   36,
       36,   36,   36,  172,  321,  321,  484,  484,  351,   36,

       36,   36,   36,   36,  133,  351,   36,  133,   36,  485,
      485,  241,   36,   36,   36,   36,   38,   38,   38,   38,
       38,   38,   38,   38,   38,   38,   38,   38,   38,   38,
       38,   38,   38,   38,   38,   38,   38,   38,   38,   38,
       38,   38,   38,   38,   38,   38,   38,   38,   38,   38,
       38,   38,   38,   38,   38,   38,   38,   38,   38,   38,
       38,   38,   38,   38,   38,   38,   38,   38,   38,   38,
       38,   38,   38,   38,   38,   38,   38,   38,   38,   43,
       43,   43,   43,   43,  248,   43,   43,   43,   43,   43,
       43,   43,   43,   43,   43,   43,  246, 1812,  264,  511,

      511,  208, 1811,  208,  220,  208,  220,  239,  220,  239,
      264,  256,  264,  256,  141,  256, 1796,  141,  248,   43,
       44,   44,   44,   44,   44,  246,   44,   44,   44,   44,
       44,   44,   44,   44,   44,   44,   44,  141,  142,  208,
      141,  248,  220,  239,  520,  520,  526,  526,  246,  256,
      261,  270,  261,  270,  261,  326,  142, 1774,  142,  232,
       44,   45,   45,   45,   45,   45,  232,   45,   45,   45,
       45,   45,   45,   45,   45,   45,   45,   45,  326,  353,
      142,  253,  142,  232,  483,  483,  353,  270,  261,  232,
      266,  252,  266,  483,  266, 1768,  229,  228,  229,  228,

      253,   45,   46,   46,   46,   46,   46,  228,   46,   46,
       46,   46,   46,   46,   46,   46,   46,   46,   46,  229,
      228,  229,  228, 1757,  253,  252, 1742,  274,  266,  274,
      228,  274,  295,  304,  295,  304, 1733,  230,  327, 1707,
      230,  255,   46,   47,   47,   47,   47,   47,  252,   47,
       47,   47,   47,   47,   47,   47,   47,   47,   47,   47,
      230,  327,  272,  230,  446,  274,  339,  339,  295,  304,
      448,  446,  339,  452,  272,  249,  272,  448,  255,  328,
      452,  254,  222,   47,   48,   48,   48,   48,   48,  222,
       48,   48,   48,   48,   48,   48,   48,   48,   48,   48,

       48,  255,  328,  249,  298,  143,  136,  226,  306,  143,
      222,  226,  143,  222,  226,  254,  298,  136,  298,  245,
      306, 1696,  306,  277,   48,   50,  249,   50,  136,  143,
      136,  226,  143,  222,  226,  143,  222,  226,  254,  329,
      136,  245,   50,   50,   50,   50,   50, 1664,  245,   50,
      479,  136,   50,  277,  330,  521,   50,   50,   50,   50,
      528,  528,  329,  577,  521,  245,   50,   50,   50,   50,
       50,  245,  577,   50,  479,   50,  277,  330,  250,   50,
       50,   50,   50,   71,   71,   71,   71,   71,   71,   71,
       71,   71,   71,   71,   71,   71,   71,   71,   71,   71,

      247,  158, 1666,  227,  584,  584,  227,  250,  334,  227,
      233,  234,  251,  333, 1666,  158, 1660,  158,  280,  280,
      158,  233,  234,   71,   93,  158,  247,  227,  247,  227,
      250,   93,  227,  234,  233,  234,   93,  338,  158,  333,
      158,  251,  334,  158,  233,  234,  382,  385,  280,  247,
       93,  247,   93,  338,  454,   93,  234,  344,  344, 1651,
       93,  454,  333,  344,  251,  334,  381,  381,  647,  382,
      385,  280,  381,   93,  647,   93, 1650,  338,   93,   98,
       98,   98,   98,   98,   98,   98,   98,   98,   98,   98,
       98,   98,   98,   98,   98,   98,   98,   98,   98,   98,

       98,   98,   98,   98,   98,   98,   98,   98,   98,   98,
       98,   98,   98,   98,   98,   98,   98,   98,   98,   98,
       98,   98,   98,   98,   98,   98,   98,   98,   98,   98,
       98,   98,   98,   98,   98,   98,   98,   98,   98,   98,
       98,   98,  100,  100,  100,  100,  100,  100,  100,  100,
      100,  100,  100,  100,  100,  100,  100,  100,  100, 1637,
      525,  525,  300,  308,  300,  308,  300,  308,  335,  525,
      503,  505,  531,  364,  336,  982,  337,  503,  505,  531,
      364,  982,  100,  101,  101,  101,  101,  101,  101,  101,
      101,  101,  101,  101,  101,  101,  101,  101,  101,  101,

      300,  308,  335,  336,  337,  364,  377,  480,  355,  173,
      363,  101,  325,  377,  354,  355,  995,  363,  386,  428,
     1629,  354,  995,  101,  173,  335,  336,  337,  364,  325,
      377,  480,  355,  325,  101,  110,  377,  354,  173,  363,
      173,  386, 1585,  173,  371,  325,  110,  371,  173,  110,
     1007,  110,  428,  325,  110,  355, 1007,  325,  392,  110,
      354,  173,  363,  173,  356,  392,  173,  371,  325,  110,
      371,  356,  110,  359,  110,  428,  357,  110,  115,  115,
      359, 1009,  392,  357,  358, 1554,  533, 1009,  392, 1542,
      372,  358,  372,  533,  356,  115,  115,  115,  115,  115,

      366,  359,  115,  397,  410,  115,  357,  366,  397,  115,
      115,  115,  115,  372,  358,  372,  366,  356,  360,  115,
      115,  115,  115,  115,  359,  360,  115,  397,  115,  357,
      410,  397,  115,  115,  115,  115,  134,  358,  360,  539,
      366,  370,  414, 1537,  374,  370,  374,  134,  370,  365,
      134,  579,  134,  410,  361,  134,  365,  581,  579,  362,
      134,  361,  360,  539,  581,  370,  362,  374,  370,  374,
      134,  370,  362,  134,  361,  134,  414,  365,  134,  138,
      138,  138,  138,  138,  138,  138,  138,  138,  138,  138,
      138,  138,  138,  138,  138,  138,  362,  498,  361,  414,

      365,  509,  509,  498,  583,  583,  498,  509, 1523,  565,
      509,  498, 1505,  583,  565,  509,  565,  588,  588,  138,
      140,  140,  140,  140,  140,  140,  140,  140,  140,  140,
      140,  140,  140,  140,  140,  140,  140,  332,  332,  375,
      373,  399,  375,  376,  412,  378,  399, 1440,  373, 1427,
      568,  376, 1421,  378,  332,  568,  379,  568,  332,  540,
      140,  144,  375,  373,  399,  375,  376,  379,  378,  399,
      332,  373,  144,  412,  376,  144,  378,  144,  332,  379,
      144,  432,  332,  540,  589,  144, 1017,  591,  839,  839,
      379,  589, 1017,  332,  591,  144,  412,  432,  144,  387,

      144,  472,  387,  144,  187,  187,  187,  187,  187,  187,
      187,  187,  187,  187,  187,  187,  187,  187,  187,  187,
      187,  432,  387,  631,  472,  387,  774,  631,  923,  923,
      774,  996,  996, 1419,  631, 1094, 1094,  774,  774,  389,
      389,  389,  390,  390,  187,  223,  223,  223,  223,  223,
      223,  223,  223,  223,  223,  223,  223,  223,  223,  223,
      223,  223,  389,  389,  389,  390,  390,  826,  826,  422,
      843,  843, 1082,  826,  994,  994,  843, 1403, 1082, 1402,
      994,  395, 1381,  395,  422,  223,  224,  224,  224,  224,
      224,  224,  224,  224,  224,  224,  224,  224,  224,  224,

      224,  224,  224,  388,  395,  391,  395,  393,  422,  394,
      396,  398,  991,  391,  388,  393,  394,  396,  398,  224,
      402, 1360,  224,  991, 1173, 1173,  224,  388,  391,  426,
      402,  393,  394,  396,  398,  402,  391,  388,  393,  394,
      396,  398,  224, 1352,  402,  224,  225,  426,  400,  418,
      846,  400,  405,  402,  846, 1176, 1176,  401,  402,  846,
      401,  846,  405,  225,  225,  225,  225,  225,  418, 1341,
      225,  426,  400,  225,  400,  465,  405,  225,  225,  225,
      225,  401,  403,  401,  403,  405, 1329,  225,  225,  225,
      225,  225,  418,  403,  225,  465,  225, 1283,  404,  403,

      225,  225,  225,  225,  231,  408,  403,  404,  403,  406,
      417,  419,  408,  407,  406,  231,  403,  407,  231,  465,
      231,  404,  403,  231, 1020, 1016, 1016,  434,  231,  408,
      404, 1016,  406, 1020,  434,  408,  407,  406,  231, 1264,
      407,  231,  434,  231,  417,  419,  231,  279,  279,  279,
      279,  279,  279,  279,  279,  279,  279,  279,  279,  279,
      279,  279,  279,  279,  425,  458,  434,  417,  419,  459,
     1108,  535,  458, 1081, 1081, 1259,  459, 1108,  535, 1081,
     1239, 1081,  459,  425,  535,  458,  420,  279,  285,  285,
      285,  285,  285,  285,  285,  285,  285,  285,  285,  285,

      285,  285,  285,  285,  285,  429,  459,  425,  535,  458,
      431,  983,  983, 1010, 1010, 1084, 1084, 1429, 1429, 1498,
     1498, 1084,  983,  420, 1010,  431,  429,  431,  285,  290,
      290,  290,  290,  290,  290,  290,  290,  290,  290,  290,
      290,  290,  290,  290,  290,  290,  420,  437,  460,  431,
      429,  431, 1030, 1030, 1085, 1238, 1130, 1130, 1030, 1195,
     1085, 1030, 1130, 1185,  473,  437,  460,  437,  460,  290,
      322,  322,  322,  322,  322,  322,  322,  322,  322,  322,
      322,  322,  322,  322,  322,  322,  322,  473, 1157,  437,
      460,  437,  460,  495, 1157,  415, 1171, 1184, 1194, 1495,

     1495, 1495, 1171, 1184, 1194,  439,  474,  439,  475,  495,
      322,  323,  323,  323,  323,  323,  323,  323,  323,  323,
      323,  323,  323,  415,  323,  323,  323,  323,  439,  474,
      439,  475,  467,  495, 1196, 1172, 1221, 1232, 1232, 1598,
     1598, 1196, 1221, 1232, 1168,  558,  415,  440,  440,  440,
      467,  323,  324,  324,  324,  324,  324,  324,  324,  324,
      324,  324,  324,  324,  324,  324,  324,  324,  324,  558,
      440,  440,  440, 1100,  467, 1083, 1083, 1100, 1241, 1100,
     1521, 1521, 1521, 1158, 1100, 1241, 1083,  445,  462,  462,
      462,  445,  324,  368,  368,  368,  368,  368,  368,  368,

      368,  368,  368,  368,  368,  368,  368,  368,  368,  368,
      445,  462,  462,  462,  445, 1107, 1091, 1258, 1263, 1107,
     1090, 1107,  424, 1258, 1263,  416, 1107,  413,  421,  411,
      430,  984,  423,  368,  369,  369,  369,  369,  369,  369,
      369,  369,  369,  369,  369,  369,  369,  369,  369,  369,
      369,  411,  938,  413,  416,  413,  424,  421,  411,  423,
     1106,  430,  369, 1275, 1106, 1613, 1613, 1282,  920, 1275,
      427, 1106, 1106, 1282,  369,  411,  413,  416,  413,  424,
      421,  411,  423,  433,  430,  369,  384,  384,  384,  384,
      384,  384,  384,  384,  384,  384,  384,  384,  427,  384,

      384,  384,  384, 1160, 1160,  436,  476,  915,  477,  441,
      613,  438,  436,  433, 1160,  438, 1285,  441,  438, 1387,
      481,  427,  889, 1285,  852, 1387,  384,  409,  409,  476,
      435,  477,  436,  441,  613,  438,  433,  435,  438,  463,
      441,  438,  463,  481,  409,  409,  409,  409,  409,  442,
      435,  409, 1617, 1617,  409,  436,  435,  442,  409,  409,
      409,  409,  614,  463,  487,  463,  482,  804,  409,  409,
      409,  409,  409,  442,  435,  409,  444,  409,  444,  435,
      442,  409,  409,  409,  409,  443,  614,  444,  443,  482,
      487,  443,  534, 1110, 1404,  792,  624, 1110,  776,  534,

      444, 1404,  444,  624, 1110, 1110, 1620, 1620,  624,  443,
      444,  443,  534,  487,  443,  449,  449,  449,  449,  449,
      449,  449,  449,  449,  449,  449,  449,  449,  449,  449,
      449,  449,  624, 1187, 1187, 1280,  534, 1257, 1257, 1280,
      755,  488, 1441, 1257, 1187, 1257, 1280, 1280,  649, 1441,
      543,  570,  544,  543,  544,  449,  450,  450,  450,  450,
      450,  450,  450,  450,  450,  450,  450,  450,  488,  450,
      450,  450,  450,  543,  570,  544,  543,  544, 1261, 1261,
     1316, 1316, 1336, 1336, 1661, 1661, 1316, 1641, 1336, 1261,
      554,  488,  545, 1641,  545,  554,  450,  451,  451,  451,

      451,  451,  451,  451,  451,  451,  451,  451,  451,  451,
      451,  451,  451,  451,  554,  545,  561,  545,  554, 1211,
     1211, 1211, 1567, 1211, 1716, 1716, 1397, 1397,  648, 1567,
     1211, 1211, 1397,  546,  561,  489,  546,  451,  455,  455,
      455,  455,  455,  455,  455,  455,  455,  455,  455,  455,
      455,  455,  455,  455,  455,  559,  546,  612,  561,  546,
     1260, 1260,  611, 1668, 1374, 1374, 1374,  610,  489, 1260,
     1668,  609, 1260,  550,  550,  559, 1374,  615,  455,  456,
      456,  456,  456,  456,  456,  456,  456,  456,  456,  456,
      456,  489,  456,  456,  456,  456,  550,  550, 1361,  559,

      615,  604, 1361, 1720, 1720, 1514, 1514, 1583, 1583, 1361,
      490, 1514,  491, 1583,  466,  492,  496, 1866, 1866,  456,
      457,  457,  457,  457,  457,  457,  457,  457,  457,  457,
      457,  457,  457,  457,  457,  457,  457,  461,  464,  603,
      466,  461,  466,  490,  461,  491,  492,  493,  464,  494,
      497,  496,  553,  464,  602,  633, 1551, 1551, 1551,  553,
      457,  461,  464,  466,  461,  466,  490,  461,  491,  492,
      493,  464,  494,  542,  496,  553,  464,  542,  633,  623,
      542,  497,  553,  562, 1582,  616,  623, 1627, 1627, 1681,
     1582,  601, 1582, 1627,  493, 1681,  494,  542,  709,  623,

      542,  562,  616,  542,  497,  514,  514,  514,  514,  514,
      514,  514,  514,  514,  514,  514,  514,  514,  514,  514,
      514,  514,  709,  623,  630,  562,  616, 1262, 1262, 1635,
     1635,  630, 1922, 1922,  547, 1635, 1262, 1684, 1262, 1262,
      557,  547,  630, 1684,  557,  514,  515,  515,  515,  515,
      515,  515,  515,  515,  515,  515,  515,  515,  547,  515,
      515,  515,  515,  557,  547,  617,  630,  557,  620,  621,
     1638, 1638, 1638, 1647, 1647,  620,  621, 1924, 1924, 1647,
      582,  667,  617,  710,  620,  621,  515,  516,  516,  516,
      516,  516,  516,  516,  516,  516,  516,  516,  516,  516,

      516,  516,  516,  516,  667,  629,  617,  710,  620,  621,
     1420, 1710,  629,  578, 1683, 1683, 1683, 1710,  572, 1420,
     1683,  629, 1420,  634,  657,  657,  634,  516,  536,  536,
      536,  536,  536,  536,  536,  536,  536,  536,  536,  536,
      536,  536,  536,  536,  536,  629,  634,  657,  657,  634,
     1281, 1669,  567, 1737, 1281, 1925, 1925, 1669,  551, 1669,
     1737, 1281, 1281,  636,  636,  636,  551,  669,  536,  537,
      537,  537,  537,  537,  537,  537,  537,  537,  537,  537,
      537,  551,  537,  537,  537,  537,  636,  636,  636,  551,
      669,  530, 1693, 1693, 1704, 1704, 1517, 1517, 1517, 1693,

     1704, 1926, 1926,  688,  706,  569,  575,  575, 1517,  537,
      538,  538,  538,  538,  538,  538,  538,  538,  538,  538,
      538,  538,  538,  538,  538,  538,  538,  706, 1713,  548,
      549,  552,  555,  556, 1713,  569,  575,  688,  576,  552,
      548,  549,  555,  618,  556,  527,  678, 1931, 1931,  712,
      538,  541,  548,  560,  549,  552,  555,  556,  569,  575,
      688,  524,  552,  548,  549,  555,  576,  556,  541,  541,
      541,  541,  541,  712,  618,  541, 1841,  678,  541,  560,
      627,  560,  541,  541,  541,  541,  522,  627, 1841,  576,
      519, 1759,  541,  541,  541,  541,  541,  618, 1759,  541,

      678,  541,  560,  627,  560,  541,  541,  541,  541,  571,
      571,  571,  571,  571,  571,  571,  571,  571,  571,  571,
      571,  571,  571,  571,  571,  571,  627, 1373, 1373, 1373,
     1433, 1373,  518, 1814, 1433,  513,  619,  512, 1373, 1373,
     1814, 1433, 1433,  619,  640,  650,  640,  708,  650,  571,
      573,  573,  573,  573,  573,  573,  573,  573,  573,  573,
      573,  573,  619,  573,  573,  573,  573,  640,  650,  640,
      708,  650, 1682, 1682, 1719, 1663, 1732,  508, 1682,  506,
     1719, 1663, 1732, 1682,  642,  619,  665, 1663,  665,  642,
      573,  574,  574,  574,  574,  574,  574,  574,  574,  574,

      574,  574,  574,  574,  574,  574,  574,  574,  642,  665,
      677,  665,  642, 1438, 1730, 1730, 1730, 1438, 1750, 1750,
     1750, 1964, 1964, 1740, 1438, 1438,  646,  677,  713, 1740,
      646,  574,  585,  585,  585,  585,  585,  585,  585,  585,
      585,  585,  585,  585,  585,  585,  585,  585,  585,  646,
      500,  677,  713,  646,  680, 1739, 1739, 1744, 1744, 1747,
      625, 1739,  499,  486, 1744, 1747,  662,  625,  714,  662,
      680,  470,  585,  586,  586,  586,  586,  586,  586,  586,
      586,  586,  586,  586,  586,  625,  586,  586,  586,  586,
      662,  714,  662,  692,  680,  683, 1767, 1691, 1691, 1771,

      692,  469, 1767,  380,  349, 1771,  348,  663,  625, 1691,
      663,  692,  683,  586,  587,  587,  587,  587,  587,  587,
      587,  587,  587,  587,  587,  587,  587,  587,  587,  587,
      587,  663,  684,  663,  686,  692,  683, 1561, 1746, 1746,
     1830, 1561,  342, 1561, 1746, 1873, 1746, 1830, 1561, 1561,
      715,  684, 1873,  686,  587,  592,  592,  592,  592,  592,
      592,  592,  592,  592,  592,  592,  592,  592,  592,  592,
      592,  592,  690,  715, 1564,  684,  626,  686, 1564,  341,
      317, 1711, 1711,  626,  316, 1564, 1564, 1711,  315,  314,
      653,  690, 1711,  716,  653,  592,  593,  593,  593,  593,

      593,  593,  593,  593,  593,  593,  593,  593,  626,  593,
      593,  593,  593,  653, 1773,  690,  716,  653, 1565,  312,
     1773,  307, 1565,  305,  299,  628, 1776, 1776, 1776, 1565,
     1565,  626,  628,  296,  717,  283,  593,  594,  594,  594,
      594,  594,  594,  594,  594,  594,  594,  594,  594,  594,
      594,  594,  594,  594,  622,  637,  628,  635,  717,  638,
      718,  622,  641,  637,  639, 1795,  638,  654,  635,  641,
      622, 1795,  639,  732,  654,  643,  733,  594,  637,  628,
      643,  635,  622,  638,  718,  641,  637, 1799,  639,  638,
      654,  635,  641, 1799,  622,  639,  732,  654,  643,  733,

     1802, 1802, 1802,  643,  273,  622,  632,  632,  632,  632,
      632,  632,  632,  632,  632,  632,  632,  632,  645,  632,
      632,  632,  632,  644,  651,  644,  687,  652,  645,  655,
      656, 1893,  652,  651,  644,  685,  655,  659, 1893,  271,
      656,  265,  645,  262,  659,  748,  632,  644,  651,  644,
      652,  645,  687,  655,  656,  652,  651,  644,  685,  655,
      660,  659,  664,  656,  658,  658,  658,  659,  748,  660,
      666,  661,  260,  664,  259,  687,  676,  257,  661,  666,
      668,  658,  685,  661,  660,  658,  664,  668,  243,  673,
      670,  658,  660,  666,  673,  661,  664,  658,  670,  671,

      681,  661,  666,  676,  668,  658,  661,  671,  672,  658,
      668,  674,  673,  670,  658,  672,  674,  673,  675,  679,
      658,  670,  671,  689,  691,  675,  676,  681,  695,  699,
      671,  691,  672,  240,  699,  674,  695,  867,  672,  674,
      693,  871,  675,  682,  682,  682,  236,  693,  675,  679,
      681,  696,  695,  699,  689,  691,  693,  699,  696,  695,
      682,  867,  217,  215,  682,  871,  694,  694,  694,  697,
      697,  697,  679,  213,  696,  698,  682,  689,  691,  700,
      693,  696,  212,  698,  682,  701,  700,  702,  682,  694,
      694,  694,  701,  719,  702,  704,  697,  697,  698,  682,

      697, 1815,  704,  700,  206,  705,  698, 1815,  204,  700,
      702,  703,  703,  703,  705,  711,  200,  701,  704,  697,
      697,  723,  719,  697,  720,  704,  724,  711,  705,  707,
      707,  707,  721,  702,  703,  703,  703,  705,  725,  711,
      701,  724,  722,  720,  723,  719,  726,  730,  727,  729,
      711,  721,  728,  734,  730,  731,  198,  707,  739,  196,
      707,  722,  731,  739,  734,  724,  725,  720,  723,  752,
      729,  728,  190,  722,  727,  721,  736,  734,  731,  730,
      707,  726,  739,  707,  736,  722,  739,  734,  750,  725,
      735,  735,  737,  182,  729,  728,  722,  727,  738,  736,

      737,  731,  730,  752,  726,  738,  740,  736,  741,  181,
      742,  750,  741,  735,  735,  742,  737,  740,  743,  744,
      745,  738,  743,  737,  747,  746,  752,  747,  738,  744,
      740,  741,  746,  742,  179,  741,  753,  746,  742,  749,
      740,  743,  754,  744,  757,  743,  749,  745,  747,  746,
      747,  758,  744,  759,  745,  746,  751,  751,  751,  753,
      746,  760,  761,  749,  762,  763,  765,  757,  754,  749,
      745,  764,  763,  765,  758,  766,  759,  745,  764,  763,
      751,  767,  766,  769,  165,  768,  760,  788,  767,  797,
      769,  754,  768,  762,  765,  761,  764,  162,  770,  152,

      766,  767,  151,  763,  751,  770,  772,  769,  771,  760,
      788,  768,  797,  772,  773,  771,  762,  765,  761,  764,
      771,  773,  775,  766,  777,  767,  772,   86,  770,  775,
      769,  778,  800,  777,  768,  780,  778,  773,  775,  781,
      838,  779,  780,  805,  771,  779,  782,  782,  777,  781,
      772,  770,  784,   82,  778,  800,  777,  838,  780,  778,
      773,  784,  775,  781,  779,  780,  805,  875,  779,  782,
      782,  785,  781,  783,  783,  783,  784,  827,  785,  786,
      787,  838,  786,   68,  784,  789,  821,  787,   66,  791,
      783,  875,  790,  789,  783,  785,  791,  790,  794,   63,

      783,  785,  827,  786,  787,  786,  783,  794,  789,  821,
      787,  795,  795,  791,  783,  790,  789,  796,  783,  791,
      790,  798,  794,  783,  799,  827,  799,  836,  796,  783,
      794,  806,  798,  801,  795,  795,  807,  831,   57,  806,
      801,  796,    0,    0,  807,  798,  818,  799,  808,  799,
      876,  796, 1820,  808,  806,  798,  831,  801, 1820,  807,
      836,  809,  806,  801,  802,  802,  802,  807,  809,  811,
      802,  808,  811,  818,  876,  813,  808,    0,  813,  812,
      831,  802,  810,  836,  809,  802,    0,  810,  812,  810,
        0,  809,  810,  811,  878,  811,  818,  802,  813,  814,

      814,  813,  816,  812,    0,  802,  810,  815,  829,  802,
      810,  812,  810,  816,  815,  810,  817,  822,  878,  817,
      802,    0,  814,  814,  823,  834,  816,  823,  830,  822,
      815,    0,  833,  820,  829,  825,  816,  815,  820,  824,
      817,  825,  817,  819,  822,  835,  824,  823,    0,  819,
      823,  819,  819,  828,  830,  819,  820,  829,  833,  834,
      819,  820,  825,  824,  819,  837,  841,  822,  828,  824,
      819,  842,  855,  832,  832,  832,  819,  830,    0,  835,
      844,  833,  834,  893,  819,  825,  837,  844,  819,  845,
      832,  894,  828,  819,  832,  855,  845,  841,  847,  819,

      842,  853,  835,  844,  853,  847,  832,  893,  849,    0,
      837,    0,    0,  921,  832,  894,  857,  845,  832,  849,
      841,  847,  857,  842,  853,  857,  844,  853,  847,  832,
      840,  840,  849,  848,  848,  848,  840,  921,  840,  854,
      845,  866,  849,  857,  854,  858,    0,  840,  850,  850,
      850,  840,  858, 1040,  850,    0,    0,  858,  861,    0,
      848,  848,  854,  840,  848,  856,  857,  854,  865,  861,
      856,  840,  866,  860,    0,  840,  850, 1040,  859,  850,
      860,  858,  861,  848,  848,  859,  840,  848,  856,  862,
      880,  863,  861,  856,  863,  866,  860,  865,  859,  850,

      862,  868,  850,  860,  864,  864,  864,  869,  870,  879,
      872,  873,  881,  862,  874,  863,  882,  863,  880,  885,
      865,  886,  859,  862,  868,  883,  879,  884,  890,  888,
      869,  870,  864,  872,  873,  864,  887,  874,    0,    0,
      895,  880,  892,  881,  882,  895,  885,  890,  883,  892,
      879,  887,  888,  891,  886,  864,  884,  896,  864,  901,
      891,  896,  892,  895,  897,  891,  881,  882,  895,  885,
      903,  890,  883,  898,  897,  887,  888,  886,  899,  884,
      896,  903,  901,  904,  896,  899,  892,  900,  897,  891,
      900,  902,    0,  905,  903,  906,  906,  897,  902,  907,

      898,  906,  899,  912,  903,  918,  904,  898,  899,  916,
      907,  900,  908,  900,  919,  902,  905,  908,  911,  908,
      917,  902,  907,  898,  911,  909,  912,  922,  918,  906,
      898,  925,  927,  907,  909,  910,  908,  916,    0,  927,
      908,  910,  908,  910,  910,  911,  917,  910,  924,  909,
      922,  919,  906,  913,  913,  913,    0,  909,  942,    0,
      916,  927,  910,  926,    0,  925,  928,    0,  911,  917,
      926,  924,  929,  928,  919,  926,  932,  913,    0,  929,
      930,  942,  931,  932,  927,  910,    0,  930,  925,  931,
      934,  928,  932,  933,    0,  924,  935,  934,  944,  926,

      933,  913,  929,  935,  946,  930,  936,  931,  939,  933,
      935,  941,    0,  936,  928,  939,  932,  940,  940,  952,
      934,  944,  941, 1824,  945,  929,  943,  946,  930, 1824,
      931,  945, 1046,  933,  935,  941,  936,  943,  939,  947,
      940,  940,  949,  934,  948,  941,  952,  947,  945,  949,
      943,    0,  948,  950,  945,  951, 1046,  958,  950,  936,
      943,  939,  947,  950,  951,  949,  985,  948,  956,  952,
      947,    0,  949,    0,  956,  948, 1837,  950,  954,  951,
      957,  950, 1837,  954,  958,  997,  950,  951,  953,  985,
      955,  957, 1861,  955,  953,  956,  953,  953, 1861,  959,

      953,  954,  997, 1047,  957,  953,  954,  958,  959,  953,
      960,    0,    0,  955,  957,  953,  955,  960,  956,  961,
        0,  953,  961,  959,  962,  963,  997, 1047,    0,  953,
      962,  959,  963,  953,  960,  964,  965,  964,  953,  965,
      960,  967,    0,  961,  953,  961,  966,  962,  966,  963,
      968,  967,  968,  962,  969,  963,  971,  969,  964,  965,
      964,  970,  965,  971,  972,  967,  974,    0,  970,  966,
      972,  966,    0,  968,  967,  968,    0,  974,  969,  971,
      969,  973,  975,  973,  975,  970,  971,  976,  972,  977,
      974,  970,  978,  972,  976,  986,  977, 1006, 1011,  978,

      974,  979,  998,  986,  973,  975,  973,  975,  987,    0,
      979,  976, 1006,  977,  988,  978,  987,  976,  986,  977,
      988,  998,  978,    0, 1011,  979,  986,  999, 1869, 1869,
     1869,  987, 1000,  979,  980,  980, 1006,  988,    0,  987,
      980,  989,    0,  988, 1001,  998,  999, 1011,  989,  992,
     1877,  980,  980,  980,  980,  980, 1877,  992,  980, 1002,
     1000,  980, 1014,    0,  989,  980,  980,  980,  980,    0,
      999,  989,  992, 1001,  993,  980,  980,  980,  980,  980,
      992,  993,  980, 1000,  980, 1004, 1003, 1002,  980,  980,
      980,  980,  981,  981, 1014, 1005, 1001,  993,  981, 1018,

      981, 1041, 1003, 1049,  993, 1042, 1018, 1043, 1004,  981,
     1002, 1012, 1013,  981, 1005, 1018, 1065, 1014,    0,    0,
     1015, 1044, 1822, 1822, 1041,  981, 1003, 1049, 1042, 1033,
     1043, 1822, 1004,  981, 1822, 1019, 1033,  981, 1005, 1018,
     1065, 1021, 1019, 1033, 1044, 1012, 1013, 1019,  981,  990,
      990,  990,  990,  990, 1015,  990,  990,  990,  990,  990,
      990,  990,  990,  990,  990,  990,    0, 1033, 1012, 1013,
     1022, 1019, 1021, 1028, 1031, 1031, 1023, 1015, 1024, 1023,
     1028, 1022,    0, 1024, 1025, 1026,    0, 1025,    0,  990,
     1008, 1008,    0, 1026, 1022, 1021, 1008, 1028, 1008, 1023,

        0, 1024, 1023, 1028, 1022, 1031, 1024, 1008, 1025, 1026,
     1025, 1008, 1032, 1036, 1027, 1029, 1026, 1027, 1039, 1032,
     1036, 1034,    0, 1008, 1035, 1054, 1029, 1035, 1031, 1037,
     1052, 1008, 1034, 1038, 1045, 1008, 1036, 1027, 1037, 1029,
     1027, 1048, 1032, 1036, 1050, 1034, 1008, 1039, 1035, 1029,
     1035, 1038, 1053, 1037, 1051, 1034, 1055, 1045, 1054, 1056,
     1060, 1037, 1052, 1057, 1048, 1032, 1059, 1050, 1064, 1051,
     1039, 1058, 1061, 1067, 1068, 1038, 1919, 1060,    0, 1062,
     1053, 1054, 1057, 1919, 1055, 1052, 1062, 1056, 1063, 1066,
     1058, 1064, 1073, 1051, 1086, 1063, 1067, 1068, 1073, 1059,

     1066, 1060, 1063, 1053, 1069, 1061, 1057, 1055, 1077, 1062,
     1056, 1070, 1071, 1066, 1058, 1069, 1070, 1075, 1086, 1073,
        0, 1071, 1059, 1066, 1075, 1072, 1063, 1069, 1061, 1087,
        0, 1072, 1062, 1072, 1072, 1070, 1071, 1072, 1069, 1070,
     1074, 1075, 1073, 1076, 1071, 1077, 1079, 1075, 1092, 1074,
     1076, 1078, 1072, 1079, 1093, 1078, 1096, 1095, 1080, 1920,
     1088,    0, 1087,    0, 1074,    0, 1920, 1076, 1077, 1080,
     1079, 1092, 1074, 1076, 1078, 1072, 1079, 1093, 1078, 1088,
     1097, 1098, 1080, 1099, 1101, 1087, 1095, 1097, 1098, 1096,
     1099, 1101, 1080, 1102, 1111, 1099,    0, 1103, 1219, 1105,

     1102, 1098, 1112, 1088, 1103, 1102, 1105, 1104, 1220, 1095,
     1097, 1112, 1096, 1101, 1104, 1105, 1113, 1114,    0, 1099,
     1114, 1111, 1219, 1113, 1115, 1098, 1112, 1103, 1116, 1102,
     1116, 1115, 1220, 1097, 1112, 1104, 1101, 1124,    0, 1105,
     1113, 1114, 1117, 1114, 1111, 1117, 1113, 1118, 1115, 1118,
     1103, 1116, 1119, 1116, 1115, 1122, 1120, 1121, 1104, 1120,
     1124, 1122, 1119, 1125, 1121, 1117, 1123,    0, 1117, 1223,
     1118, 1125, 1118,    0,    0, 1126, 1119, 1123,    0, 1122,
     1120, 1121, 1120, 1126, 1122, 1119, 1125, 1121, 1128, 1127,
     1123, 1132, 1129, 1223, 1125, 1127, 1128, 1131, 1126, 1129,

     1123, 1132, 1135, 1133, 1131, 1133, 1126, 1134,    0, 1136,
     1134, 1128, 1127, 1226, 1132, 1129, 1136, 1143, 1127, 1128,
     1131, 1137, 1129, 1143, 1132, 1138, 1133, 1131, 1133, 1135,
     1137, 1134, 1136, 1134, 1138, 1139, 1140, 1226, 1141, 1136,
     1139, 1141, 1146, 1142, 1143, 1137,    0, 1140, 1142, 1138,
     1145, 1144, 1135, 1137, 1149, 1153, 1145, 1138, 1139, 1149,
     1140, 1141, 1144, 1139, 1141, 1146, 1142, 1143, 1152, 1147,
     1140, 1142, 1151, 1145, 1148, 1144, 1150, 1149, 1174, 1145,
     1147, 1148, 1149, 1150, 1151, 1144, 1154, 1162, 1155, 1153,
     1162, 1164, 1165, 1147, 1152, 1165, 1163, 1148, 1163, 1151,

     1150, 1164,    0, 1147, 1148, 1154, 1150, 1155, 1166, 1175,
     1162, 1174, 1153, 1162, 1166, 1164, 1165, 1152, 1165, 1163,
     1169, 1163, 1151, 1177, 1164, 1170, 1180, 1169,    0, 1154,
     1178, 1155, 1156, 1156, 1174, 1166, 1183, 1170, 1156,    0,
     1156, 1181, 1179, 1169, 1191, 1175, 1190, 1178, 1193, 1156,
     1169, 1182, 1170, 1156,    0, 1192, 1177, 1180, 1166, 1179,
     1191,    0, 1183, 1198,    0, 1156, 1189, 1242, 1175, 1206,
     1181, 1178, 1269, 1156, 1190, 1170, 1218, 1156, 1192, 1177,
     1180, 1193, 1182, 1179, 1191, 1183, 1186, 1186, 1156, 1159,
     1159, 1242, 1206, 1181, 1198, 1189, 1269, 1190, 1159, 1218,

     1222, 1159, 1192, 1186, 1193, 1182, 1159, 1186,    0, 1200,
     1159,    0, 1200, 1362, 1197, 1188, 1188, 1198, 1189, 1186,
     1201, 1197, 1159, 1222,    0,    0, 1188, 1186, 1201,    0,
     1159, 1186, 1188, 1200, 1159, 1200, 1188, 1362, 1197, 1203,
        0, 1203, 1186, 1216, 1201, 1159, 1161, 1161, 1188, 1199,
     1202, 1201, 1199, 1202, 1205, 1161, 1188, 1161, 1161, 1205,
     1188, 1197, 1203, 1161, 1203, 1224, 1204, 1161,    0, 1207,
     1207, 1188, 1199, 1202, 1204, 1199, 1202, 1216, 1205, 1161,
        0,    0, 1205,    0, 1231,    0,    0, 1161, 1224, 1204,
     1209, 1161, 1207, 1207, 1208, 1208,    0, 1204,    0, 1231,

     1216, 1217, 1161, 1167, 1167, 1167, 1167, 1167, 1167, 1167,
     1167, 1167, 1167, 1167, 1167, 1167, 1167, 1167, 1167, 1167,
     1210, 1209, 1217, 1231, 1209, 1208, 1212, 1210, 1213, 1212,
     1213, 1214, 1229,    0, 1233,    0, 1210,    0, 1214, 1225,
     1230, 1235, 1236, 1167, 1209, 1253, 1217, 1209, 1208, 1256,
     1212, 1213, 1212, 1213, 1234, 1214, 1215, 1215, 1215, 1237,
     1210, 1214, 1225, 1230, 1240, 1229, 1233, 1244, 1215, 1234,
     1245, 1240, 1256, 1236, 1235, 1253, 1244, 1245, 1237, 1246,
     1240,    0, 1265, 1215, 1249, 1252, 1246, 1230, 1229, 1233,
        0, 1244, 1363, 1234, 1245, 1249, 1236, 1235, 1253, 1244,

     1245, 1247, 1237, 1246, 1240, 1247, 1215, 1248, 1249, 1246,
     1250, 1251, 1252, 1265, 1248, 1254, 1363, 1250, 1249, 1266,
     1255, 1251, 1254, 1268, 1247, 1255, 1267, 1267, 1247, 1271,
     1270, 1248, 1297, 1250, 1251, 1252, 1265, 1248, 1266, 1254,
     1250, 1276, 1272, 1255, 1251, 1254, 1268, 1349, 1255, 1272,
     1313,    0, 1271, 1273, 1272, 1297,    0, 1267, 1270, 1274,
     1273, 1279, 1266, 1277, 1321, 1276, 1274, 1278, 1279,    0,
     1277, 1276, 1289, 1313, 1278, 1349, 1271, 1279, 1272, 1273,
     1267, 1270, 1274, 1277, 1347, 1286, 1287, 1321, 1290, 1276,
     1278, 1288, 1286, 1288, 1276, 1290, 1287, 1291, 1349, 1289,

     1384, 1279, 1273, 1292,    0, 1274, 1291, 1277, 1286, 1287,
        0, 1290, 1292, 1278, 1288, 1286, 1288, 1347, 1290, 1287,
     1293, 1291, 1289, 1294, 1384, 1293, 1294, 1292, 1295, 1291,
     1296,    0, 1302, 1295, 1298, 1292, 1299, 1298, 1299, 1302,
     1347, 1296, 1300, 1293, 1301,    0, 1294, 1301, 1293, 1294,
        0, 1295, 1300,    0, 1296, 1302, 1295, 1298, 1303, 1299,
     1298, 1299, 1302,    0, 1296, 1304, 1300, 1306, 1301, 1303,
     1301, 1307, 1304, 1306, 1307, 1300, 1309, 1308, 1308, 1310,
     1310, 1311, 1303, 1308, 1314,    0, 1314, 1309, 1311, 1304,
     1306,    0, 1303,    0, 1307, 1304, 1306, 1307, 1312, 1358,

     1309, 1312, 1310, 1310, 1311, 1317, 1317, 1314, 1308, 1314,
     1309, 1311, 1317, 1318, 1319, 1326, 1323, 1319, 1322,    0,
     1324, 1312, 1318,    0, 1312, 1322, 1345, 1346, 1323, 1317,
     1325, 1308, 1324,    0, 1358, 1317,    0, 1318, 1319, 1327,
     1319, 1345, 1322, 1323, 1328, 1318, 1326, 1324, 1322, 1325,
     1357, 1330, 1346, 1317, 1327, 1332, 1327, 1358, 1317, 1328,
     1330, 1328, 1333, 1330, 1332, 1345, 1323,    0, 1330, 1326,
     1324, 1333, 1330, 1325, 1348, 1346, 1331, 1331, 1327, 1332,
     1327, 1357, 1335, 1328, 1330, 1328, 1333, 1332,    0, 1368,
     1334, 1335, 1330, 1331, 1333, 1334, 1330, 1331, 1340, 1344,

     1344, 1340, 1385, 1348, 1357, 1335, 1386, 1330, 1342, 1331,
        0, 1355, 1368, 1334, 1335, 1359,    0, 1331, 1334,    0,
        0, 1331, 1340,    0, 1340, 1385, 1348, 1342, 1355, 1386,
     1344, 1389, 1331, 1337, 1337, 1337, 1337, 1337, 1359, 1337,
     1337, 1337, 1337, 1337, 1337, 1337, 1337, 1337, 1337, 1337,
     1356, 1342, 1355, 1344,    0, 1389, 1372, 1748, 1748, 1370,
        0,    0, 1359, 1748, 1882, 1882, 1882, 1356, 1748, 1364,
     1390, 1364, 1372, 1337, 1338, 1338, 1338, 1338, 1338, 1338,
     1338, 1338, 1338, 1338, 1338, 1338, 1370, 1338, 1338, 1338,
     1338, 1356, 1364, 1390, 1364, 1756, 1372, 1783, 1783, 1756,

     1906, 1906, 1906,    0, 1783,    0, 1756, 1756, 1366, 1370,
     1376, 1411, 1376, 1366, 1338, 1339, 1339, 1339, 1339, 1339,
     1339, 1339, 1339, 1339, 1339, 1339, 1339, 1339, 1339, 1339,
     1339, 1339, 1366, 1376, 1411, 1376, 1366, 1353, 1365, 1382,
        0,    0, 1354, 1354, 1369, 1367, 1365, 1401, 1371, 1369,
     1383, 1367, 1391,    0, 1353, 1339, 1343, 1343, 1353, 1354,
        0, 1365, 1343, 1354, 1343, 1382, 1401, 1369, 1367, 1365,
     1353, 1371, 1369, 1343, 1367, 1354, 1391, 1343, 1353, 1377,
     1399, 1383, 1353, 1354, 1394, 1377, 1395, 1354, 1382, 1343,
     1401,    0, 1388, 1353, 1396, 1371,    0, 1343, 1354, 1394,

     1400, 1343, 1377, 1399, 1383, 1378, 1378, 1378, 1377, 1398,
     1398,    0, 1343, 1350, 1350, 1395, 1388, 1378, 1406, 1350,
     1396, 1350, 1388, 1394, 1408, 1406, 1400, 1399,    0, 1409,
     1350,    0, 1378, 1398, 1350, 1430, 1409, 1423, 1395, 1398,
     1388, 1406, 1407, 1396, 1428, 1388, 1350,    0, 1406, 1400,
        0, 1408, 1407, 1409, 1350, 1378, 1410, 1398, 1350, 1409,
     1423, 1410, 1398, 1430, 1526, 1407, 1412, 1428,    0, 1350,
     1351, 1351, 1435, 1412, 1408, 1407, 1351, 1436, 1351, 1410,
        0, 1535, 1463,    0, 1410, 1532, 1430, 1351, 1526, 1415,
     1412, 1351, 1422, 1414, 1414, 1435, 1412, 1535, 1413, 1414,

     1436,    0,    0, 1351, 1413, 1463, 1413, 1413, 1415, 1532,
     1413, 1351, 1918, 1918, 1918, 1351,    0,    0, 1416, 1416,
     1416, 1535,    0, 1422, 1414, 1413, 1351, 1379, 1379, 1379,
     1379, 1379, 1415, 1379, 1379, 1379, 1379, 1379, 1379, 1379,
     1379, 1379, 1379, 1379, 1417, 1416, 1422, 1414, 1413, 1418,
     1417, 1424, 1417, 1417, 1426, 1418, 1417, 1418, 1418, 1425,
     1425, 1418, 1432, 1437, 1558, 1431,    0, 1379, 1416, 1432,
     1437, 1417, 1431, 1434, 1442,    0, 1418, 1437, 1431, 1439,
        0, 1442, 1424, 1444,    0, 1426, 1439, 1432, 1558, 1444,
     1425, 1446, 1446, 1448, 1417,    0, 1448, 1434, 1442, 1418,

     1445, 1437, 1431, 1434, 1442, 1424, 1444, 1439, 1426, 1451,
     1432, 1445, 1444, 1425, 1446, 1446, 1448,    0, 1451, 1448,
        0, 1434,    0, 1453, 1445, 1603, 1434, 1454,    0, 1622,
     1439, 1443, 1453, 1451, 1445, 1525, 1454, 1443, 1447, 1443,
     1443, 1451, 1449, 1443, 1449, 1447, 1458, 1453, 1443, 1603,
     1525, 1454, 1443, 1622, 1456, 1453, 1458, 1455, 1443, 1454,
        0, 1447, 1455, 1456, 1443, 1449, 1457, 1449, 1447, 1457,
     1458, 1462, 1443, 1459, 1525, 1482, 1443, 1456, 1459, 1458,
     1455, 1443, 1460, 1460, 1460, 1455, 1456, 1443, 1468, 1461,
     1457, 1461, 1457, 1464, 1464, 1464, 1459, 1465, 1482, 1466,

     1465, 1459, 1462,    0, 1467,    0,    0, 1466,    0, 1460,
     1469, 1469, 1461, 1470, 1461, 1468, 1467, 1469, 1471, 1470,
     1464, 1465, 1466, 1465, 1471, 1462, 1472, 1473, 1476, 1477,
     1466, 1467, 1460, 1472, 1469, 1474, 1473, 1475, 1468, 1478,
     1469, 1470, 1475, 1464, 1483, 1479, 1484, 1474, 1477, 1480,
     1472, 1473, 1471,    0, 1467, 1476, 1472,    0, 1469, 1473,
     1475, 1486, 1474, 1469, 1470, 1475, 1480, 1483, 1486, 1484,
     1480, 1623, 1477, 1478, 1488, 1471, 1485, 1485, 1476, 1479,
     1487, 1488, 1480, 1487, 1486, 1474, 1770, 1770,    0,    0,
     1480, 1486, 1770,    0, 1480, 1623, 1478, 1770, 1488, 1485,

     1485, 1506, 1479, 1487, 1488, 1480, 1487, 1489, 1489, 1489,
     1489, 1489, 1492, 1489, 1489, 1489, 1489, 1489, 1489, 1489,
     1489, 1489, 1489, 1489, 1506, 1781, 1781, 1781, 1798, 1798,
        0, 1781,    0,    0, 1798,    0,    0, 1493, 1497, 1798,
        0, 1501, 1491, 1492, 1491, 1494, 1496, 1489, 1490, 1490,
     1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490,
     1490, 1490, 1490, 1490, 1490, 1491, 1492, 1491, 1493, 1496,
     1502, 1494, 1497, 1500, 1501, 1499, 1504,    0, 1507, 1509,
     1508, 1503, 1510, 1818, 1818,    0, 1508, 1510, 1490,    0,
     1818, 1493, 1499, 1496, 1494, 1497, 1499, 1501, 1500, 1502,

     1503, 1507, 1509, 1508, 1504, 1510, 1513, 1516, 1499, 1508,
     1510, 1511, 1511, 1511, 1515, 1524, 1499, 1513, 1512, 1536,
     1499, 1500, 1502, 1519, 1503, 1512,    0, 1504, 1527, 1519,
     1513, 1499, 1530, 1516, 1524, 1520, 1520, 1520, 1511, 1529,
     1513, 1531, 1512, 1534, 1555, 1539, 1519, 1536, 1512, 1515,
     1540, 1527, 1519, 1538, 1538, 1530, 1516, 1541, 1524, 1543,
     1556, 1511, 1520, 1529, 1531, 1563, 1534, 1555,    0, 1529,
     1536, 1557, 1515, 1539, 1541, 1544, 1574, 1538,    0,    0,
     1556,    0, 1544, 1538, 1540, 1520,    0, 1529, 1563, 1570,
     1543, 1550, 1529, 1546, 1546, 1546, 1539, 1559, 1541, 1544,

     1557, 1538, 1545, 1574, 1556, 1544, 1538, 1540, 1545, 1547,
     1545, 1545, 1570, 1543, 1545, 1547, 1559, 1547, 1547, 1548,
     1546, 1547, 1550, 1557, 1573, 1548, 1574, 1548, 1548, 1545,
     1549, 1548, 1573, 1568, 1581, 1549, 1547, 1562, 1568, 1572,
     1559, 1560, 1572, 1546, 1562, 1550, 1548, 1573, 1560, 1921,
     1921, 1921, 1545, 1549,    0, 1573, 1568, 1581, 1549, 1547,
     1632, 1568,    0, 1572, 1560, 1572,    0, 1562,    0, 1548,
     1552, 1552, 1552, 1552, 1552, 1632, 1552, 1552, 1552, 1552,
     1552, 1552, 1552, 1552, 1552, 1552, 1552, 1560, 1576, 1576,
     1562, 1569, 1569, 1569, 1571, 1571, 1571, 1577, 1575, 1632,

     1578, 1579, 1588, 1578, 1577, 1575,    0, 1580, 1579, 1580,
     1552, 1576, 1576, 1593, 1590, 1587, 1599, 1590, 1569, 1593,
     1577, 1571, 1575, 1578,    0, 1579, 1578, 1577, 1575, 1588,
     1580, 1579, 1580, 1586, 1587,    0, 1591, 1590, 1597, 1586,
     1590, 1569,    0, 1591, 1571, 1586, 1593, 1599, 1592, 1592,
     1601, 1600, 1588, 1595, 1602, 1592, 1640, 1597, 1587, 1591,
     1586,    0, 1594, 1594, 1594, 1595, 1591, 1844, 1844, 1593,
     1599,    0,    0, 1601, 1844,    0,    0, 1602, 1592, 1640,
     1595, 1597, 1600, 1586, 1589, 1589, 1589, 1589, 1589, 1594,
     1589, 1589, 1589, 1589, 1589, 1589, 1589, 1589, 1589, 1589,

     1589, 1592, 1596, 1595, 1604, 1600, 1605, 1607, 1612, 1605,
     1606, 1657, 1594, 1610, 1596, 1625,    0, 1643, 1606, 1619,
     1610, 1667, 1625, 1616, 1589, 1701, 1615, 1612,    0, 1596,
     1605, 1604, 1605, 1606, 1607, 1657,    0, 1610,    0, 1625,
     1643, 1606,    0, 1610, 1667, 1625,    0, 1618,    0, 1701,
        0, 1612, 1596, 1619, 1604, 1615, 1616, 1607, 1608, 1608,
     1608, 1608, 1608, 1608, 1608, 1608, 1608, 1608, 1608, 1608,
     1618, 1608, 1608, 1608, 1608,    0, 1619, 1621, 1615, 1616,
     1819, 1819, 1874, 1874, 1823, 1823, 1819,    0, 1819, 1874,
     1823,    0, 1639,    0, 1618, 1823, 1621,    0, 1608, 1609,

     1609, 1609, 1609, 1609, 1609, 1609, 1609, 1609, 1609, 1609,
     1609, 1609, 1609, 1609, 1609, 1609, 1624, 1624, 1624, 1639,
     1621, 1626, 1630, 1630, 1630,    0, 1649, 1631, 1631, 1633,
     1646,    0, 1626, 1634, 1634, 1634, 1697, 1642, 1658, 1609,
     1611, 1611, 1639, 1624, 1642, 1626, 1611,    0, 1611, 1630,
     1631, 1631, 1633, 1658, 1659, 1626, 1646, 1611,    0, 1649,
     1634, 1611, 1648, 1648, 1697, 1652, 1624, 1642, 1703, 1648,
     1652, 1659, 1630, 1611,    0, 1654, 1633, 1658, 1702, 1646,
        0, 1611, 1649, 1634,    0, 1611,    0, 1697, 1652, 1670,
     1642, 1703, 1648, 1652, 1654, 1659, 1611, 1614, 1614, 1614,

     1614, 1614, 1702, 1614, 1614, 1614, 1614, 1614, 1614, 1614,
     1614, 1614, 1614, 1614, 1653, 1648, 1670, 1662, 1654, 1676,
     1653,    0, 1653, 1653, 1662, 1671, 1653, 1676, 1671, 1665,
     1688, 1672, 1688, 1662, 1722, 1674, 1665, 1614, 1672, 1670,
     1876, 1653, 1676, 1673, 1673, 1673,    0,    0, 1671, 1876,
     1676, 1671, 1876, 1688, 1672, 1688,    0, 1662, 1722, 1665,
     1675, 1672, 1674, 1675, 1653, 1655, 1655, 1655, 1655, 1655,
     1673, 1655, 1655, 1655, 1655, 1655, 1655, 1655, 1655, 1655,
     1655, 1655, 1665,    0, 1675, 1674, 1675, 1685, 1845, 1845,
     1845, 1917, 1917, 1673, 1845, 1692,    0, 1677, 1917, 1699,

     1721, 1692,    0,    0, 1685, 1655, 1656, 1656, 1656, 1656,
     1656, 1656, 1656, 1656, 1656, 1656, 1656, 1656, 1656, 1656,
     1656, 1656, 1656, 1721, 1677, 1678, 1679, 1689, 1685, 1692,
     1689, 1699, 1678, 1679, 1690, 1690, 1700, 1706,    0, 1698,
     1718, 1690,    0,    0, 1706, 1698, 1656, 1677, 1714, 1678,
     1679, 1689, 1692, 1689, 1699, 1678, 1679, 1680, 1680, 1698,
     1706, 1708, 1712, 1680, 1690, 1680, 1705, 1706, 1700, 1705,
     1698, 1698, 1715, 1718, 1680, 1717, 1714, 1736, 1680, 1712,
     1723, 1723, 1723, 1698, 1728, 1724, 1724, 1690, 1708, 1705,
     1680, 1700, 1705, 1698, 1743, 1715, 1718, 1731, 1680, 1714,

     1736, 1728, 1680, 1712, 1717,    0,    0, 1723, 1724, 1724,
     1738, 1708, 1753, 1680, 1686, 1686, 1726, 1726, 1726, 1715,
     1686, 1731, 1749,    0,    0, 1728, 1758, 1717, 1743, 1738,
     1723, 1686, 1686, 1686, 1686, 1686, 1753, 1734, 1686, 1749,
        0, 1686, 1790, 1726, 1734, 1686, 1686, 1686, 1686, 1758,
        0, 1743,    0, 1738,    0, 1686, 1686, 1686, 1686, 1686,
        0,    0, 1686, 1749, 1686, 1790, 1726, 1734, 1686, 1686,
     1686, 1686, 1687, 1687, 1687, 1687, 1687, 1687, 1687, 1687,
     1687, 1687, 1687, 1687, 1687, 1687, 1687, 1687, 1687, 1754,
     1734, 1846, 1846,    0,    0, 1891, 1891, 1846, 1846, 1755,

     1727, 1891, 1891,    0, 1741, 1741, 1754, 1938, 1938, 1938,
        0, 1741, 1687, 1694, 1694, 1694, 1694, 1694, 1755, 1694,
     1694, 1694, 1694, 1694, 1694, 1694, 1694, 1694, 1694, 1694,
     1754, 1745, 1787, 1727, 1741,    0, 1760, 1745, 1760, 1745,
     1745, 1761, 1755, 1745, 1761, 1775, 1762, 1764,    0, 1762,
        0, 1786, 1765, 1694, 1709, 1709, 1727, 1741, 1745, 1760,
     1709, 1760, 1709, 1763, 1765, 1761, 1787, 1761, 1775, 1762,
     1763, 1709, 1762, 1785, 1764, 1709,    0, 1786, 1780, 1765,
     1780, 1745, 1779, 1779, 1779, 1791, 1763, 1709, 1803, 1787,
        0,    0, 1775, 1763,    0, 1709,    0, 1764,    0, 1709,

     1786, 1780, 1765, 1780,    0, 1792, 1785, 1806, 1791, 1779,
     1709, 1725, 1725, 1725, 1725, 1725, 1803, 1725, 1725, 1725,
     1725, 1725, 1725, 1725, 1725, 1725, 1725, 1725, 1792, 1785,
     1810, 1806, 1779,    0, 1788, 1892, 1892,    0,    0, 1803,
        0, 1892, 1892, 1939, 1939, 1939, 1793, 1813, 1793, 1810,
     1827, 1725, 1729, 1729, 1729, 1729, 1729, 1788, 1729, 1729,
     1729, 1729, 1729, 1729, 1729, 1729, 1729, 1729, 1729, 1793,
     1813, 1793, 1782, 1810, 1827, 1849, 1825, 1825, 1782,    0,
        0, 1788, 1950, 1950, 1950, 1825, 1794, 1825, 1825, 1794,
     1849, 1855, 1729, 1751, 1751, 1751, 1751, 1751, 1751, 1751,

     1751, 1751, 1751, 1751, 1751, 1782, 1751, 1751, 1751, 1751,
     1794, 1909, 1794,    0, 1849, 1855,    0,    0,    0,    0,
     1909,    0,    0, 1909,    0,    0,    0, 1928, 1782, 1856,
     1789,    0, 1852, 1751, 1752, 1752, 1752, 1752, 1752, 1752,
     1752, 1752, 1752, 1752, 1752, 1752, 1752, 1752, 1752, 1752,
     1752, 1928, 1856, 1789, 1828, 1817, 1804, 1801,    0,    0,
        0, 1797, 1797, 1805, 1808, 1808, 1808, 1852, 1800, 1800,
     1881, 1842, 1826, 1828, 1752, 1766, 1766, 1789, 1797, 1800,
     1801, 1766, 1797, 1766, 1804, 1800, 1805, 1829, 1817, 1800,
     1852, 1808, 1766, 1881, 1797, 1826, 1766, 1828, 1831, 1831,

     1831, 1800, 1797, 1842, 1801, 1829, 1797, 1804, 1766, 1800,
     1805, 1817,    0, 1800, 1808,    0, 1766, 1797,    0, 1826,
     1766, 1853,    0,    0, 1800, 1831, 1842, 1850, 1857, 1829,
     1836, 1766, 1769, 1769, 1832, 1833, 1832, 1833, 1843, 1836,
     1834, 1769, 1836, 1834, 1769, 1843, 1850, 1836, 1831, 1769,
     1851, 1836, 1864, 1769,    0, 1857, 1853, 1832, 1833, 1832,
     1833, 1880, 1843, 1836, 1834, 1769, 1834,    0, 1843, 1900,
     1850, 1836, 1858, 1769, 1858, 1836,    0, 1769, 1857, 1853,
     1867, 1851, 1860, 1865, 1864, 1883, 1836, 1884, 1769, 1772,
     1772, 1885, 1900, 1880, 1884, 1858,    0, 1858, 1772, 1860,

     1772, 1772, 1865, 1860, 1851, 1901, 1772, 1864, 1867, 1894,
     1772, 1884, 1879, 1879, 1911, 1860, 1880, 1884, 1885, 1883,
     1889, 1879, 1772, 1860, 1879, 1896, 1865, 1860, 1901,    0,
     1772, 1867,    0,    0, 1772, 1894,    0, 1911, 1860,    0,
     1927, 1885, 1883, 1889, 1896, 1772, 1777, 1777, 1777, 1777,
     1777, 1777, 1777, 1777, 1777, 1777, 1777, 1777, 1894, 1777,
     1777, 1777, 1777, 1927,    0, 1897, 1898, 1889, 1896,    0,
     1959, 1959,    0,    0,    0,    0,    0,    0,    0, 1959,
        0, 1886, 1959, 1886, 1897, 1898, 1777, 1778, 1778, 1778,
     1778, 1778, 1778, 1778, 1778, 1778, 1778, 1778, 1778, 1778,

     1778, 1778, 1778, 1778, 1886, 1907, 1886, 1923, 1897, 1898,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0, 1933,    0, 1946, 1907, 1957, 1923, 1778, 1784, 1784,
     1784, 1784, 1784, 1784, 1784, 1784, 1784, 1784, 1784, 1784,
     1784, 1784, 1784, 1784, 1784, 1933, 1946, 1960, 1907, 1957,
     1923,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0, 1960,    0,    0,    0,    0, 1895, 1784, 1809,
     1809, 1809, 1809, 1809, 1809, 1809, 1809, 1809, 1809, 1809,
     1809, 1809, 1809, 1809, 1809, 1809, 1960,    0, 1890, 1890,
     1890, 1863, 1863,    0, 1895, 1905, 1902,    0,    0, 1913,

        0,    0,    0, 1902, 1888, 1910, 1916,    0, 1863, 1809,
     1839, 1839, 1863, 1888, 1929, 1890, 1888, 1895, 1905, 1839,
     1902, 1888, 1839,    0, 1863, 1888, 1902, 1839, 1910, 1955,
     1913, 1839, 1863, 1915, 1936, 1916, 1863, 1888, 1890,    0,
     1915, 1929, 1905, 1839,    0, 1888, 1935, 1863,    0, 1888,
     1930, 1839, 1910, 1913,    0, 1839,    0, 1915, 1916,    0,
     1888, 1936, 1955, 1915, 1929, 1935, 1839, 1847, 1847, 1847,
     1847, 1847, 1847, 1847, 1847, 1847, 1847, 1847, 1847, 1930,
     1847, 1847, 1847, 1847, 1936, 1955, 1956,    0, 1961, 1935,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0, 1930, 1961,    0, 1956,    0, 1847, 1848, 1848,
     1848, 1848, 1848, 1848, 1848, 1848, 1848, 1848, 1848, 1848,
     1848, 1848, 1848, 1848, 1848,    0,    0, 1961,    0, 1956,
        0,    0,    0,    0, 1914, 1914, 1914,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0, 1848, 1870,
     1870, 1870, 1870, 1870, 1870, 1870, 1870, 1870, 1870, 1870,
     1870, 1914, 1870, 1870, 1870, 1870,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0, 1932,
        0, 1937, 1942, 1947, 1914, 1948, 1963,    0,    0, 1870,
     1871, 1871, 1871, 1871, 1871, 1871, 1871, 1871, 1871, 1871,

     1871, 1871, 1871, 1871, 1871, 1871, 1871, 1904, 1932, 1937,
     1942, 1947, 1963, 1948,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0, 1904,    0,    0,    0, 1904,    0,
     1871, 1932, 1937, 1942, 1947, 1963, 1948,    0,    0,    0,
     1904,    0,    0,    0,    0,    0,    0,    0, 1904,    0,
        0,    0, 1904,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0, 1904, 1912, 1912, 1912, 1912, 1912,    0,
     1912, 1912, 1912, 1912, 1912, 1912, 1912, 1912, 1912, 1912,
     1912,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0, 1912, 1934, 1934, 1934, 1934, 1934,
     1934, 1934, 1934, 1934, 1934, 1934, 1934, 1934, 1934, 1934,
     1934, 1934,    0,    0,    0,    0,    0,    0, 1943,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0, 1934, 1941, 1941, 1943,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0, 1943,
     1943,    0,    0, 1941, 1941, 1941, 1941, 1941,    0,    0,
     1941,    0, 1943, 1941,    0,    0,    0, 1941, 1941, 1941,
     1941,    0, 1943, 1943,    0,    0,    0, 1941, 1941, 1941,
     1941, 1941,    0,    0, 1941,    0, 1941,    0,    0,    0,

     1941, 1941, 1941, 1941, 1951, 1951, 1951, 1951, 1951, 1951,
     1951, 1951, 1951, 1951, 1951, 1951,    0, 1951, 1951, 1951,
     1951,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0, 1951, 1952, 1952, 1952, 1952, 1952,
     1952, 1952, 1952, 1952, 1952, 1952, 1952, 1952, 1952, 1952,
     1952, 1952,    0,    0,    0,    0,    0, 1958, 1958,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0, 1958, 1952, 1954, 1954, 1958,    0,
        0,    0,    0,    0,    0, 1954,    0,    0, 1954,    0,

     1958,    0,    0, 1954,    0,    0,    0, 1954, 1958,    0,
        0,    0, 1958,    0,    0,    0,    0,    0,    0, 1954,
        0,    0,    0, 1958,    0,    0,    0, 1954,    0,    0,
        0, 1954,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0, 1954, 1966, 1966, 1966, 1966, 1966, 1966, 1966,
     1966, 1966, 1966, 1967, 1967, 1967, 1967, 1967, 1967, 1967,
     1967, 1967, 1967, 1968, 1968, 1968, 1968, 1968, 1968, 1968,
     1968, 1968, 1968, 1969, 1969, 1969, 1969, 1969, 1969, 1969,
     1969, 1969, 1969, 1970, 1970, 1970, 1970, 1970, 1970, 1970,
     1970, 1970, 1970, 1971, 1971, 1971, 1971, 1971, 1971, 1971,

     1971, 1971, 1971, 1972, 1972, 1972, 1972, 1972, 1972, 1972,
     1972, 1972, 1972, 1973, 1973, 1973, 1973, 1973, 1973, 1973,
     1973, 1973, 1973, 1974, 1974, 1974, 1974, 1974, 1974, 1974,
     1974, 1974, 1974, 1975, 1975, 1975, 1975, 1975, 1975, 1975,
     1975, 1975, 1975, 1976, 1976, 1976, 1976, 1976, 1976, 1976,
     1976, 1976, 1976, 1977, 1977, 1977, 1977, 1977, 1977, 1977,
     1977, 1977, 1977, 1978, 1978, 1978, 1978, 1978, 1978, 1978,
     1978, 1978, 1978, 1979, 1979, 1979, 1979, 1979, 1979, 1979,
     1979, 1979, 1979, 1980, 1980, 1980, 1980, 1980, 1980, 1980,
     1980, 1980, 1980, 1981, 1981, 1981, 1981, 1981, 1981, 1981,

     1981, 1981, 1981, 1982, 1982, 1982, 1982, 1982, 1982, 1982,
     1982, 1982, 1982, 1983, 1983, 1983, 1983, 1983, 1983, 1983,
     1983, 1983, 1983, 1984, 1984, 1984, 1984, 1984, 1984, 1984,
     1984, 1984, 1984, 1985, 1985, 1985, 1985, 1985, 1985, 1985,
     1985, 1985, 1985, 1986, 1986, 1986, 1986, 1986, 1986, 1986,
     1986, 1986, 1986, 1987, 1987, 1987, 1987, 1987, 1987, 1987,
     1987, 1987, 1987, 1988, 1988, 1988, 1988, 1988, 1988, 1988,
     1988, 1988, 1988, 1989, 1989, 1989, 1989, 1989, 1989, 1989,
     1989, 1989, 1989, 1990, 1990, 1990, 1990, 1990, 1990, 1990,
     1990, 1990, 1990, 1991, 1991, 1991, 1991, 1991, 1991, 1991,

     1991, 1991, 1991, 1992, 1992, 1992, 1992, 1992, 1992, 1992,
     1992, 1992, 1992, 1993, 1993, 1993, 1993, 1993, 1993, 1993,
     1993, 1993, 1993, 1994, 1994, 1994, 1994, 1994, 1994, 1994,
     1994, 1994, 1994, 1995, 1995, 1995, 1995, 1995, 1995, 1995,
     1995, 1995, 1995, 1996, 1996, 1996, 1996, 1996, 1996, 1996,
     1996, 1996, 1996, 1997, 1997, 1997, 1997, 1997, 1997, 1997,
     1997, 1997, 1997, 1998, 1998, 1998, 1998, 1998, 1998, 1998,
     1998, 1998, 1998, 1999, 1999,    0, 1999, 1999, 1999, 1999,
     1999,    0, 1999, 2000, 2000, 2000, 2000, 2000, 2000, 2000,
     2000, 2000, 2000, 2001, 2001, 2001, 2001, 2001, 2001, 2001,

     2001, 2001, 2001, 2002,    0,    0, 2002,    0,    0, 2002,
     2003, 2003, 2003, 2003, 2003, 2003, 2003, 2003, 2003, 2003,
     2004, 2004, 2004, 2004, 2004, 2004, 2004, 2004, 2004, 2004,
     2005, 2005, 2005, 2005, 2005, 2005, 2005, 2005, 2005, 2005,
     2006,    0,    0, 2006,    0,    0, 2006, 2007, 2007, 2007,
     2007, 2007, 2007, 2007, 2007, 2007, 2007, 2008,    0,    0,
     2008,    0,    0, 2008, 2009, 2009, 2009, 2009, 2009, 2009,
     2009, 2009, 2009, 2009, 2010,    0,    0, 2010,    0,    0,
     2010, 2011, 2011, 2011, 2011, 2011, 2011, 2011, 2011, 2011,
     2011, 2012,    0,    0, 2012,    0,    0, 2012, 2013, 2013,

     2013, 2013, 2013, 2013, 2013, 2013, 2013, 2013, 2014, 2014,
     2014, 2014, 2014, 2014, 2014, 2014, 2014, 2014, 2015, 2015,
     2015, 2015, 2015, 2015, 2015, 2015, 2015, 2015, 2016,    0,
        0, 2016,    0,    0, 2016, 2017, 2017, 2017, 2017, 2017,
     2017, 2017, 2017, 2017, 2017, 2018,    0, 2018, 2018,    0,
        0, 2018, 2019, 2019, 2019, 2019, 2019, 2019, 2019, 2019,
     2019, 2019, 2020,    0,    0, 2020,    0,    0, 2020, 2021,
     2021, 2021, 2021, 2021, 2021, 2021, 2021, 2021, 2021, 2022,
        0,    0, 2022,    0,    0, 2022, 2023, 2023, 2023, 2023,
     2023, 2023, 2023, 2023, 2023, 2023, 2024, 2024,    0, 2024,

     2024, 2024, 2024, 2024, 2024, 2024, 2025, 2025,    0, 2025,
     2025, 2025, 2025, 2025, 2025, 2025, 2026, 2026, 2026, 2026,
     2026, 2026, 2026, 2026, 2026, 2026, 2027, 2027, 2027, 2027,
     2027, 2027, 2027, 2027, 2027, 2027, 2028, 2028,    0, 2028,
     2028, 2028, 2028, 2028, 2028, 2028, 2029, 2029,    0, 2029,
     2029, 2029, 2029, 2029, 2029, 2029, 2030, 2030, 2030, 2030,
     2030, 2030, 2030, 2030, 2030, 2030, 2031, 2031, 2031, 2031,
     2031, 2031, 2031, 2031, 2031, 2031, 2032,    0,    0, 2032,
        0,    0, 2032, 2033,    0,    0, 2033, 2034, 2034, 2034,
     2034, 2034, 2034, 2034, 2034, 2034, 2034, 2035, 2035, 2035,

     2035, 2035, 2035, 2035, 2035, 2035, 2035, 2036, 2036, 2036,
     2036, 2036, 2036, 2036, 2036, 2036, 2036, 2037, 2037, 2037,
     2037, 2037, 2037, 2037, 2037, 2037, 2037, 2038,    0,    0,
     2038,    0,    0, 2038, 2039,    0,    0, 2039, 2040, 2040,
     2040, 2040, 2040, 2040, 2040, 2040, 2040, 2040, 2041, 2041,
     2041, 2041, 2041, 2041, 2041, 2041, 2041, 2041, 2042, 2042,
     2042, 2042, 2042, 2042, 2042, 2042, 2042, 2042, 2043,    0,
        0, 2043,    0,    0, 2043, 2044,    0,    0, 2044, 2045,
     2045, 2045, 2045, 2045, 2045, 2045, 2045, 2045, 2045, 2046,
     2046, 2046, 2046, 2046, 2046, 2046, 2046, 2046, 2046, 2047,

        0,    0, 2047,    0,    0, 2047, 2048,    0,    0, 2048,
     2049, 2049, 2049, 2049, 2049, 2049, 2049, 2049, 2049, 2049,
     2050, 2050, 2050, 2050, 2050, 2050, 2050, 2050, 2050, 2050,
     2051, 2051, 2051, 2051, 2051, 2051, 2051, 2051, 2051, 2051,
     2052,    0,    0, 2052,    0,    0, 2052, 2053,    0,    0,
     2053, 2054, 2054, 2054, 2054, 2054, 2054, 2054, 2054, 2054,
     2054, 2055, 2055, 2055, 2055, 2055, 2055, 2055, 2055, 2055,
     2055, 2056, 2056, 2056, 2056, 2056, 2056, 2056, 2056, 2056,
     2056, 2057,    0,    0, 2057,    0,    0, 2057, 2058,    0,
        0, 2058, 2059, 2059, 2059, 2059, 2059, 2059, 2059, 2059,

     2059, 2059, 2060, 2060, 2060, 2060, 2060, 2060, 2060, 2060,
     2060, 2060, 2061,    0, 2061, 2061,    0,    0, 2061, 2062,
     2062,    0,    0, 2062, 2063, 2063, 2063, 2063, 2063, 2063,
     2063, 2063, 2063, 2063, 2064, 2064, 2064, 2064, 2064, 2064,
     2064, 2064, 2064, 2064, 2065,    0,    0, 2065,    0,    0,
     2065, 2066,    0,    0, 2066, 2067, 2067, 2067, 2067, 2067,
     2067, 2067, 2067, 2067, 2067, 2068, 2068, 2068, 2068, 2068,
     2068, 2068, 2068, 2068, 2068, 2069,    0,    0, 2069,    0,
        0, 2069, 2070,    0,    0, 2070, 2071, 2071, 2071, 2071,
     2071, 2071, 2071, 2071, 2071, 2071, 2072, 2072, 2072, 2072,

     2072, 2072, 2072, 2072, 2072, 2072, 2073, 2073,    0, 2073,
     2073, 2073, 2073, 2073, 2073, 2073, 2074, 2074, 2074, 2074,
     2074, 2074, 2074, 2074, 2074, 2074, 2075, 2075,    0, 2075,
     2075, 2075, 2075, 2075, 2075, 2075, 2076, 2076, 2076, 2076,
     2076, 2076, 2076, 2076, 2076, 2076, 2077,    0,    0, 2077,
        0,    0, 2077, 2078, 2078, 2078, 2078, 2078, 2078, 2078,
     2078, 2078, 2078, 2079, 2079, 2079, 2079, 2079, 2079, 2079,
     2079, 2079, 2079, 2080, 2080, 2080, 2080, 2080, 2080, 2080,
     2080, 2080, 2080, 2081,    0,    0, 2081,    0,    0, 2081,
     2082,    0, 2082,    0,    0,    0, 2082,    0, 2082, 2083,

     2083, 2083, 2083, 2083, 2083, 2083, 2083, 2083, 2083, 2084,
     2084, 2084, 2084, 2084, 2084, 2084, 2084, 2084, 2084, 2085,
     2085, 2085, 2085, 2085, 2085, 2085, 2085, 2085, 2085, 2086,
     2086, 2086, 2086, 2086, 2086, 2086, 2086, 2086, 2086, 2087,
     2087, 2087, 2087, 2087, 2087, 2087, 2087, 2087, 2087, 2088,
     2088, 2088, 2088, 2088, 2088, 2088, 2088, 2088, 2088, 2089,
     2089, 2089, 2089, 2089, 2089, 2089, 2089, 2089, 2089, 2090,
        0,    0, 2090,    0,    0, 2090, 2091, 2091, 2091, 2091,
     2091, 2091, 2091, 2091, 2091, 2091, 2092, 2092, 2092, 2092,
     2092, 2092, 2092, 2092, 2092, 2092, 2093, 2093, 2093, 2093,

     2093, 2093, 2093, 2093, 2093, 2093, 2094, 2094, 2094, 2094,
     2094, 2094, 2094, 2094, 2094, 2094, 2095, 2095, 2095, 2095,
     2095, 2095, 2095, 2095, 2095, 2095, 2096, 2096, 2096, 2096,
     2096, 2096, 2096, 2096, 2096, 2096, 2097, 2097, 2097, 2097,
     2097, 2097, 2097, 2097, 2097, 2097, 2098,    0, 2098,    0,
        0,    0,    0,    0, 2098, 2099,    0,    0, 2099, 2100,
     2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100, 2101,
     2101, 2101, 2101, 2101, 2101, 2101, 2101, 2101, 2101, 2102,
        0,    0, 2102,    0,    0, 2102, 2103, 2103, 2103, 2103,
     2103, 2103, 2103, 2103, 2103, 2103, 2104, 2104, 2104, 2104,

     2104, 2104, 2104, 2104, 2104, 2104, 2105,    0,    0, 2105,
     2106, 2106, 2106, 2106, 2106, 2106, 2106, 2106, 2106, 2106,
     2107, 2107, 2107, 2107, 2107, 2107, 2107, 2107, 2107, 2107,
     2108, 2108, 2108, 2108, 2108, 2108, 2108, 2108, 2108, 2108,
     2109, 2109, 2109, 2109, 2109, 2109, 2109, 2109, 2109, 2109,
     2110, 2110, 2110, 2110, 2110, 2110, 2110, 2110, 2110, 2110,
     2111, 2111, 2111, 2111, 2111, 2111, 2111, 2111, 2111, 2111,
     2112, 2112, 2112, 2112, 2112, 2112, 2112, 2112, 2112, 2112,
     2113, 2113, 2113, 2113, 2113, 2113, 2113, 2113, 2113, 2113,
     2114, 2114, 2114, 2114, 2114, 2114, 2114, 2114, 2114, 2114,

     2115, 2115, 2115, 2115, 2115, 2115, 2115, 2115, 2115, 2115,
     2116, 2116, 2116, 2116, 2116, 2116, 2116, 2116, 2116, 2116,
     2117, 2117, 2117, 2117, 2117, 2117, 2117, 2117, 2117, 2117,
     2118, 2118, 2118, 2118, 2118, 2118, 2118, 2118, 2118, 2118,
     2119, 2119, 2119, 2119, 2119, 2119, 2119, 2119, 2119, 2119,
     2120, 2120, 2120, 2120, 2120, 2120, 2120, 2120, 2120, 2120,
     2121, 2121, 2121, 2121, 2121, 2121, 2121, 2121, 2121, 2121,
     2122, 2122, 2122, 2122, 2122, 2122, 2122, 2122, 2122, 2122,
     2123, 2123, 2123, 2123, 2123, 2123, 2123, 2123, 2123, 2123,
     2124, 2124, 2124, 2124, 2124, 2124, 2124, 2124, 2124, 2124,

     2125, 2125, 2125, 2125, 2125, 2125, 2125, 2125, 2125, 2125,
     2126, 2126, 2126, 2126, 2126, 2126, 2126, 2126, 2126, 2126,
     2127, 2127, 2127, 2127, 2127, 2127, 2127, 2127, 2127, 2127,
     2128, 2128, 2128, 2128, 2128, 2128, 2128, 2128, 2128, 2128,
     2129, 2129, 2129, 2129, 2129, 2129, 2129, 2129, 2129, 2129,
     2130, 2130, 2130, 2130, 2130, 2130, 2130, 2130, 2130, 2130,
     2131, 2131, 2131, 2131, 2131, 2131, 2131, 2131, 2131, 2131,
     2132, 2132, 2132, 2132, 2132, 2132, 2132, 2132, 2132, 2132,
     2133, 2133, 2133, 2133, 2133, 2133, 2133, 2133, 2133, 2133,
     2134, 2134, 2134, 2134, 2134, 2134, 2134, 2134, 2134, 2134,

     2135, 2135, 2135, 2135, 2135, 2135, 2135, 2135, 2135, 2135,
     2136, 2136, 2136, 2136,    0, 2136, 2136, 2136, 2136, 2136,
     2137, 2137, 2137, 2137, 2137, 2137, 2137, 2137, 2137, 2137,
     2138, 2138, 2138, 2138, 2138, 2138, 2138, 2138, 2138, 2138,
     2139, 2139, 2139, 2139, 2139, 2139, 2139, 2139, 2139, 2139,
     1965, 1965, 1965, 1965, 1965, 1965, 1965, 1965, 1965, 1965,
     1965, 1965, 1965, 1965, 1965, 1965, 1965, 1965, 1965, 1965,
     1965, 1965, 1965, 1965, 1965, 1965, 1965, 1965, 1965, 1965,
     1965, 1965, 1965, 1965, 1965, 1965, 1965, 1965, 1965, 1965,
     1965, 1965, 1965, 1965, 1965, 1965, 1965, 1965, 1965, 1965,

     1965, 1965, 1965, 1965, 1965, 1965, 1965, 1965, 1965, 1965,
     1965, 1965, 1965, 1965
    } ;

extern int fscanYY_flex_debug;
int fscanYY_flex_debug = 0;

static yy_state_type *yy_state_buf=0, *yy_state_ptr=0;
static char *yy_full_match;
static int yy_lp;
static int yy_looking_for_trail_begin = 0;
static int yy_full_lp;
static int *yy_full_state;
#define YY_TRAILING_MASK 0x2000
#define YY_TRAILING_HEAD_MASK 0x4000
#define REJECT \
{ \
*yy_cp = (yy_hold_char); /* undo effects of setting up fscanYYtext */ \
yy_cp = (yy_full_match); /* restore poss. backed-over text */ \
(yy_lp) = (yy_full_lp); /* restore orig. accepting pos. */ \
(yy_state_ptr) = (yy_full_state); /* restore orig. state */ \
yy_current_state = *(yy_state_ptr); /* restore curr. state */ \
++(yy_lp); \
goto find_rule; \
}

#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *fscanYYtext;
#line 1 "fortranscanner.l"
/* -*- mode: fundamental; indent-tabs-mode: 1; -*- */
/*****************************************************************************
 * Parser for Fortran90 F subset
 *
 * Copyright (C) by Anke Visser
 * based on the work of Dimitri van Heesch.
 *
 * Permission to use, copy, modify, and distribute this software and its
 * documentation under the terms of the GNU General Public License is hereby 
 * granted. No representations are made about the suitability of this software 
 * for any purpose. It is provided "as is" without express or implied warranty.
 * See the GNU General Public License for more details.
 *
 * Documents produced by Doxygen are derivative works derived from the
 * input used in their production; they are not affected by this license.
 *
 */ 
/* Developer notes.
 *
 * - Consider using startScope(), endScope() functions with  module, program, 
 * subroutine or any other scope in fortran program.
 *
 * - Symbol modifiers (attributes) are collected using SymbolModifiers |= operator during
 * substructure parsing. When substructure ends all modifiers are applied to actual
 * entries in applyModifiers() functions.
 * 
 * - How case insensitiveness should be handled in code?
 * On one side we have arg->name and entry->name, on another side modifierMap[name].
 * In entries and arguments case is the same as in code, in modifier map case is lowered and
 * then it is compared to lowered entry/argument names.
 *
 * - Do not like constructs like aa{BS} or {BS}bb. Should try to handle blank space
 * with separate rule?: It seems it is often necessary, because we may parse something like 
 * "functionA" or "MyInterface". So constructs like `(^|[ \t])interface({BS_}{ID})?/[ \t\n]'
 * are desired.
 */
#line 40 "fortranscanner.l"

#include <stdio.h> 
#include <stdlib.h>
#include <assert.h>
#include <ctype.h>

#include "qtbc.h"
#include <qarray.h>
#include <qstack.h>
#include <qregexp.h>
#include <unistd.h> 
#include <qfile.h>
#include <qmap.h>
  
#include "fortranscanner.h"
#include "entry.h"
#include "message.h"
#include "config.h"
#include "doxygen.h"
#include "util.h"
#include "defargs.h"
#include "language.h"
#include "commentscan.h" 
#include "fortrancode.h"
#include "pre.h"

#define YY_NEVER_INTERACTIVE 1

enum ScanVar { V_IGNORE, V_VARIABLE, V_PARAMETER};

// {{{ ----- Helper structs -----
//! Holds modifiers (ie attributes) for one symbol (variable, function, etc)
struct SymbolModifiers {
  enum Protection {NONE_P, PUBLIC, PRIVATE};
  enum Direction {NONE_D, IN, OUT, INOUT};

  //!< This is only used with function return value.
  QCString type, returnName;
  Protection protection;
  Direction direction;
  bool optional;
  QCString dimension;
  bool allocatable;
  bool external;
  bool intrinsic;
  bool parameter;
  bool pointer;
  bool target;
  bool save;

  SymbolModifiers() : type(), returnName(), protection(NONE_P), direction(NONE_D),
    optional(FALSE), dimension(), allocatable(FALSE),
    external(FALSE), intrinsic(FALSE), parameter(FALSE),
    pointer(FALSE), target(FALSE), save(FALSE) {}

  SymbolModifiers& operator|=(const SymbolModifiers &mdfs);
  SymbolModifiers& operator|=(QCString mdfrString);
};

//ostream& operator<<(ostream& out, const SymbolModifiers& mdfs);

static const char *directionStrs[] = 
{
   "", "intent(in)", "intent(out)", "intent(inout)"
};

// }}}

/* -----------------------------------------------------------------
 *
 *	statics
 */
static ParserInterface *g_thisParser; 
static const char *     inputString;
static int		inputPosition;
static bool             isFixedForm;
static QCString         inputStringPrepass; ///< Input string for prepass of line cont. '&'
static unsigned int     inputPositionPrepass;
static int              lineCountPrepass = 0;

struct CommentInPrepass {
  int column;
  QCString str;
  CommentInPrepass(int column, QCString str) : column(column), str(str) {}
};
static QList<CommentInPrepass>  comments;

#define MAX_INCLUDE_DEPTH 10
YY_BUFFER_STATE include_stack[MAX_INCLUDE_DEPTH];
int include_stack_ptr = 0;

static QFile            inputFile;
static QCString		yyFileName;
static int		yyLineNr     = 1 ;
static Entry*		current_root = 0 ;
static Entry*		global_root  = 0 ;
static Entry*		file_root    = 0 ;
static Entry*		current      = 0 ;
static Entry*		last_entry   = 0 ;
static ScanVar          v_type       = V_IGNORE; // type of parsed variable
static QList<Entry>     moduleProcedures; // list of all interfaces which contain unresolved 
                                          // module procedures
static QCString         docBlock;
static QCString         docBlockName;
static bool             docBlockInBody;
static bool             docBlockJavaStyle;

static MethodTypes 	mtype;
static bool    		gstat;
static Specifier 	virt;

static QCString          debugStr;
static QCString          result; // function result
static Argument          *parameter; // element of parameter list
static QCString          argType;  // fortran type of an argument of a parameter list
static QCString          argName;  // last identifier name in variable list
static QCString          initializer;  // initial value of a variable
static int               initializerArrayScope;  // number if nested array scopes in initializer
static int               initializerScope;  // number if nested function calls in initializer
static QCString          useModuleName;  // name of module in the use statement
static Protection        defaultProtection;

static char              stringStartSymbol; // single or double quote

//! Accumulated modifiers of current statement, eg variable declaration.
static SymbolModifiers currentModifiers;
//! Holds program scope->symbol name->symbol modifiers.
static QMap<Entry*,QMap<QCString,SymbolModifiers> > modifiers;

//-----------------------------------------------------------------------------

static int yyread(char *buf,int max_size);
static void startCommentBlock(bool);
static void handleCommentBlock(const QCString &doc,bool brief);
static void addCurrentEntry();
static void addModule(const char *name, bool isModule=FALSE);
static void addSubprogram(const char *text);
static void addInterface(QCString name);
static Argument *addFortranParameter(const QCString &type,const QCString &name, const QCString docs);
static void scanner_abort();

static void startScope(Entry *scope);
static bool endScope(Entry *scope, bool isGlobalRoot=FALSE);
static QCString getFullName(Entry *e);
static bool isTypeName(QCString name);
static void resolveModuleProcedures(QList<Entry> &moduleProcedures, Entry *current_root);
static int getAmpersandAtTheStart(const char *buf, int length);
static int getAmpOrExclAtTheEnd(const char *buf, int length);
static void truncatePrepass(int index);
static void pushBuffer(QCString &buffer);
static void popBuffer();
static void extractPrefix(QCString& text);

//-----------------------------------------------------------------------------
#undef	YY_INPUT
#define	YY_INPUT(buf,result,max_size) result=yyread(buf,max_size);
//-----------------------------------------------------------------------------

//-----------------------------------------------------------------------------
//-----------------------------------------------------------------------------
/* Assume that attribute statements are almost the same as attributes. */
/*%option debug */
//---------------------------------------------------------------------------------
/** fortran parsing states */
























/** comment parsing states */



#line 3917 "<stdout>"

#define INITIAL 0
#define Subprog 1
#define SubprogPrefix 2
#define Parameterlist 3
#define SubprogBody 4
#define SubprogBodyContains 5
#define Start 6
#define Comment 7
#define Module 8
#define Program 9
#define ModuleBody 10
#define ModuleBodyContains 11
#define AttributeList 12
#define Variable 13
#define Initialization 14
#define ArrayInitializer 15
#define Typedef 16
#define TypedefBody 17
#define InterfaceBody 18
#define StrIgnore 19
#define String 20
#define Use 21
#define UseOnly 22
#define ModuleProcedure 23
#define Prepass 24
#define DocBlock 25
#define DocBackLine 26
#define EndDoc 27

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

static int yy_init_globals (void );

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int fscanYYlex_destroy (void );

int fscanYYget_debug (void );

void fscanYYset_debug (int debug_flag  );

YY_EXTRA_TYPE fscanYYget_extra (void );

void fscanYYset_extra (YY_EXTRA_TYPE user_defined  );

FILE *fscanYYget_in (void );

void fscanYYset_in  (FILE * in_str  );

FILE *fscanYYget_out (void );

void fscanYYset_out  (FILE * out_str  );

yy_size_t fscanYYget_leng (void );

char *fscanYYget_text (void );

int fscanYYget_lineno (void );

void fscanYYset_lineno (int line_number  );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int fscanYYwrap (void );
#else
extern int fscanYYwrap (void );
#endif
#endif

    static void yyunput (int c,char *buf_ptr  );
    
#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT

#ifdef __cplusplus
static int yyinput (void );
#else
static int input (void );
#endif

#endif

        static int yy_start_stack_ptr = 0;
        static int yy_start_stack_depth = 0;
        static int *yy_start_stack = NULL;
    
    static void yy_push_state (int new_state );
    
    static void yy_pop_state (void );
    
    static int yy_top_state (void );
    
/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 262144
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO fwrite( fscanYYtext, fscanYYleng, 1, fscanYYout )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		yy_size_t n; \
		for ( n = 0; n < max_size && \
			     (c = getc( fscanYYin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( fscanYYin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = fread(buf, 1, max_size, fscanYYin))==0 && ferror(fscanYYin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(fscanYYin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int fscanYYlex (void);

#define YY_DECL int fscanYYlex (void)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after fscanYYtext and fscanYYleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	if ( fscanYYleng > 0 ) \
		YY_CURRENT_BUFFER_LVALUE->yy_at_bol = \
				(fscanYYtext[fscanYYleng - 1] == '\n'); \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    
#line 269 "fortranscanner.l"


 /*-----------------------------------------------------------------------------------*/

#line 4144 "<stdout>"

	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

        /* Create the reject buffer large enough to save one state per allowed character. */
        if ( ! (yy_state_buf) )
            (yy_state_buf) = (yy_state_type *)fscanYYalloc(YY_STATE_BUF_SIZE  );
            if ( ! (yy_state_buf) )
                YY_FATAL_ERROR( "out of dynamic memory in fscanYYlex()" );

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! fscanYYin )
			fscanYYin = stdin;

		if ( ! fscanYYout )
			fscanYYout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			fscanYYensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				fscanYY_create_buffer(fscanYYin,YY_BUF_SIZE );
		}

		fscanYY_load_buffer_state( );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of fscanYYtext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
		yy_current_state += YY_AT_BOL();

		(yy_state_ptr) = (yy_state_buf);
		*(yy_state_ptr)++ = yy_current_state;

yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 1966 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			*(yy_state_ptr)++ = yy_current_state;
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 10251 );

yy_find_action:
		yy_current_state = *--(yy_state_ptr);
		(yy_lp) = yy_accept[yy_current_state];
goto find_rule; /* Shut up GCC warning -Wall */
find_rule: /* we branch to this label when backing up */
		for ( ; ; ) /* until we find what rule we matched */
			{
			if ( (yy_lp) && (yy_lp) < yy_accept[yy_current_state + 1] )
				{
				yy_act = yy_acclist[(yy_lp)];
				if ( yy_act & YY_TRAILING_HEAD_MASK ||
				     (yy_looking_for_trail_begin) )
					{
					if ( yy_act == (yy_looking_for_trail_begin) )
						{
						(yy_looking_for_trail_begin) = 0;
						yy_act &= ~YY_TRAILING_HEAD_MASK;
						break;
						}
					}
				else if ( yy_act & YY_TRAILING_MASK )
					{
					(yy_looking_for_trail_begin) = yy_act & ~YY_TRAILING_MASK;
					(yy_looking_for_trail_begin) |= YY_TRAILING_HEAD_MASK;
					(yy_full_match) = yy_cp;
					(yy_full_state) = (yy_state_ptr);
					(yy_full_lp) = (yy_lp);
					}
				else
					{
					(yy_full_match) = yy_cp;
					(yy_full_state) = (yy_state_ptr);
					(yy_full_lp) = (yy_lp);
					break;
					}
				++(yy_lp);
				goto find_rule;
				}
			--yy_cp;
			yy_current_state = *--(yy_state_ptr);
			(yy_lp) = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
case 1:
/* rule 1 can match eol */
YY_RULE_SETUP
#line 273 "fortranscanner.l"
{ // prepass: look for line continuations

                                          //fprintf(stderr, "---%s", fscanYYtext);

                                            int indexStart = getAmpersandAtTheStart(fscanYYtext, fscanYYleng);                              
                                            int indexEnd = getAmpOrExclAtTheEnd(fscanYYtext, fscanYYleng);
					    if (indexEnd>=0 && fscanYYtext[indexEnd]!='&') //we are only interested in amp
					      indexEnd=-1;

                                            if(indexEnd<0){ // ----- no ampersand as line continuation
                                               if(YY_START == Prepass) { // last line in "continuation"

                                                 // Only take input after initial ampersand
                                                 inputStringPrepass+=(const char*)(fscanYYtext+(indexStart+1));
   
                                                 pushBuffer(inputStringPrepass);
                                                 yy_pop_state();
                                               } else { // simple line
                                                 REJECT;
                                               }

                                            } else { // ----- line with continuation
                                              if(YY_START != Prepass) {
                                                comments.setAutoDelete(TRUE);
						comments.clear();
                                                yy_push_state(Prepass);
                                              }

                                              int length = inputStringPrepass.length();

                                              // Only take input after initial ampersand
                                              inputStringPrepass+=(const char*)(fscanYYtext+(indexStart+1));
                                              lineCountPrepass ++;

                                              // cut off & and remove following comment if present
					      truncatePrepass(length+indexEnd-(indexStart+1));
                                            }

                                        }
	YY_BREAK
/*------ ignore strings that are not initialization strings */ 
case 2:
YY_RULE_SETUP
#line 315 "fortranscanner.l"
{ if (yy_top_state() == Initialization
					      || yy_top_state() == ArrayInitializer)
					    initializer+=fscanYYtext;
					}
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 319 "fortranscanner.l"
{ if (yy_top_state() == Initialization
					      || yy_top_state() == ArrayInitializer)
					    initializer+=fscanYYtext;
					}
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 323 "fortranscanner.l"
{ // string ends with next quote without previous backspace
                                          if (fscanYYtext[0]!=stringStartSymbol) REJECT; // single vs double quote
					  if (yy_top_state() == Initialization
					      || yy_top_state() == ArrayInitializer)
					    initializer+=fscanYYtext;
                                          yy_pop_state();
                                        }           
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 330 "fortranscanner.l"
{ if (yy_top_state() == Initialization
					      || yy_top_state() == ArrayInitializer)
					    initializer+=fscanYYtext;
					} 
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 334 "fortranscanner.l"
{ /* string starts */
					  if (YY_START == StrIgnore) REJECT; // ignore in simple comments
                                          yy_push_state(YY_START);
                                          if (yy_top_state() == Initialization
					      || yy_top_state() == ArrayInitializer)
					    initializer+=fscanYYtext;
                                          stringStartSymbol=fscanYYtext[0]; // single or double quote
                                          BEGIN(String);
                                        }
	YY_BREAK
/*------ ignore simple comment (not documentation comments) */
case 7:
*yy_cp = (yy_hold_char); /* undo effects of setting up fscanYYtext */
(yy_c_buf_p) = yy_cp = yy_bp + 1;
YY_DO_BEFORE_ACTION; /* set up fscanYYtext again */
YY_RULE_SETUP
#line 346 "fortranscanner.l"
{  if (YY_START == String) REJECT; // "!" is ignored in strings
                                          // skip comment line (without docu comments "!>" "!<" ) 
                                          /* ignore further "!" and ignore comments in Strings */
                                          if ((YY_START != StrIgnore) && (YY_START != String)) 
					  {
                                            yy_push_state(YY_START);
                                            BEGIN(StrIgnore); 
                                            debugStr="*!";
                                            //fprintf(stderr,"start comment %d\n",yyLineNr);
                                           }      
                                        }
	YY_BREAK
case 8:
/* rule 8 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up fscanYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up fscanYYtext again */
YY_RULE_SETUP
#line 357 "fortranscanner.l"
{ yy_pop_state(); // comment ends with endline character
                                          //fprintf(stderr,"end comment %d %s\n",yyLineNr,debugStr.data());
                                        } // comment line ends
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 360 "fortranscanner.l"
{ debugStr+=fscanYYtext; } 
	YY_BREAK
/*------ use handling ------------------------------------------------------------*/
case 10:
YY_RULE_SETUP
#line 365 "fortranscanner.l"
{
                                          if(YY_START == Start)
                                          {
                                            addModule(NULL); 
                                            yy_push_state(ModuleBody); //anon program
                                          }
                                          yy_push_state(Use);
                                        }
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 373 "fortranscanner.l"
{ 
                                          //fprintf(stderr,"using dir %s\n",fscanYYtext);
                                          current->name=fscanYYtext;
                                          current->fileName = yyFileName; 
  					  current->section=Entry::USINGDIR_SEC;
					  current_root->addSubEntry(current);
					  current = new Entry;
                                          yy_pop_state();
                                        }
	YY_BREAK
case 12:
*yy_cp = (yy_hold_char); /* undo effects of setting up fscanYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up fscanYYtext again */
YY_RULE_SETUP
#line 382 "fortranscanner.l"
{ 
                                          useModuleName=fscanYYtext;
                                        }
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 385 "fortranscanner.l"
{ BEGIN(UseOnly); 
                                        }           
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 387 "fortranscanner.l"
{}
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 388 "fortranscanner.l"
{
  					  current->name= useModuleName+"::"+fscanYYtext;
                                          current->fileName = yyFileName; 
  					  current->section=Entry::USINGDECL_SEC;
					  current_root->addSubEntry(current);
					  current = new Entry ;
  					}
	YY_BREAK
case 16:
/* rule 16 can match eol */
YY_RULE_SETUP
#line 395 "fortranscanner.l"
{
                                          unput(*fscanYYtext);
                                          yy_pop_state();
                                        }
	YY_BREAK
/*------ ignore special fortran statements */
case 17:
/* rule 17 can match eol */
YY_RULE_SETUP
#line 401 "fortranscanner.l"
{ // handle interface block
                                          if(YY_START == Start)
                                          {
                                            addModule(NULL); 
                                            yy_push_state(ModuleBody); //anon program
                                          }

					  QCString name = fscanYYtext;
					  int index = name.find("interface", 0, FALSE);
					  index = name.find(QRegExp("[^ \\t]"), index+9);
					  //printf(stderr,"%s,%d\n",name.data(),index);
					  if (index!=-1)
					    name = name.right(name.length()-index);
					  else // interface without name, must be inside subprog
					    name = "interface"; 
					  addInterface(name);
					  yy_push_state(InterfaceBody);
 					  startScope(last_entry);
                                        }
	YY_BREAK
case 18:
/* rule 18 can match eol */
YY_RULE_SETUP
#line 420 "fortranscanner.l"
{
					  if (!endScope(current_root))
					    yyterminate();
					  yy_pop_state();
                                        }
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 425 "fortranscanner.l"
{ yy_push_state(YY_START);
                                          BEGIN(ModuleProcedure);
                                        }
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 428 "fortranscanner.l"
{                       			
                                          current->section = Entry::FUNCTION_SEC ;
                                          current->name = fscanYYtext; 
 	                                  moduleProcedures.append(current);
                                          addCurrentEntry();
                                        }
	YY_BREAK
case 21:
/* rule 21 can match eol */
YY_RULE_SETUP
#line 434 "fortranscanner.l"
{ unput(*fscanYYtext); 
                                          yy_pop_state();
                                        }
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 437 "fortranscanner.l"
{}
	YY_BREAK
/*-- Contains handling --*/
case 23:
/* rule 23 can match eol */
YY_RULE_SETUP
#line 440 "fortranscanner.l"
{
                                          if(YY_START == Start)
                                          {
                                            addModule(NULL); 
                                            yy_push_state(ModuleBodyContains); //anon program
                                          }                                            
                                        }
	YY_BREAK
case 24:
/* rule 24 can match eol */
YY_RULE_SETUP
#line 447 "fortranscanner.l"
{ BEGIN(ModuleBodyContains); }
	YY_BREAK
case 25:
/* rule 25 can match eol */
YY_RULE_SETUP
#line 448 "fortranscanner.l"
{ BEGIN(SubprogBodyContains); }
	YY_BREAK
/*------ module handling ------------------------------------------------------------*/ 
case 26:
YY_RULE_SETUP
#line 451 "fortranscanner.l"
{  //
					    if(fscanYYtext[0]=='m' || fscanYYtext[0]=='M')
					      yy_push_state(Module);
					    else
					      yy_push_state(Program);
                                            defaultProtection = Public;
                                       }
	YY_BREAK
case 27:
/* rule 27 can match eol */
YY_RULE_SETUP
#line 458 "fortranscanner.l"
{ // end module	
					    resolveModuleProcedures(moduleProcedures, current_root);
					    if (!endScope(current_root))
					      yyterminate();
                                            defaultProtection = Public;
					    yy_pop_state();
                                       }
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 465 "fortranscanner.l"
{  
                                            addModule(fscanYYtext, TRUE);
					    BEGIN(ModuleBody);
                                       }
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 470 "fortranscanner.l"
{  
                                            addModule(fscanYYtext, FALSE);
					    BEGIN(ModuleBody);
                                       }
	YY_BREAK
/*------- access specification --------------------------------------------------------------------------*/
case 30:
/* rule 30 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up fscanYYtext */
(yy_c_buf_p) = yy_cp = yy_bp + 7;
YY_DO_BEFORE_ACTION; /* set up fscanYYtext again */
YY_RULE_SETUP
#line 477 "fortranscanner.l"
{ defaultProtection = Private; }
	YY_BREAK
case 31:
/* rule 31 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up fscanYYtext */
(yy_c_buf_p) = yy_cp = yy_bp + 6;
YY_DO_BEFORE_ACTION; /* set up fscanYYtext again */
YY_RULE_SETUP
#line 478 "fortranscanner.l"
{ defaultProtection = Public; }
	YY_BREAK
/*------- type definition  -------------------------------------------------------------------------------*/
case 32:
YY_RULE_SETUP
#line 482 "fortranscanner.l"
{ /* type definition found : TYPE , access-spec::type-name |*/
                                          if(YY_START == Start)
                                          {
                                            addModule(NULL); 
                                            yy_push_state(ModuleBody); //anon program
                                          }

 					    yy_push_state(Typedef);
					    current->protection = defaultProtection;
                                        }
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 492 "fortranscanner.l"
{ 	
                                            QCString type= fscanYYtext;				    
                                        }
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 495 "fortranscanner.l"
{ /* type name found */
                                            //cout << "=========> got typedef " << fscanYYtext << ": " << yyLineNr << endl; 
                                            current->section = Entry::CLASS_SEC; // was Entry::STRUCT_SEC;
   					    current->spec = Entry::Struct;        	
  					    current->name = fscanYYtext;

                                            /* if type is part of a module, mod name is necessary for output */
                                            if ((current_root) && 
                                               (current_root->section ==  Entry::CLASS_SEC ||
					        current_root->section ==  Entry::NAMESPACE_SEC))
						//current_root->section ==  Entry::INTERFACE_SEC)) 
					    {
                                              current->name= current_root->name+"::"+current->name;
                                            }
					    current->fileName = yyFileName;
					    current->bodyLine  = yyLineNr; 
                                            addCurrentEntry();
					    startScope(last_entry); 
                                            BEGIN(TypedefBody);
                                        }
	YY_BREAK
case 35:
/* rule 35 can match eol */
YY_RULE_SETUP
#line 515 "fortranscanner.l"
{ /* end type definition */
                                           //printf("=========> got typedef end \n"); 
					   if (!endScope(current_root))
					     yyterminate();
                                           yy_pop_state();
                                        } 
	YY_BREAK
/*------- module/global/typedef variable ---------------------------------------------------*/
case 36:
/* rule 36 can match eol */
YY_RULE_SETUP
#line 524 "fortranscanner.l"
{  
                                           //fprintf(stderr,"1e=========> got end subprog: %s\n", fscanYYtext);

                                           /* args is used for parameters in list of functions, argList for 
                                             parameters in detailed function descripttion */
                                           //current->args = argListToString(current->argList); 
					   //current->endBodyLine  = yyLineNr; // ??? what ist endBodyLine for
					   if (!endScope(current_root))
					     yyterminate();
					   yy_pop_state() ;
				       } 
	YY_BREAK

case 37:
/* rule 37 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up fscanYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up fscanYYtext again */
YY_RULE_SETUP
#line 536 "fortranscanner.l"
{
                                          /* variable declaration starts */
                                          if(YY_START == Start)
                                          {
                                            addModule(NULL); 
                                            yy_push_state(ModuleBody); //anon program
                                          }
                                          //fprintf(stderr,"4=========> got variable type: %s\n",fscanYYtext);
 					  QCString help=fscanYYtext;
					  help= help.simplifyWhiteSpace();
					  argType= help;
					  yy_push_state(AttributeList);
                                        }
	YY_BREAK
case 38:
/* rule 38 can match eol */
YY_RULE_SETUP
#line 549 "fortranscanner.l"
{ /* check for preprocessor symbol expand to type */
					  QCString str = fscanYYtext;
					  str = str.stripWhiteSpace();
					  DefineDict* defines = getFileDefineDict();
					  QCString name;
					  int index = str.find("(");
					  if (index != -1)
					    name = str.left(index).stripWhiteSpace();
					  else
					    name = str;

					  Define *define = (*defines)[name];
					  if (define != 0 && isTypeName(define->definition)) 
					  {
					    argType = str;
					    yy_push_state(AttributeList);
					  } 
					  else 
					  {
					    REJECT;
					  }
					}
	YY_BREAK
case 39:
/* rule 39 can match eol */
#line 572 "fortranscanner.l"
case 40:
/* rule 40 can match eol */
YY_RULE_SETUP
#line 572 "fortranscanner.l"
{ 
                                          /* attribute statement starts */
                                          //fprintf(stderr,"5=========> Attribute statement: %s\n", fscanYYtext); 
                                          QCString tmp = fscanYYtext;
                                          currentModifiers |= tmp.stripWhiteSpace();
					  argType="";
					  yy_push_state(YY_START);
					  BEGIN( AttributeList ) ;
  				       }
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 581 "fortranscanner.l"
{
                                       }  
	YY_BREAK


case 42:
YY_RULE_SETUP
#line 585 "fortranscanner.l"
{}
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 586 "fortranscanner.l"
{}
	YY_BREAK
case 44:
/* rule 44 can match eol */
YY_RULE_SETUP
#line 587 "fortranscanner.l"
{ /* update current modifiers */
                                          QCString tmp = fscanYYtext;
                                          currentModifiers |= (tmp);
					}
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 591 "fortranscanner.l"
{ /* end attribute list */
					  BEGIN( Variable );
					}
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 594 "fortranscanner.l"
{ /* unknown attribute, consider variable name */
					  //cout<<"start variables, unput "<<*fscanYYtext<<endl;
					  unput(*fscanYYtext);
					  BEGIN( Variable );
					}
	YY_BREAK

case 47:
YY_RULE_SETUP
#line 601 "fortranscanner.l"
{}
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 602 "fortranscanner.l"
{ /* parse variable declaration */
                                          //cout << "5=========> got variable: " << argType << "::" << fscanYYtext << endl;
 					  /* work around for bug in QCString.replace (QCString works) */
					  QCString name=fscanYYtext;
					  /* remember attributes for the symbol */
					  modifiers[current_root][name.lower()] |= currentModifiers;
					  argName= name;

					  v_type= V_IGNORE;
  					  if (!argType.isEmpty() && current_root->section!=Entry::FUNCTION_SEC) 
					  { // new variable entry
					    v_type = V_VARIABLE;
                                            current->section = Entry::VARIABLE_SEC;
 					    current->name = argName;
					    current->type = argType;
					    current->fileName = yyFileName;
					    current->bodyLine  = yyLineNr; // used for source reference
                                            addCurrentEntry();
                                          } 
					  else if (!argType.isEmpty())
					  { // deklaration of parameter list: add type for corr. parameter 
					    parameter= addFortranParameter(argType,argName,docBlock);
					    if (parameter) v_type= V_PARAMETER;
					    // save, it may be function return type
					    modifiers[current_root][name.lower()].type = argType;
					    // any accumulated doc for argument should be emptied,
					    // because it is handled other way and this doc can be
					    // unexpectedly passed to the next member.
					    current->doc.resize(0);
					    current->brief.resize(0);
                                          } 
  					}
	YY_BREAK
case 49:
/* rule 49 can match eol */
YY_RULE_SETUP
#line 634 "fortranscanner.l"
{ /* dimension of the previous entry. */
					  QCString name(argName);
					  QCString attr("dimension");
					  attr += fscanYYtext;
					  modifiers[current_root][name] |= attr;
					}
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 640 "fortranscanner.l"
{}
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 641 "fortranscanner.l"
{ yy_push_state(YY_START);
                                          initializer="";
                                          initializerScope = initializerArrayScope = 0;
					  BEGIN(Initialization);
                                        }
	YY_BREAK
case 52:
/* rule 52 can match eol */
YY_RULE_SETUP
#line 646 "fortranscanner.l"
{ currentModifiers = SymbolModifiers();
                                          yy_pop_state(); // end variable deklaration list
                                          yyLineNr++; yyLineNr+=lineCountPrepass; lineCountPrepass=0;
                                          docBlock.resize(0);
                                        }
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 652 "fortranscanner.l"
{ initializer+=fscanYYtext;
                                           initializerArrayScope++;
                                           BEGIN(ArrayInitializer); // initializer may contain comma
                                        }
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 656 "fortranscanner.l"
{ initializer+=fscanYYtext;
                                           initializerArrayScope--;
                                           if(initializerArrayScope<=0)
                                           {
                                              initializerArrayScope = 0; // just in case
                                              BEGIN(Initialization);
                                           }
                                        }
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 664 "fortranscanner.l"
{ initializer+=fscanYYtext; }
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 665 "fortranscanner.l"
{ initializerScope++;
					  initializer+=fscanYYtext;
					}
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 668 "fortranscanner.l"
{ initializerScope--;
					  initializer+=fscanYYtext;
					}
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 671 "fortranscanner.l"
{ if (initializerScope == 0)
					  {
					    yy_pop_state(); // end initialization
                                            if (v_type == V_VARIABLE) last_entry->initializer= initializer;
					  }
					  else
					    initializer+=", ";
					}
	YY_BREAK
case 59:
/* rule 59 can match eol */
YY_RULE_SETUP
#line 679 "fortranscanner.l"
{ //|
                                          yy_pop_state(); // end initialization
                                          if (v_type == V_VARIABLE) last_entry->initializer= initializer;
 					  unput(*fscanYYtext);
                                        }
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 684 "fortranscanner.l"
{ initializer+=fscanYYtext; }
	YY_BREAK
/*------ fortran subroutine/function handling ------------------------------------------------------------*/
/*       Start is initial condition                                                                       */
case 61:
/* rule 61 can match eol */
YY_RULE_SETUP
#line 689 "fortranscanner.l"
{   
		                           // TYPE_SPEC is for old function style function result
                                           result= fscanYYtext;
                                           result= result.stripWhiteSpace();
                                           extractPrefix(result);
                                           //fprintf(stderr, "===%s\n", (const char*)result);
  					   current->type = result;
                                           yy_push_state(SubprogPrefix);
                                       }          
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 699 "fortranscanner.l"
{
                                         // Fortran subroutine or function found
                                         addSubprogram(fscanYYtext);
                                         BEGIN(Subprog);
                                       }
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 705 "fortranscanner.l"
{
                                         // Fortran subroutine or function found
                                         result= fscanYYtext;
                                         result= result.stripWhiteSpace();
                                         extractPrefix(result);
                                         addSubprogram(result);
                                         yy_push_state(Subprog);
                                       }
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 714 "fortranscanner.l"
{   /* ignore white space */   }
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 715 "fortranscanner.l"
{   current->name = fscanYYtext;
					   //cout << "1a==========> got " << current->type << " " << fscanYYtext << " " << yyLineNr << endl;
					   modifiers[current_root][current->name.lower()].returnName = current->name;
					   BEGIN(Parameterlist);
                                       } 
	YY_BREAK
case 66:
/* rule 66 can match eol */
YY_RULE_SETUP
#line 720 "fortranscanner.l"
{   
				           //current->type not yet available
                                           QCString arglist= fscanYYtext;
					   //cout << "3=========> got parameterlist " << fscanYYtext << endl;
                                           //yyLineNr+= arglist.contains('\n');
					   //static QRegExp re("&[^\n]*\n");
                                           //arglist = arglist.replace(re,"");
					   //cout << "3=========> got parameterlist " << arglist << endl;
					   current->args = arglist;
					   current->args = removeRedundantWhiteSpace(current->args);
					   stringToArgumentList(current->args, current->argList);
                                           addCurrentEntry();
					   startScope(last_entry);
					   BEGIN(SubprogBody);
 				       } 
	YY_BREAK
case 67:
/* rule 67 can match eol */
YY_RULE_SETUP
#line 735 "fortranscanner.l"
{   
                                           yyLineNr++; yyLineNr+=lineCountPrepass; lineCountPrepass=0;
					   //printf("3=========> without parameterlist \n");
 					   stringToArgumentList("", current->argList);
                                           addCurrentEntry();
					   startScope(last_entry);
					   BEGIN(SubprogBody);				           
}
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 743 "fortranscanner.l"
{  
                                           result= fscanYYtext;
                                           result= result.right(result.length()-result.find("(")-1);
                                           result= result.stripWhiteSpace();
 					   modifiers[current_root->parent()][current_root->name.lower()].returnName = result;
                                           //cout << "=====> got result " <<  result << endl;
 				       } 
	YY_BREAK
/*---- documentation comments --------------------------------------------------------------------*/
case 69:
YY_RULE_SETUP
#line 753 "fortranscanner.l"
{ /* backward docu comment (only one line) */
                                          if (v_type != V_IGNORE) {
                                           yy_push_state(YY_START);
					   current->docLine  = yyLineNr;
 					   docBlockJavaStyle = FALSE;
					   docBlock.resize(0);
					   docBlockJavaStyle = Config_getBool("JAVADOC_AUTOBRIEF");
					   startCommentBlock(TRUE);
					   BEGIN(DocBackLine);
                                          }
  					 }
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 764 "fortranscanner.l"
{ // contents of current comment line
                                          docBlock=fscanYYtext;
					  if (v_type == V_VARIABLE) 
					  {
					    Entry *tmp_entry = current; 
					    current = last_entry; // temporarily switch to the previous entry
  					    handleCommentBlock(docBlock,TRUE);
 					    current=tmp_entry;
                                          }
					  else if (v_type == V_PARAMETER) 
					  {
					    parameter->docs=docBlock;
                                          }
                                          yy_pop_state();
 					 }
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 780 "fortranscanner.l"
{
                                          yy_push_state(YY_START);
					  current->docLine  = yyLineNr;
 					  docBlockJavaStyle = FALSE;
					  docBlock.resize(0);
					  docBlockJavaStyle = Config_getBool("JAVADOC_AUTOBRIEF");
					  startCommentBlock(TRUE);
					  BEGIN(DocBlock);
                                          //cout << "start DocBlock " << endl;
					}
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 791 "fortranscanner.l"
{ // contents of current comment line
                                          docBlock+=fscanYYtext;
  					}
	YY_BREAK
case 73:
/* rule 73 can match eol */
YY_RULE_SETUP
#line 794 "fortranscanner.l"
{ // comment block (next line is also comment line)
					  docBlock+="\n"; // \n is necessary for lists
                                          yyLineNr++; yyLineNr+=lineCountPrepass; lineCountPrepass=0;
  					}
	YY_BREAK
case 74:
/* rule 74 can match eol */
YY_RULE_SETUP
#line 798 "fortranscanner.l"
{ // comment block ends at the end of this line
                                          //cout <<"3=========> comment block : "<< docBlock << endl;
					  unput(*fscanYYtext);                                        
 					  handleCommentBlock(docBlock,TRUE);
                                          yy_pop_state();                                          
  					}
	YY_BREAK
/*------------------------------------------------------------------------------------------------*/
case 75:
/* rule 75 can match eol */
YY_RULE_SETUP
#line 807 "fortranscanner.l"
{
                                          yyLineNr++; yyLineNr+=lineCountPrepass; lineCountPrepass=0;
                                          //if (debugStr.stripWhiteSpace().length() > 0) cout << "ignored text: " << debugStr << " state: " <<YY_START << endl;
                                          debugStr="";
                                        }
	YY_BREAK
/*---- error: EOF in wrong state --------------------------------------------------------------------*/
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(Subprog):
case YY_STATE_EOF(SubprogPrefix):
case YY_STATE_EOF(Parameterlist):
case YY_STATE_EOF(SubprogBody):
case YY_STATE_EOF(SubprogBodyContains):
case YY_STATE_EOF(Start):
case YY_STATE_EOF(Comment):
case YY_STATE_EOF(Module):
case YY_STATE_EOF(Program):
case YY_STATE_EOF(ModuleBody):
case YY_STATE_EOF(ModuleBodyContains):
case YY_STATE_EOF(AttributeList):
case YY_STATE_EOF(Variable):
case YY_STATE_EOF(Initialization):
case YY_STATE_EOF(ArrayInitializer):
case YY_STATE_EOF(Typedef):
case YY_STATE_EOF(TypedefBody):
case YY_STATE_EOF(InterfaceBody):
case YY_STATE_EOF(StrIgnore):
case YY_STATE_EOF(String):
case YY_STATE_EOF(Use):
case YY_STATE_EOF(UseOnly):
case YY_STATE_EOF(ModuleProcedure):
case YY_STATE_EOF(Prepass):
case YY_STATE_EOF(DocBlock):
case YY_STATE_EOF(DocBackLine):
case YY_STATE_EOF(EndDoc):
#line 816 "fortranscanner.l"
{
                                          if ( include_stack_ptr <= 0 ) {
                                            if (YY_START!=INITIAL && YY_START!=Start) {
                                              //fprintf(stderr,"==== Error: EOF reached in wrong state (end missing)");
                                              scanner_abort();
                                            }
                                            yyterminate();
                                          } else {
                                            popBuffer();
                                          }
                                        }
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 827 "fortranscanner.l"
{
                                          //debugStr+=fscanYYtext;
					  //printf("I:%c\n", *fscanYYtext);
                                        } // ignore remaining text 
	YY_BREAK
/**********************************************************************************/
/**********************************************************************************/
/**********************************************************************************/
case 77:
YY_RULE_SETUP
#line 835 "fortranscanner.l"
ECHO;
	YY_BREAK
#line 5171 "<stdout>"

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed fscanYYin at a new source and called
			 * fscanYYlex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = fscanYYin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( fscanYYwrap( ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * fscanYYtext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of fscanYYlex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (void)
{
    	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = (yytext_ptr);
	register int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			yy_size_t num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			YY_FATAL_ERROR(
"input buffer overflow, can't enlarge buffer because scanner uses REJECT" );

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			fscanYYrestart(fscanYYin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yy_size_t) ((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) fscanYYrealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (void)
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    
	yy_current_state = (yy_start);
	yy_current_state += YY_AT_BOL();

	(yy_state_ptr) = (yy_state_buf);
	*(yy_state_ptr)++ = yy_current_state;

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 1966 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		*(yy_state_ptr)++ = yy_current_state;
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state )
{
	register int yy_is_jam;
    
	register YY_CHAR yy_c = 1;
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 1966 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 1965);
	if ( ! yy_is_jam )
		*(yy_state_ptr)++ = yy_current_state;

	return yy_is_jam ? 0 : yy_current_state;
}

    static void yyunput (int c, register char * yy_bp )
{
	register char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up fscanYYtext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register yy_size_t number_to_move = (yy_n_chars) + 2;
		register char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		register char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (void)
#else
    static int input  (void)
#endif

{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			yy_size_t offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					fscanYYrestart(fscanYYin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( fscanYYwrap( ) )
						return 0;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve fscanYYtext */
	(yy_hold_char) = *++(yy_c_buf_p);

	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = (c == '\n');

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void fscanYYrestart  (FILE * input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        fscanYYensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            fscanYY_create_buffer(fscanYYin,YY_BUF_SIZE );
	}

	fscanYY_init_buffer(YY_CURRENT_BUFFER,input_file );
	fscanYY_load_buffer_state( );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void fscanYY_switch_to_buffer  (YY_BUFFER_STATE  new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		fscanYYpop_buffer_state();
	 *		fscanYYpush_buffer_state(new_buffer);
     */
	fscanYYensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	fscanYY_load_buffer_state( );

	/* We don't actually know whether we did this switch during
	 * EOF (fscanYYwrap()) processing, but the only time this flag
	 * is looked at is after fscanYYwrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

static void fscanYY_load_buffer_state  (void)
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	fscanYYin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE fscanYY_create_buffer  (FILE * file, int  size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) fscanYYalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in fscanYY_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) fscanYYalloc(b->yy_buf_size + 2  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in fscanYY_create_buffer()" );

	b->yy_is_our_buffer = 1;

	fscanYY_init_buffer(b,file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with fscanYY_create_buffer()
 * 
 */
    void fscanYY_delete_buffer (YY_BUFFER_STATE  b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		fscanYYfree((void *) b->yy_ch_buf  );

	fscanYYfree((void *) b  );
}

#ifndef __cplusplus
extern int isatty (int );
#endif /* __cplusplus */
    
/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a fscanYYrestart() or at EOF.
 */
    static void fscanYY_init_buffer  (YY_BUFFER_STATE  b, FILE * file )

{
	int oerrno = errno;
    
	fscanYY_flush_buffer(b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then fscanYY_init_buffer was _probably_
     * called from fscanYYrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void fscanYY_flush_buffer (YY_BUFFER_STATE  b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		fscanYY_load_buffer_state( );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void fscanYYpush_buffer_state (YY_BUFFER_STATE new_buffer )
{
    	if (new_buffer == NULL)
		return;

	fscanYYensure_buffer_stack();

	/* This block is copied from fscanYY_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from fscanYY_switch_to_buffer. */
	fscanYY_load_buffer_state( );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void fscanYYpop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	fscanYY_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		fscanYY_load_buffer_state( );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void fscanYYensure_buffer_stack (void)
{
	yy_size_t num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		(yy_buffer_stack) = (struct yy_buffer_state**)fscanYYalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in fscanYYensure_buffer_stack()" );
								  
		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)fscanYYrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in fscanYYensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * 
 * @return the newly allocated buffer state object. 
 */
YY_BUFFER_STATE fscanYY_scan_buffer  (char * base, yy_size_t  size )
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) fscanYYalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in fscanYY_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	fscanYY_switch_to_buffer(b  );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to fscanYYlex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * 
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       fscanYY_scan_bytes() instead.
 */
YY_BUFFER_STATE fscanYY_scan_string (yyconst char * yystr )
{
    
	return fscanYY_scan_bytes(yystr,strlen(yystr) );
}

/** Setup the input buffer state to scan the given bytes. The next call to fscanYYlex() will
 * scan from a @e copy of @a bytes.
 * @param bytes the byte buffer to scan
 * @param len the number of bytes in the buffer pointed to by @a bytes.
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE fscanYY_scan_bytes  (yyconst char * yybytes, yy_size_t  _yybytes_len )
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n, i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = _yybytes_len + 2;
	buf = (char *) fscanYYalloc(n  );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in fscanYY_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = fscanYY_scan_buffer(buf,n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in fscanYY_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

    static void yy_push_state (int  new_state )
{
    	if ( (yy_start_stack_ptr) >= (yy_start_stack_depth) )
		{
		yy_size_t new_size;

		(yy_start_stack_depth) += YY_START_STACK_INCR;
		new_size = (yy_start_stack_depth) * sizeof( int );

		if ( ! (yy_start_stack) )
			(yy_start_stack) = (int *) fscanYYalloc(new_size  );

		else
			(yy_start_stack) = (int *) fscanYYrealloc((void *) (yy_start_stack),new_size  );

		if ( ! (yy_start_stack) )
			YY_FATAL_ERROR( "out of memory expanding start-condition stack" );
		}

	(yy_start_stack)[(yy_start_stack_ptr)++] = YY_START;

	BEGIN(new_state);
}

    static void yy_pop_state  (void)
{
    	if ( --(yy_start_stack_ptr) < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN((yy_start_stack)[(yy_start_stack_ptr)]);
}

    static int yy_top_state  (void)
{
    	return (yy_start_stack)[(yy_start_stack_ptr) - 1];
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yy_fatal_error (yyconst char* msg )
{
    	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up fscanYYtext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		fscanYYtext[fscanYYleng] = (yy_hold_char); \
		(yy_c_buf_p) = fscanYYtext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		fscanYYleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the current line number.
 * 
 */
int fscanYYget_lineno  (void)
{
        
    return fscanYYlineno;
}

/** Get the input stream.
 * 
 */
FILE *fscanYYget_in  (void)
{
        return fscanYYin;
}

/** Get the output stream.
 * 
 */
FILE *fscanYYget_out  (void)
{
        return fscanYYout;
}

/** Get the length of the current token.
 * 
 */
yy_size_t fscanYYget_leng  (void)
{
        return fscanYYleng;
}

/** Get the current token.
 * 
 */

char *fscanYYget_text  (void)
{
        return fscanYYtext;
}

/** Set the current line number.
 * @param line_number
 * 
 */
void fscanYYset_lineno (int  line_number )
{
    
    fscanYYlineno = line_number;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param in_str A readable stream.
 * 
 * @see fscanYY_switch_to_buffer
 */
void fscanYYset_in (FILE *  in_str )
{
        fscanYYin = in_str ;
}

void fscanYYset_out (FILE *  out_str )
{
        fscanYYout = out_str ;
}

int fscanYYget_debug  (void)
{
        return fscanYY_flex_debug;
}

void fscanYYset_debug (int  bdebug )
{
        fscanYY_flex_debug = bdebug ;
}

static int yy_init_globals (void)
{
        /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from fscanYYlex_destroy(), so don't allocate here.
     */

    (yy_buffer_stack) = 0;
    (yy_buffer_stack_top) = 0;
    (yy_buffer_stack_max) = 0;
    (yy_c_buf_p) = (char *) 0;
    (yy_init) = 0;
    (yy_start) = 0;

    (yy_start_stack_ptr) = 0;
    (yy_start_stack_depth) = 0;
    (yy_start_stack) =  NULL;

    (yy_state_buf) = 0;
    (yy_state_ptr) = 0;
    (yy_full_match) = 0;
    (yy_lp) = 0;

/* Defined in main.c */
#ifdef YY_STDINIT
    fscanYYin = stdin;
    fscanYYout = stdout;
#else
    fscanYYin = (FILE *) 0;
    fscanYYout = (FILE *) 0;
#endif

    /* For future reference: Set errno on error, since we are called by
     * fscanYYlex_init()
     */
    return 0;
}

/* fscanYYlex_destroy is for both reentrant and non-reentrant scanners. */
int fscanYYlex_destroy  (void)
{
    
    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		fscanYY_delete_buffer(YY_CURRENT_BUFFER  );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		fscanYYpop_buffer_state();
	}

	/* Destroy the stack itself. */
	fscanYYfree((yy_buffer_stack) );
	(yy_buffer_stack) = NULL;

    /* Destroy the start condition stack. */
        fscanYYfree((yy_start_stack)  );
        (yy_start_stack) = NULL;

    fscanYYfree ( (yy_state_buf) );
    (yy_state_buf)  = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * fscanYYlex() is called, initialization will occur. */
    yy_init_globals( );

    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *fscanYYalloc (yy_size_t  size )
{
	return (void *) malloc( size );
}

void *fscanYYrealloc  (void * ptr, yy_size_t  size )
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void fscanYYfree (void * ptr )
{
	free( (char *) ptr );	/* see fscanYYrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 835 "fortranscanner.l"


//----------------------------------------------------------------------------

static void extractPrefix(QCString &text) {
  int prefixIndex = 0;
  int curIndex = 0;
  bool cont = TRUE;
  const char* pre[] = {"RECURSIVE","PURE","ELEMENTAL"};
  while(cont)
  {
    cont = FALSE;
    for(unsigned int i=0; i<3; i++)
    {
      if((prefixIndex=text.find(pre[i], curIndex, FALSE))==0)
      {
        text.remove(0,strlen(pre[i]));
        text.stripWhiteSpace();
        cont = TRUE;
      }
    }
  }
}

static int getAmpersandAtTheStart(const char *buf, int length)
{
  for(int i=0; i<length; i++) {
    switch(buf[i]) {
      case ' ':
      case '\t':
        break;
      case '&':
        return i;
      default:
        return -1;
    }
  }
  return -1;
}

/* Returns ampersand index, comment start index or -1 if neither exist.*/ 
static int getAmpOrExclAtTheEnd(const char *buf, int length)
{
  // Avoid ampersands in string and comments
  int parseState = Start;
  char quoteSymbol = 0;
  int ampIndex = -1;
  int commentIndex = -1;

  for(int i=0; i<length && parseState!=Comment; i++)
  {
    // When in string, skip backslashes
    // Legacy code, not sure whether this is correct?
    if(parseState==String)
    {
      if(buf[i]=='\\') i++;
    }

    switch(buf[i])
    {
        case '\'':
        case '"':
          // Close string, if quote symbol matches.
          // Quote symbol is set iff parseState==String
          if(buf[i]==quoteSymbol)
          {
             parseState = Start;
             quoteSymbol = 0;
          }
          // Start new string, if not already in string or comment
          else if(parseState==Start)
          {
            parseState = String;
            quoteSymbol = buf[i];
          }
          ampIndex = -1; // invalidate prev ampersand
          break;
        case '!':
          // When in string or comment, ignore exclamation mark
          if(parseState==Start)
          {
            parseState = Comment;
            commentIndex = i;
          }
          break;
        case ' ':  // ignore whitespace
        case '\t':
        case '\n': // this may be at the end of line
          break;
        case '&':
          ampIndex = i;
          break;
        default:
          ampIndex = -1; // invalidate prev ampersand
    }
  }

  if (ampIndex>=0)
    return ampIndex;
  else
   return commentIndex;
}

/* Although comments at the end of continuation line are grabbed by this function,
* we still do not know how to use them later in parsing.
*/
void truncatePrepass(int index)
{
  int length = inputStringPrepass.length();
  for (int i=index+1; i<length; i++) {
    if (inputStringPrepass[i]=='!') { // save comment 
      //printf("-----SAVE----- %d:%s", i, (const char*)inputStringPrepass.right(length-i));
      struct CommentInPrepass *c=new CommentInPrepass(index, inputStringPrepass.right(length-i));
      comments.append(c);
    }
  }
  inputStringPrepass.truncate(index);
}

// simplified way to know if this is fixed form
// duplicate in fortrancode.l
static bool recognizeFixedForm(const char* contents)
{
  int column=0;
  bool skipLine=FALSE;

  for(int i=0;;i++) {
    column++;

    switch(contents[i]) {
      case '\n':
        column=0;
        skipLine=FALSE;
        break;
      case ' ':
        break;
      case '\000':
        return FALSE;
      case 'C':
      case 'c':
      case '*':
        if(column==1) return TRUE;
        if(skipLine) break;
        return FALSE;
      case '!':
        if(column>1 && column<7) return FALSE;
        skipLine=TRUE;
        break;
      default:
        if(skipLine) break;
        if(column==7) return TRUE;
        return FALSE;
    }
  }
  return FALSE;
}

/* This function assumes that contents has at least size=length+1 */
static void insertCharacter(char *contents, int length, int pos, char c)
{
  // shift tail by one character
  for(int i=length; i>pos; i--)
    contents[i]=contents[i-1];
  // set the character
  contents[pos] = c;
}

/* change comments and bring line continuation character to previous line */
static const char* prepassFixedForm(const char* contents)
{
  int column=0;
  int prevLineLength=0;
  int prevLineAmpOrExclIndex=-1;
  bool emptyLabel=TRUE;
  int newContentsSize = strlen(contents)+2; // \000 and one spare character (to avoid reallocation)
  char* newContents = (char*)malloc(newContentsSize);

  for(int i=0, j=0;;i++,j++) {
    if(j>=newContentsSize-1) { // check for one spare character, which may be eventually used below (by &)
      newContents = (char*)realloc(newContents, newContentsSize+1000);
      newContentsSize = newContentsSize+1000;
    }

    column++;
    char c = contents[i];
    switch(c) {
      case '\n':
        prevLineLength=column;
        prevLineAmpOrExclIndex=getAmpOrExclAtTheEnd(&contents[i-prevLineLength+1], prevLineLength);
        column=0;
	emptyLabel=TRUE;
        newContents[j]=c;
        break;
      case ' ':
        newContents[j]=c;
        break;
      case '\000':
        newContents[j]='\000';
        return newContents;
      case 'C':
      case 'c':
      case '*':
	emptyLabel=FALSE;
        if(column==1)
	  newContents[j]='!';
        else
          newContents[j]=c;
        break;
      default:
        if(column==6 && emptyLabel) { // continuation
          newContents[j]=' ';

          if(prevLineAmpOrExclIndex==-1) { // add & just before end of previous line
            insertCharacter(newContents, j+1, (j+1)-6-1, '&');
            j++;
          } else { // add & just before end of previous line comment
            insertCharacter(newContents, j+1, (j+1)-6-prevLineLength+prevLineAmpOrExclIndex, '&');
            j++;
          }
	} else {
	  newContents[j]=c;
	  emptyLabel=FALSE;
	}
        break;
    }
  }
  return newContents;
}

static void pushBuffer(QCString& buffer)
{
  if ( include_stack_ptr >= MAX_INCLUDE_DEPTH )
  {
    fprintf( stderr, "Stack buffers nested too deeply" );
    exit( 1 );
  }
  include_stack[include_stack_ptr++] = YY_CURRENT_BUFFER;
  fscanYY_switch_to_buffer(fscanYY_scan_string(buffer));

  //fprintf(stderr, "--PUSH--%s", (const char *)buffer);
  buffer = NULL;
}

static void popBuffer() {
  //fprintf(stderr, "--POP--");
  include_stack_ptr --;
  fscanYY_delete_buffer(YY_CURRENT_BUFFER );
  fscanYY_switch_to_buffer(include_stack[include_stack_ptr] );
}

/** used to copy entry to an interface module procedure */
static void copyEntry(Entry *dest, Entry *src) 
{
   dest->type     = src->type;
   dest->fileName = src->fileName;
   dest->bodyLine = src->bodyLine;
   dest->args     = src->args;
   dest->argList  = new ArgumentList(*src->argList);
}

/** fill empty interface module procedures with info from 
    corresponding module subprogs 
    @TODO: handle procedures in used modules
*/
void resolveModuleProcedures(QList<Entry> &moduleProcedures, Entry *current_root)
{
  if (moduleProcedures.isEmpty()) return;
 
  EntryListIterator eli1(moduleProcedures);
  // for all module procedures
  for (Entry *ce1; (ce1=eli1.current()); ++eli1) 
  {
    // check all entries in this module
    EntryListIterator eli2(*current_root->children());
    for (Entry *ce2; (ce2=eli2.current()); ++eli2) 
    {
      if (ce1->name == ce2->name) 
      {
        copyEntry(ce1, ce2);
      }
    } // for procedures in current module
  } // for all interface module procedures
  moduleProcedures.clear();
}

static bool isTypeName(QCString name)
{
  name = name.lower();
  return name=="integer" || name == "real" || 
    name=="complex" || name == "logical";
}

/*! Extracts string which resides within parentheses of provided string. */
static QCString extractFromParens(const QCString name)
{
  QCString extracted = name;
  int start = extracted.find("(");
  if (start != -1) 
  {
    extracted.remove(0, start+1);
  }
  int end = extracted.findRev(")");
  if (end != -1) 
  {
    int length = extracted.length();
    extracted.remove(end, length);
  }
  extracted = extracted.stripWhiteSpace();

  return extracted;
}

/*! Adds passed modifiers to these modifiers.*/
SymbolModifiers& SymbolModifiers::operator|=(const SymbolModifiers &mdfs)
{
  if (mdfs.protection!=NONE_P) protection = mdfs.protection;
  if (mdfs.direction!=NONE_D) direction = mdfs.direction;
  optional |= mdfs.optional;
  if (!mdfs.dimension.isNull()) dimension = mdfs.dimension;
  allocatable |= mdfs.allocatable;
  external |= mdfs.external;
  intrinsic |= mdfs.intrinsic;
  parameter |= mdfs.parameter;
  pointer |= mdfs.pointer;
  target |= mdfs.target;
  save |= mdfs.save;
  return *this;
}

/*! Extracts  and adds passed modifier to these modifiers.*/
SymbolModifiers& SymbolModifiers::operator|=(QCString mdfString)
{
  mdfString = mdfString.lower();
  SymbolModifiers newMdf;

  if (mdfString.find("dimension")==0) 
  {
    newMdf.dimension=mdfString;
  }
  else if (mdfString.contains("intent")) 
  {
    QCString tmp = extractFromParens(mdfString);
    bool isin = tmp.contains("in");
    bool isout = tmp.contains("out");
    if (isin && isout) newMdf.direction = SymbolModifiers::INOUT;
    else if (isin) newMdf.direction = SymbolModifiers::IN;
    else if (isout) newMdf.direction = SymbolModifiers::OUT;
  }
  else if (mdfString=="public") 
  {
    newMdf.protection = SymbolModifiers::PUBLIC;
  }
  else if (mdfString=="private") 
  {
    newMdf.protection = SymbolModifiers::PRIVATE;
  }
  else if (mdfString=="optional") 
  {
    newMdf.optional = TRUE;
  }
  else if (mdfString=="allocatable") 
  {
    newMdf.allocatable = TRUE;
  }
  else if (mdfString=="external") 
  {
    newMdf.external = TRUE;
  }
  else if (mdfString=="intrinsic") 
  {
    newMdf.intrinsic = TRUE;
  }
  else if (mdfString=="parameter") 
  {
    newMdf.parameter = TRUE;
  }
  else if (mdfString=="pointer") 
  {
    newMdf.pointer = TRUE;
  }
  else if (mdfString=="target") 
  {
    newMdf.target = TRUE;
  }
  else if (mdfString=="save") 
  {
    newMdf.save = TRUE;
  }

  (*this) |= newMdf;
  return *this;
}

/*! For debugging purposes. */
//ostream& operator<<(ostream& out, const SymbolModifiers& mdfs)
//{
//  out<<mdfs.protection<<", "<<mdfs.direction<<", "<<mdfs.optional<<
//    ", "<<(mdfs.dimension.isNull() ? "" : mdfs.dimension.latin1())<<
//    ", "<<mdfs.allocatable<<", "<<mdfs.external<<", "<<mdfs.intrinsic;
//
//  return out;
//}

/*! Find argument with given name in \a subprog entry. */
static Argument *findArgument(Entry* subprog, QCString name, bool byTypeName = FALSE)
{
  QCString cname(name.lower());
  for (unsigned int i=0; i<subprog->argList->count(); i++) 
  {
    Argument *arg = subprog->argList->at(i);
    if ((!byTypeName && arg->name.lower() == cname) ||
	(byTypeName && arg->type.lower() == cname)
       )
    {
      return arg;
    }
  }
  return 0;
}

/*! Find function with given name in \a entry. */
#if 0
static Entry *findFunction(Entry* entry, QCString name)
{
  QCString cname(name.lower());

  EntryListIterator eli(*entry->children());
  Entry *ce;
  for (;(ce=eli.current());++eli) 
  {
    if (ce->section != Entry::FUNCTION_SEC)
      continue;

    if (ce->name.lower() == cname)
      return ce;
  }

  return 0;
}
#endif

/*! Apply modifiers stored in \a mdfs to the \a typeName string. */
static QCString applyModifiers(QCString typeName, SymbolModifiers& mdfs) 
{
  if (!mdfs.dimension.isNull()) 
  {
    typeName += ",";
    typeName += mdfs.dimension;
  }
  if (mdfs.direction!=SymbolModifiers::NONE_D) 
  {
    typeName += ",";
    typeName += directionStrs[mdfs.direction];
  }
  if (mdfs.optional) 
  {
    typeName += ",";
    typeName += "optional";
  }
  if (mdfs.allocatable) 
  {
    typeName += ",";
    typeName += "allocatable";
  }
  if (mdfs.external) 
  {
    typeName += ",";
    typeName += "external";
  }
  if (mdfs.intrinsic) 
  {
    typeName += ",";
    typeName += "intrinsic";
  }
  if (mdfs.parameter) 
  {
    typeName += ",";
    typeName += "parameter";
  }
  if (mdfs.pointer) 
  {
    typeName += ",";
    typeName += "pointer";
  }
  if (mdfs.target) 
  {
    typeName += ",";
    typeName += "target";
  }
  if (mdfs.save) 
  {
    typeName += ",";
    typeName += "save";
  }

  return typeName;
}

/*! Apply modifiers stored in \a mdfs to the \a arg argument. */
static void applyModifiers(Argument *arg, SymbolModifiers& mdfs)
{
  QCString tmp = arg->type;
  arg->type = applyModifiers(tmp, mdfs);
}

/*! Apply modifiers stored in \a mdfs to the \a ent entry. */
static void applyModifiers(Entry *ent, SymbolModifiers& mdfs)
{
  QCString tmp = ent->type;
  ent->type = applyModifiers(tmp, mdfs);

  if (mdfs.protection == SymbolModifiers::PUBLIC)
    ent->protection = Public;
  else if (mdfs.protection == SymbolModifiers::PRIVATE)
    ent->protection = Private;
}

/*! Starts the new scope in fortran program. Consider using this function when
 * starting module, interface, function or other program block.
 * \see endScope()
 */
static void startScope(Entry *scope) 
{
  //cout<<"start scope: "<<scope->name<<endl;
  current_root= scope; /* start substructure */

  QMap<QCString,SymbolModifiers> mdfMap;
  modifiers.insert(scope, mdfMap);
}

/*! Ends scope in fortran program: may update subprogram arguments or module variable attributes.
 * \see startScope()
 */
static bool endScope(Entry *scope, bool isGlobalRoot)
{
  //cout<<"end scope: "<<scope->name<<endl;
  if (current_root->parent() || isGlobalRoot)
  {
    current_root= current_root->parent(); /* end substructure */
  }
  else 
  {
    fprintf(stderr,"parse error in end <scopename>");
    scanner_abort();
    return FALSE;
  }

  // update variables or subprogram arguments with modifiers
  QMap<QCString,SymbolModifiers>& mdfsMap = modifiers[scope];

  if (scope->section == Entry::FUNCTION_SEC) 
  {
    // iterate all symbol modifiers of the scope
    for (QMap<QCString,SymbolModifiers>::Iterator it=mdfsMap.begin(); it!=mdfsMap.end(); it++) 
    {
      //cout<<it.key()<<": "<<it.data()<<endl;
      Argument *arg = findArgument(scope, it.key());

      if (arg)
        applyModifiers(arg, it.data());
    }

    // find return type for function
    //cout<<"RETURN NAME "<<modifiers[current_root][scope->name.lower()].returnName<<endl;
    QCString returnName = modifiers[current_root][scope->name.lower()].returnName.lower();
    if (modifiers[scope].contains(returnName)) 
    {
      scope->type = modifiers[scope][returnName].type; // returning type works
      applyModifiers(scope, modifiers[scope][returnName]); // returning array works
    }

  } 
  if (scope->section == Entry::CLASS_SEC) 
  { // was INTERFACE_SEC
    if (scope->parent()->section == Entry::FUNCTION_SEC) 
    { // interface within function
      // iterate functions of interface and 
      // try to find types for dummy(ie. argument) procedures.
      //cout<<"Search in "<<scope->name<<endl;
      EntryListIterator eli(*scope->children());
      Entry *ce;
      for (;(ce=eli.current());++eli) 
      {
        if (ce->section != Entry::FUNCTION_SEC)
          continue;

        Argument *arg = findArgument(scope->parent(), ce->name, TRUE);
        if (arg != 0) 
	{
          // set type of dummy procedure argument to interface
	  arg->name = arg->type;
          arg->type = scope->name;
        }
      }
    }
  } 
  if (scope->section!=Entry::FUNCTION_SEC) 
  { // not function section 
    // iterate variables: get and apply modifiers
    EntryListIterator eli(*scope->children());
    Entry *ce;
    for (;(ce=eli.current());++eli) 
    {
      if (ce->section != Entry::VARIABLE_SEC && ce->section != Entry::FUNCTION_SEC)
        continue;

      //cout<<ce->name<<", "<<mdfsMap.contains(ce->name.lower())<<mdfsMap.count()<<endl;
      if (mdfsMap.contains(ce->name.lower()))
        applyModifiers(ce, mdfsMap[ce->name.lower()]);
    }
  }

  // clear all modifiers of the scope
  modifiers.remove(scope);

  return TRUE;
}

//! Return full name of the entry. Sometimes we must combine several names recursively.
static QCString getFullName(Entry *e) 
{
  QCString name = e->name;
  if (e->section == Entry::CLASS_SEC //  || e->section == Entry::INTERFACE_SEC
     || !e->parent() || e->parent()->name.isEmpty())
    return name;

  return getFullName(e->parent())+"::"+name;
}

static int yyread(char *buf,int max_size)
{
  int c=0;

  while ( c < max_size && inputString[inputPosition] )
  {
    *buf = inputString[inputPosition++] ;
    c++; buf++;
  }
  return c;
}

static void initParser()
{
  last_entry = 0;
}

static void initEntry()
{
  current->protection = defaultProtection ;
  current->mtype      = mtype;
  current->virt       = virt;
  current->stat       = gstat;
  initGroupInfo(current);
}

/**
  adds current entry to current_root and creates new current
*/
static void addCurrentEntry()
{
  //printf("===Adding entry %s to %s\n", current->name.data(), current_root->name.data());
  current_root->addSubEntry(current);
  last_entry = current;
  current = new Entry ;
  initEntry();
}

static int max(int a, int b) {return a>b?a:b;}

static void addModule(const char *name, bool isModule)
{
  //fprintf(stderr, "0=========> got module %s\n", name);

  if (isModule)
    current->section = Entry::NAMESPACE_SEC;
  else
    current->section = Entry::FUNCTION_SEC;

  if (name!=NULL)
  {
    current->name = name;
  } 
  else
  {
    QCString fname = yyFileName;
    int index = max(fname.findRev('/'), fname.findRev('\\'));
    fname = fname.right(fname.length()-index-1);
    fname = fname.prepend("__").append("__");
    current->name = fname;
  }
  current->type = "program";
  current->fileName  = yyFileName;
  current->bodyLine  = yyLineNr; // used for source reference
  current->protection = Public ;
  addCurrentEntry();
  startScope(last_entry);
}


static void addSubprogram(const char *text)
{
  //fprintf(stderr,"1=========> got subprog, type: %s\n",text); 
  current->section = Entry::FUNCTION_SEC ;
  QCString subtype = text; subtype=subtype.lower().stripWhiteSpace();
  if (!current->type) current->type = subtype;
  current->fileName  = yyFileName;
  current->bodyLine  = yyLineNr; // used for source reference
  current->startLine = -1; // ??? what is startLine for?
  current->args.resize(0);
  current->argList->clear();
  docBlock.resize(0);
}

/*! Adds interface to the root entry.
 * \note Code was brought to this procedure from the parser,
 * because there was/is idea to use it in several parts of the parser.
 */ 
static void addInterface(QCString name) 
{
  current->section = Entry::CLASS_SEC; // was Entry::INTERFACE_SEC;
  current->spec = Entry::Interface;
  current->name = name;

  /* if type is part of a module, mod name is necessary for output */
  if ((current_root) && 
      (current_root->section ==  Entry::CLASS_SEC ||
       current_root->section ==  Entry::NAMESPACE_SEC)) 
  {
    current->name= current_root->name+"::"+current->name;
  }
  if ((current_root) &&
      (current_root->section ==  Entry::FUNCTION_SEC)) 
  {
    current->name = getFullName(current_root) + "__" + QCString(current->name);
  }

  current->fileName = yyFileName;
  current->bodyLine  = yyLineNr; 
  addCurrentEntry();
}


//-----------------------------------------------------------------------------

/*! Update the argument \a name with additional \a type info. 
 */
static Argument *addFortranParameter(const QCString &type,const QCString &name, const QCString docs)
{
  //cout<<"addFortranParameter(): "<<name<<" DOCS:"<<(docs.isNull()?QCString("null"):docs)<<endl;
  Argument *ret = 0;
  if (current_root->argList==0) return 0;
  ArgumentListIterator ali(*current_root->argList);
  Argument *a;
  for (ali.toFirst();(a=ali.current());++ali)
  {
    if (a->type.lower()==name.lower())
    {
      ret=a;
//cout << "addParameter found:   " << type << " , " << name << endl;
      a->type=type.stripWhiteSpace();
      a->name=name.stripWhiteSpace();
      if (!docs.isNull())
        a->docs = docs;
      break;
    }
  } // for
  return ret;
}

  //----------------------------------------------------------------------------
static void startCommentBlock(bool brief)
{
  if (brief)
  {
    current->briefFile = yyFileName;
    current->briefLine = yyLineNr;
  }
  else
  {
    current->docFile = yyFileName;
    current->docLine = yyLineNr;
  }
}

  //----------------------------------------------------------------------------
static void handleCommentBlock(const QCString &doc,bool brief)
{
  docBlockInBody = FALSE;
  bool needsEntry = FALSE;
  static bool hideInBodyDocs = Config_getBool("HIDE_IN_BODY_DOCS");
  int position=0;
  if (docBlockInBody && hideInBodyDocs) return;
  //fprintf(stderr,"call parseCommentBlock [%s]\n",doc.data());
  int lineNr = brief ? current->briefLine : current->docLine;
  while (parseCommentBlock(
	g_thisParser,
	docBlockInBody ? last_entry : current,
	doc,        // text
	yyFileName, // file
	lineNr,
	docBlockInBody ? FALSE : brief, 
	docBlockInBody ? FALSE : docBlockJavaStyle,
	docBlockInBody,
	defaultProtection,
        position,
        needsEntry
        )) 
  {
	   //fprintf(stderr,"parseCommentBlock position=%d [%s]  needsEntry=%d\n",position,doc.data()+position,needsEntry);
   if (needsEntry) addCurrentEntry();
  }
  //fprintf(stderr,"parseCommentBlock position=%d [%s]  needsEntry=%d\n",position,doc.data()+position,needsEntry);

  if (needsEntry) addCurrentEntry();
}

//----------------------------------------------------------------------------
static int level=0;
static void debugCompounds(Entry *rt)  // print Entry structure (for debugging)
{
 level++;
  printf("%d) debugCompounds(%s) line %d\n",level, rt->name.data(), rt->bodyLine);
  EntryListIterator eli(*rt->children());
  Entry *ce;
  for (;(ce=eli.current());++eli)
  {
     debugCompounds(ce); 
  } 
level--;
}


static void parseMain(const char *fileName,const char *fileBuf,Entry *rt)
{
  initParser();

  defaultProtection = Public;
  inputString = fileBuf;
  inputPosition = 0;
  inputStringPrepass = NULL;
  inputPositionPrepass = 0;

  //anonCount     = 0;  // don't reset per file
  mtype         = Method;
  gstat         = FALSE;
  virt          = Normal;
  current_root  = rt;
  global_root   = rt;
  inputFile.setName(fileName);
  if (inputFile.open(IO_ReadOnly))
  {
    isFixedForm = recognizeFixedForm(fileBuf);

    if (isFixedForm) {
      printf("Prepassing fixed form of %s\n", fileName);
      //printf("---strlen=%d\n", strlen(fileBuf));
      //clock_t start=clock();

      inputString = prepassFixedForm(fileBuf);

      //clock_t end=clock();
      //printf("CPU time used=%f\n", ((double) (end-start))/CLOCKS_PER_SEC);
    }

    yyLineNr= 1 ; 
    yyFileName = fileName;
    msg("Parsing file %s...\n",yyFileName.data());

    startScope(rt); // implies current_root = rt
    initParser();
    groupEnterFile(yyFileName,yyLineNr);

    current          = new Entry;
    current->name    = yyFileName;
    current->section = Entry::SOURCE_SEC;
    current_root->addSubEntry(current);
    file_root        = current;
    current          = new Entry;

    fscanYYrestart( fscanYYin );
    {
      BEGIN( Start );
    }

    fscanYYlex();
    groupLeaveFile(yyFileName,yyLineNr);

    endScope(current_root, TRUE); // TRUE - global root

    //debugCompounds(rt); //debug 

    rt->program.resize(0);
    delete current; current=0;
    moduleProcedures.clear();
    if (isFixedForm) {
      free((char*)inputString);
      inputString=NULL;
    }

    inputFile.close();
  }
}

//----------------------------------------------------------------------------

void FortranLanguageScanner::parseInput(const char *fileName,const char *fileBuf,Entry *root)
{
  g_thisParser = this;
  ::parseMain(fileName,fileBuf,root);
}

void FortranLanguageScanner::parseCode(CodeOutputInterface & codeOutIntf,
                   const char * scopeName,
                   const QCString & input,
                   bool isExampleBlock,
                   const char * exampleName,
                   FileDef * fileDef,
                   int startLine,
                   int endLine,
                   bool inlineFragment,
		   MemberDef *memberDef,
                   bool showLineNumbers
                  )
{
  ::parseFortranCode(codeOutIntf,scopeName,input,isExampleBlock,exampleName,
                     fileDef,startLine,endLine,inlineFragment,memberDef,
                     showLineNumbers);
}

bool FortranLanguageScanner::needsPreprocessing(const QCString &extension)
{
  (void)extension;
  return TRUE;
}
void FortranLanguageScanner::resetCodeParserState()
{
  ::resetFortranCodeParserState();
}

void FortranLanguageScanner::parsePrototype(const char *text)
{
  (void)text;
}

static void scanner_abort() 
{
  fprintf(stderr,"********************************************************************\n");
  fprintf(stderr,"Error in file %s line: %d, state: %d\n",yyFileName.data(),yyLineNr,YY_START);
  fprintf(stderr,"********************************************************************\n");
   
  EntryListIterator eli(*global_root->children());
  Entry *ce;
  bool start=FALSE;

  for (;(ce=eli.current());++eli)
  {
     if (ce == file_root) start=TRUE;
     if (start) ce->reset(); 
  } 

  // dummy call to avoid compiler warning
  (void)yy_top_state();
  
  return;
  //exit(-1);
}

//----------------------------------------------------------------------------

#if !defined(YY_FLEX_SUBMINOR_VERSION) 
//----------------------------------------------------------------------------
extern "C" { // some bogus code to keep the compiler happy
  void fscannerYYdummy() { yy_flex_realloc(0,0); } 
}
#endif


